/*!
 * jQuery JavaScript Library v2.2.0
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-01-08T20:02Z
 */

(function(global, factory) {

    if (typeof module === "object" && typeof module.exports === "object") {
        // For CommonJS and CommonJS-like environments where a proper `window`
        // is present, execute the factory and get jQuery.
        // For environments that do not have a `window` with a `document`
        // (such as Node.js), expose a factory as module.exports.
        // This accentuates the need for the creation of a real `window`.
        // e.g. var jQuery = require("jquery")(window);
        // See ticket #14549 for more info.
        module.exports = global.document ?
            factory(global, true) :
            function(w) {
                if (!w.document) {
                    throw new Error("jQuery requires a window with a document");
                }
                return factory(w);
            };
    } else {
        factory(global);
    }

    // Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function(window, noGlobal) {

    // Support: Firefox 18+
    // Can't be in strict mode, several libs including ASP.NET trace
    // the stack via arguments.caller.callee and Firefox dies if
    // you try to trace through "use strict" call chains. (#13335)
    //"use strict";
    var arr = [];

    var document = window.document;

    var slice = arr.slice;

    var concat = arr.concat;

    var push = arr.push;

    var indexOf = arr.indexOf;

    var class2type = {};

    var toString = class2type.toString;

    var hasOwn = class2type.hasOwnProperty;

    var support = {};



    var
        version = "2.2.0",

        // Define a local copy of jQuery
        jQuery = function(selector, context) {

            // The jQuery object is actually just the init constructor 'enhanced'
            // Need init if jQuery is called (just allow error to be thrown if not included)
            return new jQuery.fn.init(selector, context);
        },

        // Support: Android<4.1
        // Make sure we trim BOM and NBSP
        rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

        // Matches dashed string for camelizing
        rmsPrefix = /^-ms-/,
        rdashAlpha = /-([\da-z])/gi,

        // Used by jQuery.camelCase as callback to replace()
        fcamelCase = function(all, letter) {
            return letter.toUpperCase();
        };

    jQuery.fn = jQuery.prototype = {

        // The current version of jQuery being used
        jquery: version,

        constructor: jQuery,

        // Start with an empty selector
        selector: "",

        // The default length of a jQuery object is 0
        length: 0,

        toArray: function() {
            return slice.call(this);
        },

        // Get the Nth element in the matched element set OR
        // Get the whole matched element set as a clean array
        get: function(num) {
            return num != null ?

                // Return just the one element from the set
                (num < 0 ? this[num + this.length] : this[num]) :

                // Return all the elements in a clean array
                slice.call(this);
        },

        // Take an array of elements and push it onto the stack
        // (returning the new matched element set)
        pushStack: function(elems) {

            // Build a new jQuery matched element set
            var ret = jQuery.merge(this.constructor(), elems);

            // Add the old object onto the stack (as a reference)
            ret.prevObject = this;
            ret.context = this.context;

            // Return the newly-formed element set
            return ret;
        },

        // Execute a callback for every element in the matched set.
        each: function(callback) {
            return jQuery.each(this, callback);
        },

        map: function(callback) {
            return this.pushStack(jQuery.map(this, function(elem, i) {
                return callback.call(elem, i, elem);
            }));
        },

        slice: function() {
            return this.pushStack(slice.apply(this, arguments));
        },

        first: function() {
            return this.eq(0);
        },

        last: function() {
            return this.eq(-1);
        },

        eq: function(i) {
            var len = this.length,
                j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },

        end: function() {
            return this.prevObject || this.constructor();
        },

        // For internal use only.
        // Behaves like an Array's method, not like a jQuery method.
        push: push,
        sort: arr.sort,
        splice: arr.splice
    };

    jQuery.extend = jQuery.fn.extend = function() {
        var options, name, src, copy, copyIsArray, clone,
            target = arguments[0] || {},
            i = 1,
            length = arguments.length,
            deep = false;

        // Handle a deep copy situation
        if (typeof target === "boolean") {
            deep = target;

            // Skip the boolean and the target
            target = arguments[i] || {};
            i++;
        }

        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {};
        }

        // Extend jQuery itself if only one argument is passed
        if (i === length) {
            target = this;
            i--;
        }

        for (; i < length; i++) {

            // Only deal with non-null/undefined values
            if ((options = arguments[i]) != null) {

                // Extend the base object
                for (name in options) {
                    src = target[name];
                    copy = options[name];

                    // Prevent never-ending loop
                    if (target === copy) {
                        continue;
                    }

                    // Recurse if we're merging plain objects or arrays
                    if (deep && copy && (jQuery.isPlainObject(copy) ||
                            (copyIsArray = jQuery.isArray(copy)))) {

                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];

                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }

                        // Never move original objects, clone them
                        target[name] = jQuery.extend(deep, clone, copy);

                        // Don't bring in undefined values
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }

        // Return the modified object
        return target;
    };

    jQuery.extend({

        // Unique for each copy of jQuery on the page
        expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

        // Assume jQuery is ready without the ready module
        isReady: true,

        error: function(msg) {
            throw new Error(msg);
        },

        noop: function() {},

        isFunction: function(obj) {
            return jQuery.type(obj) === "function";
        },

        isArray: Array.isArray,

        isWindow: function(obj) {
            return obj != null && obj === obj.window;
        },

        isNumeric: function(obj) {

            // parseFloat NaNs numeric-cast false positives (null|true|false|"")
            // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
            // subtraction forces infinities to NaN
            // adding 1 corrects loss of precision from parseFloat (#15100)
            var realStringObj = obj && obj.toString();
            return !jQuery.isArray(obj) && (realStringObj - parseFloat(realStringObj) + 1) >= 0;
        },

        isPlainObject: function(obj) {

            // Not plain objects:
            // - Any object or value whose internal [[Class]] property is not "[object Object]"
            // - DOM nodes
            // - window
            if (jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }

            if (obj.constructor &&
                !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                return false;
            }

            // If the function hasn't returned already, we're confident that
            // |obj| is a plain object, created by {} or constructed with new Object
            return true;
        },

        isEmptyObject: function(obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },

        type: function(obj) {
            if (obj == null) {
                return obj + "";
            }

            // Support: Android<4.0, iOS<6 (functionish RegExp)
            return typeof obj === "object" || typeof obj === "function" ?
                class2type[toString.call(obj)] || "object" :
                typeof obj;
        },

        // Evaluates a script in a global context
        globalEval: function(code) {
            var script,
                indirect = eval;

            code = jQuery.trim(code);

            if (code) {

                // If the code includes a valid, prologue position
                // strict mode pragma, execute code by injecting a
                // script tag into the document.
                if (code.indexOf("use strict") === 1) {
                    script = document.createElement("script");
                    script.text = code;
                    document.head.appendChild(script).parentNode.removeChild(script);
                } else {

                    // Otherwise, avoid the DOM node creation, insertion
                    // and removal by using an indirect global eval

                    indirect(code);
                }
            }
        },

        // Convert dashed to camelCase; used by the css and data modules
        // Support: IE9-11+
        // Microsoft forgot to hump their vendor prefix (#9572)
        camelCase: function(string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
        },

        nodeName: function(elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },

        each: function(obj, callback) {
            var length, i = 0;

            if (isArrayLike(obj)) {
                length = obj.length;
                for (; i < length; i++) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            } else {
                for (i in obj) {
                    if (callback.call(obj[i], i, obj[i]) === false) {
                        break;
                    }
                }
            }

            return obj;
        },

        // Support: Android<4.1
        trim: function(text) {
            return text == null ?
                "" :
                (text + "").replace(rtrim, "");
        },

        // results is for internal usage only
        makeArray: function(arr, results) {
            var ret = results || [];

            if (arr != null) {
                if (isArrayLike(Object(arr))) {
                    jQuery.merge(ret,
                        typeof arr === "string" ? [arr] : arr
                    );
                } else {
                    push.call(ret, arr);
                }
            }

            return ret;
        },

        inArray: function(elem, arr, i) {
            return arr == null ? -1 : indexOf.call(arr, elem, i);
        },

        merge: function(first, second) {
            var len = +second.length,
                j = 0,
                i = first.length;

            for (; j < len; j++) {
                first[i++] = second[j];
            }

            first.length = i;

            return first;
        },

        grep: function(elems, callback, invert) {
            var callbackInverse,
                matches = [],
                i = 0,
                length = elems.length,
                callbackExpect = !invert;

            // Go through the array, only saving the items
            // that pass the validator function
            for (; i < length; i++) {
                callbackInverse = !callback(elems[i], i);
                if (callbackInverse !== callbackExpect) {
                    matches.push(elems[i]);
                }
            }

            return matches;
        },

        // arg is for internal usage only
        map: function(elems, callback, arg) {
            var length, value,
                i = 0,
                ret = [];

            // Go through the array, translating each of the items to their new values
            if (isArrayLike(elems)) {
                length = elems.length;
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret.push(value);
                    }
                }

                // Go through every key on the object,
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);

                    if (value != null) {
                        ret.push(value);
                    }
                }
            }

            // Flatten any nested arrays
            return concat.apply([], ret);
        },

        // A global GUID counter for objects
        guid: 1,

        // Bind a function to a context, optionally partially applying any
        // arguments.
        proxy: function(fn, context) {
            var tmp, args, proxy;

            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }

            // Quick check to determine if target is callable, in the spec
            // this throws a TypeError, but we will just return undefined.
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }

            // Simulated bind
            args = slice.call(arguments, 2);
            proxy = function() {
                return fn.apply(context || this, args.concat(slice.call(arguments)));
            };

            // Set the guid of unique handler to the same of original handler, so it can be removed
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;

            return proxy;
        },

        now: Date.now,

        // jQuery.support is not used in Core but other projects attach their
        // properties to it so it needs to exist.
        support: support
    });

    // JSHint would error on this code due to the Symbol not being defined in ES5.
    // Defining this global in .jshintrc would create a danger of using the global
    // unguarded in another place, it seems safer to just disable JSHint for these
    // three lines.
    /* jshint ignore: start */
    if (typeof Symbol === "function") {
        jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
    }
    /* jshint ignore: end */

    // Populate the class2type map
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),
        function(i, name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
        });

    function isArrayLike(obj) {

        // Support: iOS 8.2 (not reproducible in simulator)
        // `in` check used to prevent JIT error (gh-2145)
        // hasOwn isn't used here due to false negatives
        // regarding Nodelist length in IE
        var length = !!obj && "length" in obj && obj.length,
            type = jQuery.type(obj);

        if (type === "function" || jQuery.isWindow(obj)) {
            return false;
        }

        return type === "array" || length === 0 ||
            typeof length === "number" && length > 0 && (length - 1) in obj;
    }
    var Sizzle =
        /*!
         * Sizzle CSS Selector Engine v2.2.1
         * http://sizzlejs.com/
         *
         * Copyright jQuery Foundation and other contributors
         * Released under the MIT license
         * http://jquery.org/license
         *
         * Date: 2015-10-17
         */
        (function(window) {

            var i,
                support,
                Expr,
                getText,
                isXML,
                tokenize,
                compile,
                select,
                outermostContext,
                sortInput,
                hasDuplicate,

                // Local document vars
                setDocument,
                document,
                docElem,
                documentIsHTML,
                rbuggyQSA,
                rbuggyMatches,
                matches,
                contains,

                // Instance-specific data
                expando = "sizzle" + 1 * new Date(),
                preferredDoc = window.document,
                dirruns = 0,
                done = 0,
                classCache = createCache(),
                tokenCache = createCache(),
                compilerCache = createCache(),
                sortOrder = function(a, b) {
                    if (a === b) {
                        hasDuplicate = true;
                    }
                    return 0;
                },

                // General-purpose constants
                MAX_NEGATIVE = 1 << 31,

                // Instance methods
                hasOwn = ({}).hasOwnProperty,
                arr = [],
                pop = arr.pop,
                push_native = arr.push,
                push = arr.push,
                slice = arr.slice,
                // Use a stripped-down indexOf as it's faster than native
                // http://jsperf.com/thor-indexof-vs-for/5
                indexOf = function(list, elem) {
                    var i = 0,
                        len = list.length;
                    for (; i < len; i++) {
                        if (list[i] === elem) {
                            return i;
                        }
                    }
                    return -1;
                },

                booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

                // Regular expressions

                // http://www.w3.org/TR/css3-selectors/#whitespace
                whitespace = "[\\x20\\t\\r\\n\\f]",

                // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
                identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

                // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
                attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
                // Operator (capture 2)
                "*([*^$|!~]?=)" + whitespace +
                // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
                "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
                "*\\]",

                pseudos = ":(" + identifier + ")(?:\\((" +
                // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
                // 1. quoted (capture 3; capture 4 or capture 5)
                "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
                // 2. simple (capture 6)
                "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
                // 3. anything else (capture 2)
                ".*" +
                ")\\)|)",

                // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
                rwhitespace = new RegExp(whitespace + "+", "g"),
                rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),

                rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
                rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),

                rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),

                rpseudo = new RegExp(pseudos),
                ridentifier = new RegExp("^" + identifier + "$"),

                matchExpr = {
                    "ID": new RegExp("^#(" + identifier + ")"),
                    "CLASS": new RegExp("^\\.(" + identifier + ")"),
                    "TAG": new RegExp("^(" + identifier + "|[*])"),
                    "ATTR": new RegExp("^" + attributes),
                    "PSEUDO": new RegExp("^" + pseudos),
                    "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
                        "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
                        "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
                    "bool": new RegExp("^(?:" + booleans + ")$", "i"),
                    // For use in libraries implementing .is()
                    // We use this for POS matching in `select`
                    "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
                        whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
                },

                rinputs = /^(?:input|select|textarea|button)$/i,
                rheader = /^h\d$/i,

                rnative = /^[^{]+\{\s*\[native \w/,

                // Easily-parseable/retrievable ID or TAG or CLASS selectors
                rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

                rsibling = /[+~]/,
                rescape = /'|\\/g,

                // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
                runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
                funescape = function(_, escaped, escapedWhitespace) {
                    var high = "0x" + escaped - 0x10000;
                    // NaN means non-codepoint
                    // Support: Firefox<24
                    // Workaround erroneous numeric interpretation of +"0x"
                    return high !== high || escapedWhitespace ?
                        escaped :
                        high < 0 ?
                        // BMP codepoint
                        String.fromCharCode(high + 0x10000) :
                        // Supplemental Plane codepoint (surrogate pair)
                        String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
                },

                // Used for iframes
                // See setDocument()
                // Removing the function wrapper causes a "Permission Denied"
                // error in IE
                unloadHandler = function() {
                    setDocument();
                };

            // Optimize for push.apply( _, NodeList )
            try {
                push.apply(
                    (arr = slice.call(preferredDoc.childNodes)),
                    preferredDoc.childNodes
                );
                // Support: Android<4.0
                // Detect silently failing push.apply
                arr[preferredDoc.childNodes.length].nodeType;
            } catch (e) {
                push = {
                    apply: arr.length ?

                        // Leverage slice if possible
                        function(target, els) {
                            push_native.apply(target, slice.call(els));
                        } :

                        // Support: IE<9
                        // Otherwise append directly
                        function(target, els) {
                            var j = target.length,
                                i = 0;
                            // Can't trust NodeList.length
                            while ((target[j++] = els[i++])) {}
                            target.length = j - 1;
                        }
                };
            }

            function Sizzle(selector, context, results, seed) {
                var m, i, elem, nid, nidselect, match, groups, newSelector,
                    newContext = context && context.ownerDocument,

                    // nodeType defaults to 9, since context defaults to document
                    nodeType = context ? context.nodeType : 9;

                results = results || [];

                // Return early from calls with invalid selector or context
                if (typeof selector !== "string" || !selector ||
                    nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

                    return results;
                }

                // Try to shortcut find operations (as opposed to filters) in HTML documents
                if (!seed) {

                    if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                        setDocument(context);
                    }
                    context = context || document;

                    if (documentIsHTML) {

                        // If the selector is sufficiently simple, try using a "get*By*" DOM method
                        // (excepting DocumentFragment context, where the methods don't exist)
                        if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

                            // ID selector
                            if ((m = match[1])) {

                                // Document context
                                if (nodeType === 9) {
                                    if ((elem = context.getElementById(m))) {

                                        // Support: IE, Opera, Webkit
                                        // TODO: identify versions
                                        // getElementById can match elements by name instead of ID
                                        if (elem.id === m) {
                                            results.push(elem);
                                            return results;
                                        }
                                    } else {
                                        return results;
                                    }

                                    // Element context
                                } else {

                                    // Support: IE, Opera, Webkit
                                    // TODO: identify versions
                                    // getElementById can match elements by name instead of ID
                                    if (newContext && (elem = newContext.getElementById(m)) &&
                                        contains(context, elem) &&
                                        elem.id === m) {

                                        results.push(elem);
                                        return results;
                                    }
                                }

                                // Type selector
                            } else if (match[2]) {
                                push.apply(results, context.getElementsByTagName(selector));
                                return results;

                                // Class selector
                            } else if ((m = match[3]) && support.getElementsByClassName &&
                                context.getElementsByClassName) {

                                push.apply(results, context.getElementsByClassName(m));
                                return results;
                            }
                        }

                        // Take advantage of querySelectorAll
                        if (support.qsa &&
                            !compilerCache[selector + " "] &&
                            (!rbuggyQSA || !rbuggyQSA.test(selector))) {

                            if (nodeType !== 1) {
                                newContext = context;
                                newSelector = selector;

                                // qSA looks outside Element context, which is not what we want
                                // Thanks to Andrew Dupont for this workaround technique
                                // Support: IE <=8
                                // Exclude object elements
                            } else if (context.nodeName.toLowerCase() !== "object") {

                                // Capture the context ID, setting it first if necessary
                                if ((nid = context.getAttribute("id"))) {
                                    nid = nid.replace(rescape, "\\$&");
                                } else {
                                    context.setAttribute("id", (nid = expando));
                                }

                                // Prefix every selector in the list
                                groups = tokenize(selector);
                                i = groups.length;
                                nidselect = ridentifier.test(nid) ? "#" + nid : "[id='" + nid + "']";
                                while (i--) {
                                    groups[i] = nidselect + " " + toSelector(groups[i]);
                                }
                                newSelector = groups.join(",");

                                // Expand context for sibling selectors
                                newContext = rsibling.test(selector) && testContext(context.parentNode) ||
                                    context;
                            }

                            if (newSelector) {
                                try {
                                    push.apply(results,
                                        newContext.querySelectorAll(newSelector)
                                    );
                                    return results;
                                } catch (qsaError) {} finally {
                                    if (nid === expando) {
                                        context.removeAttribute("id");
                                    }
                                }
                            }
                        }
                    }
                }

                // All others
                return select(selector.replace(rtrim, "$1"), context, results, seed);
            }

            /**
             * Create key-value caches of limited size
             * @returns {function(string, object)} Returns the Object data after storing it on itself with
             *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
             *	deleting the oldest entry
             */
            function createCache() {
                var keys = [];

                function cache(key, value) {
                    // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
                    if (keys.push(key + " ") > Expr.cacheLength) {
                        // Only keep the most recent entries
                        delete cache[keys.shift()];
                    }
                    return (cache[key + " "] = value);
                }
                return cache;
            }

            /**
             * Mark a function for special use by Sizzle
             * @param {Function} fn The function to mark
             */
            function markFunction(fn) {
                fn[expando] = true;
                return fn;
            }

            /**
             * Support testing using an element
             * @param {Function} fn Passed the created div and expects a boolean result
             */
            function assert(fn) {
                var div = document.createElement("div");

                try {
                    return !!fn(div);
                } catch (e) {
                    return false;
                } finally {
                    // Remove from its parent by default
                    if (div.parentNode) {
                        div.parentNode.removeChild(div);
                    }
                    // release memory in IE
                    div = null;
                }
            }

            /**
             * Adds the same handler for all of the specified attrs
             * @param {String} attrs Pipe-separated list of attributes
             * @param {Function} handler The method that will be applied
             */
            function addHandle(attrs, handler) {
                var arr = attrs.split("|"),
                    i = arr.length;

                while (i--) {
                    Expr.attrHandle[arr[i]] = handler;
                }
            }

            /**
             * Checks document order of two siblings
             * @param {Element} a
             * @param {Element} b
             * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
             */
            function siblingCheck(a, b) {
                var cur = b && a,
                    diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
                    (~b.sourceIndex || MAX_NEGATIVE) -
                    (~a.sourceIndex || MAX_NEGATIVE);

                // Use IE sourceIndex if available on both nodes
                if (diff) {
                    return diff;
                }

                // Check if b follows a
                if (cur) {
                    while ((cur = cur.nextSibling)) {
                        if (cur === b) {
                            return -1;
                        }
                    }
                }

                return a ? 1 : -1;
            }

            /**
             * Returns a function to use in pseudos for input types
             * @param {String} type
             */
            function createInputPseudo(type) {
                return function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === type;
                };
            }

            /**
             * Returns a function to use in pseudos for buttons
             * @param {String} type
             */
            function createButtonPseudo(type) {
                return function(elem) {
                    var name = elem.nodeName.toLowerCase();
                    return (name === "input" || name === "button") && elem.type === type;
                };
            }

            /**
             * Returns a function to use in pseudos for positionals
             * @param {Function} fn
             */
            function createPositionalPseudo(fn) {
                return markFunction(function(argument) {
                    argument = +argument;
                    return markFunction(function(seed, matches) {
                        var j,
                            matchIndexes = fn([], seed.length, argument),
                            i = matchIndexes.length;

                        // Match elements found at the specified indexes
                        while (i--) {
                            if (seed[(j = matchIndexes[i])]) {
                                seed[j] = !(matches[j] = seed[j]);
                            }
                        }
                    });
                });
            }

            /**
             * Checks a node for validity as a Sizzle context
             * @param {Element|Object=} context
             * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
             */
            function testContext(context) {
                return context && typeof context.getElementsByTagName !== "undefined" && context;
            }

            // Expose support vars for convenience
            support = Sizzle.support = {};

            /**
             * Detects XML nodes
             * @param {Element|Object} elem An element or a document
             * @returns {Boolean} True iff elem is a non-HTML XML node
             */
            isXML = Sizzle.isXML = function(elem) {
                // documentElement is verified for cases where it doesn't yet exist
                // (such as loading iframes in IE - #4833)
                var documentElement = elem && (elem.ownerDocument || elem).documentElement;
                return documentElement ? documentElement.nodeName !== "HTML" : false;
            };

            /**
             * Sets document-related variables once based on the current document
             * @param {Element|Object} [doc] An element or document object to use to set the document
             * @returns {Object} Returns the current document
             */
            setDocument = Sizzle.setDocument = function(node) {
                var hasCompare, parent,
                    doc = node ? node.ownerDocument || node : preferredDoc;

                // Return early if doc is invalid or already selected
                if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                    return document;
                }

                // Update global variables
                document = doc;
                docElem = document.documentElement;
                documentIsHTML = !isXML(document);

                // Support: IE 9-11, Edge
                // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
                if ((parent = document.defaultView) && parent.top !== parent) {
                    // Support: IE 11
                    if (parent.addEventListener) {
                        parent.addEventListener("unload", unloadHandler, false);

                        // Support: IE 9 - 10 only
                    } else if (parent.attachEvent) {
                        parent.attachEvent("onunload", unloadHandler);
                    }
                }

                /* Attributes
                ---------------------------------------------------------------------- */

                // Support: IE<8
                // Verify that getAttribute really returns attributes and not properties
                // (excepting IE8 booleans)
                support.attributes = assert(function(div) {
                    div.className = "i";
                    return !div.getAttribute("className");
                });

                /* getElement(s)By*
                ---------------------------------------------------------------------- */

                // Check if getElementsByTagName("*") returns only elements
                support.getElementsByTagName = assert(function(div) {
                    div.appendChild(document.createComment(""));
                    return !div.getElementsByTagName("*").length;
                });

                // Support: IE<9
                support.getElementsByClassName = rnative.test(document.getElementsByClassName);

                // Support: IE<10
                // Check if getElementById returns elements by name
                // The broken getElementById methods don't pick up programatically-set names,
                // so use a roundabout getElementsByName test
                support.getById = assert(function(div) {
                    docElem.appendChild(div).id = expando;
                    return !document.getElementsByName || !document.getElementsByName(expando).length;
                });

                // ID find and filter
                if (support.getById) {
                    Expr.find["ID"] = function(id, context) {
                        if (typeof context.getElementById !== "undefined" && documentIsHTML) {
                            var m = context.getElementById(id);
                            return m ? [m] : [];
                        }
                    };
                    Expr.filter["ID"] = function(id) {
                        var attrId = id.replace(runescape, funescape);
                        return function(elem) {
                            return elem.getAttribute("id") === attrId;
                        };
                    };
                } else {
                    // Support: IE6/7
                    // getElementById is not reliable as a find shortcut
                    delete Expr.find["ID"];

                    Expr.filter["ID"] = function(id) {
                        var attrId = id.replace(runescape, funescape);
                        return function(elem) {
                            var node = typeof elem.getAttributeNode !== "undefined" &&
                                elem.getAttributeNode("id");
                            return node && node.value === attrId;
                        };
                    };
                }

                // Tag
                Expr.find["TAG"] = support.getElementsByTagName ?
                    function(tag, context) {
                        if (typeof context.getElementsByTagName !== "undefined") {
                            return context.getElementsByTagName(tag);

                            // DocumentFragment nodes don't have gEBTN
                        } else if (support.qsa) {
                            return context.querySelectorAll(tag);
                        }
                    } :

                    function(tag, context) {
                        var elem,
                            tmp = [],
                            i = 0,
                            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
                            results = context.getElementsByTagName(tag);

                        // Filter out possible comments
                        if (tag === "*") {
                            while ((elem = results[i++])) {
                                if (elem.nodeType === 1) {
                                    tmp.push(elem);
                                }
                            }

                            return tmp;
                        }
                        return results;
                    };

                // Class
                Expr.find["CLASS"] = support.getElementsByClassName && function(className, context) {
                    if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
                        return context.getElementsByClassName(className);
                    }
                };

                /* QSA/matchesSelector
                ---------------------------------------------------------------------- */

                // QSA and matchesSelector support

                // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
                rbuggyMatches = [];

                // qSa(:focus) reports false when true (Chrome 21)
                // We allow this because of a bug in IE8/9 that throws an error
                // whenever `document.activeElement` is accessed on an iframe
                // So, we allow :focus to pass through QSA all the time to avoid the IE error
                // See http://bugs.jquery.com/ticket/13378
                rbuggyQSA = [];

                if ((support.qsa = rnative.test(document.querySelectorAll))) {
                    // Build QSA regex
                    // Regex strategy adopted from Diego Perini
                    assert(function(div) {
                        // Select is set to empty string on purpose
                        // This is to test IE's treatment of not explicitly
                        // setting a boolean content attribute,
                        // since its presence should be enough
                        // http://bugs.jquery.com/ticket/12359
                        docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" +
                            "<select id='" + expando + "-\r\\' msallowcapture=''>" +
                            "<option selected=''></option></select>";

                        // Support: IE8, Opera 11-12.16
                        // Nothing should be selected when empty strings follow ^= or $= or *=
                        // The test attribute must be unknown in Opera but "safe" for WinRT
                        // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
                        if (div.querySelectorAll("[msallowcapture^='']").length) {
                            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
                        }

                        // Support: IE8
                        // Boolean attributes and "value" are not treated correctly
                        if (!div.querySelectorAll("[selected]").length) {
                            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
                        }

                        // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
                        if (!div.querySelectorAll("[id~=" + expando + "-]").length) {
                            rbuggyQSA.push("~=");
                        }

                        // Webkit/Opera - :checked should return selected option elements
                        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                        // IE8 throws error here and will not see later tests
                        if (!div.querySelectorAll(":checked").length) {
                            rbuggyQSA.push(":checked");
                        }

                        // Support: Safari 8+, iOS 8+
                        // https://bugs.webkit.org/show_bug.cgi?id=136851
                        // In-page `selector#id sibing-combinator selector` fails
                        if (!div.querySelectorAll("a#" + expando + "+*").length) {
                            rbuggyQSA.push(".#.+[+~]");
                        }
                    });

                    assert(function(div) {
                        // Support: Windows 8 Native Apps
                        // The type and name attributes are restricted during .innerHTML assignment
                        var input = document.createElement("input");
                        input.setAttribute("type", "hidden");
                        div.appendChild(input).setAttribute("name", "D");

                        // Support: IE8
                        // Enforce case-sensitivity of name attribute
                        if (div.querySelectorAll("[name=d]").length) {
                            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
                        }

                        // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
                        // IE8 throws error here and will not see later tests
                        if (!div.querySelectorAll(":enabled").length) {
                            rbuggyQSA.push(":enabled", ":disabled");
                        }

                        // Opera 10-11 does not throw on post-comma invalid pseudos
                        div.querySelectorAll("*,:x");
                        rbuggyQSA.push(",.*:");
                    });
                }

                if ((support.matchesSelector = rnative.test((matches = docElem.matches ||
                        docElem.webkitMatchesSelector ||
                        docElem.mozMatchesSelector ||
                        docElem.oMatchesSelector ||
                        docElem.msMatchesSelector)))) {

                    assert(function(div) {
                        // Check to see if it's possible to do matchesSelector
                        // on a disconnected node (IE 9)
                        support.disconnectedMatch = matches.call(div, "div");

                        // This should fail with an exception
                        // Gecko does not error, returns false instead
                        matches.call(div, "[s!='']:x");
                        rbuggyMatches.push("!=", pseudos);
                    });
                }

                rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
                rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

                /* Contains
                ---------------------------------------------------------------------- */
                hasCompare = rnative.test(docElem.compareDocumentPosition);

                // Element contains another
                // Purposefully self-exclusive
                // As in, an element does not contain itself
                contains = hasCompare || rnative.test(docElem.contains) ?
                    function(a, b) {
                        var adown = a.nodeType === 9 ? a.documentElement : a,
                            bup = b && b.parentNode;
                        return a === bup || !!(bup && bup.nodeType === 1 && (
                            adown.contains ?
                            adown.contains(bup) :
                            a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16
                        ));
                    } :
                    function(a, b) {
                        if (b) {
                            while ((b = b.parentNode)) {
                                if (b === a) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    };

                /* Sorting
                ---------------------------------------------------------------------- */

                // Document order sorting
                sortOrder = hasCompare ?
                    function(a, b) {

                        // Flag for duplicate removal
                        if (a === b) {
                            hasDuplicate = true;
                            return 0;
                        }

                        // Sort on method existence if only one input has compareDocumentPosition
                        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
                        if (compare) {
                            return compare;
                        }

                        // Calculate position if both inputs belong to the same document
                        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ?
                            a.compareDocumentPosition(b) :

                            // Otherwise we know they are disconnected
                            1;

                        // Disconnected nodes
                        if (compare & 1 ||
                            (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {

                            // Choose the first element that is related to our preferred document
                            if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
                                return -1;
                            }
                            if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
                                return 1;
                            }

                            // Maintain original order
                            return sortInput ?
                                (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                                0;
                        }

                        return compare & 4 ? -1 : 1;
                    } :
                    function(a, b) {
                        // Exit early if the nodes are identical
                        if (a === b) {
                            hasDuplicate = true;
                            return 0;
                        }

                        var cur,
                            i = 0,
                            aup = a.parentNode,
                            bup = b.parentNode,
                            ap = [a],
                            bp = [b];

                        // Parentless nodes are either documents or disconnected
                        if (!aup || !bup) {
                            return a === document ? -1 :
                                b === document ? 1 :
                                aup ? -1 :
                                bup ? 1 :
                                sortInput ?
                                (indexOf(sortInput, a) - indexOf(sortInput, b)) :
                                0;

                            // If the nodes are siblings, we can do a quick check
                        } else if (aup === bup) {
                            return siblingCheck(a, b);
                        }

                        // Otherwise we need full lists of their ancestors for comparison
                        cur = a;
                        while ((cur = cur.parentNode)) {
                            ap.unshift(cur);
                        }
                        cur = b;
                        while ((cur = cur.parentNode)) {
                            bp.unshift(cur);
                        }

                        // Walk down the tree looking for a discrepancy
                        while (ap[i] === bp[i]) {
                            i++;
                        }

                        return i ?
                            // Do a sibling check if the nodes have a common ancestor
                            siblingCheck(ap[i], bp[i]) :

                            // Otherwise nodes in our document sort first
                            ap[i] === preferredDoc ? -1 :
                            bp[i] === preferredDoc ? 1 :
                            0;
                    };

                return document;
            };

            Sizzle.matches = function(expr, elements) {
                return Sizzle(expr, null, null, elements);
            };

            Sizzle.matchesSelector = function(elem, expr) {
                // Set document vars if needed
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }

                // Make sure that attribute selectors are quoted
                expr = expr.replace(rattributeQuotes, "='$1']");

                if (support.matchesSelector && documentIsHTML &&
                    !compilerCache[expr + " "] &&
                    (!rbuggyMatches || !rbuggyMatches.test(expr)) &&
                    (!rbuggyQSA || !rbuggyQSA.test(expr))) {

                    try {
                        var ret = matches.call(elem, expr);

                        // IE 9's matchesSelector returns false on disconnected nodes
                        if (ret || support.disconnectedMatch ||
                            // As well, disconnected nodes are said to be in a document
                            // fragment in IE 9
                            elem.document && elem.document.nodeType !== 11) {
                            return ret;
                        }
                    } catch (e) {}
                }

                return Sizzle(expr, document, null, [elem]).length > 0;
            };

            Sizzle.contains = function(context, elem) {
                // Set document vars if needed
                if ((context.ownerDocument || context) !== document) {
                    setDocument(context);
                }
                return contains(context, elem);
            };

            Sizzle.attr = function(elem, name) {
                // Set document vars if needed
                if ((elem.ownerDocument || elem) !== document) {
                    setDocument(elem);
                }

                var fn = Expr.attrHandle[name.toLowerCase()],
                    // Don't get fooled by Object.prototype properties (jQuery #13807)
                    val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ?
                    fn(elem, name, !documentIsHTML) :
                    undefined;

                return val !== undefined ?
                    val :
                    support.attributes || !documentIsHTML ?
                    elem.getAttribute(name) :
                    (val = elem.getAttributeNode(name)) && val.specified ?
                    val.value :
                    null;
            };

            Sizzle.error = function(msg) {
                throw new Error("Syntax error, unrecognized expression: " + msg);
            };

            /**
             * Document sorting and removing duplicates
             * @param {ArrayLike} results
             */
            Sizzle.uniqueSort = function(results) {
                var elem,
                    duplicates = [],
                    j = 0,
                    i = 0;

                // Unless we *know* we can detect duplicates, assume their presence
                hasDuplicate = !support.detectDuplicates;
                sortInput = !support.sortStable && results.slice(0);
                results.sort(sortOrder);

                if (hasDuplicate) {
                    while ((elem = results[i++])) {
                        if (elem === results[i]) {
                            j = duplicates.push(i);
                        }
                    }
                    while (j--) {
                        results.splice(duplicates[j], 1);
                    }
                }

                // Clear input after sorting to release objects
                // See https://github.com/jquery/sizzle/pull/225
                sortInput = null;

                return results;
            };

            /**
             * Utility function for retrieving the text value of an array of DOM nodes
             * @param {Array|Element} elem
             */
            getText = Sizzle.getText = function(elem) {
                var node,
                    ret = "",
                    i = 0,
                    nodeType = elem.nodeType;

                if (!nodeType) {
                    // If no nodeType, this is expected to be an array
                    while ((node = elem[i++])) {
                        // Do not traverse comment nodes
                        ret += getText(node);
                    }
                } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                    // Use textContent for elements
                    // innerText usage removed for consistency of new lines (jQuery #11153)
                    if (typeof elem.textContent === "string") {
                        return elem.textContent;
                    } else {
                        // Traverse its children
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            ret += getText(elem);
                        }
                    }
                } else if (nodeType === 3 || nodeType === 4) {
                    return elem.nodeValue;
                }
                // Do not include comment or processing instruction nodes

                return ret;
            };

            Expr = Sizzle.selectors = {

                // Can be adjusted by the user
                cacheLength: 50,

                createPseudo: markFunction,

                match: matchExpr,

                attrHandle: {},

                find: {},

                relative: {
                    ">": {
                        dir: "parentNode",
                        first: true
                    },
                    " ": {
                        dir: "parentNode"
                    },
                    "+": {
                        dir: "previousSibling",
                        first: true
                    },
                    "~": {
                        dir: "previousSibling"
                    }
                },

                preFilter: {
                    "ATTR": function(match) {
                        match[1] = match[1].replace(runescape, funescape);

                        // Move the given value to match[3] whether quoted or unquoted
                        match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

                        if (match[2] === "~=") {
                            match[3] = " " + match[3] + " ";
                        }

                        return match.slice(0, 4);
                    },

                    "CHILD": function(match) {
                        /* matches from matchExpr["CHILD"]
                        	1 type (only|nth|...)
                        	2 what (child|of-type)
                        	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
                        	4 xn-component of xn+y argument ([+-]?\d*n|)
                        	5 sign of xn-component
                        	6 x of xn-component
                        	7 sign of y-component
                        	8 y of y-component
                        */
                        match[1] = match[1].toLowerCase();

                        if (match[1].slice(0, 3) === "nth") {
                            // nth-* requires argument
                            if (!match[3]) {
                                Sizzle.error(match[0]);
                            }

                            // numeric x and y parameters for Expr.filter.CHILD
                            // remember that false/true cast respectively to 0/1
                            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                            match[5] = +((match[7] + match[8]) || match[3] === "odd");

                            // other types prohibit arguments
                        } else if (match[3]) {
                            Sizzle.error(match[0]);
                        }

                        return match;
                    },

                    "PSEUDO": function(match) {
                        var excess,
                            unquoted = !match[6] && match[2];

                        if (matchExpr["CHILD"].test(match[0])) {
                            return null;
                        }

                        // Accept quoted arguments as-is
                        if (match[3]) {
                            match[2] = match[4] || match[5] || "";

                            // Strip excess characters from unquoted arguments
                        } else if (unquoted && rpseudo.test(unquoted) &&
                            // Get excess from tokenize (recursively)
                            (excess = tokenize(unquoted, true)) &&
                            // advance to the next closing parenthesis
                            (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

                            // excess is a negative index
                            match[0] = match[0].slice(0, excess);
                            match[2] = unquoted.slice(0, excess);
                        }

                        // Return only captures needed by the pseudo filter method (type and argument)
                        return match.slice(0, 3);
                    }
                },

                filter: {

                    "TAG": function(nodeNameSelector) {
                        var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                        return nodeNameSelector === "*" ?
                            function() {
                                return true;
                            } :
                            function(elem) {
                                return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                            };
                    },

                    "CLASS": function(className) {
                        var pattern = classCache[className + " "];

                        return pattern ||
                            (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) &&
                            classCache(className, function(elem) {
                                return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
                            });
                    },

                    "ATTR": function(name, operator, check) {
                        return function(elem) {
                            var result = Sizzle.attr(elem, name);

                            if (result == null) {
                                return operator === "!=";
                            }
                            if (!operator) {
                                return true;
                            }

                            result += "";

                            return operator === "=" ? result === check :
                                operator === "!=" ? result !== check :
                                operator === "^=" ? check && result.indexOf(check) === 0 :
                                operator === "*=" ? check && result.indexOf(check) > -1 :
                                operator === "$=" ? check && result.slice(-check.length) === check :
                                operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 :
                                operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" :
                                false;
                        };
                    },

                    "CHILD": function(type, what, argument, first, last) {
                        var simple = type.slice(0, 3) !== "nth",
                            forward = type.slice(-4) !== "last",
                            ofType = what === "of-type";

                        return first === 1 && last === 0 ?

                            // Shortcut for :nth-*(n)
                            function(elem) {
                                return !!elem.parentNode;
                            } :

                            function(elem, context, xml) {
                                var cache, uniqueCache, outerCache, node, nodeIndex, start,
                                    dir = simple !== forward ? "nextSibling" : "previousSibling",
                                    parent = elem.parentNode,
                                    name = ofType && elem.nodeName.toLowerCase(),
                                    useCache = !xml && !ofType,
                                    diff = false;

                                if (parent) {

                                    // :(first|last|only)-(child|of-type)
                                    if (simple) {
                                        while (dir) {
                                            node = elem;
                                            while ((node = node[dir])) {
                                                if (ofType ?
                                                    node.nodeName.toLowerCase() === name :
                                                    node.nodeType === 1) {

                                                    return false;
                                                }
                                            }
                                            // Reverse direction for :only-* (if we haven't yet done so)
                                            start = dir = type === "only" && !start && "nextSibling";
                                        }
                                        return true;
                                    }

                                    start = [forward ? parent.firstChild : parent.lastChild];

                                    // non-xml :nth-child(...) stores cache data on `parent`
                                    if (forward && useCache) {

                                        // Seek `elem` from a previously-cached index

                                        // ...in a gzip-friendly way
                                        node = parent;
                                        outerCache = node[expando] || (node[expando] = {});

                                        // Support: IE <9 only
                                        // Defend against cloned attroperties (jQuery gh-1709)
                                        uniqueCache = outerCache[node.uniqueID] ||
                                            (outerCache[node.uniqueID] = {});

                                        cache = uniqueCache[type] || [];
                                        nodeIndex = cache[0] === dirruns && cache[1];
                                        diff = nodeIndex && cache[2];
                                        node = nodeIndex && parent.childNodes[nodeIndex];

                                        while ((node = ++nodeIndex && node && node[dir] ||

                                                // Fallback to seeking `elem` from the start
                                                (diff = nodeIndex = 0) || start.pop())) {

                                            // When found, cache indexes on `parent` and break
                                            if (node.nodeType === 1 && ++diff && node === elem) {
                                                uniqueCache[type] = [dirruns, nodeIndex, diff];
                                                break;
                                            }
                                        }

                                    } else {
                                        // Use previously-cached element index if available
                                        if (useCache) {
                                            // ...in a gzip-friendly way
                                            node = elem;
                                            outerCache = node[expando] || (node[expando] = {});

                                            // Support: IE <9 only
                                            // Defend against cloned attroperties (jQuery gh-1709)
                                            uniqueCache = outerCache[node.uniqueID] ||
                                                (outerCache[node.uniqueID] = {});

                                            cache = uniqueCache[type] || [];
                                            nodeIndex = cache[0] === dirruns && cache[1];
                                            diff = nodeIndex;
                                        }

                                        // xml :nth-child(...)
                                        // or :nth-last-child(...) or :nth(-last)?-of-type(...)
                                        if (diff === false) {
                                            // Use the same loop as above to seek `elem` from the start
                                            while ((node = ++nodeIndex && node && node[dir] ||
                                                    (diff = nodeIndex = 0) || start.pop())) {

                                                if ((ofType ?
                                                        node.nodeName.toLowerCase() === name :
                                                        node.nodeType === 1) &&
                                                    ++diff) {

                                                    // Cache the index of each encountered element
                                                    if (useCache) {
                                                        outerCache = node[expando] || (node[expando] = {});

                                                        // Support: IE <9 only
                                                        // Defend against cloned attroperties (jQuery gh-1709)
                                                        uniqueCache = outerCache[node.uniqueID] ||
                                                            (outerCache[node.uniqueID] = {});

                                                        uniqueCache[type] = [dirruns, diff];
                                                    }

                                                    if (node === elem) {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    // Incorporate the offset, then check against cycle size
                                    diff -= last;
                                    return diff === first || (diff % first === 0 && diff / first >= 0);
                                }
                            };
                    },

                    "PSEUDO": function(pseudo, argument) {
                        // pseudo-class names are case-insensitive
                        // http://www.w3.org/TR/selectors/#pseudo-classes
                        // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
                        // Remember that setFilters inherits from pseudos
                        var args,
                            fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] ||
                            Sizzle.error("unsupported pseudo: " + pseudo);

                        // The user may use createPseudo to indicate that
                        // arguments are needed to create the filter function
                        // just as Sizzle does
                        if (fn[expando]) {
                            return fn(argument);
                        }

                        // But maintain support for old signatures
                        if (fn.length > 1) {
                            args = [pseudo, pseudo, "", argument];
                            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ?
                                markFunction(function(seed, matches) {
                                    var idx,
                                        matched = fn(seed, argument),
                                        i = matched.length;
                                    while (i--) {
                                        idx = indexOf(seed, matched[i]);
                                        seed[idx] = !(matches[idx] = matched[i]);
                                    }
                                }) :
                                function(elem) {
                                    return fn(elem, 0, args);
                                };
                        }

                        return fn;
                    }
                },

                pseudos: {
                    // Potentially complex pseudos
                    "not": markFunction(function(selector) {
                        // Trim the selector passed to compile
                        // to avoid treating leading and trailing
                        // spaces as combinators
                        var input = [],
                            results = [],
                            matcher = compile(selector.replace(rtrim, "$1"));

                        return matcher[expando] ?
                            markFunction(function(seed, matches, context, xml) {
                                var elem,
                                    unmatched = matcher(seed, null, xml, []),
                                    i = seed.length;

                                // Match elements unmatched by `matcher`
                                while (i--) {
                                    if ((elem = unmatched[i])) {
                                        seed[i] = !(matches[i] = elem);
                                    }
                                }
                            }) :
                            function(elem, context, xml) {
                                input[0] = elem;
                                matcher(input, null, xml, results);
                                // Don't keep the element (issue #299)
                                input[0] = null;
                                return !results.pop();
                            };
                    }),

                    "has": markFunction(function(selector) {
                        return function(elem) {
                            return Sizzle(selector, elem).length > 0;
                        };
                    }),

                    "contains": markFunction(function(text) {
                        text = text.replace(runescape, funescape);
                        return function(elem) {
                            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                        };
                    }),

                    // "Whether an element is represented by a :lang() selector
                    // is based solely on the element's language value
                    // being equal to the identifier C,
                    // or beginning with the identifier C immediately followed by "-".
                    // The matching of C against the element's language value is performed case-insensitively.
                    // The identifier C does not have to be a valid language name."
                    // http://www.w3.org/TR/selectors/#lang-pseudo
                    "lang": markFunction(function(lang) {
                        // lang value must be a valid identifier
                        if (!ridentifier.test(lang || "")) {
                            Sizzle.error("unsupported lang: " + lang);
                        }
                        lang = lang.replace(runescape, funescape).toLowerCase();
                        return function(elem) {
                            var elemLang;
                            do {
                                if ((elemLang = documentIsHTML ?
                                        elem.lang :
                                        elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {

                                    elemLang = elemLang.toLowerCase();
                                    return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
                                }
                            } while ((elem = elem.parentNode) && elem.nodeType === 1);
                            return false;
                        };
                    }),

                    // Miscellaneous
                    "target": function(elem) {
                        var hash = window.location && window.location.hash;
                        return hash && hash.slice(1) === elem.id;
                    },

                    "root": function(elem) {
                        return elem === docElem;
                    },

                    "focus": function(elem) {
                        return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                    },

                    // Boolean properties
                    "enabled": function(elem) {
                        return elem.disabled === false;
                    },

                    "disabled": function(elem) {
                        return elem.disabled === true;
                    },

                    "checked": function(elem) {
                        // In CSS3, :checked should return both checked and selected elements
                        // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
                        var nodeName = elem.nodeName.toLowerCase();
                        return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
                    },

                    "selected": function(elem) {
                        // Accessing this property makes selected-by-default
                        // options in Safari work properly
                        if (elem.parentNode) {
                            elem.parentNode.selectedIndex;
                        }

                        return elem.selected === true;
                    },

                    // Contents
                    "empty": function(elem) {
                        // http://www.w3.org/TR/selectors/#empty-pseudo
                        // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
                        //   but not by others (comment: 8; processing instruction: 7; etc.)
                        // nodeType < 6 works because attributes (2) do not appear as children
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            if (elem.nodeType < 6) {
                                return false;
                            }
                        }
                        return true;
                    },

                    "parent": function(elem) {
                        return !Expr.pseudos["empty"](elem);
                    },

                    // Element/input types
                    "header": function(elem) {
                        return rheader.test(elem.nodeName);
                    },

                    "input": function(elem) {
                        return rinputs.test(elem.nodeName);
                    },

                    "button": function(elem) {
                        var name = elem.nodeName.toLowerCase();
                        return name === "input" && elem.type === "button" || name === "button";
                    },

                    "text": function(elem) {
                        var attr;
                        return elem.nodeName.toLowerCase() === "input" &&
                            elem.type === "text" &&

                            // Support: IE<8
                            // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
                            ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
                    },

                    // Position-in-collection
                    "first": createPositionalPseudo(function() {
                        return [0];
                    }),

                    "last": createPositionalPseudo(function(matchIndexes, length) {
                        return [length - 1];
                    }),

                    "eq": createPositionalPseudo(function(matchIndexes, length, argument) {
                        return [argument < 0 ? argument + length : argument];
                    }),

                    "even": createPositionalPseudo(function(matchIndexes, length) {
                        var i = 0;
                        for (; i < length; i += 2) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),

                    "odd": createPositionalPseudo(function(matchIndexes, length) {
                        var i = 1;
                        for (; i < length; i += 2) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),

                    "lt": createPositionalPseudo(function(matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument;
                        for (; --i >= 0;) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    }),

                    "gt": createPositionalPseudo(function(matchIndexes, length, argument) {
                        var i = argument < 0 ? argument + length : argument;
                        for (; ++i < length;) {
                            matchIndexes.push(i);
                        }
                        return matchIndexes;
                    })
                }
            };

            Expr.pseudos["nth"] = Expr.pseudos["eq"];

            // Add button/input type pseudos
            for (i in {
                    radio: true,
                    checkbox: true,
                    file: true,
                    password: true,
                    image: true
                }) {
                Expr.pseudos[i] = createInputPseudo(i);
            }
            for (i in {
                    submit: true,
                    reset: true
                }) {
                Expr.pseudos[i] = createButtonPseudo(i);
            }

            // Easy API for creating new setFilters
            function setFilters() {}
            setFilters.prototype = Expr.filters = Expr.pseudos;
            Expr.setFilters = new setFilters();

            tokenize = Sizzle.tokenize = function(selector, parseOnly) {
                var matched, match, tokens, type,
                    soFar, groups, preFilters,
                    cached = tokenCache[selector + " "];

                if (cached) {
                    return parseOnly ? 0 : cached.slice(0);
                }

                soFar = selector;
                groups = [];
                preFilters = Expr.preFilter;

                while (soFar) {

                    // Comma and first run
                    if (!matched || (match = rcomma.exec(soFar))) {
                        if (match) {
                            // Don't consume trailing commas as valid
                            soFar = soFar.slice(match[0].length) || soFar;
                        }
                        groups.push((tokens = []));
                    }

                    matched = false;

                    // Combinators
                    if ((match = rcombinators.exec(soFar))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            // Cast descendant combinators to space
                            type: match[0].replace(rtrim, " ")
                        });
                        soFar = soFar.slice(matched.length);
                    }

                    // Filters
                    for (type in Expr.filter) {
                        if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] ||
                                (match = preFilters[type](match)))) {
                            matched = match.shift();
                            tokens.push({
                                value: matched,
                                type: type,
                                matches: match
                            });
                            soFar = soFar.slice(matched.length);
                        }
                    }

                    if (!matched) {
                        break;
                    }
                }

                // Return the length of the invalid excess
                // if we're just parsing
                // Otherwise, throw an error or return tokens
                return parseOnly ?
                    soFar.length :
                    soFar ?
                    Sizzle.error(selector) :
                    // Cache the tokens
                    tokenCache(selector, groups).slice(0);
            };

            function toSelector(tokens) {
                var i = 0,
                    len = tokens.length,
                    selector = "";
                for (; i < len; i++) {
                    selector += tokens[i].value;
                }
                return selector;
            }

            function addCombinator(matcher, combinator, base) {
                var dir = combinator.dir,
                    checkNonElements = base && dir === "parentNode",
                    doneName = done++;

                return combinator.first ?
                    // Check against closest ancestor/preceding element
                    function(elem, context, xml) {
                        while ((elem = elem[dir])) {
                            if (elem.nodeType === 1 || checkNonElements) {
                                return matcher(elem, context, xml);
                            }
                        }
                    } :

                    // Check against all ancestor/preceding elements
                    function(elem, context, xml) {
                        var oldCache, uniqueCache, outerCache,
                            newCache = [dirruns, doneName];

                        // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
                        if (xml) {
                            while ((elem = elem[dir])) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    if (matcher(elem, context, xml)) {
                                        return true;
                                    }
                                }
                            }
                        } else {
                            while ((elem = elem[dir])) {
                                if (elem.nodeType === 1 || checkNonElements) {
                                    outerCache = elem[expando] || (elem[expando] = {});

                                    // Support: IE <9 only
                                    // Defend against cloned attroperties (jQuery gh-1709)
                                    uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

                                    if ((oldCache = uniqueCache[dir]) &&
                                        oldCache[0] === dirruns && oldCache[1] === doneName) {

                                        // Assign to newCache so results back-propagate to previous elements
                                        return (newCache[2] = oldCache[2]);
                                    } else {
                                        // Reuse newcache so results back-propagate to previous elements
                                        uniqueCache[dir] = newCache;

                                        // A match means we're done; a fail means we have to keep checking
                                        if ((newCache[2] = matcher(elem, context, xml))) {
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    };
            }

            function elementMatcher(matchers) {
                return matchers.length > 1 ?
                    function(elem, context, xml) {
                        var i = matchers.length;
                        while (i--) {
                            if (!matchers[i](elem, context, xml)) {
                                return false;
                            }
                        }
                        return true;
                    } :
                    matchers[0];
            }

            function multipleContexts(selector, contexts, results) {
                var i = 0,
                    len = contexts.length;
                for (; i < len; i++) {
                    Sizzle(selector, contexts[i], results);
                }
                return results;
            }

            function condense(unmatched, map, filter, context, xml) {
                var elem,
                    newUnmatched = [],
                    i = 0,
                    len = unmatched.length,
                    mapped = map != null;

                for (; i < len; i++) {
                    if ((elem = unmatched[i])) {
                        if (!filter || filter(elem, context, xml)) {
                            newUnmatched.push(elem);
                            if (mapped) {
                                map.push(i);
                            }
                        }
                    }
                }

                return newUnmatched;
            }

            function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
                if (postFilter && !postFilter[expando]) {
                    postFilter = setMatcher(postFilter);
                }
                if (postFinder && !postFinder[expando]) {
                    postFinder = setMatcher(postFinder, postSelector);
                }
                return markFunction(function(seed, results, context, xml) {
                    var temp, i, elem,
                        preMap = [],
                        postMap = [],
                        preexisting = results.length,

                        // Get initial elements from seed or context
                        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),

                        // Prefilter to get matcher input, preserving a map for seed-results synchronization
                        matcherIn = preFilter && (seed || !selector) ?
                        condense(elems, preMap, preFilter, context, xml) :
                        elems,

                        matcherOut = matcher ?
                        // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
                        postFinder || (seed ? preFilter : preexisting || postFilter) ?

                        // ...intermediate processing is necessary
                        [] :

                        // ...otherwise use results directly
                        results :
                        matcherIn;

                    // Find primary matches
                    if (matcher) {
                        matcher(matcherIn, matcherOut, context, xml);
                    }

                    // Apply postFilter
                    if (postFilter) {
                        temp = condense(matcherOut, postMap);
                        postFilter(temp, [], context, xml);

                        // Un-match failing elements by moving them back to matcherIn
                        i = temp.length;
                        while (i--) {
                            if ((elem = temp[i])) {
                                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                            }
                        }
                    }

                    if (seed) {
                        if (postFinder || preFilter) {
                            if (postFinder) {
                                // Get the final matcherOut by condensing this intermediate into postFinder contexts
                                temp = [];
                                i = matcherOut.length;
                                while (i--) {
                                    if ((elem = matcherOut[i])) {
                                        // Restore matcherIn since elem is not yet a final match
                                        temp.push((matcherIn[i] = elem));
                                    }
                                }
                                postFinder(null, (matcherOut = []), temp, xml);
                            }

                            // Move matched elements from seed to results to keep them synchronized
                            i = matcherOut.length;
                            while (i--) {
                                if ((elem = matcherOut[i]) &&
                                    (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

                                    seed[temp] = !(results[temp] = elem);
                                }
                            }
                        }

                        // Add elements to results, through postFinder if defined
                    } else {
                        matcherOut = condense(
                            matcherOut === results ?
                            matcherOut.splice(preexisting, matcherOut.length) :
                            matcherOut
                        );
                        if (postFinder) {
                            postFinder(null, results, matcherOut, xml);
                        } else {
                            push.apply(results, matcherOut);
                        }
                    }
                });
            }

            function matcherFromTokens(tokens) {
                var checkContext, matcher, j,
                    len = tokens.length,
                    leadingRelative = Expr.relative[tokens[0].type],
                    implicitRelative = leadingRelative || Expr.relative[" "],
                    i = leadingRelative ? 1 : 0,

                    // The foundational matcher ensures that elements are reachable from top-level context(s)
                    matchContext = addCombinator(function(elem) {
                        return elem === checkContext;
                    }, implicitRelative, true),
                    matchAnyContext = addCombinator(function(elem) {
                        return indexOf(checkContext, elem) > -1;
                    }, implicitRelative, true),
                    matchers = [function(elem, context, xml) {
                        var ret = (!leadingRelative && (xml || context !== outermostContext)) || (
                            (checkContext = context).nodeType ?
                            matchContext(elem, context, xml) :
                            matchAnyContext(elem, context, xml));
                        // Avoid hanging onto element (issue #299)
                        checkContext = null;
                        return ret;
                    }];

                for (; i < len; i++) {
                    if ((matcher = Expr.relative[tokens[i].type])) {
                        matchers = [addCombinator(elementMatcher(matchers), matcher)];
                    } else {
                        matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

                        // Return special upon seeing a positional matcher
                        if (matcher[expando]) {
                            // Find the next relative operator (if any) for proper handling
                            j = ++i;
                            for (; j < len; j++) {
                                if (Expr.relative[tokens[j].type]) {
                                    break;
                                }
                            }
                            return setMatcher(
                                i > 1 && elementMatcher(matchers),
                                i > 1 && toSelector(
                                    // If the preceding token was a descendant combinator, insert an implicit any-element `*`
                                    tokens.slice(0, i - 1).concat({
                                        value: tokens[i - 2].type === " " ? "*" : ""
                                    })
                                ).replace(rtrim, "$1"),
                                matcher,
                                i < j && matcherFromTokens(tokens.slice(i, j)),
                                j < len && matcherFromTokens((tokens = tokens.slice(j))),
                                j < len && toSelector(tokens)
                            );
                        }
                        matchers.push(matcher);
                    }
                }

                return elementMatcher(matchers);
            }

            function matcherFromGroupMatchers(elementMatchers, setMatchers) {
                var bySet = setMatchers.length > 0,
                    byElement = elementMatchers.length > 0,
                    superMatcher = function(seed, context, xml, results, outermost) {
                        var elem, j, matcher,
                            matchedCount = 0,
                            i = "0",
                            unmatched = seed && [],
                            setMatched = [],
                            contextBackup = outermostContext,
                            // We must always have either seed elements or outermost context
                            elems = seed || byElement && Expr.find["TAG"]("*", outermost),
                            // Use integer dirruns iff this is the outermost matcher
                            dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
                            len = elems.length;

                        if (outermost) {
                            outermostContext = context === document || context || outermost;
                        }

                        // Add elements passing elementMatchers directly to results
                        // Support: IE<9, Safari
                        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
                        for (; i !== len && (elem = elems[i]) != null; i++) {
                            if (byElement && elem) {
                                j = 0;
                                if (!context && elem.ownerDocument !== document) {
                                    setDocument(elem);
                                    xml = !documentIsHTML;
                                }
                                while ((matcher = elementMatchers[j++])) {
                                    if (matcher(elem, context || document, xml)) {
                                        results.push(elem);
                                        break;
                                    }
                                }
                                if (outermost) {
                                    dirruns = dirrunsUnique;
                                }
                            }

                            // Track unmatched elements for set filters
                            if (bySet) {
                                // They will have gone through all possible matchers
                                if ((elem = !matcher && elem)) {
                                    matchedCount--;
                                }

                                // Lengthen the array for every element, matched or not
                                if (seed) {
                                    unmatched.push(elem);
                                }
                            }
                        }

                        // `i` is now the count of elements visited above, and adding it to `matchedCount`
                        // makes the latter nonnegative.
                        matchedCount += i;

                        // Apply set filters to unmatched elements
                        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
                        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
                        // no element matchers and no seed.
                        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
                        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
                        // numerically zero.
                        if (bySet && i !== matchedCount) {
                            j = 0;
                            while ((matcher = setMatchers[j++])) {
                                matcher(unmatched, setMatched, context, xml);
                            }

                            if (seed) {
                                // Reintegrate element matches to eliminate the need for sorting
                                if (matchedCount > 0) {
                                    while (i--) {
                                        if (!(unmatched[i] || setMatched[i])) {
                                            setMatched[i] = pop.call(results);
                                        }
                                    }
                                }

                                // Discard index placeholder values to get only actual matches
                                setMatched = condense(setMatched);
                            }

                            // Add matches to results
                            push.apply(results, setMatched);

                            // Seedless set matches succeeding multiple successful matchers stipulate sorting
                            if (outermost && !seed && setMatched.length > 0 &&
                                (matchedCount + setMatchers.length) > 1) {

                                Sizzle.uniqueSort(results);
                            }
                        }

                        // Override manipulation of globals by nested matchers
                        if (outermost) {
                            dirruns = dirrunsUnique;
                            outermostContext = contextBackup;
                        }

                        return unmatched;
                    };

                return bySet ?
                    markFunction(superMatcher) :
                    superMatcher;
            }

            compile = Sizzle.compile = function(selector, match /* Internal Use Only */ ) {
                var i,
                    setMatchers = [],
                    elementMatchers = [],
                    cached = compilerCache[selector + " "];

                if (!cached) {
                    // Generate a function of recursive functions that can be used to check each element
                    if (!match) {
                        match = tokenize(selector);
                    }
                    i = match.length;
                    while (i--) {
                        cached = matcherFromTokens(match[i]);
                        if (cached[expando]) {
                            setMatchers.push(cached);
                        } else {
                            elementMatchers.push(cached);
                        }
                    }

                    // Cache the compiled function
                    cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

                    // Save selector and tokenization
                    cached.selector = selector;
                }
                return cached;
            };

            /**
             * A low-level selection function that works with Sizzle's compiled
             *  selector functions
             * @param {String|Function} selector A selector or a pre-compiled
             *  selector function built with Sizzle.compile
             * @param {Element} context
             * @param {Array} [results]
             * @param {Array} [seed] A set of elements to match against
             */
            select = Sizzle.select = function(selector, context, results, seed) {
                var i, tokens, token, type, find,
                    compiled = typeof selector === "function" && selector,
                    match = !seed && tokenize((selector = compiled.selector || selector));

                results = results || [];

                // Try to minimize operations if there is only one selector in the list and no seed
                // (the latter of which guarantees us context)
                if (match.length === 1) {

                    // Reduce context if the leading compound selector is an ID
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === "ID" &&
                        support.getById && context.nodeType === 9 && documentIsHTML &&
                        Expr.relative[tokens[1].type]) {

                        context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
                        if (!context) {
                            return results;

                            // Precompiled matchers will still verify ancestry, so step up a level
                        } else if (compiled) {
                            context = context.parentNode;
                        }

                        selector = selector.slice(tokens.shift().value.length);
                    }

                    // Fetch a seed set for right-to-left matching
                    i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];

                        // Abort if we hit a combinator
                        if (Expr.relative[(type = token.type)]) {
                            break;
                        }
                        if ((find = Expr.find[type])) {
                            // Search, expanding context for leading sibling combinators
                            if ((seed = find(
                                    token.matches[0].replace(runescape, funescape),
                                    rsibling.test(tokens[0].type) && testContext(context.parentNode) || context
                                ))) {

                                // If seed is empty or no tokens remain, we can return early
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, seed);
                                    return results;
                                }

                                break;
                            }
                        }
                    }
                }

                // Compile and execute a filtering function if one is not provided
                // Provide `match` to avoid retokenization if we modified the selector above
                (compiled || compile(selector, match))(
                    seed,
                    context, !documentIsHTML,
                    results, !context || rsibling.test(selector) && testContext(context.parentNode) || context
                );
                return results;
            };

            // One-time assignments

            // Sort stability
            support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

            // Support: Chrome 14-35+
            // Always assume duplicates if they aren't passed to the comparison function
            support.detectDuplicates = !!hasDuplicate;

            // Initialize against the default document
            setDocument();

            // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
            // Detached nodes confoundingly follow *each other*
            support.sortDetached = assert(function(div1) {
                // Should return 1, but returns 4 (following)
                return div1.compareDocumentPosition(document.createElement("div")) & 1;
            });

            // Support: IE<8
            // Prevent attribute/property "interpolation"
            // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
            if (!assert(function(div) {
                    div.innerHTML = "<a href='#'></a>";
                    return div.firstChild.getAttribute("href") === "#";
                })) {
                addHandle("type|href|height|width", function(elem, name, isXML) {
                    if (!isXML) {
                        return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
                    }
                });
            }

            // Support: IE<9
            // Use defaultValue in place of getAttribute("value")
            if (!support.attributes || !assert(function(div) {
                    div.innerHTML = "<input/>";
                    div.firstChild.setAttribute("value", "");
                    return div.firstChild.getAttribute("value") === "";
                })) {
                addHandle("value", function(elem, name, isXML) {
                    if (!isXML && elem.nodeName.toLowerCase() === "input") {
                        return elem.defaultValue;
                    }
                });
            }

            // Support: IE<9
            // Use getAttributeNode to fetch booleans when getAttribute lies
            if (!assert(function(div) {
                    return div.getAttribute("disabled") == null;
                })) {
                addHandle(booleans, function(elem, name, isXML) {
                    var val;
                    if (!isXML) {
                        return elem[name] === true ? name.toLowerCase() :
                            (val = elem.getAttributeNode(name)) && val.specified ?
                            val.value :
                            null;
                    }
                });
            }

            return Sizzle;

        })(window);



    jQuery.find = Sizzle;
    jQuery.expr = Sizzle.selectors;
    jQuery.expr[":"] = jQuery.expr.pseudos;
    jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
    jQuery.text = Sizzle.getText;
    jQuery.isXMLDoc = Sizzle.isXML;
    jQuery.contains = Sizzle.contains;



    var dir = function(elem, dir, until) {
        var matched = [],
            truncate = until !== undefined;

        while ((elem = elem[dir]) && elem.nodeType !== 9) {
            if (elem.nodeType === 1) {
                if (truncate && jQuery(elem).is(until)) {
                    break;
                }
                matched.push(elem);
            }
        }
        return matched;
    };


    var siblings = function(n, elem) {
        var matched = [];

        for (; n; n = n.nextSibling) {
            if (n.nodeType === 1 && n !== elem) {
                matched.push(n);
            }
        }

        return matched;
    };


    var rneedsContext = jQuery.expr.match.needsContext;

    var rsingleTag = (/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/);



    var risSimple = /^.[^:#\[\.,]*$/;

    // Implement the identical functionality for filter and not
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function(elem, i) {
                /* jshint -W018 */
                return !!qualifier.call(elem, i, elem) !== not;
            });

        }

        if (qualifier.nodeType) {
            return jQuery.grep(elements, function(elem) {
                return (elem === qualifier) !== not;
            });

        }

        if (typeof qualifier === "string") {
            if (risSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not);
            }

            qualifier = jQuery.filter(qualifier, elements);
        }

        return jQuery.grep(elements, function(elem) {
            return (indexOf.call(qualifier, elem) > -1) !== not;
        });
    }

    jQuery.filter = function(expr, elems, not) {
        var elem = elems[0];

        if (not) {
            expr = ":not(" + expr + ")";
        }

        return elems.length === 1 && elem.nodeType === 1 ?
            jQuery.find.matchesSelector(elem, expr) ? [elem] : [] :
            jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
                return elem.nodeType === 1;
            }));
    };

    jQuery.fn.extend({
        find: function(selector) {
            var i,
                len = this.length,
                ret = [],
                self = this;

            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function() {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }

            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret);
            }

            // Needed because $( selector, context ) becomes $( context ).find( selector )
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret;
        },
        filter: function(selector) {
            return this.pushStack(winnow(this, selector || [], false));
        },
        not: function(selector) {
            return this.pushStack(winnow(this, selector || [], true));
        },
        is: function(selector) {
            return !!winnow(
                this,

                // If this is a positional/relative selector, check membership in the returned set
                // so $("p:first").is("p:last") won't return true for a doc with two "p".
                typeof selector === "string" && rneedsContext.test(selector) ?
                jQuery(selector) :
                selector || [],
                false
            ).length;
        }
    });


    // Initialize a jQuery object


    // A central reference to the root jQuery(document)
    var rootjQuery,

        // A simple way to check for HTML strings
        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
        // Strict HTML recognition (#11290: must start with <)
        rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

        init = jQuery.fn.init = function(selector, context, root) {
            var match, elem;

            // HANDLE: $(""), $(null), $(undefined), $(false)
            if (!selector) {
                return this;
            }

            // Method init() accepts an alternate rootjQuery
            // so migrate can support jQuery.sub (gh-2101)
            root = root || rootjQuery;

            // Handle HTML strings
            if (typeof selector === "string") {
                if (selector[0] === "<" &&
                    selector[selector.length - 1] === ">" &&
                    selector.length >= 3) {

                    // Assume that strings that start and end with <> are HTML and skip the regex check
                    match = [null, selector, null];

                } else {
                    match = rquickExpr.exec(selector);
                }

                // Match html or make sure no context is specified for #id
                if (match && (match[1] || !context)) {

                    // HANDLE: $(html) -> $(array)
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;

                        // Option to run scripts is true for back-compat
                        // Intentionally let the error be thrown if parseHTML is not present
                        jQuery.merge(this, jQuery.parseHTML(
                            match[1],
                            context && context.nodeType ? context.ownerDocument || context : document,
                            true
                        ));

                        // HANDLE: $(html, props)
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {

                                // Properties of context are called as methods if possible
                                if (jQuery.isFunction(this[match])) {
                                    this[match](context[match]);

                                    // ...and otherwise set as attributes
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }

                        return this;

                        // HANDLE: $(#id)
                    } else {
                        elem = document.getElementById(match[2]);

                        // Support: Blackberry 4.6
                        // gEBID returns nodes no longer in the document (#6963)
                        if (elem && elem.parentNode) {

                            // Inject the element directly into the jQuery object
                            this.length = 1;
                            this[0] = elem;
                        }

                        this.context = document;
                        this.selector = selector;
                        return this;
                    }

                    // HANDLE: $(expr, $(...))
                } else if (!context || context.jquery) {
                    return (context || root).find(selector);

                    // HANDLE: $(expr, context)
                    // (which is just equivalent to: $(context).find(expr)
                } else {
                    return this.constructor(context).find(selector);
                }

                // HANDLE: $(DOMElement)
            } else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;

                // HANDLE: $(function)
                // Shortcut for document ready
            } else if (jQuery.isFunction(selector)) {
                return root.ready !== undefined ?
                    root.ready(selector) :

                    // Execute immediately if ready is not present
                    selector(jQuery);
            }

            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context;
            }

            return jQuery.makeArray(selector, this);
        };

    // Give the init function the jQuery prototype for later instantiation
    init.prototype = jQuery.fn;

    // Initialize central reference
    rootjQuery = jQuery(document);


    var rparentsprev = /^(?:parents|prev(?:Until|All))/,

        // Methods guaranteed to produce a unique set when starting from a unique set
        guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };

    jQuery.fn.extend({
        has: function(target) {
            var targets = jQuery(target, this),
                l = targets.length;

            return this.filter(function() {
                var i = 0;
                for (; i < l; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },

        closest: function(selectors, context) {
            var cur,
                i = 0,
                l = this.length,
                matched = [],
                pos = rneedsContext.test(selectors) || typeof selectors !== "string" ?
                jQuery(selectors, context || this.context) :
                0;

            for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

                    // Always skip document fragments
                    if (cur.nodeType < 11 && (pos ?
                            pos.index(cur) > -1 :

                            // Don't pass non-elements to Sizzle
                            cur.nodeType === 1 &&
                            jQuery.find.matchesSelector(cur, selectors))) {

                        matched.push(cur);
                        break;
                    }
                }
            }

            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
        },

        // Determine the position of an element within the set
        index: function(elem) {

            // No argument, return index in parent
            if (!elem) {
                return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1;
            }

            // Index in selector
            if (typeof elem === "string") {
                return indexOf.call(jQuery(elem), this[0]);
            }

            // Locate the position of the desired element
            return indexOf.call(this,

                // If it receives a jQuery object, the first element is used
                elem.jquery ? elem[0] : elem
            );
        },

        add: function(selector, context) {
            return this.pushStack(
                jQuery.uniqueSort(
                    jQuery.merge(this.get(), jQuery(selector, context))
                )
            );
        },

        addBack: function(selector) {
            return this.add(selector == null ?
                this.prevObject : this.prevObject.filter(selector)
            );
        }
    });

    function sibling(cur, dir) {
        while ((cur = cur[dir]) && cur.nodeType !== 1) {}
        return cur;
    }

    jQuery.each({
        parent: function(elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function(elem) {
            return dir(elem, "parentNode");
        },
        parentsUntil: function(elem, i, until) {
            return dir(elem, "parentNode", until);
        },
        next: function(elem) {
            return sibling(elem, "nextSibling");
        },
        prev: function(elem) {
            return sibling(elem, "previousSibling");
        },
        nextAll: function(elem) {
            return dir(elem, "nextSibling");
        },
        prevAll: function(elem) {
            return dir(elem, "previousSibling");
        },
        nextUntil: function(elem, i, until) {
            return dir(elem, "nextSibling", until);
        },
        prevUntil: function(elem, i, until) {
            return dir(elem, "previousSibling", until);
        },
        siblings: function(elem) {
            return siblings((elem.parentNode || {}).firstChild, elem);
        },
        children: function(elem) {
            return siblings(elem.firstChild);
        },
        contents: function(elem) {
            return elem.contentDocument || jQuery.merge([], elem.childNodes);
        }
    }, function(name, fn) {
        jQuery.fn[name] = function(until, selector) {
            var matched = jQuery.map(this, fn, until);

            if (name.slice(-5) !== "Until") {
                selector = until;
            }

            if (selector && typeof selector === "string") {
                matched = jQuery.filter(selector, matched);
            }

            if (this.length > 1) {

                // Remove duplicates
                if (!guaranteedUnique[name]) {
                    jQuery.uniqueSort(matched);
                }

                // Reverse order for parents* and prev-derivatives
                if (rparentsprev.test(name)) {
                    matched.reverse();
                }
            }

            return this.pushStack(matched);
        };
    });
    var rnotwhite = (/\S+/g);



    // Convert String-formatted options into Object-formatted ones
    function createOptions(options) {
        var object = {};
        jQuery.each(options.match(rnotwhite) || [], function(_, flag) {
            object[flag] = true;
        });
        return object;
    }

    /*
     * Create a callback list using the following parameters:
     *
     *	options: an optional list of space-separated options that will change how
     *			the callback list behaves or a more traditional option object
     *
     * By default a callback list will act like an event callback list and can be
     * "fired" multiple times.
     *
     * Possible options:
     *
     *	once:			will ensure the callback list can only be fired once (like a Deferred)
     *
     *	memory:			will keep track of previous values and will call any callback added
     *					after the list has been fired right away with the latest "memorized"
     *					values (like a Deferred)
     *
     *	unique:			will ensure a callback can only be added once (no duplicate in the list)
     *
     *	stopOnFalse:	interrupt callings when a callback returns false
     *
     */
    jQuery.Callbacks = function(options) {

        // Convert options from String-formatted to Object-formatted if needed
        // (we check in cache first)
        options = typeof options === "string" ?
            createOptions(options) :
            jQuery.extend({}, options);

        var // Flag to know if list is currently firing
            firing,

            // Last fire value for non-forgettable lists
            memory,

            // Flag to know if list was already fired
            fired,

            // Flag to prevent firing
            locked,

            // Actual callback list
            list = [],

            // Queue of execution data for repeatable lists
            queue = [],

            // Index of currently firing callback (modified by add/remove as needed)
            firingIndex = -1,

            // Fire callbacks
            fire = function() {

                // Enforce single-firing
                locked = options.once;

                // Execute callbacks for all pending executions,
                // respecting firingIndex overrides and runtime changes
                fired = firing = true;
                for (; queue.length; firingIndex = -1) {
                    memory = queue.shift();
                    while (++firingIndex < list.length) {

                        // Run callback and check for early termination
                        if (list[firingIndex].apply(memory[0], memory[1]) === false &&
                            options.stopOnFalse) {

                            // Jump to end and forget the data so .add doesn't re-fire
                            firingIndex = list.length;
                            memory = false;
                        }
                    }
                }

                // Forget the data if we're done with it
                if (!options.memory) {
                    memory = false;
                }

                firing = false;

                // Clean up if we're done firing for good
                if (locked) {

                    // Keep an empty list if we have data for future add calls
                    if (memory) {
                        list = [];

                        // Otherwise, this object is spent
                    } else {
                        list = "";
                    }
                }
            },

            // Actual Callbacks object
            self = {

                // Add a callback or a collection of callbacks to the list
                add: function() {
                    if (list) {

                        // If we have memory from a past run, we should fire after adding
                        if (memory && !firing) {
                            firingIndex = list.length - 1;
                            queue.push(memory);
                        }

                        (function add(args) {
                            jQuery.each(args, function(_, arg) {
                                if (jQuery.isFunction(arg)) {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && jQuery.type(arg) !== "string") {

                                    // Inspect recursively
                                    add(arg);
                                }
                            });
                        })(arguments);

                        if (memory && !firing) {
                            fire();
                        }
                    }
                    return this;
                },

                // Remove a callback from the list
                remove: function() {
                    jQuery.each(arguments, function(_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);

                            // Handle firing indexes
                            if (index <= firingIndex) {
                                firingIndex--;
                            }
                        }
                    });
                    return this;
                },

                // Check if a given callback is in the list.
                // If no argument is given, return whether or not list has callbacks attached.
                has: function(fn) {
                    return fn ?
                        jQuery.inArray(fn, list) > -1 :
                        list.length > 0;
                },

                // Remove all callbacks from the list
                empty: function() {
                    if (list) {
                        list = [];
                    }
                    return this;
                },

                // Disable .fire and .add
                // Abort any current/pending executions
                // Clear all callbacks and values
                disable: function() {
                    locked = queue = [];
                    list = memory = "";
                    return this;
                },
                disabled: function() {
                    return !list;
                },

                // Disable .fire
                // Also disable .add unless we have memory (since it would have no effect)
                // Abort any pending executions
                lock: function() {
                    locked = queue = [];
                    if (!memory) {
                        list = memory = "";
                    }
                    return this;
                },
                locked: function() {
                    return !!locked;
                },

                // Call all callbacks with the given context and arguments
                fireWith: function(context, args) {
                    if (!locked) {
                        args = args || [];
                        args = [context, args.slice ? args.slice() : args];
                        queue.push(args);
                        if (!firing) {
                            fire();
                        }
                    }
                    return this;
                },

                // Call all the callbacks with the given arguments
                fire: function() {
                    self.fireWith(this, arguments);
                    return this;
                },

                // To know if the callbacks have already been called at least once
                fired: function() {
                    return !!fired;
                }
            };

        return self;
    };


    jQuery.extend({

        Deferred: function(func) {
            var tuples = [

                    // action, add listener, listener list, final state
                    ["resolve", "done", jQuery.Callbacks("once memory"), "resolved"],
                    ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"],
                    ["notify", "progress", jQuery.Callbacks("memory")]
                ],
                state = "pending",
                promise = {
                    state: function() {
                        return state;
                    },
                    always: function() {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    then: function( /* fnDone, fnFail, fnProgress */ ) {
                        var fns = arguments;
                        return jQuery.Deferred(function(newDefer) {
                            jQuery.each(tuples, function(i, tuple) {
                                var fn = jQuery.isFunction(fns[i]) && fns[i];

                                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                                deferred[tuple[1]](function() {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && jQuery.isFunction(returned.promise)) {
                                        returned.promise()
                                            .progress(newDefer.notify)
                                            .done(newDefer.resolve)
                                            .fail(newDefer.reject);
                                    } else {
                                        newDefer[tuple[0] + "With"](
                                            this === promise ? newDefer.promise() : this,
                                            fn ? [returned] : arguments
                                        );
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },

                    // Get a promise for this deferred
                    // If obj is provided, the promise aspect is added to the object
                    promise: function(obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                },
                deferred = {};

            // Keep pipe for back-compat
            promise.pipe = promise.then;

            // Add list-specific methods
            jQuery.each(tuples, function(i, tuple) {
                var list = tuple[2],
                    stateString = tuple[3];

                // promise[ done | fail | progress ] = list.add
                promise[tuple[1]] = list.add;

                // Handle state
                if (stateString) {
                    list.add(function() {

                        // state = [ resolved | rejected ]
                        state = stateString;

                        // [ reject_list | resolve_list ].disable; progress_list.lock
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }

                // deferred[ resolve | reject | notify ]
                deferred[tuple[0]] = function() {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + "With"] = list.fireWith;
            });

            // Make the deferred a promise
            promise.promise(deferred);

            // Call given func if any
            if (func) {
                func.call(deferred, deferred);
            }

            // All done!
            return deferred;
        },

        // Deferred helper
        when: function(subordinate /* , ..., subordinateN */ ) {
            var i = 0,
                resolveValues = slice.call(arguments),
                length = resolveValues.length,

                // the count of uncompleted subordinates
                remaining = length !== 1 ||
                (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0,

                // the master Deferred.
                // If resolveValues consist of only a single Deferred, just use that.
                deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

                // Update function for both resolve and progress values
                updateFunc = function(i, contexts, values) {
                    return function(value) {
                        contexts[i] = this;
                        values[i] = arguments.length > 1 ? slice.call(arguments) : value;
                        if (values === progressValues) {
                            deferred.notifyWith(contexts, values);
                        } else if (!(--remaining)) {
                            deferred.resolveWith(contexts, values);
                        }
                    };
                },

                progressValues, progressContexts, resolveContexts;

            // Add listeners to Deferred subordinates; treat others as resolved
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (; i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise()
                            .progress(updateFunc(i, progressContexts, progressValues))
                            .done(updateFunc(i, resolveContexts, resolveValues))
                            .fail(deferred.reject);
                    } else {
                        --remaining;
                    }
                }
            }

            // If we're not waiting on anything, resolve the master
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }

            return deferred.promise();
        }
    });


    // The deferred used on DOM ready
    var readyList;

    jQuery.fn.ready = function(fn) {

        // Add the callback
        jQuery.ready.promise().done(fn);

        return this;
    };

    jQuery.extend({

        // Is the DOM ready to be used? Set to true once it occurs.
        isReady: false,

        // A counter to track how many items to wait for before
        // the ready event fires. See #6781
        readyWait: 1,

        // Hold (or release) the ready event
        holdReady: function(hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },

        // Handle when the DOM is ready
        ready: function(wait) {

            // Abort if there are pending holds or we're already ready
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }

            // Remember that the DOM is ready
            jQuery.isReady = true;

            // If a normal DOM Ready event fired, decrement, and wait if need be
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }

            // If there are functions bound, to execute
            readyList.resolveWith(document, [jQuery]);

            // Trigger any bound ready events
            if (jQuery.fn.triggerHandler) {
                jQuery(document).triggerHandler("ready");
                jQuery(document).off("ready");
            }
        }
    });

    /**
     * The ready event handler and self cleanup method
     */
    function completed() {
        document.removeEventListener("DOMContentLoaded", completed);
        window.removeEventListener("load", completed);
        jQuery.ready();
    }

    jQuery.ready.promise = function(obj) {
        if (!readyList) {

            readyList = jQuery.Deferred();

            // Catch cases where $(document).ready() is called
            // after the browser event has already occurred.
            // Support: IE9-10 only
            // Older IE sometimes signals "interactive" too soon
            if (document.readyState === "complete" ||
                (document.readyState !== "loading" && !document.documentElement.doScroll)) {

                // Handle it asynchronously to allow scripts the opportunity to delay ready
                window.setTimeout(jQuery.ready);

            } else {

                // Use the handy event callback
                document.addEventListener("DOMContentLoaded", completed);

                // A fallback to window.onload, that will always work
                window.addEventListener("load", completed);
            }
        }
        return readyList.promise(obj);
    };

    // Kick off the DOM ready check even if the user does not
    jQuery.ready.promise();




    // Multifunctional method to get and set values of a collection
    // The value/s can optionally be executed if it's a function
    var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
        var i = 0,
            len = elems.length,
            bulk = key == null;

        // Sets many values
        if (jQuery.type(key) === "object") {
            chainable = true;
            for (i in key) {
                access(elems, fn, i, key[i], true, emptyGet, raw);
            }

            // Sets one value
        } else if (value !== undefined) {
            chainable = true;

            if (!jQuery.isFunction(value)) {
                raw = true;
            }

            if (bulk) {

                // Bulk operations run against the entire set
                if (raw) {
                    fn.call(elems, value);
                    fn = null;

                    // ...except when executing function values
                } else {
                    bulk = fn;
                    fn = function(elem, key, value) {
                        return bulk.call(jQuery(elem), value);
                    };
                }
            }

            if (fn) {
                for (; i < len; i++) {
                    fn(
                        elems[i], key, raw ?
                        value :
                        value.call(elems[i], i, fn(elems[i], key))
                    );
                }
            }
        }

        return chainable ?
            elems :

            // Gets
            bulk ?
            fn.call(elems) :
            len ? fn(elems[0], key) : emptyGet;
    };
    var acceptData = function(owner) {

        // Accepts only:
        //  - Node
        //    - Node.ELEMENT_NODE
        //    - Node.DOCUMENT_NODE
        //  - Object
        //    - Any
        /* jshint -W018 */
        return owner.nodeType === 1 || owner.nodeType === 9 || !(+owner.nodeType);
    };




    function Data() {
        this.expando = jQuery.expando + Data.uid++;
    }

    Data.uid = 1;

    Data.prototype = {

        register: function(owner, initial) {
            var value = initial || {};

            // If it is a node unlikely to be stringify-ed or looped over
            // use plain assignment
            if (owner.nodeType) {
                owner[this.expando] = value;

                // Otherwise secure it in a non-enumerable, non-writable property
                // configurability must be true to allow the property to be
                // deleted with the delete operator
            } else {
                Object.defineProperty(owner, this.expando, {
                    value: value,
                    writable: true,
                    configurable: true
                });
            }
            return owner[this.expando];
        },
        cache: function(owner) {

            // We can accept data for non-element nodes in modern browsers,
            // but we should not, see #8335.
            // Always return an empty object.
            if (!acceptData(owner)) {
                return {};
            }

            // Check if the owner object already has a cache
            var value = owner[this.expando];

            // If not, create one
            if (!value) {
                value = {};

                // We can accept data for non-element nodes in modern browsers,
                // but we should not, see #8335.
                // Always return an empty object.
                if (acceptData(owner)) {

                    // If it is a node unlikely to be stringify-ed or looped over
                    // use plain assignment
                    if (owner.nodeType) {
                        owner[this.expando] = value;

                        // Otherwise secure it in a non-enumerable property
                        // configurable must be true to allow the property to be
                        // deleted when data is removed
                    } else {
                        Object.defineProperty(owner, this.expando, {
                            value: value,
                            configurable: true
                        });
                    }
                }
            }

            return value;
        },
        set: function(owner, data, value) {
            var prop,
                cache = this.cache(owner);

            // Handle: [ owner, key, value ] args
            if (typeof data === "string") {
                cache[data] = value;

                // Handle: [ owner, { properties } ] args
            } else {

                // Copy the properties one-by-one to the cache object
                for (prop in data) {
                    cache[prop] = data[prop];
                }
            }
            return cache;
        },
        get: function(owner, key) {
            return key === undefined ?
                this.cache(owner) :
                owner[this.expando] && owner[this.expando][key];
        },
        access: function(owner, key, value) {
            var stored;

            // In cases where either:
            //
            //   1. No key was specified
            //   2. A string key was specified, but no value provided
            //
            // Take the "read" path and allow the get method to determine
            // which value to return, respectively either:
            //
            //   1. The entire cache object
            //   2. The data stored at the key
            //
            if (key === undefined ||
                ((key && typeof key === "string") && value === undefined)) {

                stored = this.get(owner, key);

                return stored !== undefined ?
                    stored : this.get(owner, jQuery.camelCase(key));
            }

            // When the key is not a string, or both a key and value
            // are specified, set or extend (existing objects) with either:
            //
            //   1. An object of properties
            //   2. A key and value
            //
            this.set(owner, key, value);

            // Since the "set" path can have two possible entry points
            // return the expected data based on which path was taken[*]
            return value !== undefined ? value : key;
        },
        remove: function(owner, key) {
            var i, name, camel,
                cache = owner[this.expando];

            if (cache === undefined) {
                return;
            }

            if (key === undefined) {
                this.register(owner);

            } else {

                // Support array or space separated string of keys
                if (jQuery.isArray(key)) {

                    // If "name" is an array of keys...
                    // When data is initially created, via ("key", "val") signature,
                    // keys will be converted to camelCase.
                    // Since there is no way to tell _how_ a key was added, remove
                    // both plain key and camelCase key. #12786
                    // This will only penalize the array argument path.
                    name = key.concat(key.map(jQuery.camelCase));
                } else {
                    camel = jQuery.camelCase(key);

                    // Try the string as a key before any manipulation
                    if (key in cache) {
                        name = [key, camel];
                    } else {

                        // If a key with the spaces exists, use it.
                        // Otherwise, create an array by matching non-whitespace
                        name = camel;
                        name = name in cache ? [name] : (name.match(rnotwhite) || []);
                    }
                }

                i = name.length;

                while (i--) {
                    delete cache[name[i]];
                }
            }

            // Remove the expando if there's no more data
            if (key === undefined || jQuery.isEmptyObject(cache)) {

                // Support: Chrome <= 35-45+
                // Webkit & Blink performance suffers when deleting properties
                // from DOM nodes, so set to undefined instead
                // https://code.google.com/p/chromium/issues/detail?id=378607
                if (owner.nodeType) {
                    owner[this.expando] = undefined;
                } else {
                    delete owner[this.expando];
                }
            }
        },
        hasData: function(owner) {
            var cache = owner[this.expando];
            return cache !== undefined && !jQuery.isEmptyObject(cache);
        }
    };
    var dataPriv = new Data();

    var dataUser = new Data();



    //	Implementation Summary
    //
    //	1. Enforce API surface and semantic compatibility with 1.9.x branch
    //	2. Improve the module's maintainability by reducing the storage
    //		paths to a single mechanism.
    //	3. Use the same single mechanism to support "private" and "user" data.
    //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
    //	5. Avoid exposing implementation details on user objects (eg. expando properties)
    //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

    var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
        rmultiDash = /[A-Z]/g;

    function dataAttr(elem, key, data) {
        var name;

        // If nothing was found internally, try to fetch any
        // data from the HTML5 data-* attribute
        if (data === undefined && elem.nodeType === 1) {
            name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
            data = elem.getAttribute(name);

            if (typeof data === "string") {
                try {
                    data = data === "true" ? true :
                        data === "false" ? false :
                        data === "null" ? null :

                        // Only convert to a number if it doesn't change the string
                        +data + "" === data ? +data :
                        rbrace.test(data) ? jQuery.parseJSON(data) :
                        data;
                } catch (e) {}

                // Make sure we set the data so it isn't changed later
                dataUser.set(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }

    jQuery.extend({
        hasData: function(elem) {
            return dataUser.hasData(elem) || dataPriv.hasData(elem);
        },

        data: function(elem, name, data) {
            return dataUser.access(elem, name, data);
        },

        removeData: function(elem, name) {
            dataUser.remove(elem, name);
        },

        // TODO: Now that all calls to _data and _removeData have been replaced
        // with direct calls to dataPriv methods, these can be deprecated.
        _data: function(elem, name, data) {
            return dataPriv.access(elem, name, data);
        },

        _removeData: function(elem, name) {
            dataPriv.remove(elem, name);
        }
    });

    jQuery.fn.extend({
        data: function(key, value) {
            var i, name, data,
                elem = this[0],
                attrs = elem && elem.attributes;

            // Gets all values
            if (key === undefined) {
                if (this.length) {
                    data = dataUser.get(elem);

                    if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
                        i = attrs.length;
                        while (i--) {

                            // Support: IE11+
                            // The attrs elements can be null (#14894)
                            if (attrs[i]) {
                                name = attrs[i].name;
                                if (name.indexOf("data-") === 0) {
                                    name = jQuery.camelCase(name.slice(5));
                                    dataAttr(elem, name, data[name]);
                                }
                            }
                        }
                        dataPriv.set(elem, "hasDataAttrs", true);
                    }
                }

                return data;
            }

            // Sets multiple values
            if (typeof key === "object") {
                return this.each(function() {
                    dataUser.set(this, key);
                });
            }

            return access(this, function(value) {
                var data, camelKey;

                // The calling jQuery object (element matches) is not empty
                // (and therefore has an element appears at this[ 0 ]) and the
                // `value` parameter was not undefined. An empty jQuery object
                // will result in `undefined` for elem = this[ 0 ] which will
                // throw an exception if an attempt to read a data cache is made.
                if (elem && value === undefined) {

                    // Attempt to get data from the cache
                    // with the key as-is
                    data = dataUser.get(elem, key) ||

                        // Try to find dashed key if it exists (gh-2779)
                        // This is for 2.2.x only
                        dataUser.get(elem, key.replace(rmultiDash, "-$&").toLowerCase());

                    if (data !== undefined) {
                        return data;
                    }

                    camelKey = jQuery.camelCase(key);

                    // Attempt to get data from the cache
                    // with the key camelized
                    data = dataUser.get(elem, camelKey);
                    if (data !== undefined) {
                        return data;
                    }

                    // Attempt to "discover" the data in
                    // HTML5 custom data-* attrs
                    data = dataAttr(elem, camelKey, undefined);
                    if (data !== undefined) {
                        return data;
                    }

                    // We tried really hard, but the data doesn't exist.
                    return;
                }

                // Set the data...
                camelKey = jQuery.camelCase(key);
                this.each(function() {

                    // First, attempt to store a copy or reference of any
                    // data that might've been store with a camelCased key.
                    var data = dataUser.get(this, camelKey);

                    // For HTML5 data-* attribute interop, we have to
                    // store property names with dashes in a camelCase form.
                    // This might not apply to all properties...*
                    dataUser.set(this, camelKey, value);

                    // *... In the case of properties that might _actually_
                    // have dashes, we need to also store a copy of that
                    // unchanged property.
                    if (key.indexOf("-") > -1 && data !== undefined) {
                        dataUser.set(this, key, value);
                    }
                });
            }, null, value, arguments.length > 1, null, true);
        },

        removeData: function(key) {
            return this.each(function() {
                dataUser.remove(this, key);
            });
        }
    });


    jQuery.extend({
        queue: function(elem, type, data) {
            var queue;

            if (elem) {
                type = (type || "fx") + "queue";
                queue = dataPriv.get(elem, type);

                // Speed up dequeue by getting out quickly if this is just a lookup
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = dataPriv.access(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },

        dequeue: function(elem, type) {
            type = type || "fx";

            var queue = jQuery.queue(elem, type),
                startLength = queue.length,
                fn = queue.shift(),
                hooks = jQuery._queueHooks(elem, type),
                next = function() {
                    jQuery.dequeue(elem, type);
                };

            // If the fx queue is dequeued, always remove the progress sentinel
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--;
            }

            if (fn) {

                // Add a progress sentinel to prevent the fx queue from being
                // automatically dequeued
                if (type === "fx") {
                    queue.unshift("inprogress");
                }

                // Clear up the last queue stop function
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }

            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },

        // Not public - generate a queueHooks object, or return the current one
        _queueHooks: function(elem, type) {
            var key = type + "queueHooks";
            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
                empty: jQuery.Callbacks("once memory").add(function() {
                    dataPriv.remove(elem, [type + "queue", key]);
                })
            });
        }
    });

    jQuery.fn.extend({
        queue: function(type, data) {
            var setter = 2;

            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--;
            }

            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }

            return data === undefined ?
                this :
                this.each(function() {
                    var queue = jQuery.queue(this, type, data);

                    // Ensure a hooks for this queue
                    jQuery._queueHooks(this, type);

                    if (type === "fx" && queue[0] !== "inprogress") {
                        jQuery.dequeue(this, type);
                    }
                });
        },
        dequeue: function(type) {
            return this.each(function() {
                jQuery.dequeue(this, type);
            });
        },
        clearQueue: function(type) {
            return this.queue(type || "fx", []);
        },

        // Get a promise resolved when queues of a certain type
        // are emptied (fx is the type by default)
        promise: function(type, obj) {
            var tmp,
                count = 1,
                defer = jQuery.Deferred(),
                elements = this,
                i = this.length,
                resolve = function() {
                    if (!(--count)) {
                        defer.resolveWith(elements, [elements]);
                    }
                };

            if (typeof type !== "string") {
                obj = type;
                type = undefined;
            }
            type = type || "fx";

            while (i--) {
                tmp = dataPriv.get(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

    var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");


    var cssExpand = ["Top", "Right", "Bottom", "Left"];

    var isHidden = function(elem, el) {

        // isHidden might be called from jQuery#filter function;
        // in that case, element will be second argument
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" ||
            !jQuery.contains(elem.ownerDocument, elem);
    };



    function adjustCSS(elem, prop, valueParts, tween) {
        var adjusted,
            scale = 1,
            maxIterations = 20,
            currentValue = tween ?
            function() {
                return tween.cur();
            } :
            function() {
                return jQuery.css(elem, prop, "");
            },
            initial = currentValue(),
            unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),

            // Starting value computation is required for potential unit mismatches
            initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) &&
            rcssNum.exec(jQuery.css(elem, prop));

        if (initialInUnit && initialInUnit[3] !== unit) {

            // Trust units reported by jQuery.css
            unit = unit || initialInUnit[3];

            // Make sure we update the tween properties later on
            valueParts = valueParts || [];

            // Iteratively approximate from a nonzero starting point
            initialInUnit = +initial || 1;

            do {

                // If previous iteration zeroed out, double until we get *something*.
                // Use string for doubling so we don't accidentally see scale as unchanged below
                scale = scale || ".5";

                // Adjust and apply
                initialInUnit = initialInUnit / scale;
                jQuery.style(elem, prop, initialInUnit + unit);

                // Update scale, tolerating zero or NaN from tween.cur()
                // Break the loop if scale is unchanged or perfect, or if we've just had enough.
            } while (
                scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations
            );
        }

        if (valueParts) {
            initialInUnit = +initialInUnit || +initial || 0;

            // Apply relative offset (+=/-=) if specified
            adjusted = valueParts[1] ?
                initialInUnit + (valueParts[1] + 1) * valueParts[2] :
                +valueParts[2];
            if (tween) {
                tween.unit = unit;
                tween.start = initialInUnit;
                tween.end = adjusted;
            }
        }
        return adjusted;
    }
    var rcheckableType = (/^(?:checkbox|radio)$/i);

    var rtagName = (/<([\w:-]+)/);

    var rscriptType = (/^$|\/(?:java|ecma)script/i);



    // We have to close these tags to support XHTML (#13200)
    var wrapMap = {

        // Support: IE9
        option: [1, "<select multiple='multiple'>", "</select>"],

        // XHTML parsers do not magically insert elements in the
        // same way that tag soup parsers do. So we cannot shorten
        // this by omitting <tbody> or other required elements.
        thead: [1, "<table>", "</table>"],
        col: [2, "<table><colgroup>", "</colgroup></table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

        _default: [0, "", ""]
    };

    // Support: IE9
    wrapMap.optgroup = wrapMap.option;

    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;


    function getAll(context, tag) {

        // Support: IE9-11+
        // Use typeof to avoid zero-argument method invocation on host objects (#15151)
        var ret = typeof context.getElementsByTagName !== "undefined" ?
            context.getElementsByTagName(tag || "*") :
            typeof context.querySelectorAll !== "undefined" ?
            context.querySelectorAll(tag || "*") : [];

        return tag === undefined || tag && jQuery.nodeName(context, tag) ?
            jQuery.merge([context], ret) :
            ret;
    }


    // Mark scripts as having already been evaluated
    function setGlobalEval(elems, refElements) {
        var i = 0,
            l = elems.length;

        for (; i < l; i++) {
            dataPriv.set(
                elems[i],
                "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval")
            );
        }
    }


    var rhtml = /<|&#?\w+;/;

    function buildFragment(elems, context, scripts, selection, ignored) {
        var elem, tmp, tag, wrap, contains, j,
            fragment = context.createDocumentFragment(),
            nodes = [],
            i = 0,
            l = elems.length;

        for (; i < l; i++) {
            elem = elems[i];

            if (elem || elem === 0) {

                // Add nodes directly
                if (jQuery.type(elem) === "object") {

                    // Support: Android<4.1, PhantomJS<2
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

                    // Convert non-html into a text node
                } else if (!rhtml.test(elem)) {
                    nodes.push(context.createTextNode(elem));

                    // Convert html into DOM nodes
                } else {
                    tmp = tmp || fragment.appendChild(context.createElement("div"));

                    // Deserialize a standard representation
                    tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                    wrap = wrapMap[tag] || wrapMap._default;
                    tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

                    // Descend through wrappers to the right content
                    j = wrap[0];
                    while (j--) {
                        tmp = tmp.lastChild;
                    }

                    // Support: Android<4.1, PhantomJS<2
                    // push.apply(_, arraylike) throws on ancient WebKit
                    jQuery.merge(nodes, tmp.childNodes);

                    // Remember the top-level container
                    tmp = fragment.firstChild;

                    // Ensure the created nodes are orphaned (#12392)
                    tmp.textContent = "";
                }
            }
        }

        // Remove wrapper from fragment
        fragment.textContent = "";

        i = 0;
        while ((elem = nodes[i++])) {

            // Skip elements already in the context collection (trac-4087)
            if (selection && jQuery.inArray(elem, selection) > -1) {
                if (ignored) {
                    ignored.push(elem);
                }
                continue;
            }

            contains = jQuery.contains(elem.ownerDocument, elem);

            // Append to fragment
            tmp = getAll(fragment.appendChild(elem), "script");

            // Preserve script evaluation history
            if (contains) {
                setGlobalEval(tmp);
            }

            // Capture executables
            if (scripts) {
                j = 0;
                while ((elem = tmp[j++])) {
                    if (rscriptType.test(elem.type || "")) {
                        scripts.push(elem);
                    }
                }
            }
        }

        return fragment;
    }


    (function() {
        var fragment = document.createDocumentFragment(),
            div = fragment.appendChild(document.createElement("div")),
            input = document.createElement("input");

        // Support: Android 4.0-4.3, Safari<=5.1
        // Check state lost if the name is set (#11217)
        // Support: Windows Web Apps (WWA)
        // `name` and `type` must use .setAttribute for WWA (#14901)
        input.setAttribute("type", "radio");
        input.setAttribute("checked", "checked");
        input.setAttribute("name", "t");

        div.appendChild(input);

        // Support: Safari<=5.1, Android<4.2
        // Older WebKit doesn't clone checked state correctly in fragments
        support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

        // Support: IE<=11+
        // Make sure textarea (and checkbox) defaultValue is properly cloned
        div.innerHTML = "<textarea>x</textarea>";
        support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
    })();


    var
        rkeyEvent = /^key/,
        rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
        rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

    function returnTrue() {
        return true;
    }

    function returnFalse() {
        return false;
    }

    // Support: IE9
    // See #13393 for more info
    function safeActiveElement() {
        try {
            return document.activeElement;
        } catch (err) {}
    }

    function on(elem, types, selector, data, fn, one) {
        var origFn, type;

        // Types can be a map of types/handlers
        if (typeof types === "object") {

            // ( types-Object, selector, data )
            if (typeof selector !== "string") {

                // ( types-Object, data )
                data = data || selector;
                selector = undefined;
            }
            for (type in types) {
                on(elem, type, selector, data, types[type], one);
            }
            return elem;
        }

        if (data == null && fn == null) {

            // ( types, fn )
            fn = selector;
            data = selector = undefined;
        } else if (fn == null) {
            if (typeof selector === "string") {

                // ( types, selector, fn )
                fn = data;
                data = undefined;
            } else {

                // ( types, data, fn )
                fn = data;
                data = selector;
                selector = undefined;
            }
        }
        if (fn === false) {
            fn = returnFalse;
        } else if (!fn) {
            return this;
        }

        if (one === 1) {
            origFn = fn;
            fn = function(event) {

                // Can use an empty set, since event contains the info
                jQuery().off(event);
                return origFn.apply(this, arguments);
            };

            // Use same guid so caller can remove using origFn
            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
        }
        return elem.each(function() {
            jQuery.event.add(this, types, fn, data, selector);
        });
    }

    /*
     * Helper functions for managing events -- not part of the public interface.
     * Props to Dean Edwards' addEvent library for many of the ideas.
     */
    jQuery.event = {

        global: {},

        add: function(elem, types, handler, data, selector) {

            var handleObjIn, eventHandle, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = dataPriv.get(elem);

            // Don't attach events to noData or text/comment nodes (but allow plain objects)
            if (!elemData) {
                return;
            }

            // Caller can pass in an object of custom data in lieu of the handler
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }

            // Make sure that the handler has a unique ID, used to find/remove it later
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }

            // Init the element's event structure and main handler, if this is the first
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function(e) {

                    // Discard the second event of a jQuery.event.trigger() and
                    // when an event is called after a page has unloaded
                    return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
                        jQuery.event.dispatch.apply(elem, arguments) : undefined;
                };
            }

            // Handle multiple events separated by a space
            types = (types || "").match(rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // There *must* be a type, no attaching namespace-only handlers
                if (!type) {
                    continue;
                }

                // If event changes its type, use the special event handlers for the changed type
                special = jQuery.event.special[type] || {};

                // If selector defined, determine special event api type, otherwise given type
                type = (selector ? special.delegateType : special.bindType) || type;

                // Update special based on newly reset type
                special = jQuery.event.special[type] || {};

                // handleObj is passed to all event handlers
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);

                // Init the event handler queue if we're the first
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;

                    // Only use addEventListener if the special events handler returns false
                    if (!special.setup ||
                        special.setup.call(elem, data, namespaces, eventHandle) === false) {

                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle);
                        }
                    }
                }

                if (special.add) {
                    special.add.call(elem, handleObj);

                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }

                // Add to the element's handler list, delegates in front
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }

                // Keep track of which events have ever been used, for event optimization
                jQuery.event.global[type] = true;
            }

        },

        // Detach an event or set of events from an element
        remove: function(elem, types, handler, selector, mappedTypes) {

            var j, origCount, tmp,
                events, t, handleObj,
                special, handlers, type, namespaces, origType,
                elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

            if (!elemData || !(events = elemData.events)) {
                return;
            }

            // Once for each type.namespace in types; type may be omitted
            types = (types || "").match(rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();

                // Unbind all events (on this namespace, if provided) for the element
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }

                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] &&
                    new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

                // Remove matching events
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];

                    if ((mappedTypes || origType === handleObj.origType) &&
                        (!handler || handler.guid === handleObj.guid) &&
                        (!tmp || tmp.test(handleObj.namespace)) &&
                        (!selector || selector === handleObj.selector ||
                            selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);

                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }

                // Remove generic event handler if we removed something and no more handlers exist
                // (avoids potential for endless recursion during removal of special event handlers)
                if (origCount && !handlers.length) {
                    if (!special.teardown ||
                        special.teardown.call(elem, namespaces, elemData.handle) === false) {

                        jQuery.removeEvent(elem, type, elemData.handle);
                    }

                    delete events[type];
                }
            }

            // Remove data and the expando if it's no longer used
            if (jQuery.isEmptyObject(events)) {
                dataPriv.remove(elem, "handle events");
            }
        },

        dispatch: function(event) {

            // Make a writable jQuery.Event from the native event object
            event = jQuery.event.fix(event);

            var i, j, ret, matched, handleObj,
                handlerQueue = [],
                args = slice.call(arguments),
                handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
                special = jQuery.event.special[event.type] || {};

            // Use the fix-ed jQuery.Event rather than the (read-only) native event
            args[0] = event;
            event.delegateTarget = this;

            // Call the preDispatch hook for the mapped type, and let it bail if desired
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }

            // Determine handlers
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);

            // Run delegates first; they may want to stop propagation beneath us
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;

                j = 0;
                while ((handleObj = matched.handlers[j++]) &&
                    !event.isImmediatePropagationStopped()) {

                    // Triggered event must either 1) have no namespace, or 2) have namespace(s)
                    // a subset or equal to those in the bound event (both can have no namespace).
                    if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

                        event.handleObj = handleObj;
                        event.data = handleObj.data;

                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle ||
                            handleObj.handler).apply(matched.elem, args);

                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }

            // Call the postDispatch hook for the mapped type
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }

            return event.result;
        },

        handlers: function(event, handlers) {
            var i, matches, sel, handleObj,
                handlerQueue = [],
                delegateCount = handlers.delegateCount,
                cur = event.target;

            // Support (at least): Chrome, IE9
            // Find delegate handlers
            // Black-hole SVG <use> instance trees (#13180)
            //
            // Support: Firefox<=42+
            // Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
            if (delegateCount && cur.nodeType &&
                (event.type !== "click" || isNaN(event.button) || event.button < 1)) {

                for (; cur !== this; cur = cur.parentNode || this) {

                    // Don't check non-elements (#13208)
                    // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];

                            // Don't conflict with Object.prototype properties (#13203)
                            sel = handleObj.selector + " ";

                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ?
                                    jQuery(sel, this).index(cur) > -1 :
                                    jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }

            // Add the remaining (directly-bound) handlers
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }

            return handlerQueue;
        },

        // Includes some event props shared by KeyEvent and MouseEvent
        props: ("altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
            "metaKey relatedTarget shiftKey target timeStamp view which").split(" "),

        fixHooks: {},

        keyHooks: {
            props: "char charCode key keyCode".split(" "),
            filter: function(event, original) {

                // Add which for key events
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }

                return event;
            }
        },

        mouseHooks: {
            props: ("button buttons clientX clientY offsetX offsetY pageX pageY " +
                "screenX screenY toElement").split(" "),
            filter: function(event, original) {
                var eventDoc, doc, body,
                    button = original.button;

                // Calculate pageX/Y if missing and clientX/Y available
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;

                    event.pageX = original.clientX +
                        (doc && doc.scrollLeft || body && body.scrollLeft || 0) -
                        (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY +
                        (doc && doc.scrollTop || body && body.scrollTop || 0) -
                        (doc && doc.clientTop || body && body.clientTop || 0);
                }

                // Add which for click: 1 === left; 2 === middle; 3 === right
                // Note: button is not normalized, so don't use it
                if (!event.which && button !== undefined) {
                    event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));
                }

                return event;
            }
        },

        fix: function(event) {
            if (event[jQuery.expando]) {
                return event;
            }

            // Create a writable copy of the event object and normalize some properties
            var i, prop, copy,
                type = event.type,
                originalEvent = event,
                fixHook = this.fixHooks[type];

            if (!fixHook) {
                this.fixHooks[type] = fixHook =
                    rmouseEvent.test(type) ? this.mouseHooks :
                    rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;

            event = new jQuery.Event(originalEvent);

            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }

            // Support: Cordova 2.5 (WebKit) (#13255)
            // All events should have a target; Cordova deviceready doesn't
            if (!event.target) {
                event.target = document;
            }

            // Support: Safari 6.0+, Chrome<28
            // Target should not be a text node (#504, #13143)
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }

            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },

        special: {
            load: {

                // Prevent triggered image.load events from bubbling to window.load
                noBubble: true
            },
            focus: {

                // Fire native event if possible so blur/focus sequence is correct
                trigger: function() {
                    if (this !== safeActiveElement() && this.focus) {
                        this.focus();
                        return false;
                    }
                },
                delegateType: "focusin"
            },
            blur: {
                trigger: function() {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: "focusout"
            },
            click: {

                // For checkbox, fire native event so checked state will be right
                trigger: function() {
                    if (this.type === "checkbox" && this.click && jQuery.nodeName(this, "input")) {
                        this.click();
                        return false;
                    }
                },

                // For cross-browser consistency, don't fire native .click() on links
                _default: function(event) {
                    return jQuery.nodeName(event.target, "a");
                }
            },

            beforeunload: {
                postDispatch: function(event) {

                    // Support: Firefox 20+
                    // Firefox doesn't alert if the returnValue field is not set.
                    if (event.result !== undefined && event.originalEvent) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        }
    };

    jQuery.removeEvent = function(elem, type, handle) {

        // This "if" is needed for plain objects
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle);
        }
    };

    jQuery.Event = function(src, props) {

        // Allow instantiation without the 'new' keyword
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }

        // Event object
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;

            // Events bubbling up the document may have been marked as prevented
            // by a handler lower down the tree; reflect the correct value.
            this.isDefaultPrevented = src.defaultPrevented ||
                src.defaultPrevented === undefined &&

                // Support: Android<4.0
                src.returnValue === false ?
                returnTrue :
                returnFalse;

            // Event type
        } else {
            this.type = src;
        }

        // Put explicitly provided properties onto the event object
        if (props) {
            jQuery.extend(this, props);
        }

        // Create a timestamp if incoming event doesn't have one
        this.timeStamp = src && src.timeStamp || jQuery.now();

        // Mark it as fixed
        this[jQuery.expando] = true;
    };

    // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
    // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
    jQuery.Event.prototype = {
        constructor: jQuery.Event,
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,

        preventDefault: function() {
            var e = this.originalEvent;

            this.isDefaultPrevented = returnTrue;

            if (e) {
                e.preventDefault();
            }
        },
        stopPropagation: function() {
            var e = this.originalEvent;

            this.isPropagationStopped = returnTrue;

            if (e) {
                e.stopPropagation();
            }
        },
        stopImmediatePropagation: function() {
            var e = this.originalEvent;

            this.isImmediatePropagationStopped = returnTrue;

            if (e) {
                e.stopImmediatePropagation();
            }

            this.stopPropagation();
        }
    };

    // Create mouseenter/leave events using mouseover/out and event-time checks
    // so that event delegation works in jQuery.
    // Do the same for pointerenter/pointerleave and pointerover/pointerout
    //
    // Support: Safari 7 only
    // Safari sends mouseenter too often; see:
    // https://code.google.com/p/chromium/issues/detail?id=470258
    // for the description of the bug (it existed in older Chrome versions as well).
    jQuery.each({
        mouseenter: "mouseover",
        mouseleave: "mouseout",
        pointerenter: "pointerover",
        pointerleave: "pointerout"
    }, function(orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,

            handle: function(event) {
                var ret,
                    target = this,
                    related = event.relatedTarget,
                    handleObj = event.handleObj;

                // For mouseenter/leave call the handler if related is outside the target.
                // NB: No relatedTarget if the mouse left/entered the browser window
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });

    jQuery.fn.extend({
        on: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn);
        },
        one: function(types, selector, data, fn) {
            return on(this, types, selector, data, fn, 1);
        },
        off: function(types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {

                // ( event )  dispatched jQuery.Event
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(
                    handleObj.namespace ?
                    handleObj.origType + "." + handleObj.namespace :
                    handleObj.origType,
                    handleObj.selector,
                    handleObj.handler
                );
                return this;
            }
            if (typeof types === "object") {

                // ( types-object [, selector] )
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === "function") {

                // ( types [, fn] )
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function() {
                jQuery.event.remove(this, types, fn, selector);
            });
        }
    });


    var
        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

        // Support: IE 10-11, Edge 10240+
        // In IE/Edge using regex groups here causes severe slowdowns.
        // See https://connect.microsoft.com/IE/feedback/details/1736512/
        rnoInnerhtml = /<script|<style|<link/i,

        // checked="checked" or checked
        rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
        rscriptTypeMasked = /^true\/(.*)/,
        rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

    function manipulationTarget(elem, content) {
        if (jQuery.nodeName(elem, "table") &&
            jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

            return elem.getElementsByTagName("tbody")[0] || elem;
        }

        return elem;
    }

    // Replace/restore the type attribute of script elements for safe DOM manipulation
    function disableScript(elem) {
        elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
        return elem;
    }

    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);

        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute("type");
        }

        return elem;
    }

    function cloneCopyEvent(src, dest) {
        var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

        if (dest.nodeType !== 1) {
            return;
        }

        // 1. Copy private data: events, handlers, etc.
        if (dataPriv.hasData(src)) {
            pdataOld = dataPriv.access(src);
            pdataCur = dataPriv.set(dest, pdataOld);
            events = pdataOld.events;

            if (events) {
                delete pdataCur.handle;
                pdataCur.events = {};

                for (type in events) {
                    for (i = 0, l = events[type].length; i < l; i++) {
                        jQuery.event.add(dest, type, events[type][i]);
                    }
                }
            }
        }

        // 2. Copy user data
        if (dataUser.hasData(src)) {
            udataOld = dataUser.access(src);
            udataCur = jQuery.extend({}, udataOld);

            dataUser.set(dest, udataCur);
        }
    }

    // Fix IE bugs, see support tests
    function fixInput(src, dest) {
        var nodeName = dest.nodeName.toLowerCase();

        // Fails to persist the checked state of a cloned checkbox or radio button.
        if (nodeName === "input" && rcheckableType.test(src.type)) {
            dest.checked = src.checked;

            // Fails to return the selected option to the default selected state when cloning options
        } else if (nodeName === "input" || nodeName === "textarea") {
            dest.defaultValue = src.defaultValue;
        }
    }

    function domManip(collection, args, callback, ignored) {

        // Flatten any nested arrays
        args = concat.apply([], args);

        var fragment, first, scripts, hasScripts, node, doc,
            i = 0,
            l = collection.length,
            iNoClone = l - 1,
            value = args[0],
            isFunction = jQuery.isFunction(value);

        // We can't cloneNode fragments that contain checked, in WebKit
        if (isFunction ||
            (l > 1 && typeof value === "string" &&
                !support.checkClone && rchecked.test(value))) {
            return collection.each(function(index) {
                var self = collection.eq(index);
                if (isFunction) {
                    args[0] = value.call(this, index, self.html());
                }
                domManip(self, args, callback, ignored);
            });
        }

        if (l) {
            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
            first = fragment.firstChild;

            if (fragment.childNodes.length === 1) {
                fragment = first;
            }

            // Require either new content or an interest in ignored elements to invoke the callback
            if (first || ignored) {
                scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                hasScripts = scripts.length;

                // Use the original fragment for the last item
                // instead of the first because it can end up
                // being emptied incorrectly in certain situations (#8070).
                for (; i < l; i++) {
                    node = fragment;

                    if (i !== iNoClone) {
                        node = jQuery.clone(node, true, true);

                        // Keep references to cloned scripts for later restoration
                        if (hasScripts) {

                            // Support: Android<4.1, PhantomJS<2
                            // push.apply(_, arraylike) throws on ancient WebKit
                            jQuery.merge(scripts, getAll(node, "script"));
                        }
                    }

                    callback.call(collection[i], node, i);
                }

                if (hasScripts) {
                    doc = scripts[scripts.length - 1].ownerDocument;

                    // Reenable scripts
                    jQuery.map(scripts, restoreScript);

                    // Evaluate executable scripts on first document insertion
                    for (i = 0; i < hasScripts; i++) {
                        node = scripts[i];
                        if (rscriptType.test(node.type || "") &&
                            !dataPriv.access(node, "globalEval") &&
                            jQuery.contains(doc, node)) {

                            if (node.src) {

                                // Optional AJAX dependency, but won't run scripts if not present
                                if (jQuery._evalUrl) {
                                    jQuery._evalUrl(node.src);
                                }
                            } else {
                                jQuery.globalEval(node.textContent.replace(rcleanScript, ""));
                            }
                        }
                    }
                }
            }
        }

        return collection;
    }

    function remove(elem, selector, keepData) {
        var node,
            nodes = selector ? jQuery.filter(selector, elem) : elem,
            i = 0;

        for (;
            (node = nodes[i]) != null; i++) {
            if (!keepData && node.nodeType === 1) {
                jQuery.cleanData(getAll(node));
            }

            if (node.parentNode) {
                if (keepData && jQuery.contains(node.ownerDocument, node)) {
                    setGlobalEval(getAll(node, "script"));
                }
                node.parentNode.removeChild(node);
            }
        }

        return elem;
    }

    jQuery.extend({
        htmlPrefilter: function(html) {
            return html.replace(rxhtmlTag, "<$1></$2>");
        },

        clone: function(elem, dataAndEvents, deepDataAndEvents) {
            var i, l, srcElements, destElements,
                clone = elem.cloneNode(true),
                inPage = jQuery.contains(elem.ownerDocument, elem);

            // Fix IE cloning issues
            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) &&
                !jQuery.isXMLDoc(elem)) {

                // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
                destElements = getAll(clone);
                srcElements = getAll(elem);

                for (i = 0, l = srcElements.length; i < l; i++) {
                    fixInput(srcElements[i], destElements[i]);
                }
            }

            // Copy the events from the original to the clone
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);

                    for (i = 0, l = srcElements.length; i < l; i++) {
                        cloneCopyEvent(srcElements[i], destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }

            // Preserve script evaluation history
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"));
            }

            // Return the cloned set
            return clone;
        },

        cleanData: function(elems) {
            var data, elem, type,
                special = jQuery.event.special,
                i = 0;

            for (;
                (elem = elems[i]) !== undefined; i++) {
                if (acceptData(elem)) {
                    if ((data = elem[dataPriv.expando])) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);

                                    // This is a shortcut to avoid jQuery.event.remove's overhead
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }

                        // Support: Chrome <= 35-45+
                        // Assign undefined instead of using delete, see Data#remove
                        elem[dataPriv.expando] = undefined;
                    }
                    if (elem[dataUser.expando]) {

                        // Support: Chrome <= 35-45+
                        // Assign undefined instead of using delete, see Data#remove
                        elem[dataUser.expando] = undefined;
                    }
                }
            }
        }
    });

    jQuery.fn.extend({

        // Keep domManip exposed until 3.0 (gh-2225)
        domManip: domManip,

        detach: function(selector) {
            return remove(this, selector, true);
        },

        remove: function(selector) {
            return remove(this, selector);
        },

        text: function(value) {
            return access(this, function(value) {
                return value === undefined ?
                    jQuery.text(this) :
                    this.empty().each(function() {
                        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                            this.textContent = value;
                        }
                    });
            }, null, value, arguments.length);
        },

        append: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem);
                }
            });
        },

        prepend: function() {
            return domManip(this, arguments, function(elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild);
                }
            });
        },

        before: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },

        after: function() {
            return domManip(this, arguments, function(elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },

        empty: function() {
            var elem,
                i = 0;

            for (;
                (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {

                    // Prevent memory leaks
                    jQuery.cleanData(getAll(elem, false));

                    // Remove any remaining nodes
                    elem.textContent = "";
                }
            }

            return this;
        },

        clone: function(dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

            return this.map(function() {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },

        html: function(value) {
            return access(this, function(value) {
                var elem = this[0] || {},
                    i = 0,
                    l = this.length;

                if (value === undefined && elem.nodeType === 1) {
                    return elem.innerHTML;
                }

                // See if we can take a shortcut and just use innerHTML
                if (typeof value === "string" && !rnoInnerhtml.test(value) &&
                    !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

                    value = jQuery.htmlPrefilter(value);

                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};

                            // Remove element nodes and prevent memory leaks
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }

                        elem = 0;

                        // If using innerHTML throws an exception, use the fallback method
                    } catch (e) {}
                }

                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },

        replaceWith: function() {
            var ignored = [];

            // Make the changes, replacing each non-ignored context element with the new content
            return domManip(this, arguments, function(elem) {
                var parent = this.parentNode;

                if (jQuery.inArray(this, ignored) < 0) {
                    jQuery.cleanData(getAll(this));
                    if (parent) {
                        parent.replaceChild(elem, this);
                    }
                }

                // Force callback invocation
            }, ignored);
        }
    });

    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function(name, original) {
        jQuery.fn[name] = function(selector) {
            var elems,
                ret = [],
                insert = jQuery(selector),
                last = insert.length - 1,
                i = 0;

            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);

                // Support: QtWebKit
                // .get() because push.apply(_, arraylike) throws
                push.apply(ret, elems.get());
            }

            return this.pushStack(ret);
        };
    });


    var iframe,
        elemdisplay = {

            // Support: Firefox
            // We have to pre-define these values for FF (#10227)
            HTML: "block",
            BODY: "block"
        };

    /**
     * Retrieve the actual display of a element
     * @param {String} name nodeName of the element
     * @param {Object} doc Document object
     */

    // Called only from within defaultDisplay
    function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body),

            display = jQuery.css(elem[0], "display");

        // We don't have any data stored on the element,
        // so use "detach" method as fast way to get rid of the element
        elem.detach();

        return display;
    }

    /**
     * Try to determine the default display value of an element
     * @param {String} nodeName
     */
    function defaultDisplay(nodeName) {
        var doc = document,
            display = elemdisplay[nodeName];

        if (!display) {
            display = actualDisplay(nodeName, doc);

            // If the simple way fails, read from inside an iframe
            if (display === "none" || !display) {

                // Use the already-created iframe if possible
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>"))
                    .appendTo(doc.documentElement);

                // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
                doc = iframe[0].contentDocument;

                // Support: IE
                doc.write();
                doc.close();

                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }

            // Store the correct default display
            elemdisplay[nodeName] = display;
        }

        return display;
    }
    var rmargin = (/^margin/);

    var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

    var getStyles = function(elem) {

        // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;

        if (!view.opener) {
            view = window;
        }

        return view.getComputedStyle(elem);
    };

    var swap = function(elem, options, callback, args) {
        var ret, name,
            old = {};

        // Remember the old values, and insert the new ones
        for (name in options) {
            old[name] = elem.style[name];
            elem.style[name] = options[name];
        }

        ret = callback.apply(elem, args || []);

        // Revert the old values
        for (name in options) {
            elem.style[name] = old[name];
        }

        return ret;
    };


    var documentElement = document.documentElement;



    (function() {
        var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
            container = document.createElement("div"),
            div = document.createElement("div");

        // Finish early in limited (non-browser) environments
        if (!div.style) {
            return;
        }

        // Support: IE9-11+
        // Style of cloned element affects source element cloned (#8908)
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";

        container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
            "padding:0;margin-top:1px;position:absolute";
        container.appendChild(div);

        // Executing both pixelPosition & boxSizingReliable tests require only one layout
        // so they're executed at the same time to save the second computation.
        function computeStyleTests() {
            div.style.cssText =

                // Support: Firefox<29, Android 2.3
                // Vendor-prefix box-sizing
                "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
                "position:relative;display:block;" +
                "margin:auto;border:1px;padding:1px;" +
                "top:1%;width:50%";
            div.innerHTML = "";
            documentElement.appendChild(container);

            var divStyle = window.getComputedStyle(div);
            pixelPositionVal = divStyle.top !== "1%";
            reliableMarginLeftVal = divStyle.marginLeft === "2px";
            boxSizingReliableVal = divStyle.width === "4px";

            // Support: Android 4.0 - 4.3 only
            // Some styles come back with percentage values, even though they shouldn't
            div.style.marginRight = "50%";
            pixelMarginRightVal = divStyle.marginRight === "4px";

            documentElement.removeChild(container);
        }

        jQuery.extend(support, {
            pixelPosition: function() {

                // This test is executed only once but we still do memoizing
                // since we can use the boxSizingReliable pre-computing.
                // No need to check if the test was already performed, though.
                computeStyleTests();
                return pixelPositionVal;
            },
            boxSizingReliable: function() {
                if (boxSizingReliableVal == null) {
                    computeStyleTests();
                }
                return boxSizingReliableVal;
            },
            pixelMarginRight: function() {

                // Support: Android 4.0-4.3
                // We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
                // since that compresses better and they're computed together anyway.
                if (boxSizingReliableVal == null) {
                    computeStyleTests();
                }
                return pixelMarginRightVal;
            },
            reliableMarginLeft: function() {

                // Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
                if (boxSizingReliableVal == null) {
                    computeStyleTests();
                }
                return reliableMarginLeftVal;
            },
            reliableMarginRight: function() {

                // Support: Android 2.3
                // Check if div with explicit width and no margin-right incorrectly
                // gets computed margin-right based on width of container. (#3333)
                // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                // This support function is only executed once so no memoizing is needed.
                var ret,
                    marginDiv = div.appendChild(document.createElement("div"));

                // Reset CSS: box-sizing; display; margin; border; padding
                marginDiv.style.cssText = div.style.cssText =

                    // Support: Android 2.3
                    // Vendor-prefix box-sizing
                    "-webkit-box-sizing:content-box;box-sizing:content-box;" +
                    "display:block;margin:0;border:0;padding:0";
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";
                documentElement.appendChild(container);

                ret = !parseFloat(window.getComputedStyle(marginDiv).marginRight);

                documentElement.removeChild(container);
                div.removeChild(marginDiv);

                return ret;
            }
        });
    })();


    function curCSS(elem, name, computed) {
        var width, minWidth, maxWidth, ret,
            style = elem.style;

        computed = computed || getStyles(elem);

        // Support: IE9
        // getPropertyValue is only needed for .css('filter') (#12537)
        if (computed) {
            ret = computed.getPropertyValue(name) || computed[name];

            if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                ret = jQuery.style(elem, name);
            }

            // A tribute to the "awesome hack by Dean Edwards"
            // Android Browser returns percentage for some values,
            // but width seems to be reliably pixels.
            // This is against the CSSOM draft spec:
            // http://dev.w3.org/csswg/cssom/#resolved-values
            if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

                // Remember the original values
                width = style.width;
                minWidth = style.minWidth;
                maxWidth = style.maxWidth;

                // Put in the new values to get a computed value out
                style.minWidth = style.maxWidth = style.width = ret;
                ret = computed.width;

                // Revert the changed values
                style.width = width;
                style.minWidth = minWidth;
                style.maxWidth = maxWidth;
            }
        }

        return ret !== undefined ?

            // Support: IE9-11+
            // IE returns zIndex value as an integer.
            ret + "" :
            ret;
    }


    function addGetHookIf(conditionFn, hookFn) {

        // Define the hook, we'll check on the first run if it's really needed.
        return {
            get: function() {
                if (conditionFn()) {

                    // Hook not needed (or it's not possible to use it due
                    // to missing dependency), remove it.
                    delete this.get;
                    return;
                }

                // Hook needed; redefine it so that the support test is not executed again.
                return (this.get = hookFn).apply(this, arguments);
            }
        };
    }


    var

    // Swappable if display is none or starts with table
    // except "table", "table-cell", or "table-caption"
    // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
        rdisplayswap = /^(none|table(?!-c[ea]).+)/,

        cssShow = {
            position: "absolute",
            visibility: "hidden",
            display: "block"
        },
        cssNormalTransform = {
            letterSpacing: "0",
            fontWeight: "400"
        },

        cssPrefixes = ["Webkit", "O", "Moz", "ms"],
        emptyStyle = document.createElement("div").style;

    // Return a css property mapped to a potentially vendor prefixed property
    function vendorPropName(name) {

        // Shortcut for names that are not vendor prefixed
        if (name in emptyStyle) {
            return name;
        }

        // Check for vendor prefixed names
        var capName = name[0].toUpperCase() + name.slice(1),
            i = cssPrefixes.length;

        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in emptyStyle) {
                return name;
            }
        }
    }

    function setPositiveNumber(elem, value, subtract) {

        // Any relative (+/-) values have already been
        // normalized at this point
        var matches = rcssNum.exec(value);
        return matches ?

            // Guard against undefined "subtract", e.g., when used as in cssHooks
            Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") :
            value;
    }

    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ?

            // If we already have the right measurement, avoid augmentation
            4 :

            // Otherwise initialize for horizontal or vertical properties
            name === "width" ? 1 : 0,

            val = 0;

        for (; i < 4; i += 2) {

            // Both box models exclude margin, so add it if we want it
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }

            if (isBorderBox) {

                // border-box includes padding, so remove it if we want content
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                }

                // At this point, extra isn't border nor margin, so remove border
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            } else {

                // At this point, extra isn't content, so add padding
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

                // At this point, extra isn't content nor padding, so add border
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
                }
            }
        }

        return val;
    }

    function getWidthOrHeight(elem, name, extra) {

        // Start with offset property, which is equivalent to the border-box value
        var valueIsBorderBox = true,
            val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
            styles = getStyles(elem),
            isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

        // Support: IE11 only
        // In IE 11 fullscreen elements inside of an iframe have
        // 100x too small dimensions (gh-1764).
        if (document.msFullscreenElement && window.top !== window) {

            // Support: IE11 only
            // Running getBoundingClientRect on a disconnected node
            // in IE throws an error.
            if (elem.getClientRects().length) {
                val = Math.round(elem.getBoundingClientRect()[name] * 100);
            }
        }

        // Some non-html elements return undefined for offsetWidth, so check for null/undefined
        // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
        // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
        if (val <= 0 || val == null) {

            // Fall back to computed then uncomputed css if necessary
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }

            // Computed unit is not pixels. Stop here and return.
            if (rnumnonpx.test(val)) {
                return val;
            }

            // Check for style in case a browser which returns unreliable values
            // for getComputedStyle silently falls back to the reliable elem.style
            valueIsBorderBox = isBorderBox &&
                (support.boxSizingReliable() || val === elem.style[name]);

            // Normalize "", auto, and prepare for extra
            val = parseFloat(val) || 0;
        }

        // Use the active box-sizing model to add/subtract irrelevant styles
        return (val +
            augmentWidthOrHeight(
                elem,
                name,
                extra || (isBorderBox ? "border" : "content"),
                valueIsBorderBox,
                styles
            )
        ) + "px";
    }

    function showHide(elements, show) {
        var display, elem, hidden,
            values = [],
            index = 0,
            length = elements.length;

        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }

            values[index] = dataPriv.get(elem, "olddisplay");
            display = elem.style.display;
            if (show) {

                // Reset the inline display of this element to learn if it is
                // being hidden by cascaded rules or not
                if (!values[index] && display === "none") {
                    elem.style.display = "";
                }

                // Set elements which have been overridden with display: none
                // in a stylesheet to whatever the default browser style is
                // for such an element
                if (elem.style.display === "" && isHidden(elem)) {
                    values[index] = dataPriv.access(
                        elem,
                        "olddisplay",
                        defaultDisplay(elem.nodeName)
                    );
                }
            } else {
                hidden = isHidden(elem);

                if (display !== "none" || !hidden) {
                    dataPriv.set(
                        elem,
                        "olddisplay",
                        hidden ? display : jQuery.css(elem, "display")
                    );
                }
            }
        }

        // Set the display of most of the elements in a second loop
        // to avoid the constant reflow
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === "none" || elem.style.display === "") {
                elem.style.display = show ? values[index] || "" : "none";
            }
        }

        return elements;
    }

    jQuery.extend({

        // Add in style property hooks for overriding the default
        // behavior of getting and setting a style property
        cssHooks: {
            opacity: {
                get: function(elem, computed) {
                    if (computed) {

                        // We should always get a number back from opacity
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret;
                    }
                }
            }
        },

        // Don't automatically add "px" to these possibly-unitless properties
        cssNumber: {
            "animationIterationCount": true,
            "columnCount": true,
            "fillOpacity": true,
            "flexGrow": true,
            "flexShrink": true,
            "fontWeight": true,
            "lineHeight": true,
            "opacity": true,
            "order": true,
            "orphans": true,
            "widows": true,
            "zIndex": true,
            "zoom": true
        },

        // Add in properties whose names you wish to fix before
        // setting or getting the value
        cssProps: {
            "float": "cssFloat"
        },

        // Get and set the style property on a DOM Node
        style: function(elem, name, value, extra) {

            // Don't set styles on text and comment nodes
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }

            // Make sure that we're working with the right name
            var ret, type, hooks,
                origName = jQuery.camelCase(name),
                style = elem.style;

            name = jQuery.cssProps[origName] ||
                (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

            // Gets hook for the prefixed version, then unprefixed version
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            // Check if we're setting a value
            if (value !== undefined) {
                type = typeof value;

                // Convert "+=" or "-=" to relative numbers (#7345)
                if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
                    value = adjustCSS(elem, name, ret);

                    // Fixes bug #9237
                    type = "number";
                }

                // Make sure that null and NaN values aren't set (#7116)
                if (value == null || value !== value) {
                    return;
                }

                // If a number was passed in, add the unit (except for certain CSS properties)
                if (type === "number") {
                    value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
                }

                // Support: IE9-11+
                // background-* props affect original clone's values
                if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit";
                }

                // If a hook was provided, use that value, otherwise just set the specified value
                if (!hooks || !("set" in hooks) ||
                    (value = hooks.set(elem, value, extra)) !== undefined) {

                    style[name] = value;
                }

            } else {

                // If a hook was provided get the non-computed value from there
                if (hooks && "get" in hooks &&
                    (ret = hooks.get(elem, false, extra)) !== undefined) {

                    return ret;
                }

                // Otherwise just get the value from the style object
                return style[name];
            }
        },

        css: function(elem, name, extra, styles) {
            var val, num, hooks,
                origName = jQuery.camelCase(name);

            // Make sure that we're working with the right name
            name = jQuery.cssProps[origName] ||
                (jQuery.cssProps[origName] = vendorPropName(origName) || origName);

            // Try prefixed name followed by the unprefixed name
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

            // If a hook was provided get the computed value from there
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra);
            }

            // Otherwise, if a way to get the computed value exists, use that
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }

            // Convert "normal" to computed value
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }

            // Make numeric if forced or a qualifier was provided and val looks numeric
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || isFinite(num) ? num || 0 : val;
            }
            return val;
        }
    });

    jQuery.each(["height", "width"], function(i, name) {
        jQuery.cssHooks[name] = {
            get: function(elem, computed, extra) {
                if (computed) {

                    // Certain elements can have dimension info if we invisibly show them
                    // but it must have a current display style that would benefit
                    return rdisplayswap.test(jQuery.css(elem, "display")) &&
                        elem.offsetWidth === 0 ?
                        swap(elem, cssShow, function() {
                            return getWidthOrHeight(elem, name, extra);
                        }) :
                        getWidthOrHeight(elem, name, extra);
                }
            },

            set: function(elem, value, extra) {
                var matches,
                    styles = extra && getStyles(elem),
                    subtract = extra && augmentWidthOrHeight(
                        elem,
                        name,
                        extra,
                        jQuery.css(elem, "boxSizing", false, styles) === "border-box",
                        styles
                    );

                // Convert to pixels if value adjustment is needed
                if (subtract && (matches = rcssNum.exec(value)) &&
                    (matches[3] || "px") !== "px") {

                    elem.style[name] = value;
                    value = jQuery.css(elem, name);
                }

                return setPositiveNumber(elem, value, subtract);
            }
        };
    });

    jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft,
        function(elem, computed) {
            if (computed) {
                return (parseFloat(curCSS(elem, "marginLeft")) ||
                    elem.getBoundingClientRect().left -
                    swap(elem, {
                        marginLeft: 0
                    }, function() {
                        return elem.getBoundingClientRect().left;
                    })
                ) + "px";
            }
        }
    );

    // Support: Android 2.3
    jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight,
        function(elem, computed) {
            if (computed) {
                return swap(elem, {
                        "display": "inline-block"
                    },
                    curCSS, [elem, "marginRight"]);
            }
        }
    );

    // These hooks are used by animate to expand properties
    jQuery.each({
        margin: "",
        padding: "",
        border: "Width"
    }, function(prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function(value) {
                var i = 0,
                    expanded = {},

                    // Assumes a single number if not a string
                    parts = typeof value === "string" ? value.split(" ") : [value];

                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] =
                        parts[i] || parts[i - 2] || parts[0];
                }

                return expanded;
            }
        };

        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });

    jQuery.fn.extend({
        css: function(name, value) {
            return access(this, function(elem, name, value) {
                var styles, len,
                    map = {},
                    i = 0;

                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;

                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }

                    return map;
                }

                return value !== undefined ?
                    jQuery.style(elem, name, value) :
                    jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function() {
            return showHide(this, true);
        },
        hide: function() {
            return showHide(this);
        },
        toggle: function(state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide();
            }

            return this.each(function() {
                if (isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });


    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;

    Tween.prototype = {
        constructor: Tween,
        init: function(elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || jQuery.easing._default;
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
        },
        cur: function() {
            var hooks = Tween.propHooks[this.prop];

            return hooks && hooks.get ?
                hooks.get(this) :
                Tween.propHooks._default.get(this);
        },
        run: function(percent) {
            var eased,
                hooks = Tween.propHooks[this.prop];

            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](
                    percent, this.options.duration * percent, 0, 1, this.options.duration
                );
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;

            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }

            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };

    Tween.prototype.init.prototype = Tween.prototype;

    Tween.propHooks = {
        _default: {
            get: function(tween) {
                var result;

                // Use a property on the element directly when it is not a DOM element,
                // or when there is no matching style property that exists.
                if (tween.elem.nodeType !== 1 ||
                    tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
                    return tween.elem[tween.prop];
                }

                // Passing an empty string as a 3rd parameter to .css will automatically
                // attempt a parseFloat and fallback to a string if the parse fails.
                // Simple values such as "10px" are parsed to Float;
                // complex values such as "rotate(1rad)" are returned as-is.
                result = jQuery.css(tween.elem, tween.prop, "");

                // Empty strings, null, undefined and "auto" are converted to 0.
                return !result || result === "auto" ? 0 : result;
            },
            set: function(tween) {

                // Use step hook for back compat.
                // Use cssHook if its there.
                // Use .style if available and use plain properties where available.
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.nodeType === 1 &&
                    (tween.elem.style[jQuery.cssProps[tween.prop]] != null ||
                        jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };

    // Support: IE9
    // Panic based approach to setting things on disconnected nodes
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function(tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };

    jQuery.easing = {
        linear: function(p) {
            return p;
        },
        swing: function(p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        },
        _default: "swing"
    };

    jQuery.fx = Tween.prototype.init;

    // Back Compat <1.8 extension point
    jQuery.fx.step = {};




    var
        fxNow, timerId,
        rfxtypes = /^(?:toggle|show|hide)$/,
        rrun = /queueHooks$/;

    // Animations created synchronously will run synchronously
    function createFxNow() {
        window.setTimeout(function() {
            fxNow = undefined;
        });
        return (fxNow = jQuery.now());
    }

    // Generate parameters to create a standard animation
    function genFx(type, includeWidth) {
        var which,
            i = 0,
            attrs = {
                height: type
            };

        // If we include width, step value is 1 to do all cssExpand values,
        // otherwise step value is 2 to skip over Left and Right
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type;
        }

        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }

        return attrs;
    }

    function createTween(value, prop, animation) {
        var tween,
            collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
            index = 0,
            length = collection.length;
        for (; index < length; index++) {
            if ((tween = collection[index].call(animation, prop, value))) {

                // We're done with this property
                return tween;
            }
        }
    }

    function defaultPrefilter(elem, props, opts) {
        /* jshint validthis: true */
        var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
            anim = this,
            orig = {},
            style = elem.style,
            hidden = elem.nodeType && isHidden(elem),
            dataShow = dataPriv.get(elem, "fxshow");

        // Handle queue: false promises
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function() {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;

            anim.always(function() {

                // Ensure the complete handler is called before this completes
                anim.always(function() {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire();
                    }
                });
            });
        }

        // Height/width overflow pass
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {

            // Make sure that nothing sneaks out
            // Record all 3 overflow attributes because IE9-10 do not
            // change the overflow attribute when overflowX and
            // overflowY are set to the same value
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];

            // Set display property to inline-block for height/width
            // animations on inline elements that are having width/height animated
            display = jQuery.css(elem, "display");

            // Test default display if display is currently "none"
            checkDisplay = display === "none" ?
                dataPriv.get(elem, "olddisplay") || defaultDisplay(elem.nodeName) : display;

            if (checkDisplay === "inline" && jQuery.css(elem, "float") === "none") {
                style.display = "inline-block";
            }
        }

        if (opts.overflow) {
            style.overflow = "hidden";
            anim.always(function() {
                style.overflow = opts.overflow[0];
                style.overflowX = opts.overflow[1];
                style.overflowY = opts.overflow[2];
            });
        }

        // show/hide pass
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {

                    // If there is dataShow left over from a stopped hide or show
                    // and we are going to proceed with show, we should pretend to be hidden
                    if (value === "show" && dataShow && dataShow[prop] !== undefined) {
                        hidden = true;
                    } else {
                        continue;
                    }
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);

                // Any non-fx value stops us from restoring the original display value
            } else {
                display = undefined;
            }
        }

        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) {
                    hidden = dataShow.hidden;
                }
            } else {
                dataShow = dataPriv.access(elem, "fxshow", {});
            }

            // Store state if its toggle - enables .stop().toggle() to "reverse"
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function() {
                    jQuery(elem).hide();
                });
            }
            anim.done(function() {
                var prop;

                dataPriv.remove(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);

                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0;
                    }
                }
            }

            // If this is a noop like .hide().hide(), restore an overwritten display value
        } else if ((display === "none" ? defaultDisplay(elem.nodeName) : display) === "inline") {
            style.display = display;
        }
    }

    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;

        // camelCase, specialEasing and expand cssHook pass
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }

            if (index !== name) {
                props[name] = value;
                delete props[index];
            }

            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];

                // Not quite $.extend, this won't overwrite existing keys.
                // Reusing 'index' because we have the correct "name"
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }

    function Animation(elem, properties, options) {
        var result,
            stopped,
            index = 0,
            length = Animation.prefilters.length,
            deferred = jQuery.Deferred().always(function() {

                // Don't match elem in the :animated selector
                delete tick.elem;
            }),
            tick = function() {
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(),
                    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),

                    // Support: Android 2.3
                    // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
                    temp = remaining / animation.duration || 0,
                    percent = 1 - temp,
                    index = 0,
                    length = animation.tweens.length;

                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }

                deferred.notifyWith(elem, [animation, percent, remaining]);

                if (percent < 1 && length) {
                    return remaining;
                } else {
                    deferred.resolveWith(elem, [animation]);
                    return false;
                }
            },
            animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, {
                    specialEasing: {},
                    easing: jQuery.easing._default
                }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function(prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end,
                        animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function(gotoEnd) {
                    var index = 0,

                        // If we are going to the end, we want to run all the tweens
                        // otherwise we skip this part
                        length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }

                    // Resolve when we played the last frame; otherwise, reject
                    if (gotoEnd) {
                        deferred.notifyWith(elem, [animation, 1, 0]);
                        deferred.resolveWith(elem, [animation, gotoEnd]);
                    } else {
                        deferred.rejectWith(elem, [animation, gotoEnd]);
                    }
                    return this;
                }
            }),
            props = animation.props;

        propFilter(props, animation.opts.specialEasing);

        for (; index < length; index++) {
            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                if (jQuery.isFunction(result.stop)) {
                    jQuery._queueHooks(animation.elem, animation.opts.queue).stop =
                        jQuery.proxy(result.stop, result);
                }
                return result;
            }
        }

        jQuery.map(props, createTween, animation);

        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }

        jQuery.fx.timer(
            jQuery.extend(tick, {
                elem: elem,
                anim: animation,
                queue: animation.opts.queue
            })
        );

        // attach callbacks from options
        return animation.progress(animation.opts.progress)
            .done(animation.opts.done, animation.opts.complete)
            .fail(animation.opts.fail)
            .always(animation.opts.always);
    }

    jQuery.Animation = jQuery.extend(Animation, {
        tweeners: {
            "*": [function(prop, value) {
                var tween = this.createTween(prop, value);
                adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
                return tween;
            }]
        },

        tweener: function(props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = ["*"];
            } else {
                props = props.match(rnotwhite);
            }

            var prop,
                index = 0,
                length = props.length;

            for (; index < length; index++) {
                prop = props[index];
                Animation.tweeners[prop] = Animation.tweeners[prop] || [];
                Animation.tweeners[prop].unshift(callback);
            }
        },

        prefilters: [defaultPrefilter],

        prefilter: function(callback, prepend) {
            if (prepend) {
                Animation.prefilters.unshift(callback);
            } else {
                Animation.prefilters.push(callback);
            }
        }
    });

    jQuery.speed = function(speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing ||
                jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };

        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
            opt.duration : opt.duration in jQuery.fx.speeds ?
            jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;

        // Normalize opt.queue - true/undefined/null -> "fx"
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx";
        }

        // Queueing
        opt.old = opt.complete;

        opt.complete = function() {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }

            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };

        return opt;
    };

    jQuery.fn.extend({
        fadeTo: function(speed, to, easing, callback) {

            // Show any hidden elements after setting opacity to 0
            return this.filter(isHidden).css("opacity", 0).show()

            // Animate to the value specified
            .end().animate({
                opacity: to
            }, speed, easing, callback);
        },
        animate: function(prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop),
                optall = jQuery.speed(speed, easing, callback),
                doAnimation = function() {

                    // Operate on a copy of prop so per-property easing won't be lost
                    var anim = Animation(this, jQuery.extend({}, prop), optall);

                    // Empty animations, or finishing resolves immediately
                    if (empty || dataPriv.get(this, "finish")) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;

            return empty || optall.queue === false ?
                this.each(doAnimation) :
                this.queue(optall.queue, doAnimation);
        },
        stop: function(type, clearQueue, gotoEnd) {
            var stopQueue = function(hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };

            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", []);
            }

            return this.each(function() {
                var dequeue = true,
                    index = type != null && type + "queueHooks",
                    timers = jQuery.timers,
                    data = dataPriv.get(this);

                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }

                for (index = timers.length; index--;) {
                    if (timers[index].elem === this &&
                        (type == null || timers[index].queue === type)) {

                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }

                // Start the next in the queue if the last step wasn't forced.
                // Timers currently will call their complete callbacks, which
                // will dequeue but only if they were gotoEnd.
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function(type) {
            if (type !== false) {
                type = type || "fx";
            }
            return this.each(function() {
                var index,
                    data = dataPriv.get(this),
                    queue = data[type + "queue"],
                    hooks = data[type + "queueHooks"],
                    timers = jQuery.timers,
                    length = queue ? queue.length : 0;

                // Enable finishing flag on private data
                data.finish = true;

                // Empty the queue first
                jQuery.queue(this, type, []);

                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true);
                }

                // Look for any active animations, and finish them
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }

                // Look for any animations in the old queue and finish them
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }

                // Turn off finishing flag
                delete data.finish;
            });
        }
    });

    jQuery.each(["toggle", "show", "hide"], function(i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function(speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ?
                cssFn.apply(this, arguments) :
                this.animate(genFx(name, true), speed, easing, callback);
        };
    });

    // Generate shortcuts for custom animations
    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {
            opacity: "show"
        },
        fadeOut: {
            opacity: "hide"
        },
        fadeToggle: {
            opacity: "toggle"
        }
    }, function(name, props) {
        jQuery.fn[name] = function(speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });

    jQuery.timers = [];
    jQuery.fx.tick = function() {
        var timer,
            i = 0,
            timers = jQuery.timers;

        fxNow = jQuery.now();

        for (; i < timers.length; i++) {
            timer = timers[i];

            // Checks the timer has not already been removed
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }

        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };

    jQuery.fx.timer = function(timer) {
        jQuery.timers.push(timer);
        if (timer()) {
            jQuery.fx.start();
        } else {
            jQuery.timers.pop();
        }
    };

    jQuery.fx.interval = 13;
    jQuery.fx.start = function() {
        if (!timerId) {
            timerId = window.setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };

    jQuery.fx.stop = function() {
        window.clearInterval(timerId);

        timerId = null;
    };

    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,

        // Default speed
        _default: 400
    };


    // Based off of the plugin by Clint Helfers, with permission.
    // http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
    jQuery.fn.delay = function(time, type) {
        time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
        type = type || "fx";

        return this.queue(type, function(next, hooks) {
            var timeout = window.setTimeout(next, time);
            hooks.stop = function() {
                window.clearTimeout(timeout);
            };
        });
    };


    (function() {
        var input = document.createElement("input"),
            select = document.createElement("select"),
            opt = select.appendChild(document.createElement("option"));

        input.type = "checkbox";

        // Support: iOS<=5.1, Android<=4.2+
        // Default value for a checkbox should be "on"
        support.checkOn = input.value !== "";

        // Support: IE<=11+
        // Must access selectedIndex to make default options select
        support.optSelected = opt.selected;

        // Support: Android<=2.3
        // Options inside disabled selects are incorrectly marked as disabled
        select.disabled = true;
        support.optDisabled = !opt.disabled;

        // Support: IE<=11+
        // An input loses its value after becoming a radio
        input = document.createElement("input");
        input.value = "t";
        input.type = "radio";
        support.radioValue = input.value === "t";
    })();


    var boolHook,
        attrHandle = jQuery.expr.attrHandle;

    jQuery.fn.extend({
        attr: function(name, value) {
            return access(this, jQuery.attr, name, value, arguments.length > 1);
        },

        removeAttr: function(name) {
            return this.each(function() {
                jQuery.removeAttr(this, name);
            });
        }
    });

    jQuery.extend({
        attr: function(elem, name, value) {
            var ret, hooks,
                nType = elem.nodeType;

            // Don't get/set attributes on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            // Fallback to prop when attributes are not supported
            if (typeof elem.getAttribute === "undefined") {
                return jQuery.prop(elem, name, value);
            }

            // All attributes are lowercase
            // Grab necessary hook if one is defined
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] ||
                    (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
            }

            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                    return;
                }

                if (hooks && "set" in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }

                elem.setAttribute(name, value + "");
                return value;
            }

            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }

            ret = jQuery.find.attr(elem, name);

            // Non-existent attributes return null, we normalize to undefined
            return ret == null ? undefined : ret;
        },

        attrHooks: {
            type: {
                set: function(elem, value) {
                    if (!support.radioValue && value === "radio" &&
                        jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },

        removeAttr: function(elem, value) {
            var name, propName,
                i = 0,
                attrNames = value && value.match(rnotwhite);

            if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                    propName = jQuery.propFix[name] || name;

                    // Boolean attributes get special treatment (#10870)
                    if (jQuery.expr.match.bool.test(name)) {

                        // Set corresponding property to false
                        elem[propName] = false;
                    }

                    elem.removeAttribute(name);
                }
            }
        }
    });

    // Hooks for boolean attributes
    boolHook = {
        set: function(elem, value, name) {
            if (value === false) {

                // Remove boolean attributes when set to false
                jQuery.removeAttr(elem, name);
            } else {
                elem.setAttribute(name, name);
            }
            return name;
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function(i, name) {
        var getter = attrHandle[name] || jQuery.find.attr;

        attrHandle[name] = function(elem, name, isXML) {
            var ret, handle;
            if (!isXML) {

                // Avoid an infinite loop by temporarily removing this function from the getter
                handle = attrHandle[name];
                attrHandle[name] = ret;
                ret = getter(elem, name, isXML) != null ?
                    name.toLowerCase() :
                    null;
                attrHandle[name] = handle;
            }
            return ret;
        };
    });




    var rfocusable = /^(?:input|select|textarea|button)$/i,
        rclickable = /^(?:a|area)$/i;

    jQuery.fn.extend({
        prop: function(name, value) {
            return access(this, jQuery.prop, name, value, arguments.length > 1);
        },

        removeProp: function(name) {
            return this.each(function() {
                delete this[jQuery.propFix[name] || name];
            });
        }
    });

    jQuery.extend({
        prop: function(elem, name, value) {
            var ret, hooks,
                nType = elem.nodeType;

            // Don't get/set properties on text, comment and attribute nodes
            if (nType === 3 || nType === 8 || nType === 2) {
                return;
            }

            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

                // Fix name and attach hooks
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }

            if (value !== undefined) {
                if (hooks && "set" in hooks &&
                    (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                }

                return (elem[name] = value);
            }

            if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            }

            return elem[name];
        },

        propHooks: {
            tabIndex: {
                get: function(elem) {

                    // elem.tabIndex doesn't always return the
                    // correct value when it hasn't been explicitly set
                    // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                    // Use proper attribute retrieval(#12072)
                    var tabindex = jQuery.find.attr(elem, "tabindex");

                    return tabindex ?
                        parseInt(tabindex, 10) :
                        rfocusable.test(elem.nodeName) ||
                        rclickable.test(elem.nodeName) && elem.href ?
                        0 :
                        -1;
                }
            }
        },

        propFix: {
            "for": "htmlFor",
            "class": "className"
        }
    });

    if (!support.optSelected) {
        jQuery.propHooks.selected = {
            get: function(elem) {
                var parent = elem.parentNode;
                if (parent && parent.parentNode) {
                    parent.parentNode.selectedIndex;
                }
                return null;
            }
        };
    }

    jQuery.each([
        "tabIndex",
        "readOnly",
        "maxLength",
        "cellSpacing",
        "cellPadding",
        "rowSpan",
        "colSpan",
        "useMap",
        "frameBorder",
        "contentEditable"
    ], function() {
        jQuery.propFix[this.toLowerCase()] = this;
    });




    var rclass = /[\t\r\n\f]/g;

    function getClass(elem) {
        return elem.getAttribute && elem.getAttribute("class") || "";
    }

    jQuery.fn.extend({
        addClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue,
                i = 0;

            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).addClass(value.call(this, j, getClass(this)));
                });
            }

            if (typeof value === "string" && value) {
                classes = value.match(rnotwhite) || [];

                while ((elem = this[i++])) {
                    curValue = getClass(elem);
                    cur = elem.nodeType === 1 &&
                        (" " + curValue + " ").replace(rclass, " ");

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " ";
                            }
                        }

                        // Only assign if different to avoid unneeded rendering.
                        finalValue = jQuery.trim(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute("class", finalValue);
                        }
                    }
                }
            }

            return this;
        },

        removeClass: function(value) {
            var classes, elem, cur, curValue, clazz, j, finalValue,
                i = 0;

            if (jQuery.isFunction(value)) {
                return this.each(function(j) {
                    jQuery(this).removeClass(value.call(this, j, getClass(this)));
                });
            }

            if (!arguments.length) {
                return this.attr("class", "");
            }

            if (typeof value === "string" && value) {
                classes = value.match(rnotwhite) || [];

                while ((elem = this[i++])) {
                    curValue = getClass(elem);

                    // This expression is here for better compressibility (see addClass)
                    cur = elem.nodeType === 1 &&
                        (" " + curValue + " ").replace(rclass, " ");

                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {

                            // Remove *all* instances
                            while (cur.indexOf(" " + clazz + " ") > -1) {
                                cur = cur.replace(" " + clazz + " ", " ");
                            }
                        }

                        // Only assign if different to avoid unneeded rendering.
                        finalValue = jQuery.trim(cur);
                        if (curValue !== finalValue) {
                            elem.setAttribute("class", finalValue);
                        }
                    }
                }
            }

            return this;
        },

        toggleClass: function(value, stateVal) {
            var type = typeof value;

            if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value);
            }

            if (jQuery.isFunction(value)) {
                return this.each(function(i) {
                    jQuery(this).toggleClass(
                        value.call(this, i, getClass(this), stateVal),
                        stateVal
                    );
                });
            }

            return this.each(function() {
                var className, i, self, classNames;

                if (type === "string") {

                    // Toggle individual class names
                    i = 0;
                    self = jQuery(this);
                    classNames = value.match(rnotwhite) || [];

                    while ((className = classNames[i++])) {

                        // Check each className given, space separated list
                        if (self.hasClass(className)) {
                            self.removeClass(className);
                        } else {
                            self.addClass(className);
                        }
                    }

                    // Toggle whole class name
                } else if (value === undefined || type === "boolean") {
                    className = getClass(this);
                    if (className) {

                        // Store className if set
                        dataPriv.set(this, "__className__", className);
                    }

                    // If the element has a class name or if we're passed `false`,
                    // then remove the whole classname (if there was one, the above saved it).
                    // Otherwise bring back whatever was previously saved (if anything),
                    // falling back to the empty string if nothing was stored.
                    if (this.setAttribute) {
                        this.setAttribute("class",
                            className || value === false ?
                            "" :
                            dataPriv.get(this, "__className__") || ""
                        );
                    }
                }
            });
        },

        hasClass: function(selector) {
            var className, elem,
                i = 0;

            className = " " + selector + " ";
            while ((elem = this[i++])) {
                if (elem.nodeType === 1 &&
                    (" " + getClass(elem) + " ").replace(rclass, " ")
                    .indexOf(className) > -1
                ) {
                    return true;
                }
            }

            return false;
        }
    });




    var rreturn = /\r/g;

    jQuery.fn.extend({
        val: function(value) {
            var hooks, ret, isFunction,
                elem = this[0];

            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] ||
                        jQuery.valHooks[elem.nodeName.toLowerCase()];

                    if (hooks &&
                        "get" in hooks &&
                        (ret = hooks.get(elem, "value")) !== undefined
                    ) {
                        return ret;
                    }

                    ret = elem.value;

                    return typeof ret === "string" ?

                        // Handle most common string cases
                        ret.replace(rreturn, "") :

                        // Handle cases where value is null/undef or number
                        ret == null ? "" : ret;
                }

                return;
            }

            isFunction = jQuery.isFunction(value);

            return this.each(function(i) {
                var val;

                if (this.nodeType !== 1) {
                    return;
                }

                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val());
                } else {
                    val = value;
                }

                // Treat null/undefined as ""; convert numbers to string
                if (val == null) {
                    val = "";

                } else if (typeof val === "number") {
                    val += "";

                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function(value) {
                        return value == null ? "" : value + "";
                    });
                }

                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

                // If set returns undefined, fall back to normal setting
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val;
                }
            });
        }
    });

    jQuery.extend({
        valHooks: {
            option: {
                get: function(elem) {

                    // Support: IE<11
                    // option.value not trimmed (#14858)
                    return jQuery.trim(elem.value);
                }
            },
            select: {
                get: function(elem) {
                    var value, option,
                        options = elem.options,
                        index = elem.selectedIndex,
                        one = elem.type === "select-one" || index < 0,
                        values = one ? null : [],
                        max = one ? index + 1 : options.length,
                        i = index < 0 ?
                        max :
                        one ? index : 0;

                    // Loop through all the selected options
                    for (; i < max; i++) {
                        option = options[i];

                        // IE8-9 doesn't update selected after form reset (#2551)
                        if ((option.selected || i === index) &&

                            // Don't return options that are disabled or in a disabled optgroup
                            (support.optDisabled ?
                                !option.disabled : option.getAttribute("disabled") === null) &&
                            (!option.parentNode.disabled ||
                                !jQuery.nodeName(option.parentNode, "optgroup"))) {

                            // Get the specific value for the option
                            value = jQuery(option).val();

                            // We don't need an array for one selects
                            if (one) {
                                return value;
                            }

                            // Multi-Selects return an array
                            values.push(value);
                        }
                    }

                    return values;
                },

                set: function(elem, value) {
                    var optionSet, option,
                        options = elem.options,
                        values = jQuery.makeArray(value),
                        i = options.length;

                    while (i--) {
                        option = options[i];
                        if (option.selected =
                            jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1
                        ) {
                            optionSet = true;
                        }
                    }

                    // Force browsers to behave consistently when non-matching value is set
                    if (!optionSet) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        }
    });

    // Radios and checkboxes getter/setter
    jQuery.each(["radio", "checkbox"], function() {
        jQuery.valHooks[this] = {
            set: function(elem, value) {
                if (jQuery.isArray(value)) {
                    return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1);
                }
            }
        };
        if (!support.checkOn) {
            jQuery.valHooks[this].get = function(elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value;
            };
        }
    });




    // Return jQuery for attributes-only inclusion


    var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

    jQuery.extend(jQuery.event, {

        trigger: function(event, data, elem, onlyHandlers) {

            var i, cur, tmp, bubbleType, ontype, handle, special,
                eventPath = [elem || document],
                type = hasOwn.call(event, "type") ? event.type : event,
                namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

            cur = tmp = elem = elem || document;

            // Don't do events on text and comment nodes
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }

            // focus/blur morphs to focusin/out; ensure we're not firing them right now
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }

            if (type.indexOf(".") > -1) {

                // Namespaced trigger; create a regexp to match event type in handle()
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(":") < 0 && "on" + type;

            // Caller can pass in a jQuery.Event object, Object, or just an event type string
            event = event[jQuery.expando] ?
                event :
                new jQuery.Event(type, typeof event === "object" && event);

            // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.rnamespace = event.namespace ?
                new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") :
                null;

            // Clean up the event in case it is being reused
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }

            // Clone any incoming data and prepend the event, creating the handler arg list
            data = data == null ? [event] :
                jQuery.makeArray(data, [event]);

            // Allow special events to draw outside the lines
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }

            // Determine event propagation path in advance, per W3C events spec (#9951)
            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }

                // Only add window if we got to document (e.g., not plain obj or detached DOM)
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }

            // Fire handlers on the event path
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

                event.type = i > 1 ?
                    bubbleType :
                    special.bindType || type;

                // jQuery handler
                handle = (dataPriv.get(cur, "events") || {})[event.type] &&
                    dataPriv.get(cur, "handle");
                if (handle) {
                    handle.apply(cur, data);
                }

                // Native handler
                handle = ontype && cur[ontype];
                if (handle && handle.apply && acceptData(cur)) {
                    event.result = handle.apply(cur, data);
                    if (event.result === false) {
                        event.preventDefault();
                    }
                }
            }
            event.type = type;

            // If nobody prevented the default action, do it now
            if (!onlyHandlers && !event.isDefaultPrevented()) {

                if ((!special._default ||
                        special._default.apply(eventPath.pop(), data) === false) &&
                    acceptData(elem)) {

                    // Call a native DOM method on the target with the same name name as the event.
                    // Don't do default actions on window, that's where global variables be (#6170)
                    if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

                        // Don't re-trigger an onFOO event when we call its FOO() method
                        tmp = elem[ontype];

                        if (tmp) {
                            elem[ontype] = null;
                        }

                        // Prevent re-triggering of the same event, since we already bubbled it above
                        jQuery.event.triggered = type;
                        elem[type]();
                        jQuery.event.triggered = undefined;

                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }

            return event.result;
        },

        // Piggyback on a donor event to simulate a different one
        simulate: function(type, elem, event) {
            var e = jQuery.extend(
                new jQuery.Event(),
                event, {
                    type: type,
                    isSimulated: true

                    // Previously, `originalEvent: {}` was set here, so stopPropagation call
                    // would not be triggered on donor event, since in our own
                    // jQuery.event.stopPropagation function we had a check for existence of
                    // originalEvent.stopPropagation method, so, consequently it would be a noop.
                    //
                    // But now, this "simulate" function is used only for events
                    // for which stopPropagation() is noop, so there is no need for that anymore.
                    //
                    // For the compat branch though, guard for "click" and "submit"
                    // events is still used, but was moved to jQuery.event.stopPropagation function
                    // because `originalEvent` should point to the original event for the constancy
                    // with other events and for more focused logic
                }
            );

            jQuery.event.trigger(e, null, elem);

            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }

    });

    jQuery.fn.extend({

        trigger: function(type, data) {
            return this.each(function() {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function(type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });


    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " +
            "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
            "change select submit keydown keypress keyup error contextmenu").split(" "),
        function(i, name) {

            // Handle event binding
            jQuery.fn[name] = function(data, fn) {
                return arguments.length > 0 ?
                    this.on(name, null, data, fn) :
                    this.trigger(name);
            };
        });

    jQuery.fn.extend({
        hover: function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        }
    });




    support.focusin = "onfocusin" in window;


    // Support: Firefox
    // Firefox doesn't have focus(in | out) events
    // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
    //
    // Support: Chrome, Safari
    // focus(in | out) events fire after focus & blur events,
    // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
    // Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
    if (!support.focusin) {
        jQuery.each({
            focus: "focusin",
            blur: "focusout"
        }, function(orig, fix) {

            // Attach a single capturing handler on the document while someone wants focusin/focusout
            var handler = function(event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
            };

            jQuery.event.special[fix] = {
                setup: function() {
                    var doc = this.ownerDocument || this,
                        attaches = dataPriv.access(doc, fix);

                    if (!attaches) {
                        doc.addEventListener(orig, handler, true);
                    }
                    dataPriv.access(doc, fix, (attaches || 0) + 1);
                },
                teardown: function() {
                    var doc = this.ownerDocument || this,
                        attaches = dataPriv.access(doc, fix) - 1;

                    if (!attaches) {
                        doc.removeEventListener(orig, handler, true);
                        dataPriv.remove(doc, fix);

                    } else {
                        dataPriv.access(doc, fix, attaches);
                    }
                }
            };
        });
    }
    var location = window.location;

    var nonce = jQuery.now();

    var rquery = (/\?/);



    // Support: Android 2.3
    // Workaround failure to string-cast null input
    jQuery.parseJSON = function(data) {
        return JSON.parse(data + "");
    };


    // Cross-browser xml parsing
    jQuery.parseXML = function(data) {
        var xml;
        if (!data || typeof data !== "string") {
            return null;
        }

        // Support: IE9
        try {
            xml = (new window.DOMParser()).parseFromString(data, "text/xml");
        } catch (e) {
            xml = undefined;
        }

        if (!xml || xml.getElementsByTagName("parsererror").length) {
            jQuery.error("Invalid XML: " + data);
        }
        return xml;
    };


    var
        rhash = /#.*$/,
        rts = /([?&])_=[^&]*/,
        rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

        // #7653, #8125, #8152: local protocol detection
        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
        rnoContent = /^(?:GET|HEAD)$/,
        rprotocol = /^\/\//,

        /* Prefilters
         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
         * 2) These are called:
         *    - BEFORE asking for a transport
         *    - AFTER param serialization (s.data is a string if s.processData is true)
         * 3) key is the dataType
         * 4) the catchall symbol "*" can be used
         * 5) execution will start with transport dataType and THEN continue down to "*" if needed
         */
        prefilters = {},

        /* Transports bindings
         * 1) key is the dataType
         * 2) the catchall symbol "*" can be used
         * 3) selection will start with transport dataType and THEN go to "*" if needed
         */
        transports = {},

        // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
        allTypes = "*/".concat("*"),

        // Anchor tag for parsing the document origin
        originAnchor = document.createElement("a");
    originAnchor.href = location.href;

    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {

        // dataTypeExpression is optional and defaults to "*"
        return function(dataTypeExpression, func) {

            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }

            var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

            if (jQuery.isFunction(func)) {

                // For each dataType in the dataTypeExpression
                while ((dataType = dataTypes[i++])) {

                    // Prepend if requested
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);

                        // Otherwise append
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }

    // Base inspection function for prefilters and transports
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

        var inspected = {},
            seekingTransport = (structure === transports);

        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" &&
                    !seekingTransport && !inspected[dataTypeOrTransport]) {

                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }

        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
    }

    // A special extend for ajax options
    // that takes "flat" options (not to be deep extended)
    // Fixes #9887
    function ajaxExtend(target, src) {
        var key, deep,
            flatOptions = jQuery.ajaxSettings.flatOptions || {};

        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }

        return target;
    }

    /* Handles responses to an ajax request:
     * - finds the right dataType (mediates between content-type and expected dataType)
     * - returns the corresponding response
     */
    function ajaxHandleResponses(s, jqXHR, responses) {

        var ct, type, finalDataType, firstDataType,
            contents = s.contents,
            dataTypes = s.dataTypes;

        // Remove auto dataType and get content-type in the process
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
            }
        }

        // Check if we're dealing with a known content-type
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }

        // Check to see if we have a response for the expected dataType
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {

            // Try convertible dataTypes
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }

            // Or just use first one
            finalDataType = finalDataType || firstDataType;
        }

        // If we found a dataType
        // We add the dataType to the list if needed
        // and return the corresponding response
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }

    /* Chain conversions given the request and the original response
     * Also sets the responseXXX fields on the jqXHR instance
     */
    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev,
            converters = {},

            // Work with a copy of dataTypes in case we need to modify it for conversion
            dataTypes = s.dataTypes.slice();

        // Create converters map with lowercased keys
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }

        current = dataTypes.shift();

        // Convert to each sequential dataType
        while (current) {

            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response;
            }

            // Apply the dataFilter if provided
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType);
            }

            prev = current;
            current = dataTypes.shift();

            if (current) {

                // There's only work to do if current dataType is non-auto
                if (current === "*") {

                    current = prev;

                    // Convert response if prev dataType is non-auto and differs from current
                } else if (prev !== "*" && prev !== current) {

                    // Seek a direct converter
                    conv = converters[prev + " " + current] || converters["* " + current];

                    // If none found, seek a pair
                    if (!conv) {
                        for (conv2 in converters) {

                            // If conv2 outputs current
                            tmp = conv2.split(" ");
                            if (tmp[1] === current) {

                                // If prev can be converted to accepted input
                                conv = converters[prev + " " + tmp[0]] ||
                                    converters["* " + tmp[0]];
                                if (conv) {

                                    // Condense equivalence converters
                                    if (conv === true) {
                                        conv = converters[conv2];

                                        // Otherwise, insert the intermediate dataType
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.unshift(tmp[1]);
                                    }
                                    break;
                                }
                            }
                        }
                    }

                    // Apply converter (if not an equivalence)
                    if (conv !== true) {

                        // Unless errors are allowed to bubble, catch and return them
                        if (conv && s.throws) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: "parsererror",
                                    error: conv ? e : "No conversion from " + prev + " to " + current
                                };
                            }
                        }
                    }
                }
            }
        }

        return {
            state: "success",
            data: response
        };
    }

    jQuery.extend({

        // Counter for holding the number of active queries
        active: 0,

        // Last-Modified header cache for next request
        lastModified: {},
        etag: {},

        ajaxSettings: {
            url: location.href,
            type: "GET",
            isLocal: rlocalProtocol.test(location.protocol),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            /*
            timeout: 0,
            data: null,
            dataType: null,
            username: null,
            password: null,
            cache: null,
            throws: false,
            traditional: false,
            headers: {},
            */

            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },

            contents: {
                xml: /\bxml\b/,
                html: /\bhtml/,
                json: /\bjson\b/
            },

            responseFields: {
                xml: "responseXML",
                text: "responseText",
                json: "responseJSON"
            },

            // Data converters
            // Keys separate source (or catchall "*") and destination types with a single space
            converters: {

                // Convert anything to text
                "* text": String,

                // Text to html (true = no transformation)
                "text html": true,

                // Evaluate text as a json expression
                "text json": jQuery.parseJSON,

                // Parse text as xml
                "text xml": jQuery.parseXML
            },

            // For options that shouldn't be deep extended:
            // you can add your own custom options here if
            // and when you create one that shouldn't be
            // deep extended (see ajaxExtend)
            flatOptions: {
                url: true,
                context: true
            }
        },

        // Creates a full fledged settings object into target
        // with both ajaxSettings and settings fields.
        // If target is omitted, writes into ajaxSettings.
        ajaxSetup: function(target, settings) {
            return settings ?

                // Building a settings object
                ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

                // Extending ajaxSettings
                ajaxExtend(jQuery.ajaxSettings, target);
        },

        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),

        // Main method
        ajax: function(url, options) {

            // If url is an object, simulate pre-1.5 signature
            if (typeof url === "object") {
                options = url;
                url = undefined;
            }

            // Force options to be an object
            options = options || {};

            var transport,

                // URL without anti-cache param
                cacheURL,

                // Response headers
                responseHeadersString,
                responseHeaders,

                // timeout handle
                timeoutTimer,

                // Url cleanup var
                urlAnchor,

                // To know if global events are to be dispatched
                fireGlobals,

                // Loop variable
                i,

                // Create the final options object
                s = jQuery.ajaxSetup({}, options),

                // Callbacks context
                callbackContext = s.context || s,

                // Context for global events is callbackContext if it is a DOM node or jQuery collection
                globalEventContext = s.context &&
                (callbackContext.nodeType || callbackContext.jquery) ?
                jQuery(callbackContext) :
                jQuery.event,

                // Deferreds
                deferred = jQuery.Deferred(),
                completeDeferred = jQuery.Callbacks("once memory"),

                // Status-dependent callbacks
                statusCode = s.statusCode || {},

                // Headers (they are sent all at once)
                requestHeaders = {},
                requestHeadersNames = {},

                // The jqXHR state
                state = 0,

                // Default abort message
                strAbort = "canceled",

                // Fake xhr
                jqXHR = {
                    readyState: 0,

                    // Builds headers hashtable if needed
                    getResponseHeader: function(key) {
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while ((match = rheaders.exec(responseHeadersString))) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match == null ? null : match;
                    },

                    // Raw string
                    getAllResponseHeaders: function() {
                        return state === 2 ? responseHeadersString : null;
                    },

                    // Caches the header
                    setRequestHeader: function(name, value) {
                        var lname = name.toLowerCase();
                        if (!state) {
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },

                    // Overrides response content-type header
                    overrideMimeType: function(type) {
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },

                    // Status-dependent callbacks
                    statusCode: function(map) {
                        var code;
                        if (map) {
                            if (state < 2) {
                                for (code in map) {

                                    // Lazy-add the new callback in a way that preserves old ones
                                    statusCode[code] = [statusCode[code], map[code]];
                                }
                            } else {

                                // Execute the appropriate callbacks
                                jqXHR.always(map[jqXHR.status]);
                            }
                        }
                        return this;
                    },

                    // Cancel the request
                    abort: function(statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };

            // Attach deferreds
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;

            // Remove hash character (#7531: and string promotion)
            // Add protocol if not provided (prefilters might expect it)
            // Handle falsy url in the settings object (#10093: consistency with old signature)
            // We also use the url parameter if available
            s.url = ((url || s.url || location.href) + "").replace(rhash, "")
                .replace(rprotocol, location.protocol + "//");

            // Alias method option to type as per ticket #12004
            s.type = options.method || options.type || s.method || s.type;

            // Extract dataTypes list
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""];

            // A cross-domain request is in order when the origin doesn't match the current origin.
            if (s.crossDomain == null) {
                urlAnchor = document.createElement("a");

                // Support: IE8-11+
                // IE throws exception if url is malformed, e.g. http://example.com:80x/
                try {
                    urlAnchor.href = s.url;

                    // Support: IE8-11+
                    // Anchor's host property isn't correctly set when s.url is relative
                    urlAnchor.href = urlAnchor.href;
                    s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
                        urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {

                    // If there is an error parsing the URL, assume it is crossDomain,
                    // it can be rejected by the transport if it is invalid
                    s.crossDomain = true;
                }
            }

            // Convert data if not already a string
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional);
            }

            // Apply prefilters
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

            // If request was aborted inside a prefilter, stop there
            if (state === 2) {
                return jqXHR;
            }

            // We can fire global events as of now if asked to
            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
            fireGlobals = jQuery.event && s.global;

            // Watch for a new set of requests
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart");
            }

            // Uppercase the type
            s.type = s.type.toUpperCase();

            // Determine if request has content
            s.hasContent = !rnoContent.test(s.type);

            // Save the URL in case we're toying with the If-Modified-Since
            // and/or If-None-Match header later on
            cacheURL = s.url;

            // More options handling for requests with no content
            if (!s.hasContent) {

                // If data is available, append data to url
                if (s.data) {
                    cacheURL = (s.url += (rquery.test(cacheURL) ? "&" : "?") + s.data);

                    // #9682: remove data so that it's not used in an eventual retry
                    delete s.data;
                }

                // Add anti-cache in url if needed
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ?

                        // If there is already a '_' parameter, set its value
                        cacheURL.replace(rts, "$1_=" + nonce++) :

                        // Otherwise add one to the end
                        cacheURL + (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++;
                }
            }

            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
                }
            }

            // Set the correct header, if data is being sent
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType);
            }

            // Set the Accepts header for the server, depending on the dataType
            jqXHR.setRequestHeader(
                "Accept",
                s.dataTypes[0] && s.accepts[s.dataTypes[0]] ?
                s.accepts[s.dataTypes[0]] +
                (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") :
                s.accepts["*"]
            );

            // Check for headers option
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }

            // Allow custom headers/mimetypes and early abort
            if (s.beforeSend &&
                (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {

                // Abort if not done already and return
                return jqXHR.abort();
            }

            // Aborting is no longer a cancellation
            strAbort = "abort";

            // Install callbacks on deferreds
            for (i in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) {
                jqXHR[i](s[i]);
            }

            // Get transport
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

            // If no transport, we auto-abort
            if (!transport) {
                done(-1, "No Transport");
            } else {
                jqXHR.readyState = 1;

                // Send global event
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s]);
                }

                // If request was aborted inside ajaxSend, stop there
                if (state === 2) {
                    return jqXHR;
                }

                // Timeout
                if (s.async && s.timeout > 0) {
                    timeoutTimer = window.setTimeout(function() {
                        jqXHR.abort("timeout");
                    }, s.timeout);
                }

                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {

                    // Propagate exception as error if not done
                    if (state < 2) {
                        done(-1, e);

                        // Simply rethrow otherwise
                    } else {
                        throw e;
                    }
                }
            }

            // Callback for when everything is done
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified,
                    statusText = nativeStatusText;

                // Called once
                if (state === 2) {
                    return;
                }

                // State is "done" now
                state = 2;

                // Clear timeout if it exists
                if (timeoutTimer) {
                    window.clearTimeout(timeoutTimer);
                }

                // Dereference transport for early garbage collection
                // (no matter how long the jqXHR object will be used)
                transport = undefined;

                // Cache response headers
                responseHeadersString = headers || "";

                // Set readyState
                jqXHR.readyState = status > 0 ? 4 : 0;

                // Determine if successful
                isSuccess = status >= 200 && status < 300 || status === 304;

                // Get response data
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }

                // Convert no matter what (that way responseXXX fields are always set)
                response = ajaxConvert(s, response, jqXHR, isSuccess);

                // If successful, handle type chaining
                if (isSuccess) {

                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }

                    // if no content
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent";

                        // if not modified
                    } else if (status === 304) {
                        statusText = "notmodified";

                        // If we have data, let's convert it
                    } else {
                        statusText = response.state;
                        success = response.data;
                        error = response.error;
                        isSuccess = !error;
                    }
                } else {

                    // Extract error from statusText and normalize for non-aborts
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }

                // Set data for the fake xhr object
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";

                // Success/Error
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
                } else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
                }

                // Status-dependent callbacks
                jqXHR.statusCode(statusCode);
                statusCode = undefined;

                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
                }

                // Complete
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

                    // Handle the global AJAX counter
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop");
                    }
                }
            }

            return jqXHR;
        },

        getJSON: function(url, data, callback) {
            return jQuery.get(url, data, callback, "json");
        },

        getScript: function(url, callback) {
            return jQuery.get(url, undefined, callback, "script");
        }
    });

    jQuery.each(["get", "post"], function(i, method) {
        jQuery[method] = function(url, data, callback, type) {

            // Shift arguments if data argument was omitted
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }

            // The url can be an options object (which then must have .url)
            return jQuery.ajax(jQuery.extend({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            }, jQuery.isPlainObject(url) && url));
        };
    });


    jQuery._evalUrl = function(url) {
        return jQuery.ajax({
            url: url,

            // Make this explicit, since user can override this through ajaxSetup (#11264)
            type: "GET",
            dataType: "script",
            async: false,
            global: false,
            "throws": true
        });
    };


    jQuery.fn.extend({
        wrapAll: function(html) {
            var wrap;

            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }

            if (this[0]) {

                // The elements to wrap the target around
                wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }

                wrap.map(function() {
                    var elem = this;

                    while (elem.firstElementChild) {
                        elem = elem.firstElementChild;
                    }

                    return elem;
                }).append(this);
            }

            return this;
        },

        wrapInner: function(html) {
            if (jQuery.isFunction(html)) {
                return this.each(function(i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }

            return this.each(function() {
                var self = jQuery(this),
                    contents = self.contents();

                if (contents.length) {
                    contents.wrapAll(html);

                } else {
                    self.append(html);
                }
            });
        },

        wrap: function(html) {
            var isFunction = jQuery.isFunction(html);

            return this.each(function(i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },

        unwrap: function() {
            return this.parent().each(function() {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        }
    });


    jQuery.expr.filters.hidden = function(elem) {
        return !jQuery.expr.filters.visible(elem);
    };
    jQuery.expr.filters.visible = function(elem) {

        // Support: Opera <= 12.12
        // Opera reports offsetWidths and offsetHeights less than zero on some elements
        // Use OR instead of AND as the element is not visible if either is true
        // See tickets #10406 and #13132
        return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
    };




    var r20 = /%20/g,
        rbracket = /\[\]$/,
        rCRLF = /\r?\n/g,
        rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
        rsubmittable = /^(?:input|select|textarea|keygen)/i;

    function buildParams(prefix, obj, traditional, add) {
        var name;

        if (jQuery.isArray(obj)) {

            // Serialize array item.
            jQuery.each(obj, function(i, v) {
                if (traditional || rbracket.test(prefix)) {

                    // Treat each array item as a scalar.
                    add(prefix, v);

                } else {

                    // Item is non-scalar (array or object), encode its numeric index.
                    buildParams(
                        prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]",
                        v,
                        traditional,
                        add
                    );
                }
            });

        } else if (!traditional && jQuery.type(obj) === "object") {

            // Serialize object item.
            for (name in obj) {
                buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
            }

        } else {

            // Serialize scalar item.
            add(prefix, obj);
        }
    }

    // Serialize an array of form elements or a set of
    // key/values into a query string
    jQuery.param = function(a, traditional) {
        var prefix,
            s = [],
            add = function(key, value) {

                // If value is a function, invoke it and return its value
                value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
                s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);
            };

        // Set traditional to true for jQuery <= 1.3.2 behavior.
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }

        // If an array was passed in, assume that it is an array of form elements.
        if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {

            // Serialize the form elements
            jQuery.each(a, function() {
                add(this.name, this.value);
            });

        } else {

            // If traditional, encode the "old" way (the way 1.3.2 or older
            // did it), otherwise encode params recursively.
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }

        // Return the resulting serialization
        return s.join("&").replace(r20, "+");
    };

    jQuery.fn.extend({
        serialize: function() {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function() {
            return this.map(function() {

                    // Can add propHook for "elements" to filter or add form elements
                    var elements = jQuery.prop(this, "elements");
                    return elements ? jQuery.makeArray(elements) : this;
                })
                .filter(function() {
                    var type = this.type;

                    // Use .is( ":disabled" ) so that fieldset[disabled] works
                    return this.name && !jQuery(this).is(":disabled") &&
                        rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) &&
                        (this.checked || !rcheckableType.test(type));
                })
                .map(function(i, elem) {
                    var val = jQuery(this).val();

                    return val == null ?
                        null :
                        jQuery.isArray(val) ?
                        jQuery.map(val, function(val) {
                            return {
                                name: elem.name,
                                value: val.replace(rCRLF, "\r\n")
                            };
                        }) : {
                            name: elem.name,
                            value: val.replace(rCRLF, "\r\n")
                        };
                }).get();
        }
    });


    jQuery.ajaxSettings.xhr = function() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {}
    };

    var xhrSuccessStatus = {

            // File protocol always yields status code 0, assume 200
            0: 200,

            // Support: IE9
            // #1450: sometimes IE returns 1223 when it should be 204
            1223: 204
        },
        xhrSupported = jQuery.ajaxSettings.xhr();

    support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
    support.ajax = xhrSupported = !!xhrSupported;

    jQuery.ajaxTransport(function(options) {
        var callback, errorCallback;

        // Cross domain only allowed if supported through XMLHttpRequest
        if (support.cors || xhrSupported && !options.crossDomain) {
            return {
                send: function(headers, complete) {
                    var i,
                        xhr = options.xhr();

                    xhr.open(
                        options.type,
                        options.url,
                        options.async,
                        options.username,
                        options.password
                    );

                    // Apply custom fields if provided
                    if (options.xhrFields) {
                        for (i in options.xhrFields) {
                            xhr[i] = options.xhrFields[i];
                        }
                    }

                    // Override mime type if needed
                    if (options.mimeType && xhr.overrideMimeType) {
                        xhr.overrideMimeType(options.mimeType);
                    }

                    // X-Requested-With header
                    // For cross-domain requests, seeing as conditions for a preflight are
                    // akin to a jigsaw puzzle, we simply never set it to be sure.
                    // (it can always be set on a per-request basis or even using ajaxSetup)
                    // For same-domain requests, won't change header if already provided.
                    if (!options.crossDomain && !headers["X-Requested-With"]) {
                        headers["X-Requested-With"] = "XMLHttpRequest";
                    }

                    // Set headers
                    for (i in headers) {
                        xhr.setRequestHeader(i, headers[i]);
                    }

                    // Callback
                    callback = function(type) {
                        return function() {
                            if (callback) {
                                callback = errorCallback = xhr.onload =
                                    xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

                                if (type === "abort") {
                                    xhr.abort();
                                } else if (type === "error") {

                                    // Support: IE9
                                    // On a manual native abort, IE9 throws
                                    // errors on any property access that is not readyState
                                    if (typeof xhr.status !== "number") {
                                        complete(0, "error");
                                    } else {
                                        complete(

                                            // File: protocol always yields status 0; see #8605, #14207
                                            xhr.status,
                                            xhr.statusText
                                        );
                                    }
                                } else {
                                    complete(
                                        xhrSuccessStatus[xhr.status] || xhr.status,
                                        xhr.statusText,

                                        // Support: IE9 only
                                        // IE9 has no XHR2 but throws on binary (trac-11426)
                                        // For XHR2 non-text, let the caller handle it (gh-2498)
                                        (xhr.responseType || "text") !== "text" ||
                                        typeof xhr.responseText !== "string" ? {
                                            binary: xhr.response
                                        } : {
                                            text: xhr.responseText
                                        },
                                        xhr.getAllResponseHeaders()
                                    );
                                }
                            }
                        };
                    };

                    // Listen to events
                    xhr.onload = callback();
                    errorCallback = xhr.onerror = callback("error");

                    // Support: IE9
                    // Use onreadystatechange to replace onabort
                    // to handle uncaught aborts
                    if (xhr.onabort !== undefined) {
                        xhr.onabort = errorCallback;
                    } else {
                        xhr.onreadystatechange = function() {

                            // Check readyState before timeout as it changes
                            if (xhr.readyState === 4) {

                                // Allow onerror to be called first,
                                // but that will not handle a native abort
                                // Also, save errorCallback to a variable
                                // as xhr.onerror cannot be accessed
                                window.setTimeout(function() {
                                    if (callback) {
                                        errorCallback();
                                    }
                                });
                            }
                        };
                    }

                    // Create the abort callback
                    callback = callback("abort");

                    try {

                        // Do send the request (this may raise an exception)
                        xhr.send(options.hasContent && options.data || null);
                    } catch (e) {

                        // #14683: Only rethrow if this hasn't been notified as an error yet
                        if (callback) {
                            throw e;
                        }
                    }
                },

                abort: function() {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });




    // Install script dataType
    jQuery.ajaxSetup({
        accepts: {
            script: "text/javascript, application/javascript, " +
                "application/ecmascript, application/x-ecmascript"
        },
        contents: {
            script: /\b(?:java|ecma)script\b/
        },
        converters: {
            "text script": function(text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });

    // Handle cache's special case and crossDomain
    jQuery.ajaxPrefilter("script", function(s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = "GET";
        }
    });

    // Bind script tag hack transport
    jQuery.ajaxTransport("script", function(s) {

        // This transport only deals with cross domain requests
        if (s.crossDomain) {
            var script, callback;
            return {
                send: function(_, complete) {
                    script = jQuery("<script>").prop({
                        charset: s.scriptCharset,
                        src: s.url
                    }).on(
                        "load error",
                        callback = function(evt) {
                            script.remove();
                            callback = null;
                            if (evt) {
                                complete(evt.type === "error" ? 404 : 200, evt.type);
                            }
                        }
                    );

                    // Use native DOM manipulation to avoid our domManip AJAX trickery
                    document.head.appendChild(script[0]);
                },
                abort: function() {
                    if (callback) {
                        callback();
                    }
                }
            };
        }
    });




    var oldCallbacks = [],
        rjsonp = /(=)\?(?=&|$)|\?\?/;

    // Default jsonp settings
    jQuery.ajaxSetup({
        jsonp: "callback",
        jsonpCallback: function() {
            var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (nonce++));
            this[callback] = true;
            return callback;
        }
    });

    // Detect, normalize options and install callbacks for jsonp requests
    jQuery.ajaxPrefilter("json jsonp", function(s, originalSettings, jqXHR) {

        var callbackName, overwritten, responseContainer,
            jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ?
                "url" :
                typeof s.data === "string" &&
                (s.contentType || "")
                .indexOf("application/x-www-form-urlencoded") === 0 &&
                rjsonp.test(s.data) && "data"
            );

        // Handle iff the expected data type is "jsonp" or we have a parameter to set
        if (jsonProp || s.dataTypes[0] === "jsonp") {

            // Get callback name, remembering preexisting value associated with it
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ?
                s.jsonpCallback() :
                s.jsonpCallback;

            // Insert callback into url or form data
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
            }

            // Use data converter to retrieve json after script execution
            s.converters["script json"] = function() {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called");
                }
                return responseContainer[0];
            };

            // Force json dataType
            s.dataTypes[0] = "json";

            // Install callback
            overwritten = window[callbackName];
            window[callbackName] = function() {
                responseContainer = arguments;
            };

            // Clean-up function (fires after converters)
            jqXHR.always(function() {

                // If previous value didn't exist - remove it
                if (overwritten === undefined) {
                    jQuery(window).removeProp(callbackName);

                    // Otherwise restore preexisting value
                } else {
                    window[callbackName] = overwritten;
                }

                // Save back as free
                if (s[callbackName]) {

                    // Make sure that re-using the options doesn't screw things around
                    s.jsonpCallback = originalSettings.jsonpCallback;

                    // Save the callback name for future use
                    oldCallbacks.push(callbackName);
                }

                // Call if it was a function and we have a response
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }

                responseContainer = overwritten = undefined;
            });

            // Delegate to script
            return "script";
        }
    });




    // Support: Safari 8+
    // In Safari 8 documents created via document.implementation.createHTMLDocument
    // collapse sibling forms: the second one becomes a child of the first one.
    // Because of that, this security measure has to be disabled in Safari 8.
    // https://bugs.webkit.org/show_bug.cgi?id=137337
    support.createHTMLDocument = (function() {
        var body = document.implementation.createHTMLDocument("").body;
        body.innerHTML = "<form></form><form></form>";
        return body.childNodes.length === 2;
    })();


    // Argument "data" should be string of html
    // context (optional): If specified, the fragment will be created in this context,
    // defaults to document
    // keepScripts (optional): If true, will include scripts passed in the html string
    jQuery.parseHTML = function(data, context, keepScripts) {
        if (!data || typeof data !== "string") {
            return null;
        }
        if (typeof context === "boolean") {
            keepScripts = context;
            context = false;
        }

        // Stop scripts or inline event handlers from being executed immediately
        // by using document.implementation
        context = context || (support.createHTMLDocument ?
            document.implementation.createHTMLDocument("") :
            document);

        var parsed = rsingleTag.exec(data),
            scripts = !keepScripts && [];

        // Single tag
        if (parsed) {
            return [context.createElement(parsed[1])];
        }

        parsed = buildFragment([data], context, scripts);

        if (scripts && scripts.length) {
            jQuery(scripts).remove();
        }

        return jQuery.merge([], parsed.childNodes);
    };


    // Keep a copy of the old load method
    var _load = jQuery.fn.load;

    /**
     * Load a url into a page
     */
    jQuery.fn.load = function(url, params, callback) {
        if (typeof url !== "string" && _load) {
            return _load.apply(this, arguments);
        }

        var selector, type, response,
            self = this,
            off = url.indexOf(" ");

        if (off > -1) {
            selector = jQuery.trim(url.slice(off));
            url = url.slice(0, off);
        }

        // If it's a function
        if (jQuery.isFunction(params)) {

            // We assume that it's the callback
            callback = params;
            params = undefined;

            // Otherwise, build a param string
        } else if (params && typeof params === "object") {
            type = "POST";
        }

        // If we have elements to modify, make the request
        if (self.length > 0) {
            jQuery.ajax({
                url: url,

                // If "type" variable is undefined, then "GET" method will be used.
                // Make value of this field explicit since
                // user can override it through ajaxSetup method
                type: type || "GET",
                dataType: "html",
                data: params
            }).done(function(responseText) {

                // Save response for use in complete callback
                response = arguments;

                self.html(selector ?

                    // If a selector was specified, locate the right elements in a dummy div
                    // Exclude scripts to avoid IE 'Permission Denied' errors
                    jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

                    // Otherwise use the full result
                    responseText);

                // If the request succeeds, this function gets "data", "status", "jqXHR"
                // but they are ignored because response was set above.
                // If it fails, this function gets "jqXHR", "status", "error"
            }).always(callback && function(jqXHR, status) {
                self.each(function() {
                    callback.apply(self, response || [jqXHR.responseText, status, jqXHR]);
                });
            });
        }

        return this;
    };




    // Attach a bunch of functions for handling common AJAX events
    jQuery.each([
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
    ], function(i, type) {
        jQuery.fn[type] = function(fn) {
            return this.on(type, fn);
        };
    });




    jQuery.expr.filters.animated = function(elem) {
        return jQuery.grep(jQuery.timers, function(fn) {
            return elem === fn.elem;
        }).length;
    };




    /**
     * Gets a window from an element
     */
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
    }

    jQuery.offset = {
        setOffset: function(elem, options, i) {
            var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
                position = jQuery.css(elem, "position"),
                curElem = jQuery(elem),
                props = {};

            // Set position first, in-case top/left are set even on static elem
            if (position === "static") {
                elem.style.position = "relative";
            }

            curOffset = curElem.offset();
            curCSSTop = jQuery.css(elem, "top");
            curCSSLeft = jQuery.css(elem, "left");
            calculatePosition = (position === "absolute" || position === "fixed") &&
                (curCSSTop + curCSSLeft).indexOf("auto") > -1;

            // Need to be able to calculate position if either
            // top or left is auto and position is either absolute or fixed
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;

            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }

            if (jQuery.isFunction(options)) {

                // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
                options = options.call(elem, i, jQuery.extend({}, curOffset));
            }

            if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop;
            }
            if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft;
            }

            if ("using" in options) {
                options.using.call(elem, props);

            } else {
                curElem.css(props);
            }
        }
    };

    jQuery.fn.extend({
        offset: function(options) {
            if (arguments.length) {
                return options === undefined ?
                    this :
                    this.each(function(i) {
                        jQuery.offset.setOffset(this, options, i);
                    });
            }

            var docElem, win,
                elem = this[0],
                box = {
                    top: 0,
                    left: 0
                },
                doc = elem && elem.ownerDocument;

            if (!doc) {
                return;
            }

            docElem = doc.documentElement;

            // Make sure it's not a disconnected DOM node
            if (!jQuery.contains(docElem, elem)) {
                return box;
            }

            box = elem.getBoundingClientRect();
            win = getWindow(doc);
            return {
                top: box.top + win.pageYOffset - docElem.clientTop,
                left: box.left + win.pageXOffset - docElem.clientLeft
            };
        },

        position: function() {
            if (!this[0]) {
                return;
            }

            var offsetParent, offset,
                elem = this[0],
                parentOffset = {
                    top: 0,
                    left: 0
                };

            // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
            // because it is its only offset parent
            if (jQuery.css(elem, "position") === "fixed") {

                // Assume getBoundingClientRect is there when computed position is fixed
                offset = elem.getBoundingClientRect();

            } else {

                // Get *real* offsetParent
                offsetParent = this.offsetParent();

                // Get correct offsets
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset();
                }

                // Add offsetParent borders
                // Subtract offsetParent scroll positions
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true) -
                    offsetParent.scrollTop();
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true) -
                    offsetParent.scrollLeft();
            }

            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            };
        },

        // This method will return documentElement in the following cases:
        // 1) For the element inside the iframe without offsetParent, this method will return
        //    documentElement of the parent window
        // 2) For the hidden or detached element
        // 3) For body or html element, i.e. in case of the html node - it will return itself
        //
        // but those exceptions were never presented as a real life use-cases
        // and might be considered as more preferable results.
        //
        // This logic, however, is not guaranteed and can change at any point in the future
        offsetParent: function() {
            return this.map(function() {
                var offsetParent = this.offsetParent;

                while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
                    offsetParent = offsetParent.offsetParent;
                }

                return offsetParent || documentElement;
            });
        }
    });

    // Create scrollLeft and scrollTop methods
    jQuery.each({
        scrollLeft: "pageXOffset",
        scrollTop: "pageYOffset"
    }, function(method, prop) {
        var top = "pageYOffset" === prop;

        jQuery.fn[method] = function(val) {
            return access(this, function(elem, method, val) {
                var win = getWindow(elem);

                if (val === undefined) {
                    return win ? win[prop] : elem[method];
                }

                if (win) {
                    win.scrollTo(!top ? val : win.pageXOffset,
                        top ? val : win.pageYOffset
                    );

                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length);
        };
    });

    // Support: Safari<7-8+, Chrome<37-44+
    // Add the top/left cssHooks using jQuery.fn.position
    // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
    // Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
    // getComputedStyle returns percent when specified for top/left/bottom/right;
    // rather than make the css module depend on the offset module, just check for it here
    jQuery.each(["top", "left"], function(i, prop) {
        jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,
            function(elem, computed) {
                if (computed) {
                    computed = curCSS(elem, prop);

                    // If curCSS returns percentage, fallback to offset
                    return rnumnonpx.test(computed) ?
                        jQuery(elem).position()[prop] + "px" :
                        computed;
                }
            }
        );
    });


    // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
    jQuery.each({
        Height: "height",
        Width: "width"
    }, function(name, type) {
        jQuery.each({
                padding: "inner" + name,
                content: type,
                "": "outer" + name
            },
            function(defaultExtra, funcName) {

                // Margin is only for outerHeight, outerWidth
                jQuery.fn[funcName] = function(margin, value) {
                    var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
                        extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

                    return access(this, function(elem, type, value) {
                        var doc;

                        if (jQuery.isWindow(elem)) {

                            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
                            // isn't a whole lot we can do. See pull request at this URL for discussion:
                            // https://github.com/jquery/jquery/pull/764
                            return elem.document.documentElement["client" + name];
                        }

                        // Get document width or height
                        if (elem.nodeType === 9) {
                            doc = elem.documentElement;

                            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
                            // whichever is greatest
                            return Math.max(
                                elem.body["scroll" + name], doc["scroll" + name],
                                elem.body["offset" + name], doc["offset" + name],
                                doc["client" + name]
                            );
                        }

                        return value === undefined ?

                            // Get width or height on the element, requesting but not forcing parseFloat
                            jQuery.css(elem, type, extra) :

                            // Set width or height on the element
                            jQuery.style(elem, type, value, extra);
                    }, type, chainable ? margin : undefined, chainable, null);
                };
            });
    });


    jQuery.fn.extend({

        bind: function(types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function(types, fn) {
            return this.off(types, null, fn);
        },

        delegate: function(selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function(selector, types, fn) {

            // ( namespace ) or ( selector, types [, fn] )
            return arguments.length === 1 ?
                this.off(selector, "**") :
                this.off(types, selector || "**", fn);
        },
        size: function() {
            return this.length;
        }
    });

    jQuery.fn.andSelf = jQuery.fn.addBack;




    // Register as a named AMD module, since jQuery can be concatenated with other
    // files that may use define, but not via a proper concatenation script that
    // understands anonymous AMD modules. A named AMD is safest and most robust
    // way to register. Lowercase jquery is used because AMD module names are
    // derived from file names, and jQuery is normally delivered in a lowercase
    // file name. Do this after creating the global so that if an AMD module wants
    // to call noConflict to hide this version of jQuery, it will work.

    // Note that for maximum portability, libraries that are not jQuery should
    // declare themselves as anonymous modules, and avoid setting a global if an
    // AMD loader is present. jQuery is a special case. For more information, see
    // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

    if (typeof define === "function" && define.amd) {
        define("jquery", [], function() {
            return jQuery;
        });
    }



    var

    // Map over jQuery in case of overwrite
        _jQuery = window.jQuery,

        // Map over the $ in case of overwrite
        _$ = window.$;

    jQuery.noConflict = function(deep) {
        if (window.$ === jQuery) {
            window.$ = _$;
        }

        if (deep && window.jQuery === jQuery) {
            window.jQuery = _jQuery;
        }

        return jQuery;
    };

    // Expose jQuery and $ identifiers, even in AMD
    // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
    // and CommonJS for browser emulators (#13566)
    if (!noGlobal) {
        window.jQuery = window.$ = jQuery;
    }

    return jQuery;
}));

/*! fancyBox v2.1.5 fancyapps.com | fancyapps.com/fancybox/#license */
(function(r, G, f, v) {
    var J = f("html"),
        n = f(r),
        p = f(G),
        b = f.fancybox = function() {
            b.open.apply(this, arguments)
        },
        I = navigator.userAgent.match(/msie/i),
        B = null,
        s = G.createTouch !== v,
        t = function(a) {
            return a && a.hasOwnProperty && a instanceof f
        },
        q = function(a) {
            return a && "string" === f.type(a)
        },
        E = function(a) {
            return q(a) && 0 < a.indexOf("%")
        },
        l = function(a, d) {
            var e = parseInt(a, 10) || 0;
            d && E(a) && (e *= b.getViewport()[d] / 100);
            return Math.ceil(e)
        },
        w = function(a, b) {
            return l(a, b) + "px"
        };
    f.extend(b, {
        version: "2.1.5",
        defaults: {
            padding: 15,
            margin: 20,
            width: 800,
            height: 600,
            minWidth: 100,
            minHeight: 100,
            maxWidth: 9999,
            maxHeight: 9999,
            pixelRatio: 1,
            autoSize: !0,
            autoHeight: !1,
            autoWidth: !1,
            autoResize: !0,
            autoCenter: !s,
            fitToView: !0,
            aspectRatio: !1,
            topRatio: 0.5,
            leftRatio: 0.5,
            scrolling: "auto",
            wrapCSS: "",
            arrows: !0,
            closeBtn: !0,
            closeClick: !1,
            nextClick: !1,
            mouseWheel: !0,
            autoPlay: !1,
            playSpeed: 3E3,
            preload: 3,
            modal: !1,
            loop: !0,
            ajax: {
                dataType: "html",
                headers: {
                    "X-fancyBox": !0
                }
            },
            iframe: {
                scrolling: "auto",
                preload: !0
            },
            swf: {
                wmode: "transparent",
                allowfullscreen: "true",
                allowscriptaccess: "always"
            },
            keys: {
                next: {
                    13: "left",
                    34: "up",
                    39: "left",
                    40: "up"
                },
                prev: {
                    8: "right",
                    33: "down",
                    37: "right",
                    38: "down"
                },
                close: [27],
                play: [32],
                toggle: [70]
            },
            direction: {
                next: "left",
                prev: "right"
            },
            scrollOutside: !0,
            index: 0,
            type: null,
            href: null,
            content: null,
            title: null,
            tpl: {
                wrap: '<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',
                image: '<img class="fancybox-image" src="{href}" alt="" />',
                iframe: '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen' +
                    (I ? ' allowtransparency="true"' : "") + "></iframe>",
                error: '<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',
                closeBtn: '<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',
                next: '<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
                prev: '<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>'
            },
            openEffect: "fade",
            openSpeed: 250,
            openEasing: "swing",
            openOpacity: !0,
            openMethod: "zoomIn",
            closeEffect: "fade",
            closeSpeed: 250,
            closeEasing: "swing",
            closeOpacity: !0,
            closeMethod: "zoomOut",
            nextEffect: "elastic",
            nextSpeed: 250,
            nextEasing: "swing",
            nextMethod: "changeIn",
            prevEffect: "elastic",
            prevSpeed: 250,
            prevEasing: "swing",
            prevMethod: "changeOut",
            helpers: {
                overlay: !0,
                title: !0
            },
            onCancel: f.noop,
            beforeLoad: f.noop,
            afterLoad: f.noop,
            beforeShow: f.noop,
            afterShow: f.noop,
            beforeChange: f.noop,
            beforeClose: f.noop,
            afterClose: f.noop
        },
        group: {},
        opts: {},
        previous: null,
        coming: null,
        current: null,
        isActive: !1,
        isOpen: !1,
        isOpened: !1,
        wrap: null,
        skin: null,
        outer: null,
        inner: null,
        player: {
            timer: null,
            isActive: !1
        },
        ajaxLoad: null,
        imgPreload: null,
        transitions: {},
        helpers: {},
        open: function(a, d) {
            if (a && (f.isPlainObject(d) || (d = {}), !1 !== b.close(!0))) return f.isArray(a) || (a = t(a) ? f(a).get() : [a]), f.each(a, function(e, c) {
                var k = {},
                    g, h, j, m, l;
                "object" === f.type(c) && (c.nodeType && (c = f(c)), t(c) ? (k = {
                    href: c.data("fancybox-href") || c.attr("href"),
                    title: c.data("fancybox-title") || c.attr("title"),
                    isDom: !0,
                    element: c
                }, f.metadata && f.extend(!0, k,
                    c.metadata())) : k = c);
                g = d.href || k.href || (q(c) ? c : null);
                h = d.title !== v ? d.title : k.title || "";
                m = (j = d.content || k.content) ? "html" : d.type || k.type;
                !m && k.isDom && (m = c.data("fancybox-type"), m || (m = (m = c.prop("class").match(/fancybox\.(\w+)/)) ? m[1] : null));
                q(g) && (m || (b.isImage(g) ? m = "image" : b.isSWF(g) ? m = "swf" : "#" === g.charAt(0) ? m = "inline" : q(c) && (m = "html", j = c)), "ajax" === m && (l = g.split(/\s+/, 2), g = l.shift(), l = l.shift()));
                j || ("inline" === m ? g ? j = f(q(g) ? g.replace(/.*(?=#[^\s]+$)/, "") : g) : k.isDom && (j = c) : "html" === m ? j = g : !m && (!g &&
                    k.isDom) && (m = "inline", j = c));
                f.extend(k, {
                    href: g,
                    type: m,
                    content: j,
                    title: h,
                    selector: l
                });
                a[e] = k
            }), b.opts = f.extend(!0, {}, b.defaults, d), d.keys !== v && (b.opts.keys = d.keys ? f.extend({}, b.defaults.keys, d.keys) : !1), b.group = a, b._start(b.opts.index)
        },
        cancel: function() {
            var a = b.coming;
            a && !1 !== b.trigger("onCancel") && (b.hideLoading(), b.ajaxLoad && b.ajaxLoad.abort(), b.ajaxLoad = null, b.imgPreload && (b.imgPreload.onload = b.imgPreload.onerror = null), a.wrap && a.wrap.stop(!0, !0).trigger("onReset").remove(), b.coming = null, b.current ||
                b._afterZoomOut(a))
        },
        close: function(a) {
            b.cancel();
            !1 !== b.trigger("beforeClose") && (b.unbindEvents(), b.isActive && (!b.isOpen || !0 === a ? (f(".fancybox-wrap").stop(!0).trigger("onReset").remove(), b._afterZoomOut()) : (b.isOpen = b.isOpened = !1, b.isClosing = !0, f(".fancybox-item, .fancybox-nav").remove(), b.wrap.stop(!0, !0).removeClass("fancybox-opened"), b.transitions[b.current.closeMethod]())))
        },
        play: function(a) {
            var d = function() {
                    clearTimeout(b.player.timer)
                },
                e = function() {
                    d();
                    b.current && b.player.isActive && (b.player.timer =
                        setTimeout(b.next, b.current.playSpeed))
                },
                c = function() {
                    d();
                    p.unbind(".player");
                    b.player.isActive = !1;
                    b.trigger("onPlayEnd")
                };
            if (!0 === a || !b.player.isActive && !1 !== a) {
                if (b.current && (b.current.loop || b.current.index < b.group.length - 1)) b.player.isActive = !0, p.bind({
                    "onCancel.player beforeClose.player": c,
                    "onUpdate.player": e,
                    "beforeLoad.player": d
                }), e(), b.trigger("onPlayStart")
            } else c()
        },
        next: function(a) {
            var d = b.current;
            d && (q(a) || (a = d.direction.next), b.jumpto(d.index + 1, a, "next"))
        },
        prev: function(a) {
            var d = b.current;
            d && (q(a) || (a = d.direction.prev), b.jumpto(d.index - 1, a, "prev"))
        },
        jumpto: function(a, d, e) {
            var c = b.current;
            c && (a = l(a), b.direction = d || c.direction[a >= c.index ? "next" : "prev"], b.router = e || "jumpto", c.loop && (0 > a && (a = c.group.length + a % c.group.length), a %= c.group.length), c.group[a] !== v && (b.cancel(), b._start(a)))
        },
        reposition: function(a, d) {
            var e = b.current,
                c = e ? e.wrap : null,
                k;
            c && (k = b._getPosition(d), a && "scroll" === a.type ? (delete k.position, c.stop(!0, !0).animate(k, 200)) : (c.css(k), e.pos = f.extend({}, e.dim, k)))
        },
        update: function(a) {
            var d =
                a && a.type,
                e = !d || "orientationchange" === d;
            e && (clearTimeout(B), B = null);
            b.isOpen && !B && (B = setTimeout(function() {
                var c = b.current;
                c && !b.isClosing && (b.wrap.removeClass("fancybox-tmp"), (e || "load" === d || "resize" === d && c.autoResize) && b._setDimension(), "scroll" === d && c.canShrink || b.reposition(a), b.trigger("onUpdate"), B = null)
            }, e && !s ? 0 : 300))
        },
        toggle: function(a) {
            b.isOpen && (b.current.fitToView = "boolean" === f.type(a) ? a : !b.current.fitToView, s && (b.wrap.removeAttr("style").addClass("fancybox-tmp"), b.trigger("onUpdate")),
                b.update())
        },
        hideLoading: function() {
            p.unbind(".loading");
            f("#fancybox-loading").remove()
        },
        showLoading: function() {
            var a, d;
            b.hideLoading();
            a = f('<div id="fancybox-loading"><div></div></div>').click(b.cancel).appendTo("body");
            p.bind("keydown.loading", function(a) {
                if (27 === (a.which || a.keyCode)) a.preventDefault(), b.cancel()
            });
            b.defaults.fixed || (d = b.getViewport(), a.css({
                position: "absolute",
                top: 0.5 * d.h + d.y,
                left: 0.5 * d.w + d.x
            }))
        },
        getViewport: function() {
            var a = b.current && b.current.locked || !1,
                d = {
                    x: n.scrollLeft(),
                    y: n.scrollTop()
                };
            a ? (d.w = a[0].clientWidth, d.h = a[0].clientHeight) : (d.w = s && r.innerWidth ? r.innerWidth : n.width(), d.h = s && r.innerHeight ? r.innerHeight : n.height());
            return d
        },
        unbindEvents: function() {
            b.wrap && t(b.wrap) && b.wrap.unbind(".fb");
            p.unbind(".fb");
            n.unbind(".fb")
        },
        bindEvents: function() {
            var a = b.current,
                d;
            a && (n.bind("orientationchange.fb" + (s ? "" : " resize.fb") + (a.autoCenter && !a.locked ? " scroll.fb" : ""), b.update), (d = a.keys) && p.bind("keydown.fb", function(e) {
                var c = e.which || e.keyCode,
                    k = e.target || e.srcElement;
                if (27 === c && b.coming) return !1;
                !e.ctrlKey && (!e.altKey && !e.shiftKey && !e.metaKey && (!k || !k.type && !f(k).is("[contenteditable]"))) && f.each(d, function(d, k) {
                    if (1 < a.group.length && k[c] !== v) return b[d](k[c]), e.preventDefault(), !1;
                    if (-1 < f.inArray(c, k)) return b[d](), e.preventDefault(), !1
                })
            }), f.fn.mousewheel && a.mouseWheel && b.wrap.bind("mousewheel.fb", function(d, c, k, g) {
                for (var h = f(d.target || null), j = !1; h.length && !j && !h.is(".fancybox-skin") && !h.is(".fancybox-wrap");) j = h[0] && !(h[0].style.overflow && "hidden" === h[0].style.overflow) &&
                    (h[0].clientWidth && h[0].scrollWidth > h[0].clientWidth || h[0].clientHeight && h[0].scrollHeight > h[0].clientHeight), h = f(h).parent();
                if (0 !== c && !j && 1 < b.group.length && !a.canShrink) {
                    if (0 < g || 0 < k) b.prev(0 < g ? "down" : "left");
                    else if (0 > g || 0 > k) b.next(0 > g ? "up" : "right");
                    d.preventDefault()
                }
            }))
        },
        trigger: function(a, d) {
            var e, c = d || b.coming || b.current;
            if (c) {
                f.isFunction(c[a]) && (e = c[a].apply(c, Array.prototype.slice.call(arguments, 1)));
                if (!1 === e) return !1;
                c.helpers && f.each(c.helpers, function(d, e) {
                    if (e && b.helpers[d] && f.isFunction(b.helpers[d][a])) b.helpers[d][a](f.extend(!0, {}, b.helpers[d].defaults, e), c)
                });
                p.trigger(a)
            }
        },
        isImage: function(a) {
            return q(a) && a.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i)
        },
        isSWF: function(a) {
            return q(a) && a.match(/\.(swf)((\?|#).*)?$/i)
        },
        _start: function(a) {
            var d = {},
                e, c;
            a = l(a);
            e = b.group[a] || null;
            if (!e) return !1;
            d = f.extend(!0, {}, b.opts, e);
            e = d.margin;
            c = d.padding;
            "number" === f.type(e) && (d.margin = [e, e, e, e]);
            "number" === f.type(c) && (d.padding = [c, c, c, c]);
            d.modal && f.extend(!0, d, {
                closeBtn: !1,
                closeClick: !1,
                nextClick: !1,
                arrows: !1,
                mouseWheel: !1,
                keys: null,
                helpers: {
                    overlay: {
                        closeClick: !1
                    }
                }
            });
            d.autoSize && (d.autoWidth = d.autoHeight = !0);
            "auto" === d.width && (d.autoWidth = !0);
            "auto" === d.height && (d.autoHeight = !0);
            d.group = b.group;
            d.index = a;
            b.coming = d;
            if (!1 === b.trigger("beforeLoad")) b.coming = null;
            else {
                c = d.type;
                e = d.href;
                if (!c) return b.coming = null, b.current && b.router && "jumpto" !== b.router ? (b.current.index = a, b[b.router](b.direction)) : !1;
                b.isActive = !0;
                if ("image" === c || "swf" === c) d.autoHeight = d.autoWidth = !1, d.scrolling = "visible";
                "image" === c && (d.aspectRatio = !0);
                "iframe" === c && s && (d.scrolling = "scroll");
                d.wrap = f(d.tpl.wrap).addClass("fancybox-" + (s ? "mobile" : "desktop") + " fancybox-type-" + c + " fancybox-tmp " + d.wrapCSS).appendTo(d.parent || "body");
                f.extend(d, {
                    skin: f(".fancybox-skin", d.wrap),
                    outer: f(".fancybox-outer", d.wrap),
                    inner: f(".fancybox-inner", d.wrap)
                });
                f.each(["Top", "Right", "Bottom", "Left"], function(a, b) {
                    d.skin.css("padding" + b, w(d.padding[a]))
                });
                b.trigger("onReady");
                if ("inline" === c || "html" === c) {
                    if (!d.content || !d.content.length) return b._error("content")
                } else if (!e) return b._error("href");
                "image" === c ? b._loadImage() : "ajax" === c ? b._loadAjax() : "iframe" === c ? b._loadIframe() : b._afterLoad()
            }
        },
        _error: function(a) {
            f.extend(b.coming, {
                type: "html",
                autoWidth: !0,
                autoHeight: !0,
                minWidth: 0,
                minHeight: 0,
                scrolling: "no",
                hasError: a,
                content: b.coming.tpl.error
            });
            b._afterLoad()
        },
        _loadImage: function() {
            var a = b.imgPreload = new Image;
            a.onload = function() {
                this.onload = this.onerror = null;
                b.coming.width = this.width / b.opts.pixelRatio;
                b.coming.height = this.height / b.opts.pixelRatio;
                b._afterLoad()
            };
            a.onerror = function() {
                this.onload =
                    this.onerror = null;
                b._error("image")
            };
            a.src = b.coming.href;
            !0 !== a.complete && b.showLoading()
        },
        _loadAjax: function() {
            var a = b.coming;
            b.showLoading();
            b.ajaxLoad = f.ajax(f.extend({}, a.ajax, {
                url: a.href,
                error: function(a, e) {
                    b.coming && "abort" !== e ? b._error("ajax", a) : b.hideLoading()
                },
                success: function(d, e) {
                    "success" === e && (a.content = d, b._afterLoad())
                }
            }))
        },
        _loadIframe: function() {
            var a = b.coming,
                d = f(a.tpl.iframe.replace(/\{rnd\}/g, (new Date).getTime())).attr("scrolling", s ? "auto" : a.iframe.scrolling).attr("src", a.href);
            f(a.wrap).bind("onReset", function() {
                try {
                    f(this).find("iframe").hide().attr("src", "//about:blank").end().empty()
                } catch (a) {}
            });
            a.iframe.preload && (b.showLoading(), d.one("load", function() {
                f(this).data("ready", 1);
                s || f(this).bind("load.fb", b.update);
                f(this).parents(".fancybox-wrap").width("100%").removeClass("fancybox-tmp").show();
                b._afterLoad()
            }));
            a.content = d.appendTo(a.inner);
            a.iframe.preload || b._afterLoad()
        },
        _preloadImages: function() {
            var a = b.group,
                d = b.current,
                e = a.length,
                c = d.preload ? Math.min(d.preload,
                    e - 1) : 0,
                f, g;
            for (g = 1; g <= c; g += 1) f = a[(d.index + g) % e], "image" === f.type && f.href && ((new Image).src = f.href)
        },
        _afterLoad: function() {
            var a = b.coming,
                d = b.current,
                e, c, k, g, h;
            b.hideLoading();
            if (a && !1 !== b.isActive)
                if (!1 === b.trigger("afterLoad", a, d)) a.wrap.stop(!0).trigger("onReset").remove(), b.coming = null;
                else {
                    d && (b.trigger("beforeChange", d), d.wrap.stop(!0).removeClass("fancybox-opened").find(".fancybox-item, .fancybox-nav").remove());
                    b.unbindEvents();
                    e = a.content;
                    c = a.type;
                    k = a.scrolling;
                    f.extend(b, {
                        wrap: a.wrap,
                        skin: a.skin,
                        outer: a.outer,
                        inner: a.inner,
                        current: a,
                        previous: d
                    });
                    g = a.href;
                    switch (c) {
                        case "inline":
                        case "ajax":
                        case "html":
                            a.selector ? e = f("<div>").html(e).find(a.selector) : t(e) && (e.data("fancybox-placeholder") || e.data("fancybox-placeholder", f('<div class="fancybox-placeholder"></div>').insertAfter(e).hide()), e = e.show().detach(), a.wrap.bind("onReset", function() {
                                f(this).find(e).length && e.hide().replaceAll(e.data("fancybox-placeholder")).data("fancybox-placeholder", !1)
                            }));
                            break;
                        case "image":
                            e = a.tpl.image.replace("{href}",
                                g);
                            break;
                        case "swf":
                            e = '<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="' + g + '"></param>', h = "", f.each(a.swf, function(a, b) {
                                e += '<param name="' + a + '" value="' + b + '"></param>';
                                h += " " + a + '="' + b + '"'
                            }), e += '<embed src="' + g + '" type="application/x-shockwave-flash" width="100%" height="100%"' + h + "></embed></object>"
                    }(!t(e) || !e.parent().is(a.inner)) && a.inner.append(e);
                    b.trigger("beforeShow");
                    a.inner.css("overflow", "yes" === k ? "scroll" :
                        "no" === k ? "hidden" : k);
                    b._setDimension();
                    b.reposition();
                    b.isOpen = !1;
                    b.coming = null;
                    b.bindEvents();
                    if (b.isOpened) {
                        if (d.prevMethod) b.transitions[d.prevMethod]()
                    } else f(".fancybox-wrap").not(a.wrap).stop(!0).trigger("onReset").remove();
                    b.transitions[b.isOpened ? a.nextMethod : a.openMethod]();
                    b._preloadImages()
                }
        },
        _setDimension: function() {
            var a = b.getViewport(),
                d = 0,
                e = !1,
                c = !1,
                e = b.wrap,
                k = b.skin,
                g = b.inner,
                h = b.current,
                c = h.width,
                j = h.height,
                m = h.minWidth,
                u = h.minHeight,
                n = h.maxWidth,
                p = h.maxHeight,
                s = h.scrolling,
                q = h.scrollOutside ?
                h.scrollbarWidth : 0,
                x = h.margin,
                y = l(x[1] + x[3]),
                r = l(x[0] + x[2]),
                v, z, t, C, A, F, B, D, H;
            e.add(k).add(g).width("auto").height("auto").removeClass("fancybox-tmp");
            x = l(k.outerWidth(!0) - k.width());
            v = l(k.outerHeight(!0) - k.height());
            z = y + x;
            t = r + v;
            C = E(c) ? (a.w - z) * l(c) / 100 : c;
            A = E(j) ? (a.h - t) * l(j) / 100 : j;
            if ("iframe" === h.type) {
                if (H = h.content, h.autoHeight && 1 === H.data("ready")) try {
                    H[0].contentWindow.document.location && (g.width(C).height(9999), F = H.contents().find("body"), q && F.css("overflow-x", "hidden"), A = F.outerHeight(!0))
                } catch (G) {}
            } else if (h.autoWidth ||
                h.autoHeight) g.addClass("fancybox-tmp"), h.autoWidth || g.width(C), h.autoHeight || g.height(A), h.autoWidth && (C = g.width()), h.autoHeight && (A = g.height()), g.removeClass("fancybox-tmp");
            c = l(C);
            j = l(A);
            D = C / A;
            m = l(E(m) ? l(m, "w") - z : m);
            n = l(E(n) ? l(n, "w") - z : n);
            u = l(E(u) ? l(u, "h") - t : u);
            p = l(E(p) ? l(p, "h") - t : p);
            F = n;
            B = p;
            h.fitToView && (n = Math.min(a.w - z, n), p = Math.min(a.h - t, p));
            z = a.w - y;
            r = a.h - r;
            h.aspectRatio ? (c > n && (c = n, j = l(c / D)), j > p && (j = p, c = l(j * D)), c < m && (c = m, j = l(c / D)), j < u && (j = u, c = l(j * D))) : (c = Math.max(m, Math.min(c, n)), h.autoHeight &&
                "iframe" !== h.type && (g.width(c), j = g.height()), j = Math.max(u, Math.min(j, p)));
            if (h.fitToView)
                if (g.width(c).height(j), e.width(c + x), a = e.width(), y = e.height(), h.aspectRatio)
                    for (;
                        (a > z || y > r) && (c > m && j > u) && !(19 < d++);) j = Math.max(u, Math.min(p, j - 10)), c = l(j * D), c < m && (c = m, j = l(c / D)), c > n && (c = n, j = l(c / D)), g.width(c).height(j), e.width(c + x), a = e.width(), y = e.height();
                else c = Math.max(m, Math.min(c, c - (a - z))), j = Math.max(u, Math.min(j, j - (y - r)));
            q && ("auto" === s && j < A && c + x + q < z) && (c += q);
            g.width(c).height(j);
            e.width(c + x);
            a = e.width();
            y = e.height();
            e = (a > z || y > r) && c > m && j > u;
            c = h.aspectRatio ? c < F && j < B && c < C && j < A : (c < F || j < B) && (c < C || j < A);
            f.extend(h, {
                dim: {
                    width: w(a),
                    height: w(y)
                },
                origWidth: C,
                origHeight: A,
                canShrink: e,
                canExpand: c,
                wPadding: x,
                hPadding: v,
                wrapSpace: y - k.outerHeight(!0),
                skinSpace: k.height() - j
            });
            !H && (h.autoHeight && j > u && j < p && !c) && g.height("auto")
        },
        _getPosition: function(a) {
            var d = b.current,
                e = b.getViewport(),
                c = d.margin,
                f = b.wrap.width() + c[1] + c[3],
                g = b.wrap.height() + c[0] + c[2],
                c = {
                    position: "absolute",
                    top: c[0],
                    left: c[3]
                };
            d.autoCenter && d.fixed &&
                !a && g <= e.h && f <= e.w ? c.position = "fixed" : d.locked || (c.top += e.y, c.left += e.x);
            c.top = w(Math.max(c.top, c.top + (e.h - g) * d.topRatio));
            c.left = w(Math.max(c.left, c.left + (e.w - f) * d.leftRatio));
            return c
        },
        _afterZoomIn: function() {
            var a = b.current;
            a && (b.isOpen = b.isOpened = !0, b.wrap.css("overflow", "visible").addClass("fancybox-opened"), b.update(), (a.closeClick || a.nextClick && 1 < b.group.length) && b.inner.css("cursor", "pointer").bind("click.fb", function(d) {
                !f(d.target).is("a") && !f(d.target).parent().is("a") && (d.preventDefault(),
                    b[a.closeClick ? "close" : "next"]())
            }), a.closeBtn && f(a.tpl.closeBtn).appendTo(b.skin).bind("click.fb", function(a) {
                a.preventDefault();
                b.close()
            }), a.arrows && 1 < b.group.length && ((a.loop || 0 < a.index) && f(a.tpl.prev).appendTo(b.outer).bind("click.fb", b.prev), (a.loop || a.index < b.group.length - 1) && f(a.tpl.next).appendTo(b.outer).bind("click.fb", b.next)), b.trigger("afterShow"), !a.loop && a.index === a.group.length - 1 ? b.play(!1) : b.opts.autoPlay && !b.player.isActive && (b.opts.autoPlay = !1, b.play()))
        },
        _afterZoomOut: function(a) {
            a =
                a || b.current;
            f(".fancybox-wrap").trigger("onReset").remove();
            f.extend(b, {
                group: {},
                opts: {},
                router: !1,
                current: null,
                isActive: !1,
                isOpened: !1,
                isOpen: !1,
                isClosing: !1,
                wrap: null,
                skin: null,
                outer: null,
                inner: null
            });
            b.trigger("afterClose", a)
        }
    });
    b.transitions = {
        getOrigPosition: function() {
            var a = b.current,
                d = a.element,
                e = a.orig,
                c = {},
                f = 50,
                g = 50,
                h = a.hPadding,
                j = a.wPadding,
                m = b.getViewport();
            !e && (a.isDom && d.is(":visible")) && (e = d.find("img:first"), e.length || (e = d));
            t(e) ? (c = e.offset(), e.is("img") && (f = e.outerWidth(), g = e.outerHeight())) :
                (c.top = m.y + (m.h - g) * a.topRatio, c.left = m.x + (m.w - f) * a.leftRatio);
            if ("fixed" === b.wrap.css("position") || a.locked) c.top -= m.y, c.left -= m.x;
            return c = {
                top: w(c.top - h * a.topRatio),
                left: w(c.left - j * a.leftRatio),
                width: w(f + j),
                height: w(g + h)
            }
        },
        step: function(a, d) {
            var e, c, f = d.prop;
            c = b.current;
            var g = c.wrapSpace,
                h = c.skinSpace;
            if ("width" === f || "height" === f) e = d.end === d.start ? 1 : (a - d.start) / (d.end - d.start), b.isClosing && (e = 1 - e), c = "width" === f ? c.wPadding : c.hPadding, c = a - c, b.skin[f](l("width" === f ? c : c - g * e)), b.inner[f](l("width" ===
                f ? c : c - g * e - h * e))
        },
        zoomIn: function() {
            var a = b.current,
                d = a.pos,
                e = a.openEffect,
                c = "elastic" === e,
                k = f.extend({
                    opacity: 1
                }, d);
            delete k.position;
            c ? (d = this.getOrigPosition(), a.openOpacity && (d.opacity = 0.1)) : "fade" === e && (d.opacity = 0.1);
            b.wrap.css(d).animate(k, {
                duration: "none" === e ? 0 : a.openSpeed,
                easing: a.openEasing,
                step: c ? this.step : null,
                complete: b._afterZoomIn
            })
        },
        zoomOut: function() {
            var a = b.current,
                d = a.closeEffect,
                e = "elastic" === d,
                c = {
                    opacity: 0.1
                };
            e && (c = this.getOrigPosition(), a.closeOpacity && (c.opacity = 0.1));
            b.wrap.animate(c, {
                duration: "none" === d ? 0 : a.closeSpeed,
                easing: a.closeEasing,
                step: e ? this.step : null,
                complete: b._afterZoomOut
            })
        },
        changeIn: function() {
            var a = b.current,
                d = a.nextEffect,
                e = a.pos,
                c = {
                    opacity: 1
                },
                f = b.direction,
                g;
            e.opacity = 0.1;
            "elastic" === d && (g = "down" === f || "up" === f ? "top" : "left", "down" === f || "right" === f ? (e[g] = w(l(e[g]) - 200), c[g] = "+=200px") : (e[g] = w(l(e[g]) + 200), c[g] = "-=200px"));
            "none" === d ? b._afterZoomIn() : b.wrap.css(e).animate(c, {
                duration: a.nextSpeed,
                easing: a.nextEasing,
                complete: b._afterZoomIn
            })
        },
        changeOut: function() {
            var a =
                b.previous,
                d = a.prevEffect,
                e = {
                    opacity: 0.1
                },
                c = b.direction;
            "elastic" === d && (e["down" === c || "up" === c ? "top" : "left"] = ("up" === c || "left" === c ? "-" : "+") + "=200px");
            a.wrap.animate(e, {
                duration: "none" === d ? 0 : a.prevSpeed,
                easing: a.prevEasing,
                complete: function() {
                    f(this).trigger("onReset").remove()
                }
            })
        }
    };
    b.helpers.overlay = {
        defaults: {
            closeClick: !0,
            speedOut: 200,
            showEarly: !0,
            css: {},
            locked: !s,
            fixed: !0
        },
        overlay: null,
        fixed: !1,
        el: f("html"),
        create: function(a) {
            a = f.extend({}, this.defaults, a);
            this.overlay && this.close();
            this.overlay =
                f('<div class="fancybox-overlay"></div>').appendTo(b.coming ? b.coming.parent : a.parent);
            this.fixed = !1;
            a.fixed && b.defaults.fixed && (this.overlay.addClass("fancybox-overlay-fixed"), this.fixed = !0)
        },
        open: function(a) {
            var d = this;
            a = f.extend({}, this.defaults, a);
            this.overlay ? this.overlay.unbind(".overlay").width("auto").height("auto") : this.create(a);
            this.fixed || (n.bind("resize.overlay", f.proxy(this.update, this)), this.update());
            a.closeClick && this.overlay.bind("click.overlay", function(a) {
                if (f(a.target).hasClass("fancybox-overlay")) return b.isActive ?
                    b.close() : d.close(), !1
            });
            this.overlay.css(a.css).show()
        },
        close: function() {
            var a, b;
            n.unbind("resize.overlay");
            this.el.hasClass("fancybox-lock") && (f(".fancybox-margin").removeClass("fancybox-margin"), a = n.scrollTop(), b = n.scrollLeft(), this.el.removeClass("fancybox-lock"), n.scrollTop(a).scrollLeft(b));
            f(".fancybox-overlay").remove().hide();
            f.extend(this, {
                overlay: null,
                fixed: !1
            })
        },
        update: function() {
            var a = "100%",
                b;
            this.overlay.width(a).height("100%");
            I ? (b = Math.max(G.documentElement.offsetWidth, G.body.offsetWidth),
                p.width() > b && (a = p.width())) : p.width() > n.width() && (a = p.width());
            this.overlay.width(a).height(p.height())
        },
        onReady: function(a, b) {
            var e = this.overlay;
            f(".fancybox-overlay").stop(!0, !0);
            e || this.create(a);
            a.locked && (this.fixed && b.fixed) && (e || (this.margin = p.height() > n.height() ? f("html").css("margin-right").replace("px", "") : !1), b.locked = this.overlay.append(b.wrap), b.fixed = !1);
            !0 === a.showEarly && this.beforeShow.apply(this, arguments)
        },
        beforeShow: function(a, b) {
            var e, c;
            b.locked && (!1 !== this.margin && (f("*").filter(function() {
                return "fixed" ===
                    f(this).css("position") && !f(this).hasClass("fancybox-overlay") && !f(this).hasClass("fancybox-wrap")
            }).addClass("fancybox-margin"), this.el.addClass("fancybox-margin")), e = n.scrollTop(), c = n.scrollLeft(), this.el.addClass("fancybox-lock"), n.scrollTop(e).scrollLeft(c));
            this.open(a)
        },
        onUpdate: function() {
            this.fixed || this.update()
        },
        afterClose: function(a) {
            this.overlay && !b.coming && this.overlay.fadeOut(a.speedOut, f.proxy(this.close, this))
        }
    };
    b.helpers.title = {
        defaults: {
            type: "float",
            position: "bottom"
        },
        beforeShow: function(a) {
            var d =
                b.current,
                e = d.title,
                c = a.type;
            f.isFunction(e) && (e = e.call(d.element, d));
            if (q(e) && "" !== f.trim(e)) {
                d = f('<div class="fancybox-title fancybox-title-' + c + '-wrap">' + e + "</div>");
                switch (c) {
                    case "inside":
                        c = b.skin;
                        break;
                    case "outside":
                        c = b.wrap;
                        break;
                    case "over":
                        c = b.inner;
                        break;
                    default:
                        c = b.skin, d.appendTo("body"), I && d.width(d.width()), d.wrapInner('<span class="child"></span>'), b.current.margin[2] += Math.abs(l(d.css("margin-bottom")))
                }
                d["top" === a.position ? "prependTo" : "appendTo"](c)
            }
        }
    };
    f.fn.fancybox = function(a) {
        var d,
            e = f(this),
            c = this.selector || "",
            k = function(g) {
                var h = f(this).blur(),
                    j = d,
                    k, l;
                !g.ctrlKey && (!g.altKey && !g.shiftKey && !g.metaKey) && !h.is(".fancybox-wrap") && (k = a.groupAttr || "data-fancybox-group", l = h.attr(k), l || (k = "rel", l = h.get(0)[k]), l && ("" !== l && "nofollow" !== l) && (h = c.length ? f(c) : e, h = h.filter("[" + k + '="' + l + '"]'), j = h.index(this)), a.index = j, !1 !== b.open(h, a) && g.preventDefault())
            };
        a = a || {};
        d = a.index || 0;
        !c || !1 === a.live ? e.unbind("click.fb-start").bind("click.fb-start", k) : p.undelegate(c, "click.fb-start").delegate(c +
            ":not('.fancybox-item, .fancybox-nav')", "click.fb-start", k);
        this.filter("[data-fancybox-start=1]").trigger("click");
        return this
    };
    p.ready(function() {
        var a, d;
        f.scrollbarWidth === v && (f.scrollbarWidth = function() {
            var a = f('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo("body"),
                b = a.children(),
                b = b.innerWidth() - b.height(99).innerWidth();
            a.remove();
            return b
        });
        if (f.support.fixedPosition === v) {
            a = f.support;
            d = f('<div style="position:fixed;top:20px;"></div>').appendTo("body");
            var e = 20 ===
                d[0].offsetTop || 15 === d[0].offsetTop;
            d.remove();
            a.fixedPosition = e
        }
        f.extend(b.defaults, {
            scrollbarWidth: f.scrollbarWidth(),
            fixed: f.support.fixedPosition,
            parent: f("body")
        });
        a = f(r).width();
        J.addClass("fancybox-lock-test");
        d = f(r).width();
        J.removeClass("fancybox-lock-test");
        f("<style type='text/css'>.fancybox-margin{margin-right:" + (d - a) + "px;}</style>").appendTo("head")
    })
})(window, document, jQuery);
/*
 AngularJS v1.5.0
 (c) 2010-2016 Google, Inc. http://angularjs.org
 License: MIT
*/
(function(O, W, v) {
    'use strict';

    function H(a) {
        return function() {
            var b = arguments[0],
                d;
            d = "[" + (a ? a + ":" : "") + b + "] http://errors.angularjs.org/1.5.0/" + (a ? a + "/" : "") + b;
            for (b = 1; b < arguments.length; b++) {
                d = d + (1 == b ? "?" : "&") + "p" + (b - 1) + "=";
                var c = encodeURIComponent,
                    e;
                e = arguments[b];
                e = "function" == typeof e ? e.toString().replace(/ \{[\s\S]*$/, "") : "undefined" == typeof e ? "undefined" : "string" != typeof e ? JSON.stringify(e) : e;
                d += c(e)
            }
            return Error(d)
        }
    }

    function Ca(a) {
        if (null == a || Za(a)) return !1;
        if (L(a) || F(a) || C && a instanceof C) return !0;
        var b = "length" in Object(a) && a.length;
        return N(b) && (0 <= b && (b - 1 in a || a instanceof Array) || "function" == typeof a.item)
    }

    function n(a, b, d) {
        var c, e;
        if (a)
            if (D(a))
                for (c in a) "prototype" == c || "length" == c || "name" == c || a.hasOwnProperty && !a.hasOwnProperty(c) || b.call(d, a[c], c, a);
            else if (L(a) || Ca(a)) {
            var f = "object" !== typeof a;
            c = 0;
            for (e = a.length; c < e; c++)(f || c in a) && b.call(d, a[c], c, a)
        } else if (a.forEach && a.forEach !== n) a.forEach(b, d, a);
        else if (qc(a))
            for (c in a) b.call(d, a[c], c, a);
        else if ("function" === typeof a.hasOwnProperty)
            for (c in a) a.hasOwnProperty(c) &&
                b.call(d, a[c], c, a);
        else
            for (c in a) sa.call(a, c) && b.call(d, a[c], c, a);
        return a
    }

    function rc(a, b, d) {
        for (var c = Object.keys(a).sort(), e = 0; e < c.length; e++) b.call(d, a[c[e]], c[e]);
        return c
    }

    function sc(a) {
        return function(b, d) {
            a(d, b)
        }
    }

    function Yd() {
        return ++pb
    }

    function Qb(a, b, d) {
        for (var c = a.$$hashKey, e = 0, f = b.length; e < f; ++e) {
            var g = b[e];
            if (E(g) || D(g))
                for (var h = Object.keys(g), k = 0, l = h.length; k < l; k++) {
                    var m = h[k],
                        r = g[m];
                    d && E(r) ? V(r) ? a[m] = new Date(r.valueOf()) : $a(r) ? a[m] = new RegExp(r) : r.nodeName ? a[m] = r.cloneNode(!0) :
                        Rb(r) ? a[m] = r.clone() : (E(a[m]) || (a[m] = L(r) ? [] : {}), Qb(a[m], [r], !0)) : a[m] = r
                }
        }
        c ? a.$$hashKey = c : delete a.$$hashKey;
        return a
    }

    function T(a) {
        return Qb(a, wa.call(arguments, 1), !1)
    }

    function Zd(a) {
        return Qb(a, wa.call(arguments, 1), !0)
    }

    function ca(a) {
        return parseInt(a, 10)
    }

    function Sb(a, b) {
        return T(Object.create(a), b)
    }

    function B() {}

    function ab(a) {
        return a
    }

    function ba(a) {
        return function() {
            return a
        }
    }

    function tc(a) {
        return D(a.toString) && a.toString !== ga
    }

    function x(a) {
        return "undefined" === typeof a
    }

    function y(a) {
        return "undefined" !==
            typeof a
    }

    function E(a) {
        return null !== a && "object" === typeof a
    }

    function qc(a) {
        return null !== a && "object" === typeof a && !uc(a)
    }

    function F(a) {
        return "string" === typeof a
    }

    function N(a) {
        return "number" === typeof a
    }

    function V(a) {
        return "[object Date]" === ga.call(a)
    }

    function D(a) {
        return "function" === typeof a
    }

    function $a(a) {
        return "[object RegExp]" === ga.call(a)
    }

    function Za(a) {
        return a && a.window === a
    }

    function bb(a) {
        return a && a.$evalAsync && a.$watch
    }

    function Na(a) {
        return "boolean" === typeof a
    }

    function $d(a) {
        return a && N(a.length) &&
            ae.test(ga.call(a))
    }

    function Rb(a) {
        return !(!a || !(a.nodeName || a.prop && a.attr && a.find))
    }

    function be(a) {
        var b = {};
        a = a.split(",");
        var d;
        for (d = 0; d < a.length; d++) b[a[d]] = !0;
        return b
    }

    function ra(a) {
        return G(a.nodeName || a[0] && a[0].nodeName)
    }

    function cb(a, b) {
        var d = a.indexOf(b);
        0 <= d && a.splice(d, 1);
        return d
    }

    function Oa(a, b) {
        function d(a, b) {
            var d = b.$$hashKey,
                e;
            if (L(a)) {
                e = 0;
                for (var f = a.length; e < f; e++) b.push(c(a[e]))
            } else if (qc(a))
                for (e in a) b[e] = c(a[e]);
            else if (a && "function" === typeof a.hasOwnProperty)
                for (e in a) a.hasOwnProperty(e) &&
                    (b[e] = c(a[e]));
            else
                for (e in a) sa.call(a, e) && (b[e] = c(a[e]));
            d ? b.$$hashKey = d : delete b.$$hashKey;
            return b
        }

        function c(a) {
            if (!E(a)) return a;
            var b = f.indexOf(a);
            if (-1 !== b) return g[b];
            if (Za(a) || bb(a)) throw Da("cpws");
            var b = !1,
                c = e(a);
            c === v && (c = L(a) ? [] : Object.create(uc(a)), b = !0);
            f.push(a);
            g.push(c);
            return b ? d(a, c) : c
        }

        function e(a) {
            switch (ga.call(a)) {
                case "[object Int8Array]":
                case "[object Int16Array]":
                case "[object Int32Array]":
                case "[object Float32Array]":
                case "[object Float64Array]":
                case "[object Uint8Array]":
                case "[object Uint8ClampedArray]":
                case "[object Uint16Array]":
                case "[object Uint32Array]":
                    return new a.constructor(c(a.buffer));
                case "[object ArrayBuffer]":
                    if (!a.slice) {
                        var b = new ArrayBuffer(a.byteLength);
                        (new Uint8Array(b)).set(new Uint8Array(a));
                        return b
                    }
                    return a.slice(0);
                case "[object Boolean]":
                case "[object Number]":
                case "[object String]":
                case "[object Date]":
                    return new a.constructor(a.valueOf());
                case "[object RegExp]":
                    return b = new RegExp(a.source, a.toString().match(/[^\/]*$/)[0]), b.lastIndex = a.lastIndex, b
            }
            if (D(a.cloneNode)) return a.cloneNode(!0)
        }
        var f = [],
            g = [];
        if (b) {
            if ($d(b) || "[object ArrayBuffer]" === ga.call(b)) throw Da("cpta");
            if (a === b) throw Da("cpi");
            L(b) ? b.length = 0 : n(b, function(a, c) {
                "$$hashKey" !== c && delete b[c]
            });
            f.push(a);
            g.push(b);
            return d(a, b)
        }
        return c(a)
    }

    function na(a, b) {
        if (L(a)) {
            b = b || [];
            for (var d = 0, c = a.length; d < c; d++) b[d] = a[d]
        } else if (E(a))
            for (d in b = b || {}, a)
                if ("$" !== d.charAt(0) || "$" !== d.charAt(1)) b[d] = a[d];
        return b || a
    }

    function oa(a, b) {
        if (a === b) return !0;
        if (null === a || null === b) return !1;
        if (a !== a && b !== b) return !0;
        var d = typeof a,
            c;
        if (d == typeof b && "object" == d)
            if (L(a)) {
                if (!L(b)) return !1;
                if ((d = a.length) == b.length) {
                    for (c =
                        0; c < d; c++)
                        if (!oa(a[c], b[c])) return !1;
                    return !0
                }
            } else {
                if (V(a)) return V(b) ? oa(a.getTime(), b.getTime()) : !1;
                if ($a(a)) return $a(b) ? a.toString() == b.toString() : !1;
                if (bb(a) || bb(b) || Za(a) || Za(b) || L(b) || V(b) || $a(b)) return !1;
                d = Z();
                for (c in a)
                    if ("$" !== c.charAt(0) && !D(a[c])) {
                        if (!oa(a[c], b[c])) return !1;
                        d[c] = !0
                    }
                for (c in b)
                    if (!(c in d) && "$" !== c.charAt(0) && y(b[c]) && !D(b[c])) return !1;
                return !0
            }
        return !1
    }

    function db(a, b, d) {
        return a.concat(wa.call(b, d))
    }

    function vc(a, b) {
        var d = 2 < arguments.length ? wa.call(arguments, 2) : [];
        return !D(b) || b instanceof RegExp ? b : d.length ? function() {
            return arguments.length ? b.apply(a, db(d, arguments, 0)) : b.apply(a, d)
        } : function() {
            return arguments.length ? b.apply(a, arguments) : b.call(a)
        }
    }

    function ce(a, b) {
        var d = b;
        "string" === typeof a && "$" === a.charAt(0) && "$" === a.charAt(1) ? d = v : Za(b) ? d = "$WINDOW" : b && W === b ? d = "$DOCUMENT" : bb(b) && (d = "$SCOPE");
        return d
    }

    function eb(a, b) {
        if (x(a)) return v;
        N(b) || (b = b ? 2 : null);
        return JSON.stringify(a, ce, b)
    }

    function wc(a) {
        return F(a) ? JSON.parse(a) : a
    }

    function xc(a, b) {
        a = a.replace(de,
            "");
        var d = Date.parse("Jan 01, 1970 00:00:00 " + a) / 6E4;
        return isNaN(d) ? b : d
    }

    function Tb(a, b, d) {
        d = d ? -1 : 1;
        var c = a.getTimezoneOffset();
        b = xc(b, c);
        d *= b - c;
        a = new Date(a.getTime());
        a.setMinutes(a.getMinutes() + d);
        return a
    }

    function ta(a) {
        a = C(a).clone();
        try {
            a.empty()
        } catch (b) {}
        var d = C("<div>").append(a).html();
        try {
            return a[0].nodeType === Pa ? G(d) : d.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function(a, b) {
                return "<" + G(b)
            })
        } catch (c) {
            return G(d)
        }
    }

    function yc(a) {
        try {
            return decodeURIComponent(a)
        } catch (b) {}
    }

    function zc(a) {
        var b = {};
        n((a || "").split("&"), function(a) {
            var c, e, f;
            a && (e = a = a.replace(/\+/g, "%20"), c = a.indexOf("="), -1 !== c && (e = a.substring(0, c), f = a.substring(c + 1)), e = yc(e), y(e) && (f = y(f) ? yc(f) : !0, sa.call(b, e) ? L(b[e]) ? b[e].push(f) : b[e] = [b[e], f] : b[e] = f))
        });
        return b
    }

    function Ub(a) {
        var b = [];
        n(a, function(a, c) {
            L(a) ? n(a, function(a) {
                b.push(ha(c, !0) + (!0 === a ? "" : "=" + ha(a, !0)))
            }) : b.push(ha(c, !0) + (!0 === a ? "" : "=" + ha(a, !0)))
        });
        return b.length ? b.join("&") : ""
    }

    function qb(a) {
        return ha(a, !0).replace(/%26/gi, "&").replace(/%3D/gi, "=").replace(/%2B/gi,
            "+")
    }

    function ha(a, b) {
        return encodeURIComponent(a).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%3B/gi, ";").replace(/%20/g, b ? "%20" : "+")
    }

    function ee(a, b) {
        var d, c, e = Qa.length;
        for (c = 0; c < e; ++c)
            if (d = Qa[c] + b, F(d = a.getAttribute(d))) return d;
        return null
    }

    function fe(a, b) {
        var d, c, e = {};
        n(Qa, function(b) {
            b += "app";
            !d && a.hasAttribute && a.hasAttribute(b) && (d = a, c = a.getAttribute(b))
        });
        n(Qa, function(b) {
            b += "app";
            var e;
            !d && (e = a.querySelector("[" + b.replace(":", "\\:") + "]")) &&
                (d = e, c = e.getAttribute(b))
        });
        d && (e.strictDi = null !== ee(d, "strict-di"), b(d, c ? [c] : [], e))
    }

    function Ac(a, b, d) {
        E(d) || (d = {});
        d = T({
            strictDi: !1
        }, d);
        var c = function() {
                a = C(a);
                if (a.injector()) {
                    var c = a[0] === W ? "document" : ta(a);
                    throw Da("btstrpd", c.replace(/</, "&lt;").replace(/>/, "&gt;"));
                }
                b = b || [];
                b.unshift(["$provide", function(b) {
                    b.value("$rootElement", a)
                }]);
                d.debugInfoEnabled && b.push(["$compileProvider", function(a) {
                    a.debugInfoEnabled(!0)
                }]);
                b.unshift("ng");
                c = fb(b, d.strictDi);
                c.invoke(["$rootScope", "$rootElement",
                    "$compile", "$injector",
                    function(a, b, c, d) {
                        a.$apply(function() {
                            b.data("$injector", d);
                            c(b)(a)
                        })
                    }
                ]);
                return c
            },
            e = /^NG_ENABLE_DEBUG_INFO!/,
            f = /^NG_DEFER_BOOTSTRAP!/;
        O && e.test(O.name) && (d.debugInfoEnabled = !0, O.name = O.name.replace(e, ""));
        if (O && !f.test(O.name)) return c();
        O.name = O.name.replace(f, "");
        ia.resumeBootstrap = function(a) {
            n(a, function(a) {
                b.push(a)
            });
            return c()
        };
        D(ia.resumeDeferredBootstrap) && ia.resumeDeferredBootstrap()
    }

    function ge() {
        O.name = "NG_ENABLE_DEBUG_INFO!" + O.name;
        O.location.reload()
    }

    function he(a) {
        a =
            ia.element(a).injector();
        if (!a) throw Da("test");
        return a.get("$$testability")
    }

    function Bc(a, b) {
        b = b || "_";
        return a.replace(ie, function(a, c) {
            return (c ? b : "") + a.toLowerCase()
        })
    }

    function je() {
        var a;
        if (!Cc) {
            var b = rb();
            (ua = x(b) ? O.jQuery : b ? O[b] : v) && ua.fn.on ? (C = ua, T(ua.fn, {
                scope: Ra.scope,
                isolateScope: Ra.isolateScope,
                controller: Ra.controller,
                injector: Ra.injector,
                inheritedData: Ra.inheritedData
            }), a = ua.cleanData, ua.cleanData = function(b) {
                for (var c, e = 0, f; null != (f = b[e]); e++)(c = ua._data(f, "events")) && c.$destroy && ua(f).triggerHandler("$destroy");
                a(b)
            }) : C = U;
            ia.element = C;
            Cc = !0
        }
    }

    function sb(a, b, d) {
        if (!a) throw Da("areq", b || "?", d || "required");
        return a
    }

    function Sa(a, b, d) {
        d && L(a) && (a = a[a.length - 1]);
        sb(D(a), b, "not a function, got " + (a && "object" === typeof a ? a.constructor.name || "Object" : typeof a));
        return a
    }

    function Ta(a, b) {
        if ("hasOwnProperty" === a) throw Da("badname", b);
    }

    function Dc(a, b, d) {
        if (!b) return a;
        b = b.split(".");
        for (var c, e = a, f = b.length, g = 0; g < f; g++) c = b[g], a && (a = (e = a)[c]);
        return !d && D(a) ? vc(e, a) : a
    }

    function tb(a) {
        for (var b = a[0], d = a[a.length - 1], c,
                e = 1; b !== d && (b = b.nextSibling); e++)
            if (c || a[e] !== b) c || (c = C(wa.call(a, 0, e))), c.push(b);
        return c || a
    }

    function Z() {
        return Object.create(null)
    }

    function ke(a) {
        function b(a, b, c) {
            return a[b] || (a[b] = c())
        }
        var d = H("$injector"),
            c = H("ng");
        a = b(a, "angular", Object);
        a.$$minErr = a.$$minErr || H;
        return b(a, "module", function() {
            var a = {};
            return function(f, g, h) {
                if ("hasOwnProperty" === f) throw c("badname", "module");
                g && a.hasOwnProperty(f) && (a[f] = null);
                return b(a, f, function() {
                    function a(b, d, e, f) {
                        f || (f = c);
                        return function() {
                            f[e || "push"]([b,
                                d, arguments
                            ]);
                            return K
                        }
                    }

                    function b(a, d) {
                        return function(b, e) {
                            e && D(e) && (e.$$moduleName = f);
                            c.push([a, d, arguments]);
                            return K
                        }
                    }
                    if (!g) throw d("nomod", f);
                    var c = [],
                        e = [],
                        s = [],
                        I = a("$injector", "invoke", "push", e),
                        K = {
                            _invokeQueue: c,
                            _configBlocks: e,
                            _runBlocks: s,
                            requires: g,
                            name: f,
                            provider: b("$provide", "provider"),
                            factory: b("$provide", "factory"),
                            service: b("$provide", "service"),
                            value: a("$provide", "value"),
                            constant: a("$provide", "constant", "unshift"),
                            decorator: b("$provide", "decorator"),
                            animation: b("$animateProvider",
                                "register"),
                            filter: b("$filterProvider", "register"),
                            controller: b("$controllerProvider", "register"),
                            directive: b("$compileProvider", "directive"),
                            component: b("$compileProvider", "component"),
                            config: I,
                            run: function(a) {
                                s.push(a);
                                return this
                            }
                        };
                    h && I(h);
                    return K
                })
            }
        })
    }

    function le(a) {
        T(a, {
            bootstrap: Ac,
            copy: Oa,
            extend: T,
            merge: Zd,
            equals: oa,
            element: C,
            forEach: n,
            injector: fb,
            noop: B,
            bind: vc,
            toJson: eb,
            fromJson: wc,
            identity: ab,
            isUndefined: x,
            isDefined: y,
            isString: F,
            isFunction: D,
            isObject: E,
            isNumber: N,
            isElement: Rb,
            isArray: L,
            version: me,
            isDate: V,
            lowercase: G,
            uppercase: ub,
            callbacks: {
                counter: 0
            },
            getTestability: he,
            $$minErr: H,
            $$csp: Ea,
            reloadWithDebugInfo: ge
        });
        Vb = ke(O);
        Vb("ng", ["ngLocale"], ["$provide", function(a) {
            a.provider({
                $$sanitizeUri: ne
            });
            a.provider("$compile", Ec).directive({
                a: oe,
                input: Fc,
                textarea: Fc,
                form: pe,
                script: qe,
                select: re,
                style: se,
                option: te,
                ngBind: ue,
                ngBindHtml: ve,
                ngBindTemplate: we,
                ngClass: xe,
                ngClassEven: ye,
                ngClassOdd: ze,
                ngCloak: Ae,
                ngController: Be,
                ngForm: Ce,
                ngHide: De,
                ngIf: Ee,
                ngInclude: Fe,
                ngInit: Ge,
                ngNonBindable: He,
                ngPluralize: Ie,
                ngRepeat: Je,
                ngShow: Ke,
                ngStyle: Le,
                ngSwitch: Me,
                ngSwitchWhen: Ne,
                ngSwitchDefault: Oe,
                ngOptions: Pe,
                ngTransclude: Qe,
                ngModel: Re,
                ngList: Se,
                ngChange: Te,
                pattern: Gc,
                ngPattern: Gc,
                required: Hc,
                ngRequired: Hc,
                minlength: Ic,
                ngMinlength: Ic,
                maxlength: Jc,
                ngMaxlength: Jc,
                ngValue: Ue,
                ngModelOptions: Ve
            }).directive({
                ngInclude: We
            }).directive(vb).directive(Kc);
            a.provider({
                $anchorScroll: Xe,
                $animate: Ye,
                $animateCss: Ze,
                $$animateJs: $e,
                $$animateQueue: af,
                $$AnimateRunner: bf,
                $$animateAsyncRun: cf,
                $browser: df,
                $cacheFactory: ef,
                $controller: ff,
                $document: gf,
                $exceptionHandler: hf,
                $filter: Lc,
                $$forceReflow: jf,
                $interpolate: kf,
                $interval: lf,
                $http: mf,
                $httpParamSerializer: nf,
                $httpParamSerializerJQLike: of,
                $httpBackend: pf,
                $xhrFactory: qf,
                $location: rf,
                $log: sf,
                $parse: tf,
                $rootScope: uf,
                $q: vf,
                $$q: wf,
                $sce: xf,
                $sceDelegate: yf,
                $sniffer: zf,
                $templateCache: Af,
                $templateRequest: Bf,
                $$testability: Cf,
                $timeout: Df,
                $window: Ef,
                $$rAF: Ff,
                $$jqLite: Gf,
                $$HashMap: Hf,
                $$cookieReader: If
            })
        }])
    }

    function gb(a) {
        return a.replace(Jf, function(a, d, c, e) {
            return e ? c.toUpperCase() :
                c
        }).replace(Kf, "Moz$1")
    }

    function Mc(a) {
        a = a.nodeType;
        return 1 === a || !a || 9 === a
    }

    function Nc(a, b) {
        var d, c, e = b.createDocumentFragment(),
            f = [];
        if (Wb.test(a)) {
            d = d || e.appendChild(b.createElement("div"));
            c = (Lf.exec(a) || ["", ""])[1].toLowerCase();
            c = da[c] || da._default;
            d.innerHTML = c[1] + a.replace(Mf, "<$1></$2>") + c[2];
            for (c = c[0]; c--;) d = d.lastChild;
            f = db(f, d.childNodes);
            d = e.firstChild;
            d.textContent = ""
        } else f.push(b.createTextNode(a));
        e.textContent = "";
        e.innerHTML = "";
        n(f, function(a) {
            e.appendChild(a)
        });
        return e
    }

    function Oc(a,
        b) {
        var d = a.parentNode;
        d && d.replaceChild(b, a);
        b.appendChild(a)
    }

    function U(a) {
        if (a instanceof U) return a;
        var b;
        F(a) && (a = X(a), b = !0);
        if (!(this instanceof U)) {
            if (b && "<" != a.charAt(0)) throw Xb("nosel");
            return new U(a)
        }
        if (b) {
            b = W;
            var d;
            a = (d = Nf.exec(a)) ? [b.createElement(d[1])] : (d = Nc(a, b)) ? d.childNodes : []
        }
        Pc(this, a)
    }

    function Yb(a) {
        return a.cloneNode(!0)
    }

    function wb(a, b) {
        b || hb(a);
        if (a.querySelectorAll)
            for (var d = a.querySelectorAll("*"), c = 0, e = d.length; c < e; c++) hb(d[c])
    }

    function Qc(a, b, d, c) {
        if (y(c)) throw Xb("offargs");
        var e = (c = xb(a)) && c.events,
            f = c && c.handle;
        if (f)
            if (b) {
                var g = function(b) {
                    var c = e[b];
                    y(d) && cb(c || [], d);
                    y(d) && c && 0 < c.length || (a.removeEventListener(b, f, !1), delete e[b])
                };
                n(b.split(" "), function(a) {
                    g(a);
                    yb[a] && g(yb[a])
                })
            } else
                for (b in e) "$destroy" !== b && a.removeEventListener(b, f, !1), delete e[b]
    }

    function hb(a, b) {
        var d = a.ng339,
            c = d && ib[d];
        c && (b ? delete c.data[b] : (c.handle && (c.events.$destroy && c.handle({}, "$destroy"), Qc(a)), delete ib[d], a.ng339 = v))
    }

    function xb(a, b) {
        var d = a.ng339,
            d = d && ib[d];
        b && !d && (a.ng339 = d = ++Of,
            d = ib[d] = {
                events: {},
                data: {},
                handle: v
            });
        return d
    }

    function Zb(a, b, d) {
        if (Mc(a)) {
            var c = y(d),
                e = !c && b && !E(b),
                f = !b;
            a = (a = xb(a, !e)) && a.data;
            if (c) a[b] = d;
            else {
                if (f) return a;
                if (e) return a && a[b];
                T(a, b)
            }
        }
    }

    function zb(a, b) {
        return a.getAttribute ? -1 < (" " + (a.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").indexOf(" " + b + " ") : !1
    }

    function Ab(a, b) {
        b && a.setAttribute && n(b.split(" "), function(b) {
            a.setAttribute("class", X((" " + (a.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ").replace(" " + X(b) + " ", " ")))
        })
    }

    function Bb(a,
        b) {
        if (b && a.setAttribute) {
            var d = (" " + (a.getAttribute("class") || "") + " ").replace(/[\n\t]/g, " ");
            n(b.split(" "), function(a) {
                a = X(a); - 1 === d.indexOf(" " + a + " ") && (d += a + " ")
            });
            a.setAttribute("class", X(d))
        }
    }

    function Pc(a, b) {
        if (b)
            if (b.nodeType) a[a.length++] = b;
            else {
                var d = b.length;
                if ("number" === typeof d && b.window !== b) {
                    if (d)
                        for (var c = 0; c < d; c++) a[a.length++] = b[c]
                } else a[a.length++] = b
            }
    }

    function Rc(a, b) {
        return Cb(a, "$" + (b || "ngController") + "Controller")
    }

    function Cb(a, b, d) {
        9 == a.nodeType && (a = a.documentElement);
        for (b =
            L(b) ? b : [b]; a;) {
            for (var c = 0, e = b.length; c < e; c++)
                if (y(d = C.data(a, b[c]))) return d;
            a = a.parentNode || 11 === a.nodeType && a.host
        }
    }

    function Sc(a) {
        for (wb(a, !0); a.firstChild;) a.removeChild(a.firstChild)
    }

    function $b(a, b) {
        b || wb(a);
        var d = a.parentNode;
        d && d.removeChild(a)
    }

    function Pf(a, b) {
        b = b || O;
        if ("complete" === b.document.readyState) b.setTimeout(a);
        else C(b).on("load", a)
    }

    function Tc(a, b) {
        var d = Db[b.toLowerCase()];
        return d && Uc[ra(a)] && d
    }

    function Qf(a, b) {
        var d = function(c, d) {
            c.isDefaultPrevented = function() {
                return c.defaultPrevented
            };
            var f = b[d || c.type],
                g = f ? f.length : 0;
            if (g) {
                if (x(c.immediatePropagationStopped)) {
                    var h = c.stopImmediatePropagation;
                    c.stopImmediatePropagation = function() {
                        c.immediatePropagationStopped = !0;
                        c.stopPropagation && c.stopPropagation();
                        h && h.call(c)
                    }
                }
                c.isImmediatePropagationStopped = function() {
                    return !0 === c.immediatePropagationStopped
                };
                var k = f.specialHandlerWrapper || Rf;
                1 < g && (f = na(f));
                for (var l = 0; l < g; l++) c.isImmediatePropagationStopped() || k(a, c, f[l])
            }
        };
        d.elem = a;
        return d
    }

    function Rf(a, b, d) {
        d.call(a, b)
    }

    function Sf(a, b,
        d) {
        var c = b.relatedTarget;
        c && (c === a || Tf.call(a, c)) || d.call(a, b)
    }

    function Gf() {
        this.$get = function() {
            return T(U, {
                hasClass: function(a, b) {
                    a.attr && (a = a[0]);
                    return zb(a, b)
                },
                addClass: function(a, b) {
                    a.attr && (a = a[0]);
                    return Bb(a, b)
                },
                removeClass: function(a, b) {
                    a.attr && (a = a[0]);
                    return Ab(a, b)
                }
            })
        }
    }

    function Fa(a, b) {
        var d = a && a.$$hashKey;
        if (d) return "function" === typeof d && (d = a.$$hashKey()), d;
        d = typeof a;
        return d = "function" == d || "object" == d && null !== a ? a.$$hashKey = d + ":" + (b || Yd)() : d + ":" + a
    }

    function Ua(a, b) {
        if (b) {
            var d = 0;
            this.nextUid =
                function() {
                    return ++d
                }
        }
        n(a, this.put, this)
    }

    function Vc(a) {
        a = a.toString().replace(Uf, "");
        return a.match(Vf) || a.match(Wf)
    }

    function Xf(a) {
        return (a = Vc(a)) ? "function(" + (a[1] || "").replace(/[\s\r\n]+/, " ") + ")" : "fn"
    }

    function fb(a, b) {
        function d(a) {
            return function(b, c) {
                if (E(b)) n(b, sc(a));
                else return a(b, c)
            }
        }

        function c(a, b) {
            Ta(a, "service");
            if (D(b) || L(b)) b = s.instantiate(b);
            if (!b.$get) throw Ga("pget", a);
            return r[a + "Provider"] = b
        }

        function e(a, b) {
            return function() {
                var c = t.invoke(b, this);
                if (x(c)) throw Ga("undef", a);
                return c
            }
        }

        function f(a, b, d) {
            return c(a, {
                $get: !1 !== d ? e(a, b) : b
            })
        }

        function g(a) {
            sb(x(a) || L(a), "modulesToLoad", "not an array");
            var b = [],
                c;
            n(a, function(a) {
                function d(a) {
                    var b, c;
                    b = 0;
                    for (c = a.length; b < c; b++) {
                        var e = a[b],
                            f = s.get(e[0]);
                        f[e[1]].apply(f, e[2])
                    }
                }
                if (!m.get(a)) {
                    m.put(a, !0);
                    try {
                        F(a) ? (c = Vb(a), b = b.concat(g(c.requires)).concat(c._runBlocks), d(c._invokeQueue), d(c._configBlocks)) : D(a) ? b.push(s.invoke(a)) : L(a) ? b.push(s.invoke(a)) : Sa(a, "module")
                    } catch (e) {
                        throw L(a) && (a = a[a.length - 1]), e.message && e.stack &&
                            -1 == e.stack.indexOf(e.message) && (e = e.message + "\n" + e.stack), Ga("modulerr", a, e.stack || e.message || e);
                    }
                }
            });
            return b
        }

        function h(a, c) {
            function d(b, e) {
                if (a.hasOwnProperty(b)) {
                    if (a[b] === k) throw Ga("cdep", b + " <- " + l.join(" <- "));
                    return a[b]
                }
                try {
                    return l.unshift(b), a[b] = k, a[b] = c(b, e)
                } catch (f) {
                    throw a[b] === k && delete a[b], f;
                } finally {
                    l.shift()
                }
            }

            function e(a, c, f) {
                var g = [];
                a = fb.$$annotate(a, b, f);
                for (var h = 0, k = a.length; h < k; h++) {
                    var l = a[h];
                    if ("string" !== typeof l) throw Ga("itkn", l);
                    g.push(c && c.hasOwnProperty(l) ? c[l] :
                        d(l, f))
                }
                return g
            }
            return {
                invoke: function(a, b, c, d) {
                    "string" === typeof c && (d = c, c = null);
                    c = e(a, c, d);
                    L(a) && (a = a[a.length - 1]);
                    d = 11 >= xa ? !1 : "function" === typeof a && /^(?:class\s|constructor\()/.test(Function.prototype.toString.call(a));
                    return d ? (c.unshift(null), new(Function.prototype.bind.apply(a, c))) : a.apply(b, c)
                },
                instantiate: function(a, b, c) {
                    var d = L(a) ? a[a.length - 1] : a;
                    a = e(a, b, c);
                    a.unshift(null);
                    return new(Function.prototype.bind.apply(d, a))
                },
                get: d,
                annotate: fb.$$annotate,
                has: function(b) {
                    return r.hasOwnProperty(b +
                        "Provider") || a.hasOwnProperty(b)
                }
            }
        }
        b = !0 === b;
        var k = {},
            l = [],
            m = new Ua([], !0),
            r = {
                $provide: {
                    provider: d(c),
                    factory: d(f),
                    service: d(function(a, b) {
                        return f(a, ["$injector", function(a) {
                            return a.instantiate(b)
                        }])
                    }),
                    value: d(function(a, b) {
                        return f(a, ba(b), !1)
                    }),
                    constant: d(function(a, b) {
                        Ta(a, "constant");
                        r[a] = b;
                        I[a] = b
                    }),
                    decorator: function(a, b) {
                        var c = s.get(a + "Provider"),
                            d = c.$get;
                        c.$get = function() {
                            var a = t.invoke(d, c);
                            return t.invoke(b, null, {
                                $delegate: a
                            })
                        }
                    }
                }
            },
            s = r.$injector = h(r, function(a, b) {
                ia.isString(b) && l.push(b);
                throw Ga("unpr", l.join(" <- "));
            }),
            I = {},
            K = h(I, function(a, b) {
                var c = s.get(a + "Provider", b);
                return t.invoke(c.$get, c, v, a)
            }),
            t = K;
        r.$injectorProvider = {
            $get: ba(K)
        };
        var p = g(a),
            t = K.get("$injector");
        t.strictDi = b;
        n(p, function(a) {
            a && t.invoke(a)
        });
        return t
    }

    function Xe() {
        var a = !0;
        this.disableAutoScrolling = function() {
            a = !1
        };
        this.$get = ["$window", "$location", "$rootScope", function(b, d, c) {
            function e(a) {
                var b = null;
                Array.prototype.some.call(a, function(a) {
                    if ("a" === ra(a)) return b = a, !0
                });
                return b
            }

            function f(a) {
                if (a) {
                    a.scrollIntoView();
                    var c;
                    c = g.yOffset;
                    D(c) ? c = c() : Rb(c) ? (c = c[0], c = "fixed" !== b.getComputedStyle(c).position ? 0 : c.getBoundingClientRect().bottom) : N(c) || (c = 0);
                    c && (a = a.getBoundingClientRect().top, b.scrollBy(0, a - c))
                } else b.scrollTo(0, 0)
            }

            function g(a) {
                a = F(a) ? a : d.hash();
                var b;
                a ? (b = h.getElementById(a)) ? f(b) : (b = e(h.getElementsByName(a))) ? f(b) : "top" === a && f(null) : f(null)
            }
            var h = b.document;
            a && c.$watch(function() {
                return d.hash()
            }, function(a, b) {
                a === b && "" === a || Pf(function() {
                    c.$evalAsync(g)
                })
            });
            return g
        }]
    }

    function jb(a, b) {
        if (!a && !b) return "";
        if (!a) return b;
        if (!b) return a;
        L(a) && (a = a.join(" "));
        L(b) && (b = b.join(" "));
        return a + " " + b
    }

    function Yf(a) {
        F(a) && (a = a.split(" "));
        var b = Z();
        n(a, function(a) {
            a.length && (b[a] = !0)
        });
        return b
    }

    function Ha(a) {
        return E(a) ? a : {}
    }

    function Zf(a, b, d, c) {
        function e(a) {
            try {
                a.apply(null, wa.call(arguments, 1))
            } finally {
                if (K--, 0 === K)
                    for (; t.length;) try {
                        t.pop()()
                    } catch (b) {
                        d.error(b)
                    }
            }
        }

        function f() {
            z = null;
            g();
            h()
        }

        function g() {
            a: {
                try {
                    p = m.state;
                    break a
                } catch (a) {}
                p = void 0
            }
            p = x(p) ? null : p;oa(p, $) && (p = $);$ = p
        }

        function h() {
            if (u !== k.url() ||
                w !== p) u = k.url(), w = p, n(A, function(a) {
                a(k.url(), p)
            })
        }
        var k = this,
            l = a.location,
            m = a.history,
            r = a.setTimeout,
            s = a.clearTimeout,
            I = {};
        k.isMock = !1;
        var K = 0,
            t = [];
        k.$$completeOutstandingRequest = e;
        k.$$incOutstandingRequestCount = function() {
            K++
        };
        k.notifyWhenNoOutstandingRequests = function(a) {
            0 === K ? a() : t.push(a)
        };
        var p, w, u = l.href,
            la = b.find("base"),
            z = null;
        g();
        w = p;
        k.url = function(b, d, e) {
            x(e) && (e = null);
            l !== a.location && (l = a.location);
            m !== a.history && (m = a.history);
            if (b) {
                var f = w === e;
                if (u === b && (!c.history || f)) return k;
                var h =
                    u && Ia(u) === Ia(b);
                u = b;
                w = e;
                if (!c.history || h && f) {
                    if (!h || z) z = b;
                    d ? l.replace(b) : h ? (d = l, e = b.indexOf("#"), e = -1 === e ? "" : b.substr(e), d.hash = e) : l.href = b;
                    l.href !== b && (z = b)
                } else m[d ? "replaceState" : "pushState"](e, "", b), g(), w = p;
                return k
            }
            return z || l.href.replace(/%27/g, "'")
        };
        k.state = function() {
            return p
        };
        var A = [],
            Q = !1,
            $ = null;
        k.onUrlChange = function(b) {
            if (!Q) {
                if (c.history) C(a).on("popstate", f);
                C(a).on("hashchange", f);
                Q = !0
            }
            A.push(b);
            return b
        };
        k.$$applicationDestroyed = function() {
            C(a).off("hashchange popstate", f)
        };
        k.$$checkUrlChange =
            h;
        k.baseHref = function() {
            var a = la.attr("href");
            return a ? a.replace(/^(https?\:)?\/\/[^\/]*/, "") : ""
        };
        k.defer = function(a, b) {
            var c;
            K++;
            c = r(function() {
                delete I[c];
                e(a)
            }, b || 0);
            I[c] = !0;
            return c
        };
        k.defer.cancel = function(a) {
            return I[a] ? (delete I[a], s(a), e(B), !0) : !1
        }
    }

    function df() {
        this.$get = ["$window", "$log", "$sniffer", "$document", function(a, b, d, c) {
            return new Zf(a, c, b, d)
        }]
    }

    function ef() {
        this.$get = function() {
            function a(a, c) {
                function e(a) {
                    a != r && (s ? s == a && (s = a.n) : s = a, f(a.n, a.p), f(a, r), r = a, r.n = null)
                }

                function f(a,
                    b) {
                    a != b && (a && (a.p = b), b && (b.n = a))
                }
                if (a in b) throw H("$cacheFactory")("iid", a);
                var g = 0,
                    h = T({}, c, {
                        id: a
                    }),
                    k = Z(),
                    l = c && c.capacity || Number.MAX_VALUE,
                    m = Z(),
                    r = null,
                    s = null;
                return b[a] = {
                    put: function(a, b) {
                        if (!x(b)) {
                            if (l < Number.MAX_VALUE) {
                                var c = m[a] || (m[a] = {
                                    key: a
                                });
                                e(c)
                            }
                            a in k || g++;
                            k[a] = b;
                            g > l && this.remove(s.key);
                            return b
                        }
                    },
                    get: function(a) {
                        if (l < Number.MAX_VALUE) {
                            var b = m[a];
                            if (!b) return;
                            e(b)
                        }
                        return k[a]
                    },
                    remove: function(a) {
                        if (l < Number.MAX_VALUE) {
                            var b = m[a];
                            if (!b) return;
                            b == r && (r = b.p);
                            b == s && (s = b.n);
                            f(b.n, b.p);
                            delete m[a]
                        }
                        a in
                            k && (delete k[a], g--)
                    },
                    removeAll: function() {
                        k = Z();
                        g = 0;
                        m = Z();
                        r = s = null
                    },
                    destroy: function() {
                        m = h = k = null;
                        delete b[a]
                    },
                    info: function() {
                        return T({}, h, {
                            size: g
                        })
                    }
                }
            }
            var b = {};
            a.info = function() {
                var a = {};
                n(b, function(b, e) {
                    a[e] = b.info()
                });
                return a
            };
            a.get = function(a) {
                return b[a]
            };
            return a
        }
    }

    function Af() {
        this.$get = ["$cacheFactory", function(a) {
            return a("templates")
        }]
    }

    function Ec(a, b) {
        function d(a, b, c) {
            var d = /^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/,
                e = {};
            n(a, function(a, f) {
                var g = a.match(d);
                if (!g) throw ja("iscp", b, f, a, c ?
                    "controller bindings definition" : "isolate scope definition");
                e[f] = {
                    mode: g[1][0],
                    collection: "*" === g[2],
                    optional: "?" === g[3],
                    attrName: g[4] || f
                }
            });
            return e
        }

        function c(a) {
            var b = a.charAt(0);
            if (!b || b !== G(b)) throw ja("baddir", a);
            if (a !== a.trim()) throw ja("baddir", a);
        }
        var e = {},
            f = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
            g = /(([\w\-]+)(?:\:([^;]+))?;?)/,
            h = be("ngSrc,ngSrcset,src,srcset"),
            k = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/,
            l = /^(on[a-z]+|formaction)$/;
        this.directive = function s(b, f) {
            Ta(b, "directive");
            F(b) ? (c(b), sb(f, "directiveFactory"),
                e.hasOwnProperty(b) || (e[b] = [], a.factory(b + "Directive", ["$injector", "$exceptionHandler", function(a, c) {
                    var f = [];
                    n(e[b], function(e, g) {
                        try {
                            var h = a.invoke(e);
                            D(h) ? h = {
                                compile: ba(h)
                            } : !h.compile && h.link && (h.compile = ba(h.link));
                            h.priority = h.priority || 0;
                            h.index = g;
                            h.name = h.name || b;
                            h.require = h.require || h.controller && h.name;
                            h.restrict = h.restrict || "EA";
                            var k = h,
                                l = h,
                                m = h.name,
                                s = {
                                    isolateScope: null,
                                    bindToController: null
                                };
                            E(l.scope) && (!0 === l.bindToController ? (s.bindToController = d(l.scope, m, !0), s.isolateScope = {}) : s.isolateScope =
                                d(l.scope, m, !1));
                            E(l.bindToController) && (s.bindToController = d(l.bindToController, m, !0));
                            if (E(s.bindToController)) {
                                var P = l.controller,
                                    S = l.controllerAs;
                                if (!P) throw ja("noctrl", m);
                                if (!Wc(P, S)) throw ja("noident", m);
                            }
                            var ma = k.$$bindings = s;
                            E(ma.isolateScope) && (h.$$isolateBindings = ma.isolateScope);
                            h.$$moduleName = e.$$moduleName;
                            f.push(h)
                        } catch (K) {
                            c(K)
                        }
                    });
                    return f
                }])), e[b].push(f)) : n(b, sc(s));
            return this
        };
        this.component = function(a, b) {
            function c(a) {
                function e(b) {
                    return D(b) || L(b) ? function(c, d) {
                        return a.invoke(b,
                            this, {
                                $element: c,
                                $attrs: d
                            })
                    } : b
                }
                var f = b.template || b.templateUrl ? b.template : "";
                return {
                    controller: d,
                    controllerAs: Wc(b.controller) || b.controllerAs || "$ctrl",
                    template: e(f),
                    templateUrl: e(b.templateUrl),
                    transclude: b.transclude,
                    scope: {},
                    bindToController: b.bindings || {},
                    restrict: "E",
                    require: b.require
                }
            }
            var d = b.controller || function() {};
            n(b, function(a, b) {
                "$" === b.charAt(0) && (c[b] = a)
            });
            c.$inject = ["$injector"];
            return this.directive(a, c)
        };
        this.aHrefSanitizationWhitelist = function(a) {
            return y(a) ? (b.aHrefSanitizationWhitelist(a),
                this) : b.aHrefSanitizationWhitelist()
        };
        this.imgSrcSanitizationWhitelist = function(a) {
            return y(a) ? (b.imgSrcSanitizationWhitelist(a), this) : b.imgSrcSanitizationWhitelist()
        };
        var m = !0;
        this.debugInfoEnabled = function(a) {
            return y(a) ? (m = a, this) : m
        };
        this.$get = ["$injector", "$interpolate", "$exceptionHandler", "$templateRequest", "$parse", "$controller", "$rootScope", "$sce", "$animate", "$$sanitizeUri", function(a, b, c, d, p, w, u, la, z, A) {
            function Q(a, b, c) {
                ba.innerHTML = "<span " + b + ">";
                b = ba.firstChild.attributes;
                var d = b[0];
                b.removeNamedItem(d.name);
                d.value = c;
                a.attributes.setNamedItem(d)
            }

            function $(a, b) {
                try {
                    a.addClass(b)
                } catch (c) {}
            }

            function M(a, b, c, d, e) {
                a instanceof C || (a = C(a));
                for (var f = /\S+/, g = 0, h = a.length; g < h; g++) {
                    var k = a[g];
                    k.nodeType === Pa && k.nodeValue.match(f) && Oc(k, a[g] = W.createElement("span"))
                }
                var l = P(a, b, a, c, d, e);
                M.$$addScopeClass(a);
                var m = null;
                return function(b, c, d) {
                    sb(b, "scope");
                    e && e.needsNewScope && (b = b.$parent.$new());
                    d = d || {};
                    var f = d.parentBoundTranscludeFn,
                        g = d.transcludeControllers;
                    d = d.futureParentElement;
                    f && f.$$boundTransclude &&
                        (f = f.$$boundTransclude);
                    m || (m = (d = d && d[0]) ? "foreignobject" !== ra(d) && ga.call(d).match(/SVG/) ? "svg" : "html" : "html");
                    d = "html" !== m ? C(U(m, C("<div>").append(a).html())) : c ? Ra.clone.call(a) : a;
                    if (g)
                        for (var h in g) d.data("$" + h + "Controller", g[h].instance);
                    M.$$addScopeInfo(d, b);
                    c && c(d, b);
                    l && l(b, d, d, f);
                    return d
                }
            }

            function P(a, b, c, d, e, f) {
                function g(a, c, d, e) {
                    var f, k, l, m, p, s, u;
                    if (A)
                        for (u = Array(c.length), m = 0; m < h.length; m += 3) f = h[m], u[f] = c[f];
                    else u = c;
                    m = 0;
                    for (p = h.length; m < p;) k = u[h[m++]], c = h[m++], f = h[m++], c ? (c.scope ? (l =
                        a.$new(), M.$$addScopeInfo(C(k), l)) : l = a, s = c.transcludeOnThisElement ? S(a, c.transclude, e) : !c.templateOnThisElement && e ? e : !e && b ? S(a, b) : null, c(f, l, k, d, s)) : f && f(a, k.childNodes, v, e)
                }
                for (var h = [], k, l, m, p, A, s = 0; s < a.length; s++) {
                    k = new na;
                    l = ma(a[s], [], k, 0 === s ? d : v, e);
                    (f = l.length ? y(l, a[s], k, b, c, null, [], [], f) : null) && f.scope && M.$$addScopeClass(k.$$element);
                    k = f && f.terminal || !(m = a[s].childNodes) || !m.length ? null : P(m, f ? (f.transcludeOnThisElement || !f.templateOnThisElement) && f.transclude : b);
                    if (f || k) h.push(s, f, k), p = !0, A =
                        A || f;
                    f = null
                }
                return p ? g : null
            }

            function S(a, b, c) {
                var d = function(d, e, f, g, h) {
                        d || (d = a.$new(!1, h), d.$$transcluded = !0);
                        return b(d, e, {
                            parentBoundTranscludeFn: c,
                            transcludeControllers: f,
                            futureParentElement: g
                        })
                    },
                    e = d.$$slots = Z(),
                    f;
                for (f in b.$$slots) e[f] = b.$$slots[f] ? S(a, b.$$slots[f], c) : null;
                return d
            }

            function ma(a, b, c, d, e) {
                var h = c.$attr,
                    k;
                switch (a.nodeType) {
                    case 1:
                        H(b, va(ra(a)), "E", d, e);
                        for (var l, m, p, s = a.attributes, A = 0, u = s && s.length; A < u; A++) {
                            var t = !1,
                                w = !1;
                            l = s[A];
                            k = l.name;
                            m = X(l.value);
                            l = va(k);
                            if (p = pa.test(l)) k =
                                k.replace(Xc, "").substr(8).replace(/_(.)/g, function(a, b) {
                                    return b.toUpperCase()
                                });
                            (l = l.match(ua)) && O(l[1]) && (t = k, w = k.substr(0, k.length - 5) + "end", k = k.substr(0, k.length - 6));
                            l = va(k.toLowerCase());
                            h[l] = k;
                            if (p || !c.hasOwnProperty(l)) c[l] = m, Tc(a, l) && (c[l] = !0);
                            Y(a, b, m, l, p);
                            H(b, l, "A", d, e, t, w)
                        }
                        a = a.className;
                        E(a) && (a = a.animVal);
                        if (F(a) && "" !== a)
                            for (; k = g.exec(a);) l = va(k[2]), H(b, l, "C", d, e) && (c[l] = X(k[3])), a = a.substr(k.index + k[0].length);
                        break;
                    case Pa:
                        if (11 === xa)
                            for (; a.parentNode && a.nextSibling && a.nextSibling.nodeType ===
                                Pa;) a.nodeValue += a.nextSibling.nodeValue, a.parentNode.removeChild(a.nextSibling);
                        N(b, a.nodeValue);
                        break;
                    case 8:
                        try {
                            if (k = f.exec(a.nodeValue)) l = va(k[1]), H(b, l, "M", d, e) && (c[l] = X(k[2]))
                        } catch (M) {}
                }
                b.sort(ya);
                return b
            }

            function q(a, b, c) {
                var d = [],
                    e = 0;
                if (b && a.hasAttribute && a.hasAttribute(b)) {
                    do {
                        if (!a) throw ja("uterdir", b, c);
                        1 == a.nodeType && (a.hasAttribute(b) && e++, a.hasAttribute(c) && e--);
                        d.push(a);
                        a = a.nextSibling
                    } while (0 < e)
                } else d.push(a);
                return C(d)
            }

            function Yc(a, b, c) {
                return function(d, e, f, g, h) {
                    e = q(e[0], b,
                        c);
                    return a(d, e, f, g, h)
                }
            }

            function ac(a, b, c, d, e, f) {
                if (a) return M(b, c, d, e, f);
                var g;
                return function() {
                    g || (g = M(b, c, d, e, f), b = c = f = null);
                    return g.apply(this, arguments)
                }
            }

            function y(a, b, d, e, f, g, h, l, m) {
                function p(a, b, c, d) {
                    if (a) {
                        c && (a = Yc(a, c, d));
                        a.require = J.require;
                        a.directiveName = H;
                        if (P === J || J.$$isolateScope) a = ca(a, {
                            isolateScope: !0
                        });
                        h.push(a)
                    }
                    if (b) {
                        c && (b = Yc(b, c, d));
                        b.require = J.require;
                        b.directiveName = H;
                        if (P === J || J.$$isolateScope) b = ca(b, {
                            isolateScope: !0
                        });
                        l.push(b)
                    }
                }

                function s(a, b, c, d) {
                    var e;
                    if (F(b)) {
                        var f =
                            b.match(k);
                        b = b.substring(f[0].length);
                        var g = f[1] || f[3],
                            f = "?" === f[2];
                        "^^" === g ? c = c.parent() : e = (e = d && d[b]) && e.instance;
                        if (!e) {
                            var h = "$" + b + "Controller";
                            e = g ? c.inheritedData(h) : c.data(h)
                        }
                        if (!e && !f) throw ja("ctreq", b, a);
                    } else if (L(b))
                        for (e = [], g = 0, f = b.length; g < f; g++) e[g] = s(a, b[g], c, d);
                    else E(b) && (e = {}, n(b, function(b, f) {
                        e[f] = s(a, b, c, d)
                    }));
                    return e || null
                }

                function A(a, b, c, d, e, f) {
                    var g = Z(),
                        h;
                    for (h in d) {
                        var k = d[h],
                            l = {
                                $scope: k === P || k.$$isolateScope ? e : f,
                                $element: a,
                                $attrs: b,
                                $transclude: c
                            },
                            m = k.controller;
                        "@" == m &&
                            (m = b[k.name]);
                        l = w(m, l, !0, k.controllerAs);
                        g[k.name] = l;
                        B || a.data("$" + k.name + "Controller", l.instance)
                    }
                    return g
                }

                function u(a, c, e, f, g) {
                    function k(a, b, c, d) {
                        var e;
                        bb(a) || (d = c, c = b, b = a, a = v);
                        B && (e = ma);
                        c || (c = B ? z.parent() : z);
                        if (d) {
                            var f = g.$$slots[d];
                            if (f) return f(a, b, e, c, Eb);
                            if (x(f)) throw ja("noslot", d, ta(z));
                        } else return g(a, b, e, c, Eb)
                    }
                    var m, p, t, w, ma, S, z, Ja;
                    b === e ? (f = d, z = d.$$element) : (z = C(e), f = new na(z, d));
                    t = c;
                    P ? w = c.$new(!0) : Q && (t = c.$parent);
                    g && (S = k, S.$$boundTransclude = g, S.isSlotFilled = function(a) {
                        return !!g.$$slots[a]
                    });
                    I && (ma = A(z, f, S, I, w, c));
                    P && (M.$$addScopeInfo(z, w, !0, !($ && ($ === P || $ === P.$$originalDirective))), M.$$addScopeClass(z, !0), w.$$isolateBindings = P.$$isolateBindings, (Ja = ia(c, f, w, w.$$isolateBindings, P)) && w.$on("$destroy", Ja));
                    for (p in ma) {
                        Ja = I[p];
                        var K = ma[p],
                            la = Ja.$$bindings.bindToController;
                        K.identifier && la && (m = ia(t, f, K.instance, la, Ja));
                        var q = K();
                        q !== K.instance && (K.instance = q, z.data("$" + Ja.name + "Controller", q), m && m(), m = ia(t, f, K.instance, la, Ja))
                    }
                    n(I, function(a, b) {
                        var c = a.require;
                        a.bindToController && !L(c) &&
                            E(c) && T(ma[b].instance, s(b, c, z, ma))
                    });
                    n(ma, function(a) {
                        D(a.instance.$onInit) && a.instance.$onInit()
                    });
                    m = 0;
                    for (p = h.length; m < p; m++) t = h[m], ka(t, t.isolateScope ? w : c, z, f, t.require && s(t.directiveName, t.require, z, ma), S);
                    var Eb = c;
                    P && (P.template || null === P.templateUrl) && (Eb = w);
                    a && a(Eb, e.childNodes, v, g);
                    for (m = l.length - 1; 0 <= m; m--) t = l[m], ka(t, t.isolateScope ? w : c, z, f, t.require && s(t.directiveName, t.require, z, ma), S)
                }
                m = m || {};
                for (var t = -Number.MAX_VALUE, Q = m.newScopeDirective, I = m.controllerDirectives, P = m.newIsolateScopeDirective,
                        $ = m.templateDirective, S = m.nonTlbTranscludeDirective, z = !1, la = !1, B = m.hasElementTranscludeDirective, ea = d.$$element = C(b), J, H, G, ya = e, O, N = !1, Fb = !1, fa, R = 0, Va = a.length; R < Va; R++) {
                    J = a[R];
                    var Y = J.$$start,
                        ba = J.$$end;
                    Y && (ea = q(b, Y, ba));
                    G = v;
                    if (t > J.priority) break;
                    if (fa = J.scope) J.templateUrl || (E(fa) ? (Wa("new/isolated scope", P || Q, J, ea), P = J) : Wa("new/isolated scope", P, J, ea)), Q = Q || J;
                    H = J.name;
                    if (!N && (J.replace && (J.templateUrl || J.template) || J.transclude && !J.$$tlb)) {
                        for (fa = R + 1; N = a[fa++];)
                            if (N.transclude && !N.$$tlb || N.replace &&
                                (N.templateUrl || N.template)) {
                                Fb = !0;
                                break
                            }
                        N = !0
                    }!J.templateUrl && J.controller && (fa = J.controller, I = I || Z(), Wa("'" + H + "' controller", I[H], J, ea), I[H] = J);
                    if (fa = J.transclude)
                        if (z = !0, J.$$tlb || (Wa("transclusion", S, J, ea), S = J), "element" == fa) B = !0, t = J.priority, G = ea, ea = d.$$element = C(W.createComment(" " + H + ": " + d[H] + " ")), b = ea[0], aa(f, wa.call(G, 0), b), ya = ac(Fb, G, e, t, g && g.name, {
                            nonTlbTranscludeDirective: S
                        });
                        else {
                            var V = Z();
                            G = C(Yb(b)).contents();
                            if (E(fa)) {
                                G = [];
                                var ha = Z(),
                                    da = Z();
                                n(fa, function(a, b) {
                                    var c = "?" === a.charAt(0);
                                    a = c ? a.substring(1) : a;
                                    ha[a] = b;
                                    V[b] = null;
                                    da[b] = c
                                });
                                n(ea.contents(), function(a) {
                                    var b = ha[va(ra(a))];
                                    b ? (da[b] = !0, V[b] = V[b] || [], V[b].push(a)) : G.push(a)
                                });
                                n(da, function(a, b) {
                                    if (!a) throw ja("reqslot", b);
                                });
                                for (var ga in V) V[ga] && (V[ga] = ac(Fb, V[ga], e))
                            }
                            ea.empty();
                            ya = ac(Fb, G, e, v, v, {
                                needsNewScope: J.$$isolateScope || J.$$newScope
                            });
                            ya.$$slots = V
                        }
                    if (J.template)
                        if (la = !0, Wa("template", $, J, ea), $ = J, fa = D(J.template) ? J.template(ea, d) : J.template, fa = qa(fa), J.replace) {
                            g = J;
                            G = Wb.test(fa) ? Zc(U(J.templateNamespace, X(fa))) : [];
                            b = G[0];
                            if (1 != G.length || 1 !== b.nodeType) throw ja("tplrt", H, "");
                            aa(f, ea, b);
                            Va = {
                                $attr: {}
                            };
                            fa = ma(b, [], Va);
                            var oa = a.splice(R + 1, a.length - (R + 1));
                            (P || Q) && $c(fa, P, Q);
                            a = a.concat(fa).concat(oa);
                            ad(d, Va);
                            Va = a.length
                        } else ea.html(fa);
                    if (J.templateUrl) la = !0, Wa("template", $, J, ea), $ = J, J.replace && (g = J), u = $f(a.splice(R, a.length - R), ea, d, f, z && ya, h, l, {
                        controllerDirectives: I,
                        newScopeDirective: Q !== J && Q,
                        newIsolateScopeDirective: P,
                        templateDirective: $,
                        nonTlbTranscludeDirective: S
                    }), Va = a.length;
                    else if (J.compile) try {
                        O = J.compile(ea,
                            d, ya), D(O) ? p(null, O, Y, ba) : O && p(O.pre, O.post, Y, ba)
                    } catch (pa) {
                        c(pa, ta(ea))
                    }
                    J.terminal && (u.terminal = !0, t = Math.max(t, J.priority))
                }
                u.scope = Q && !0 === Q.scope;
                u.transcludeOnThisElement = z;
                u.templateOnThisElement = la;
                u.transclude = ya;
                m.hasElementTranscludeDirective = B;
                return u
            }

            function $c(a, b, c) {
                for (var d = 0, e = a.length; d < e; d++) a[d] = Sb(a[d], {
                    $$isolateScope: b,
                    $$newScope: c
                })
            }

            function H(b, d, f, g, h, k, l) {
                if (d === h) return null;
                h = null;
                if (e.hasOwnProperty(d)) {
                    var m;
                    d = a.get(d + "Directive");
                    for (var p = 0, A = d.length; p < A; p++) try {
                        m =
                            d[p], (x(g) || g > m.priority) && -1 != m.restrict.indexOf(f) && (k && (m = Sb(m, {
                                $$start: k,
                                $$end: l
                            })), b.push(m), h = m)
                    } catch (t) {
                        c(t)
                    }
                }
                return h
            }

            function O(b) {
                if (e.hasOwnProperty(b))
                    for (var c = a.get(b + "Directive"), d = 0, f = c.length; d < f; d++)
                        if (b = c[d], b.multiElement) return !0;
                return !1
            }

            function ad(a, b) {
                var c = b.$attr,
                    d = a.$attr,
                    e = a.$$element;
                n(a, function(d, e) {
                    "$" != e.charAt(0) && (b[e] && b[e] !== d && (d += ("style" === e ? ";" : " ") + b[e]), a.$set(e, d, !0, c[e]))
                });
                n(b, function(b, f) {
                    "class" == f ? ($(e, b), a["class"] = (a["class"] ? a["class"] + " " : "") +
                        b) : "style" == f ? (e.attr("style", e.attr("style") + ";" + b), a.style = (a.style ? a.style + ";" : "") + b) : "$" == f.charAt(0) || a.hasOwnProperty(f) || (a[f] = b, d[f] = c[f])
                })
            }

            function $f(a, b, c, e, f, g, h, k) {
                var l = [],
                    m, p, s = b[0],
                    A = a.shift(),
                    u = Sb(A, {
                        templateUrl: null,
                        transclude: null,
                        replace: null,
                        $$originalDirective: A
                    }),
                    w = D(A.templateUrl) ? A.templateUrl(b, c) : A.templateUrl,
                    Q = A.templateNamespace;
                b.empty();
                d(w).then(function(d) {
                    var t, I;
                    d = qa(d);
                    if (A.replace) {
                        d = Wb.test(d) ? Zc(U(Q, X(d))) : [];
                        t = d[0];
                        if (1 != d.length || 1 !== t.nodeType) throw ja("tplrt",
                            A.name, w);
                        d = {
                            $attr: {}
                        };
                        aa(e, b, t);
                        var M = ma(t, [], d);
                        E(A.scope) && $c(M, !0);
                        a = M.concat(a);
                        ad(c, d)
                    } else t = s, b.html(d);
                    a.unshift(u);
                    m = y(a, t, c, f, b, A, g, h, k);
                    n(e, function(a, c) {
                        a == t && (e[c] = b[0])
                    });
                    for (p = P(b[0].childNodes, f); l.length;) {
                        d = l.shift();
                        I = l.shift();
                        var z = l.shift(),
                            K = l.shift(),
                            M = b[0];
                        if (!d.$$destroyed) {
                            if (I !== s) {
                                var la = I.className;
                                k.hasElementTranscludeDirective && A.replace || (M = Yb(t));
                                aa(z, C(I), M);
                                $(C(M), la)
                            }
                            I = m.transcludeOnThisElement ? S(d, m.transclude, K) : K;
                            m(p, d, M, e, I)
                        }
                    }
                    l = null
                });
                return function(a, b,
                    c, d, e) {
                    a = e;
                    b.$$destroyed || (l ? l.push(b, c, d, a) : (m.transcludeOnThisElement && (a = S(b, m.transclude, e)), m(p, b, c, d, a)))
                }
            }

            function ya(a, b) {
                var c = b.priority - a.priority;
                return 0 !== c ? c : a.name !== b.name ? a.name < b.name ? -1 : 1 : a.index - b.index
            }

            function Wa(a, b, c, d) {
                function e(a) {
                    return a ? " (module: " + a + ")" : ""
                }
                if (b) throw ja("multidir", b.name, e(b.$$moduleName), c.name, e(c.$$moduleName), a, ta(d));
            }

            function N(a, c) {
                var d = b(c, !0);
                d && a.push({
                    priority: 0,
                    compile: function(a) {
                        a = a.parent();
                        var b = !!a.length;
                        b && M.$$addBindingClass(a);
                        return function(a, c) {
                            var e = c.parent();
                            b || M.$$addBindingClass(e);
                            M.$$addBindingInfo(e, d.expressions);
                            a.$watch(d, function(a) {
                                c[0].nodeValue = a
                            })
                        }
                    }
                })
            }

            function U(a, b) {
                a = G(a || "html");
                switch (a) {
                    case "svg":
                    case "math":
                        var c = W.createElement("div");
                        c.innerHTML = "<" + a + ">" + b + "</" + a + ">";
                        return c.childNodes[0].childNodes;
                    default:
                        return b
                }
            }

            function R(a, b) {
                if ("srcdoc" == b) return la.HTML;
                var c = ra(a);
                if ("xlinkHref" == b || "form" == c && "action" == b || "img" != c && ("src" == b || "ngSrc" == b)) return la.RESOURCE_URL
            }

            function Y(a, c, d, e,
                f) {
                var g = R(a, e);
                f = h[e] || f;
                var k = b(d, !0, g, f);
                if (k) {
                    if ("multiple" === e && "select" === ra(a)) throw ja("selmulti", ta(a));
                    c.push({
                        priority: 100,
                        compile: function() {
                            return {
                                pre: function(a, c, h) {
                                    c = h.$$observers || (h.$$observers = Z());
                                    if (l.test(e)) throw ja("nodomevents");
                                    var m = h[e];
                                    m !== d && (k = m && b(m, !0, g, f), d = m);
                                    k && (h[e] = k(a), (c[e] || (c[e] = [])).$$inter = !0, (h.$$observers && h.$$observers[e].$$scope || a).$watch(k, function(a, b) {
                                        "class" === e && a != b ? h.$updateClass(a, b) : h.$set(e, a)
                                    }))
                                }
                            }
                        }
                    })
                }
            }

            function aa(a, b, c) {
                var d = b[0],
                    e = b.length,
                    f = d.parentNode,
                    g, h;
                if (a)
                    for (g = 0, h = a.length; g < h; g++)
                        if (a[g] == d) {
                            a[g++] = c;
                            h = g + e - 1;
                            for (var k = a.length; g < k; g++, h++) h < k ? a[g] = a[h] : delete a[g];
                            a.length -= e - 1;
                            a.context === d && (a.context = c);
                            break
                        }
                f && f.replaceChild(c, d);
                a = W.createDocumentFragment();
                for (g = 0; g < e; g++) a.appendChild(b[g]);
                C.hasData(d) && (C.data(c, C.data(d)), C(d).off("$destroy"));
                C.cleanData(a.querySelectorAll("*"));
                for (g = 1; g < e; g++) delete b[g];
                b[0] = c;
                b.length = 1
            }

            function ca(a, b) {
                return T(function() {
                    return a.apply(null, arguments)
                }, a, b)
            }

            function ka(a,
                b, d, e, f, g) {
                try {
                    a(b, d, e, f, g)
                } catch (h) {
                    c(h, ta(d))
                }
            }

            function ia(a, c, d, e, f) {
                var g = [];
                n(e, function(e, h) {
                    var k = e.attrName,
                        l = e.optional,
                        m, A, s, t;
                    switch (e.mode) {
                        case "@":
                            l || sa.call(c, k) || (d[h] = c[k] = void 0);
                            c.$observe(k, function(a) {
                                F(a) && (d[h] = a)
                            });
                            c.$$observers[k].$$scope = a;
                            m = c[k];
                            F(m) ? d[h] = b(m)(a) : Na(m) && (d[h] = m);
                            break;
                        case "=":
                            if (!sa.call(c, k)) {
                                if (l) break;
                                c[k] = void 0
                            }
                            if (l && !c[k]) break;
                            A = p(c[k]);
                            t = A.literal ? oa : function(a, b) {
                                return a === b || a !== a && b !== b
                            };
                            s = A.assign || function() {
                                m = d[h] = A(a);
                                throw ja("nonassign",
                                    c[k], k, f.name);
                            };
                            m = d[h] = A(a);
                            l = function(b) {
                                t(b, d[h]) || (t(b, m) ? s(a, b = d[h]) : d[h] = b);
                                return m = b
                            };
                            l.$stateful = !0;
                            l = e.collection ? a.$watchCollection(c[k], l) : a.$watch(p(c[k], l), null, A.literal);
                            g.push(l);
                            break;
                        case "<":
                            if (!sa.call(c, k)) {
                                if (l) break;
                                c[k] = void 0
                            }
                            if (l && !c[k]) break;
                            A = p(c[k]);
                            d[h] = A(a);
                            l = a.$watch(A, function(a) {
                                d[h] = a
                            }, A.literal);
                            g.push(l);
                            break;
                        case "&":
                            A = c.hasOwnProperty(k) ? p(c[k]) : B;
                            if (A === B && l) break;
                            d[h] = function(b) {
                                return A(a, b)
                            }
                    }
                });
                return g.length && function() {
                    for (var a = 0, b = g.length; a < b; ++a) g[a]()
                }
            }
            var V = /^\w/,
                ba = W.createElement("div"),
                na = function(a, b) {
                    if (b) {
                        var c = Object.keys(b),
                            d, e, f;
                        d = 0;
                        for (e = c.length; d < e; d++) f = c[d], this[f] = b[f]
                    } else this.$attr = {};
                    this.$$element = a
                };
            na.prototype = {
                $normalize: va,
                $addClass: function(a) {
                    a && 0 < a.length && z.addClass(this.$$element, a)
                },
                $removeClass: function(a) {
                    a && 0 < a.length && z.removeClass(this.$$element, a)
                },
                $updateClass: function(a, b) {
                    var c = bd(a, b);
                    c && c.length && z.addClass(this.$$element, c);
                    (c = bd(b, a)) && c.length && z.removeClass(this.$$element, c)
                },
                $set: function(a, b, d, e) {
                    var f =
                        Tc(this.$$element[0], a),
                        g = cd[a],
                        h = a;
                    f ? (this.$$element.prop(a, b), e = f) : g && (this[g] = b, h = g);
                    this[a] = b;
                    e ? this.$attr[a] = e : (e = this.$attr[a]) || (this.$attr[a] = e = Bc(a, "-"));
                    f = ra(this.$$element);
                    if ("a" === f && ("href" === a || "xlinkHref" === a) || "img" === f && "src" === a) this[a] = b = A(b, "src" === a);
                    else if ("img" === f && "srcset" === a) {
                        for (var f = "", g = X(b), k = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/, k = /\s/.test(g) ? k : /(,)/, g = g.split(k), k = Math.floor(g.length / 2), l = 0; l < k; l++) var m = 2 * l,
                            f = f + A(X(g[m]), !0),
                            f = f + (" " + X(g[m + 1]));
                        g = X(g[2 * l]).split(/\s/);
                        f += A(X(g[0]), !0);
                        2 === g.length && (f += " " + X(g[1]));
                        this[a] = b = f
                    }!1 !== d && (null === b || x(b) ? this.$$element.removeAttr(e) : V.test(e) ? this.$$element.attr(e, b) : Q(this.$$element[0], e, b));
                    (a = this.$$observers) && n(a[h], function(a) {
                        try {
                            a(b)
                        } catch (d) {
                            c(d)
                        }
                    })
                },
                $observe: function(a, b) {
                    var c = this,
                        d = c.$$observers || (c.$$observers = Z()),
                        e = d[a] || (d[a] = []);
                    e.push(b);
                    u.$evalAsync(function() {
                        e.$$inter || !c.hasOwnProperty(a) || x(c[a]) || b(c[a])
                    });
                    return function() {
                        cb(e, b)
                    }
                }
            };
            var ha = b.startSymbol(),
                da = b.endSymbol(),
                qa = "{{" == ha && "}}" ==
                da ? ab : function(a) {
                    return a.replace(/\{\{/g, ha).replace(/}}/g, da)
                },
                pa = /^ngAttr[A-Z]/,
                ua = /^(.+)Start$/;
            M.$$addBindingInfo = m ? function(a, b) {
                var c = a.data("$binding") || [];
                L(b) ? c = c.concat(b) : c.push(b);
                a.data("$binding", c)
            } : B;
            M.$$addBindingClass = m ? function(a) {
                $(a, "ng-binding")
            } : B;
            M.$$addScopeInfo = m ? function(a, b, c, d) {
                a.data(c ? d ? "$isolateScopeNoTemplate" : "$isolateScope" : "$scope", b)
            } : B;
            M.$$addScopeClass = m ? function(a, b) {
                $(a, b ? "ng-isolate-scope" : "ng-scope")
            } : B;
            return M
        }]
    }

    function va(a) {
        return gb(a.replace(Xc,
            ""))
    }

    function bd(a, b) {
        var d = "",
            c = a.split(/\s+/),
            e = b.split(/\s+/),
            f = 0;
        a: for (; f < c.length; f++) {
            for (var g = c[f], h = 0; h < e.length; h++)
                if (g == e[h]) continue a;
            d += (0 < d.length ? " " : "") + g
        }
        return d
    }

    function Zc(a) {
        a = C(a);
        var b = a.length;
        if (1 >= b) return a;
        for (; b--;) 8 === a[b].nodeType && ag.call(a, b, 1);
        return a
    }

    function Wc(a, b) {
        if (b && F(b)) return b;
        if (F(a)) {
            var d = dd.exec(a);
            if (d) return d[3]
        }
    }

    function ff() {
        var a = {},
            b = !1;
        this.register = function(b, c) {
            Ta(b, "controller");
            E(b) ? T(a, b) : a[b] = c
        };
        this.allowGlobals = function() {
            b = !0
        };
        this.$get = ["$injector", "$window", function(d, c) {
            function e(a, b, c, d) {
                if (!a || !E(a.$scope)) throw H("$controller")("noscp", d, b);
                a.$scope[b] = c
            }
            return function(f, g, h, k) {
                var l, m, r;
                h = !0 === h;
                k && F(k) && (r = k);
                if (F(f)) {
                    k = f.match(dd);
                    if (!k) throw bg("ctrlfmt", f);
                    m = k[1];
                    r = r || k[3];
                    f = a.hasOwnProperty(m) ? a[m] : Dc(g.$scope, m, !0) || (b ? Dc(c, m, !0) : v);
                    Sa(f, m, !0)
                }
                if (h) return h = (L(f) ? f[f.length - 1] : f).prototype, l = Object.create(h || null), r && e(g, r, l, m || f.name), T(function() {
                    var a = d.invoke(f, l, g, m);
                    a !== l && (E(a) || D(a)) && (l = a, r && e(g, r, l, m || f.name));
                    return l
                }, {
                    instance: l,
                    identifier: r
                });
                l = d.instantiate(f, g, m);
                r && e(g, r, l, m || f.name);
                return l
            }
        }]
    }

    function gf() {
        this.$get = ["$window", function(a) {
            return C(a.document)
        }]
    }

    function hf() {
        this.$get = ["$log", function(a) {
            return function(b, d) {
                a.error.apply(a, arguments)
            }
        }]
    }

    function bc(a) {
        return E(a) ? V(a) ? a.toISOString() : eb(a) : a
    }

    function nf() {
        this.$get = function() {
            return function(a) {
                if (!a) return "";
                var b = [];
                rc(a, function(a, c) {
                    null === a || x(a) || (L(a) ? n(a, function(a, d) {
                        b.push(ha(c) + "=" + ha(bc(a)))
                    }) : b.push(ha(c) + "=" + ha(bc(a))))
                });
                return b.join("&")
            }
        }
    }

    function of() {
        this.$get = function() {
            return function(a) {
                function b(a, e, f) {
                    null === a || x(a) || (L(a) ? n(a, function(a, c) {
                        b(a, e + "[" + (E(a) ? c : "") + "]")
                    }) : E(a) && !V(a) ? rc(a, function(a, c) {
                        b(a, e + (f ? "" : "[") + c + (f ? "" : "]"))
                    }) : d.push(ha(e) + "=" + ha(bc(a))))
                }
                if (!a) return "";
                var d = [];
                b(a, "", !0);
                return d.join("&")
            }
        }
    }

    function cc(a, b) {
        if (F(a)) {
            var d = a.replace(cg, "").trim();
            if (d) {
                var c = b("Content-Type");
                (c = c && 0 === c.indexOf(ed)) || (c = (c = d.match(dg)) && eg[c[0]].test(d));
                c && (a = wc(d))
            }
        }
        return a
    }

    function fd(a) {
        var b =
            Z(),
            d;
        F(a) ? n(a.split("\n"), function(a) {
            d = a.indexOf(":");
            var e = G(X(a.substr(0, d)));
            a = X(a.substr(d + 1));
            e && (b[e] = b[e] ? b[e] + ", " + a : a)
        }) : E(a) && n(a, function(a, d) {
            var f = G(d),
                g = X(a);
            f && (b[f] = b[f] ? b[f] + ", " + g : g)
        });
        return b
    }

    function gd(a) {
        var b;
        return function(d) {
            b || (b = fd(a));
            return d ? (d = b[G(d)], void 0 === d && (d = null), d) : b
        }
    }

    function hd(a, b, d, c) {
        if (D(c)) return c(a, b, d);
        n(c, function(c) {
            a = c(a, b, d)
        });
        return a
    }

    function mf() {
        var a = this.defaults = {
                transformResponse: [cc],
                transformRequest: [function(a) {
                    return E(a) && "[object File]" !==
                        ga.call(a) && "[object Blob]" !== ga.call(a) && "[object FormData]" !== ga.call(a) ? eb(a) : a
                }],
                headers: {
                    common: {
                        Accept: "application/json, text/plain, */*"
                    },
                    post: na(dc),
                    put: na(dc),
                    patch: na(dc)
                },
                xsrfCookieName: "XSRF-TOKEN",
                xsrfHeaderName: "X-XSRF-TOKEN",
                paramSerializer: "$httpParamSerializer"
            },
            b = !1;
        this.useApplyAsync = function(a) {
            return y(a) ? (b = !!a, this) : b
        };
        var d = !0;
        this.useLegacyPromiseExtensions = function(a) {
            return y(a) ? (d = !!a, this) : d
        };
        var c = this.interceptors = [];
        this.$get = ["$httpBackend", "$$cookieReader", "$cacheFactory",
            "$rootScope", "$q", "$injector",
            function(e, f, g, h, k, l) {
                function m(b) {
                    function c(a) {
                        var b = T({}, a);
                        b.data = hd(a.data, a.headers, a.status, f.transformResponse);
                        a = a.status;
                        return 200 <= a && 300 > a ? b : k.reject(b)
                    }

                    function e(a, b) {
                        var c, d = {};
                        n(a, function(a, e) {
                            D(a) ? (c = a(b), null != c && (d[e] = c)) : d[e] = a
                        });
                        return d
                    }
                    if (!E(b)) throw H("$http")("badreq", b);
                    if (!F(b.url)) throw H("$http")("badreq", b.url);
                    var f = T({
                            method: "get",
                            transformRequest: a.transformRequest,
                            transformResponse: a.transformResponse,
                            paramSerializer: a.paramSerializer
                        },
                        b);
                    f.headers = function(b) {
                        var c = a.headers,
                            d = T({}, b.headers),
                            f, g, h, c = T({}, c.common, c[G(b.method)]);
                        a: for (f in c) {
                            g = G(f);
                            for (h in d)
                                if (G(h) === g) continue a;
                            d[f] = c[f]
                        }
                        return e(d, na(b))
                    }(b);
                    f.method = ub(f.method);
                    f.paramSerializer = F(f.paramSerializer) ? l.get(f.paramSerializer) : f.paramSerializer;
                    var g = [function(b) {
                            var d = b.headers,
                                e = hd(b.data, gd(d), v, b.transformRequest);
                            x(e) && n(d, function(a, b) {
                                "content-type" === G(b) && delete d[b]
                            });
                            x(b.withCredentials) && !x(a.withCredentials) && (b.withCredentials = a.withCredentials);
                            return r(b, e).then(c, c)
                        }, v],
                        h = k.when(f);
                    for (n(K, function(a) {
                            (a.request || a.requestError) && g.unshift(a.request, a.requestError);
                            (a.response || a.responseError) && g.push(a.response, a.responseError)
                        }); g.length;) {
                        b = g.shift();
                        var m = g.shift(),
                            h = h.then(b, m)
                    }
                    d ? (h.success = function(a) {
                        Sa(a, "fn");
                        h.then(function(b) {
                            a(b.data, b.status, b.headers, f)
                        });
                        return h
                    }, h.error = function(a) {
                        Sa(a, "fn");
                        h.then(null, function(b) {
                            a(b.data, b.status, b.headers, f)
                        });
                        return h
                    }) : (h.success = id("success"), h.error = id("error"));
                    return h
                }

                function r(c,
                    d) {
                    function g(a, c, d, e) {
                        function f() {
                            l(c, a, d, e)
                        }
                        K && (200 <= a && 300 > a ? K.put(S, [a, c, fd(d), e]) : K.remove(S));
                        b ? h.$applyAsync(f) : (f(), h.$$phase || h.$apply())
                    }

                    function l(a, b, d, e) {
                        b = -1 <= b ? b : 0;
                        (200 <= b && 300 > b ? A.resolve : A.reject)({
                            data: a,
                            status: b,
                            headers: gd(d),
                            config: c,
                            statusText: e
                        })
                    }

                    function r(a) {
                        l(a.data, a.status, na(a.headers()), a.statusText)
                    }

                    function z() {
                        var a = m.pendingRequests.indexOf(c); - 1 !== a && m.pendingRequests.splice(a, 1)
                    }
                    var A = k.defer(),
                        Q = A.promise,
                        K, M, P = c.headers,
                        S = s(c.url, c.paramSerializer(c.params));
                    m.pendingRequests.push(c);
                    Q.then(z, z);
                    !c.cache && !a.cache || !1 === c.cache || "GET" !== c.method && "JSONP" !== c.method || (K = E(c.cache) ? c.cache : E(a.cache) ? a.cache : I);
                    K && (M = K.get(S), y(M) ? M && D(M.then) ? M.then(r, r) : L(M) ? l(M[1], M[0], na(M[2]), M[3]) : l(M, 200, {}, "OK") : K.put(S, Q));
                    x(M) && ((M = jd(c.url) ? f()[c.xsrfCookieName || a.xsrfCookieName] : v) && (P[c.xsrfHeaderName || a.xsrfHeaderName] = M), e(c.method, S, d, g, P, c.timeout, c.withCredentials, c.responseType));
                    return Q
                }

                function s(a, b) {
                    0 < b.length && (a += (-1 == a.indexOf("?") ? "?" : "&") + b);
                    return a
                }
                var I = g("$http");
                a.paramSerializer = F(a.paramSerializer) ? l.get(a.paramSerializer) : a.paramSerializer;
                var K = [];
                n(c, function(a) {
                    K.unshift(F(a) ? l.get(a) : l.invoke(a))
                });
                m.pendingRequests = [];
                (function(a) {
                    n(arguments, function(a) {
                        m[a] = function(b, c) {
                            return m(T({}, c || {}, {
                                method: a,
                                url: b
                            }))
                        }
                    })
                })("get", "delete", "head", "jsonp");
                (function(a) {
                    n(arguments, function(a) {
                        m[a] = function(b, c, d) {
                            return m(T({}, d || {}, {
                                method: a,
                                url: b,
                                data: c
                            }))
                        }
                    })
                })("post", "put", "patch");
                m.defaults = a;
                return m
            }
        ]
    }

    function qf() {
        this.$get =
            function() {
                return function() {
                    return new O.XMLHttpRequest
                }
            }
    }

    function pf() {
        this.$get = ["$browser", "$window", "$document", "$xhrFactory", function(a, b, d, c) {
            return fg(a, c, a.defer, b.angular.callbacks, d[0])
        }]
    }

    function fg(a, b, d, c, e) {
        function f(a, b, d) {
            var f = e.createElement("script"),
                m = null;
            f.type = "text/javascript";
            f.src = a;
            f.async = !0;
            m = function(a) {
                f.removeEventListener("load", m, !1);
                f.removeEventListener("error", m, !1);
                e.body.removeChild(f);
                f = null;
                var g = -1,
                    I = "unknown";
                a && ("load" !== a.type || c[b].called || (a = {
                        type: "error"
                    }),
                    I = a.type, g = "error" === a.type ? 404 : 200);
                d && d(g, I)
            };
            f.addEventListener("load", m, !1);
            f.addEventListener("error", m, !1);
            e.body.appendChild(f);
            return m
        }
        return function(e, h, k, l, m, r, s, I) {
            function K() {
                w && w();
                u && u.abort()
            }

            function t(b, c, e, f, g) {
                y(z) && d.cancel(z);
                w = u = null;
                b(c, e, f, g);
                a.$$completeOutstandingRequest(B)
            }
            a.$$incOutstandingRequestCount();
            h = h || a.url();
            if ("jsonp" == G(e)) {
                var p = "_" + (c.counter++).toString(36);
                c[p] = function(a) {
                    c[p].data = a;
                    c[p].called = !0
                };
                var w = f(h.replace("JSON_CALLBACK", "angular.callbacks." +
                    p), p, function(a, b) {
                    t(l, a, c[p].data, "", b);
                    c[p] = B
                })
            } else {
                var u = b(e, h);
                u.open(e, h, !0);
                n(m, function(a, b) {
                    y(a) && u.setRequestHeader(b, a)
                });
                u.onload = function() {
                    var a = u.statusText || "",
                        b = "response" in u ? u.response : u.responseText,
                        c = 1223 === u.status ? 204 : u.status;
                    0 === c && (c = b ? 200 : "file" == za(h).protocol ? 404 : 0);
                    t(l, c, b, u.getAllResponseHeaders(), a)
                };
                e = function() {
                    t(l, -1, null, null, "")
                };
                u.onerror = e;
                u.onabort = e;
                s && (u.withCredentials = !0);
                if (I) try {
                    u.responseType = I
                } catch (la) {
                    if ("json" !== I) throw la;
                }
                u.send(x(k) ? null : k)
            }
            if (0 <
                r) var z = d(K, r);
            else r && D(r.then) && r.then(K)
        }
    }

    function kf() {
        var a = "{{",
            b = "}}";
        this.startSymbol = function(b) {
            return b ? (a = b, this) : a
        };
        this.endSymbol = function(a) {
            return a ? (b = a, this) : b
        };
        this.$get = ["$parse", "$exceptionHandler", "$sce", function(d, c, e) {
            function f(a) {
                return "\\\\\\" + a
            }

            function g(c) {
                return c.replace(r, a).replace(s, b)
            }

            function h(a, b, c, d) {
                var e;
                return e = a.$watch(function(a) {
                    e();
                    return d(a)
                }, b, c)
            }

            function k(f, k, r, p) {
                function s(a) {
                    try {
                        var b = a;
                        a = r ? e.getTrusted(r, b) : e.valueOf(b);
                        var d;
                        if (p && !y(a)) d =
                            a;
                        else if (null == a) d = "";
                        else {
                            switch (typeof a) {
                                case "string":
                                    break;
                                case "number":
                                    a = "" + a;
                                    break;
                                default:
                                    a = eb(a)
                            }
                            d = a
                        }
                        return d
                    } catch (g) {
                        c(Ka.interr(f, g))
                    }
                }
                if (!f.length || -1 === f.indexOf(a)) {
                    var u;
                    k || (k = g(f), u = ba(k), u.exp = f, u.expressions = [], u.$$watchDelegate = h);
                    return u
                }
                p = !!p;
                var n, z, A = 0,
                    Q = [],
                    $ = [];
                u = f.length;
                for (var M = [], P = []; A < u;)
                    if (-1 != (n = f.indexOf(a, A)) && -1 != (z = f.indexOf(b, n + l))) A !== n && M.push(g(f.substring(A, n))), A = f.substring(n + l, z), Q.push(A), $.push(d(A, s)), A = z + m, P.push(M.length), M.push("");
                    else {
                        A !== u &&
                            M.push(g(f.substring(A)));
                        break
                    }
                r && 1 < M.length && Ka.throwNoconcat(f);
                if (!k || Q.length) {
                    var S = function(a) {
                        for (var b = 0, c = Q.length; b < c; b++) {
                            if (p && x(a[b])) return;
                            M[P[b]] = a[b]
                        }
                        return M.join("")
                    };
                    return T(function(a) {
                        var b = 0,
                            d = Q.length,
                            e = Array(d);
                        try {
                            for (; b < d; b++) e[b] = $[b](a);
                            return S(e)
                        } catch (g) {
                            c(Ka.interr(f, g))
                        }
                    }, {
                        exp: f,
                        expressions: Q,
                        $$watchDelegate: function(a, b) {
                            var c;
                            return a.$watchGroup($, function(d, e) {
                                var f = S(d);
                                D(b) && b.call(this, f, d !== e ? c : f, a);
                                c = f
                            })
                        }
                    })
                }
            }
            var l = a.length,
                m = b.length,
                r = new RegExp(a.replace(/./g,
                    f), "g"),
                s = new RegExp(b.replace(/./g, f), "g");
            k.startSymbol = function() {
                return a
            };
            k.endSymbol = function() {
                return b
            };
            return k
        }]
    }

    function lf() {
        this.$get = ["$rootScope", "$window", "$q", "$$q", "$browser", function(a, b, d, c, e) {
            function f(f, k, l, m) {
                function r() {
                    s ? f.apply(null, I) : f(p)
                }
                var s = 4 < arguments.length,
                    I = s ? wa.call(arguments, 4) : [],
                    K = b.setInterval,
                    t = b.clearInterval,
                    p = 0,
                    w = y(m) && !m,
                    u = (w ? c : d).defer(),
                    n = u.promise;
                l = y(l) ? l : 0;
                n.$$intervalId = K(function() {
                    w ? e.defer(r) : a.$evalAsync(r);
                    u.notify(p++);
                    0 < l && p >= l && (u.resolve(p),
                        t(n.$$intervalId), delete g[n.$$intervalId]);
                    w || a.$apply()
                }, k);
                g[n.$$intervalId] = u;
                return n
            }
            var g = {};
            f.cancel = function(a) {
                return a && a.$$intervalId in g ? (g[a.$$intervalId].reject("canceled"), b.clearInterval(a.$$intervalId), delete g[a.$$intervalId], !0) : !1
            };
            return f
        }]
    }

    function ec(a) {
        a = a.split("/");
        for (var b = a.length; b--;) a[b] = qb(a[b]);
        return a.join("/")
    }

    function kd(a, b) {
        var d = za(a);
        b.$$protocol = d.protocol;
        b.$$host = d.hostname;
        b.$$port = ca(d.port) || gg[d.protocol] || null
    }

    function ld(a, b) {
        var d = "/" !== a.charAt(0);
        d && (a = "/" + a);
        var c = za(a);
        b.$$path = decodeURIComponent(d && "/" === c.pathname.charAt(0) ? c.pathname.substring(1) : c.pathname);
        b.$$search = zc(c.search);
        b.$$hash = decodeURIComponent(c.hash);
        b.$$path && "/" != b.$$path.charAt(0) && (b.$$path = "/" + b.$$path)
    }

    function pa(a, b) {
        if (0 === b.indexOf(a)) return b.substr(a.length)
    }

    function Ia(a) {
        var b = a.indexOf("#");
        return -1 == b ? a : a.substr(0, b)
    }

    function kb(a) {
        return a.replace(/(#.+)|#$/, "$1")
    }

    function fc(a, b, d) {
        this.$$html5 = !0;
        d = d || "";
        kd(a, this);
        this.$$parse = function(a) {
            var d = pa(b,
                a);
            if (!F(d)) throw Gb("ipthprfx", a, b);
            ld(d, this);
            this.$$path || (this.$$path = "/");
            this.$$compose()
        };
        this.$$compose = function() {
            var a = Ub(this.$$search),
                d = this.$$hash ? "#" + qb(this.$$hash) : "";
            this.$$url = ec(this.$$path) + (a ? "?" + a : "") + d;
            this.$$absUrl = b + this.$$url.substr(1)
        };
        this.$$parseLinkUrl = function(c, e) {
            if (e && "#" === e[0]) return this.hash(e.slice(1)), !0;
            var f, g;
            y(f = pa(a, c)) ? (g = f, g = y(f = pa(d, f)) ? b + (pa("/", f) || f) : a + g) : y(f = pa(b, c)) ? g = b + f : b == c + "/" && (g = b);
            g && this.$$parse(g);
            return !!g
        }
    }

    function gc(a, b, d) {
        kd(a, this);
        this.$$parse = function(c) {
            var e = pa(a, c) || pa(b, c),
                f;
            x(e) || "#" !== e.charAt(0) ? this.$$html5 ? f = e : (f = "", x(e) && (a = c, this.replace())) : (f = pa(d, e), x(f) && (f = e));
            ld(f, this);
            c = this.$$path;
            var e = a,
                g = /^\/[A-Z]:(\/.*)/;
            0 === f.indexOf(e) && (f = f.replace(e, ""));
            g.exec(f) || (c = (f = g.exec(c)) ? f[1] : c);
            this.$$path = c;
            this.$$compose()
        };
        this.$$compose = function() {
            var b = Ub(this.$$search),
                e = this.$$hash ? "#" + qb(this.$$hash) : "";
            this.$$url = ec(this.$$path) + (b ? "?" + b : "") + e;
            this.$$absUrl = a + (this.$$url ? d + this.$$url : "")
        };
        this.$$parseLinkUrl =
            function(b, d) {
                return Ia(a) == Ia(b) ? (this.$$parse(b), !0) : !1
            }
    }

    function md(a, b, d) {
        this.$$html5 = !0;
        gc.apply(this, arguments);
        this.$$parseLinkUrl = function(c, e) {
            if (e && "#" === e[0]) return this.hash(e.slice(1)), !0;
            var f, g;
            a == Ia(c) ? f = c : (g = pa(b, c)) ? f = a + d + g : b === c + "/" && (f = b);
            f && this.$$parse(f);
            return !!f
        };
        this.$$compose = function() {
            var b = Ub(this.$$search),
                e = this.$$hash ? "#" + qb(this.$$hash) : "";
            this.$$url = ec(this.$$path) + (b ? "?" + b : "") + e;
            this.$$absUrl = a + d + this.$$url
        }
    }

    function Hb(a) {
        return function() {
            return this[a]
        }
    }

    function nd(a,
        b) {
        return function(d) {
            if (x(d)) return this[a];
            this[a] = b(d);
            this.$$compose();
            return this
        }
    }

    function rf() {
        var a = "",
            b = {
                enabled: !1,
                requireBase: !0,
                rewriteLinks: !0
            };
        this.hashPrefix = function(b) {
            return y(b) ? (a = b, this) : a
        };
        this.html5Mode = function(a) {
            return Na(a) ? (b.enabled = a, this) : E(a) ? (Na(a.enabled) && (b.enabled = a.enabled), Na(a.requireBase) && (b.requireBase = a.requireBase), Na(a.rewriteLinks) && (b.rewriteLinks = a.rewriteLinks), this) : b
        };
        this.$get = ["$rootScope", "$browser", "$sniffer", "$rootElement", "$window", function(d,
            c, e, f, g) {
            function h(a, b, d) {
                var e = l.url(),
                    f = l.$$state;
                try {
                    c.url(a, b, d), l.$$state = c.state()
                } catch (g) {
                    throw l.url(e), l.$$state = f, g;
                }
            }

            function k(a, b) {
                d.$broadcast("$locationChangeSuccess", l.absUrl(), a, l.$$state, b)
            }
            var l, m;
            m = c.baseHref();
            var r = c.url(),
                s;
            if (b.enabled) {
                if (!m && b.requireBase) throw Gb("nobase");
                s = r.substring(0, r.indexOf("/", r.indexOf("//") + 2)) + (m || "/");
                m = e.history ? fc : md
            } else s = Ia(r), m = gc;
            var I = s.substr(0, Ia(s).lastIndexOf("/") + 1);
            l = new m(s, I, "#" + a);
            l.$$parseLinkUrl(r, r);
            l.$$state = c.state();
            var n = /^\s*(javascript|mailto):/i;
            f.on("click", function(a) {
                if (b.rewriteLinks && !a.ctrlKey && !a.metaKey && !a.shiftKey && 2 != a.which && 2 != a.button) {
                    for (var e = C(a.target);
                        "a" !== ra(e[0]);)
                        if (e[0] === f[0] || !(e = e.parent())[0]) return;
                    var h = e.prop("href"),
                        k = e.attr("href") || e.attr("xlink:href");
                    E(h) && "[object SVGAnimatedString]" === h.toString() && (h = za(h.animVal).href);
                    n.test(h) || !h || e.attr("target") || a.isDefaultPrevented() || !l.$$parseLinkUrl(h, k) || (a.preventDefault(), l.absUrl() != c.url() && (d.$apply(), g.angular["ff-684208-preventDefault"] = !0))
                }
            });
            kb(l.absUrl()) != kb(r) && c.url(l.absUrl(), !0);
            var t = !0;
            c.onUrlChange(function(a, b) {
                x(pa(I, a)) ? g.location.href = a : (d.$evalAsync(function() {
                    var c = l.absUrl(),
                        e = l.$$state,
                        f;
                    a = kb(a);
                    l.$$parse(a);
                    l.$$state = b;
                    f = d.$broadcast("$locationChangeStart", a, c, b, e).defaultPrevented;
                    l.absUrl() === a && (f ? (l.$$parse(c), l.$$state = e, h(c, !1, e)) : (t = !1, k(c, e)))
                }), d.$$phase || d.$digest())
            });
            d.$watch(function() {
                var a = kb(c.url()),
                    b = kb(l.absUrl()),
                    f = c.state(),
                    g = l.$$replace,
                    m = a !== b || l.$$html5 && e.history && f !== l.$$state;
                if (t ||
                    m) t = !1, d.$evalAsync(function() {
                    var b = l.absUrl(),
                        c = d.$broadcast("$locationChangeStart", b, a, l.$$state, f).defaultPrevented;
                    l.absUrl() === b && (c ? (l.$$parse(a), l.$$state = f) : (m && h(b, g, f === l.$$state ? null : l.$$state), k(a, f)))
                });
                l.$$replace = !1
            });
            return l
        }]
    }

    function sf() {
        var a = !0,
            b = this;
        this.debugEnabled = function(b) {
            return y(b) ? (a = b, this) : a
        };
        this.$get = ["$window", function(d) {
            function c(a) {
                a instanceof Error && (a.stack ? a = a.message && -1 === a.stack.indexOf(a.message) ? "Error: " + a.message + "\n" + a.stack : a.stack : a.sourceURL &&
                    (a = a.message + "\n" + a.sourceURL + ":" + a.line));
                return a
            }

            function e(a) {
                var b = d.console || {},
                    e = b[a] || b.log || B;
                a = !1;
                try {
                    a = !!e.apply
                } catch (k) {}
                return a ? function() {
                    var a = [];
                    n(arguments, function(b) {
                        a.push(c(b))
                    });
                    return e.apply(b, a)
                } : function(a, b) {
                    e(a, null == b ? "" : b)
                }
            }
            return {
                log: e("log"),
                info: e("info"),
                warn: e("warn"),
                error: e("error"),
                debug: function() {
                    var c = e("debug");
                    return function() {
                        a && c.apply(b, arguments)
                    }
                }()
            }
        }]
    }

    function Xa(a, b) {
        if ("__defineGetter__" === a || "__defineSetter__" === a || "__lookupGetter__" === a || "__lookupSetter__" ===
            a || "__proto__" === a) throw ka("isecfld", b);
        return a
    }

    function hg(a) {
        return a + ""
    }

    function Aa(a, b) {
        if (a) {
            if (a.constructor === a) throw ka("isecfn", b);
            if (a.window === a) throw ka("isecwindow", b);
            if (a.children && (a.nodeName || a.prop && a.attr && a.find)) throw ka("isecdom", b);
            if (a === Object) throw ka("isecobj", b);
        }
        return a
    }

    function od(a, b) {
        if (a) {
            if (a.constructor === a) throw ka("isecfn", b);
            if (a === ig || a === jg || a === kg) throw ka("isecff", b);
        }
    }

    function Ib(a, b) {
        if (a && (a === (0).constructor || a === (!1).constructor || a === "".constructor ||
                a === {}.constructor || a === [].constructor || a === Function.constructor)) throw ka("isecaf", b);
    }

    function lg(a, b) {
        return "undefined" !== typeof a ? a : b
    }

    function pd(a, b) {
        return "undefined" === typeof a ? b : "undefined" === typeof b ? a : a + b
    }

    function R(a, b) {
        var d, c;
        switch (a.type) {
            case q.Program:
                d = !0;
                n(a.body, function(a) {
                    R(a.expression, b);
                    d = d && a.expression.constant
                });
                a.constant = d;
                break;
            case q.Literal:
                a.constant = !0;
                a.toWatch = [];
                break;
            case q.UnaryExpression:
                R(a.argument, b);
                a.constant = a.argument.constant;
                a.toWatch = a.argument.toWatch;
                break;
            case q.BinaryExpression:
                R(a.left, b);
                R(a.right, b);
                a.constant = a.left.constant && a.right.constant;
                a.toWatch = a.left.toWatch.concat(a.right.toWatch);
                break;
            case q.LogicalExpression:
                R(a.left, b);
                R(a.right, b);
                a.constant = a.left.constant && a.right.constant;
                a.toWatch = a.constant ? [] : [a];
                break;
            case q.ConditionalExpression:
                R(a.test, b);
                R(a.alternate, b);
                R(a.consequent, b);
                a.constant = a.test.constant && a.alternate.constant && a.consequent.constant;
                a.toWatch = a.constant ? [] : [a];
                break;
            case q.Identifier:
                a.constant = !1;
                a.toWatch = [a];
                break;
            case q.MemberExpression:
                R(a.object, b);
                a.computed && R(a.property, b);
                a.constant = a.object.constant && (!a.computed || a.property.constant);
                a.toWatch = [a];
                break;
            case q.CallExpression:
                d = a.filter ? !b(a.callee.name).$stateful : !1;
                c = [];
                n(a.arguments, function(a) {
                    R(a, b);
                    d = d && a.constant;
                    a.constant || c.push.apply(c, a.toWatch)
                });
                a.constant = d;
                a.toWatch = a.filter && !b(a.callee.name).$stateful ? c : [a];
                break;
            case q.AssignmentExpression:
                R(a.left, b);
                R(a.right, b);
                a.constant = a.left.constant && a.right.constant;
                a.toWatch = [a];
                break;
            case q.ArrayExpression:
                d = !0;
                c = [];
                n(a.elements, function(a) {
                    R(a, b);
                    d = d && a.constant;
                    a.constant || c.push.apply(c, a.toWatch)
                });
                a.constant = d;
                a.toWatch = c;
                break;
            case q.ObjectExpression:
                d = !0;
                c = [];
                n(a.properties, function(a) {
                    R(a.value, b);
                    d = d && a.value.constant;
                    a.value.constant || c.push.apply(c, a.value.toWatch)
                });
                a.constant = d;
                a.toWatch = c;
                break;
            case q.ThisExpression:
                a.constant = !1;
                a.toWatch = [];
                break;
            case q.LocalsExpression:
                a.constant = !1, a.toWatch = []
        }
    }

    function qd(a) {
        if (1 == a.length) {
            a = a[0].expression;
            var b = a.toWatch;
            return 1 !== b.length ? b : b[0] !== a ? b : v
        }
    }

    function rd(a) {
        return a.type === q.Identifier || a.type === q.MemberExpression
    }

    function sd(a) {
        if (1 === a.body.length && rd(a.body[0].expression)) return {
            type: q.AssignmentExpression,
            left: a.body[0].expression,
            right: {
                type: q.NGValueParameter
            },
            operator: "="
        }
    }

    function td(a) {
        return 0 === a.body.length || 1 === a.body.length && (a.body[0].expression.type === q.Literal || a.body[0].expression.type === q.ArrayExpression || a.body[0].expression.type === q.ObjectExpression)
    }

    function ud(a, b) {
        this.astBuilder =
            a;
        this.$filter = b
    }

    function vd(a, b) {
        this.astBuilder = a;
        this.$filter = b
    }

    function Jb(a) {
        return "constructor" == a
    }

    function hc(a) {
        return D(a.valueOf) ? a.valueOf() : mg.call(a)
    }

    function tf() {
        var a = Z(),
            b = Z();
        this.$get = ["$filter", function(d) {
            function c(c, f, r) {
                var u, n, z;
                r = r || K;
                switch (typeof c) {
                    case "string":
                        z = c = c.trim();
                        var A = r ? b : a;
                        u = A[z];
                        if (!u) {
                            ":" === c.charAt(0) && ":" === c.charAt(1) && (n = !0, c = c.substring(2));
                            u = r ? I : s;
                            var Q = new ic(u);
                            u = (new jc(Q, d, u)).parse(c);
                            u.constant ? u.$$watchDelegate = l : n ? u.$$watchDelegate = u.literal ?
                                k : h : u.inputs && (u.$$watchDelegate = g);
                            r && (u = e(u));
                            A[z] = u
                        }
                        return m(u, f);
                    case "function":
                        return m(c, f);
                    default:
                        return m(B, f)
                }
            }

            function e(a) {
                function b(c, d, e, f) {
                    var g = K;
                    K = !0;
                    try {
                        return a(c, d, e, f)
                    } finally {
                        K = g
                    }
                }
                if (!a) return a;
                b.$$watchDelegate = a.$$watchDelegate;
                b.assign = e(a.assign);
                b.constant = a.constant;
                b.literal = a.literal;
                for (var c = 0; a.inputs && c < a.inputs.length; ++c) a.inputs[c] = e(a.inputs[c]);
                b.inputs = a.inputs;
                return b
            }

            function f(a, b) {
                return null == a || null == b ? a === b : "object" === typeof a && (a = hc(a), "object" ===
                    typeof a) ? !1 : a === b || a !== a && b !== b
            }

            function g(a, b, c, d, e) {
                var g = d.inputs,
                    h;
                if (1 === g.length) {
                    var k = f,
                        g = g[0];
                    return a.$watch(function(a) {
                        var b = g(a);
                        f(b, k) || (h = d(a, v, v, [b]), k = b && hc(b));
                        return h
                    }, b, c, e)
                }
                for (var l = [], m = [], r = 0, s = g.length; r < s; r++) l[r] = f, m[r] = null;
                return a.$watch(function(a) {
                    for (var b = !1, c = 0, e = g.length; c < e; c++) {
                        var k = g[c](a);
                        if (b || (b = !f(k, l[c]))) m[c] = k, l[c] = k && hc(k)
                    }
                    b && (h = d(a, v, v, m));
                    return h
                }, b, c, e)
            }

            function h(a, b, c, d) {
                var e, f;
                return e = a.$watch(function(a) {
                    return d(a)
                }, function(a, c, d) {
                    f = a;
                    D(b) && b.apply(this, arguments);
                    y(a) && d.$$postDigest(function() {
                        y(f) && e()
                    })
                }, c)
            }

            function k(a, b, c, d) {
                function e(a) {
                    var b = !0;
                    n(a, function(a) {
                        y(a) || (b = !1)
                    });
                    return b
                }
                var f, g;
                return f = a.$watch(function(a) {
                    return d(a)
                }, function(a, c, d) {
                    g = a;
                    D(b) && b.call(this, a, c, d);
                    e(a) && d.$$postDigest(function() {
                        e(g) && f()
                    })
                }, c)
            }

            function l(a, b, c, d) {
                var e;
                return e = a.$watch(function(a) {
                    e();
                    return d(a)
                }, b, c)
            }

            function m(a, b) {
                if (!b) return a;
                var c = a.$$watchDelegate,
                    d = !1,
                    c = c !== k && c !== h ? function(c, e, f, g) {
                        f = d && g ? g[0] : a(c, e, f, g);
                        return b(f,
                            c, e)
                    } : function(c, d, e, f) {
                        e = a(c, d, e, f);
                        c = b(e, c, d);
                        return y(e) ? c : e
                    };
                a.$$watchDelegate && a.$$watchDelegate !== g ? c.$$watchDelegate = a.$$watchDelegate : b.$stateful || (c.$$watchDelegate = g, d = !a.inputs, c.inputs = a.inputs ? a.inputs : [a]);
                return c
            }
            var r = Ea().noUnsafeEval,
                s = {
                    csp: r,
                    expensiveChecks: !1
                },
                I = {
                    csp: r,
                    expensiveChecks: !0
                },
                K = !1;
            c.$$runningExpensiveChecks = function() {
                return K
            };
            return c
        }]
    }

    function vf() {
        this.$get = ["$rootScope", "$exceptionHandler", function(a, b) {
            return wd(function(b) {
                a.$evalAsync(b)
            }, b)
        }]
    }

    function wf() {
        this.$get = ["$browser", "$exceptionHandler", function(a, b) {
            return wd(function(b) {
                a.defer(b)
            }, b)
        }]
    }

    function wd(a, b) {
        function d() {
            this.$$state = {
                status: 0
            }
        }

        function c(a, b) {
            return function(c) {
                b.call(a, c)
            }
        }

        function e(c) {
            !c.processScheduled && c.pending && (c.processScheduled = !0, a(function() {
                var a, d, e;
                e = c.pending;
                c.processScheduled = !1;
                c.pending = v;
                for (var f = 0, g = e.length; f < g; ++f) {
                    d = e[f][0];
                    a = e[f][c.status];
                    try {
                        D(a) ? d.resolve(a(c.value)) : 1 === c.status ? d.resolve(c.value) : d.reject(c.value)
                    } catch (h) {
                        d.reject(h), b(h)
                    }
                }
            }))
        }

        function f() {
            this.promise =
                new d
        }
        var g = H("$q", TypeError);
        T(d.prototype, {
            then: function(a, b, c) {
                if (x(a) && x(b) && x(c)) return this;
                var d = new f;
                this.$$state.pending = this.$$state.pending || [];
                this.$$state.pending.push([d, a, b, c]);
                0 < this.$$state.status && e(this.$$state);
                return d.promise
            },
            "catch": function(a) {
                return this.then(null, a)
            },
            "finally": function(a, b) {
                return this.then(function(b) {
                    return k(b, !0, a)
                }, function(b) {
                    return k(b, !1, a)
                }, b)
            }
        });
        T(f.prototype, {
            resolve: function(a) {
                this.promise.$$state.status || (a === this.promise ? this.$$reject(g("qcycle",
                    a)) : this.$$resolve(a))
            },
            $$resolve: function(a) {
                function d(a) {
                    k || (k = !0, h.$$resolve(a))
                }

                function f(a) {
                    k || (k = !0, h.$$reject(a))
                }
                var g, h = this,
                    k = !1;
                try {
                    if (E(a) || D(a)) g = a && a.then;
                    D(g) ? (this.promise.$$state.status = -1, g.call(a, d, f, c(this, this.notify))) : (this.promise.$$state.value = a, this.promise.$$state.status = 1, e(this.promise.$$state))
                } catch (l) {
                    f(l), b(l)
                }
            },
            reject: function(a) {
                this.promise.$$state.status || this.$$reject(a)
            },
            $$reject: function(a) {
                this.promise.$$state.value = a;
                this.promise.$$state.status = 2;
                e(this.promise.$$state)
            },
            notify: function(c) {
                var d = this.promise.$$state.pending;
                0 >= this.promise.$$state.status && d && d.length && a(function() {
                    for (var a, e, f = 0, g = d.length; f < g; f++) {
                        e = d[f][0];
                        a = d[f][3];
                        try {
                            e.notify(D(a) ? a(c) : c)
                        } catch (h) {
                            b(h)
                        }
                    }
                })
            }
        });
        var h = function(a, b) {
                var c = new f;
                b ? c.resolve(a) : c.reject(a);
                return c.promise
            },
            k = function(a, b, c) {
                var d = null;
                try {
                    D(c) && (d = c())
                } catch (e) {
                    return h(e, !1)
                }
                return d && D(d.then) ? d.then(function() {
                    return h(a, b)
                }, function(a) {
                    return h(a, !1)
                }) : h(a, b)
            },
            l = function(a, b, c, d) {
                var e = new f;
                e.resolve(a);
                return e.promise.then(b,
                    c, d)
            },
            m = function(a) {
                if (!D(a)) throw g("norslvr", a);
                var b = new f;
                a(function(a) {
                    b.resolve(a)
                }, function(a) {
                    b.reject(a)
                });
                return b.promise
            };
        m.prototype = d.prototype;
        m.defer = function() {
            var a = new f;
            a.resolve = c(a, a.resolve);
            a.reject = c(a, a.reject);
            a.notify = c(a, a.notify);
            return a
        };
        m.reject = function(a) {
            var b = new f;
            b.reject(a);
            return b.promise
        };
        m.when = l;
        m.resolve = l;
        m.all = function(a) {
            var b = new f,
                c = 0,
                d = L(a) ? [] : {};
            n(a, function(a, e) {
                c++;
                l(a).then(function(a) {
                    d.hasOwnProperty(e) || (d[e] = a, --c || b.resolve(d))
                }, function(a) {
                    d.hasOwnProperty(e) ||
                        b.reject(a)
                })
            });
            0 === c && b.resolve(d);
            return b.promise
        };
        return m
    }

    function Ff() {
        this.$get = ["$window", "$timeout", function(a, b) {
            var d = a.requestAnimationFrame || a.webkitRequestAnimationFrame,
                c = a.cancelAnimationFrame || a.webkitCancelAnimationFrame || a.webkitCancelRequestAnimationFrame,
                e = !!d,
                f = e ? function(a) {
                    var b = d(a);
                    return function() {
                        c(b)
                    }
                } : function(a) {
                    var c = b(a, 16.66, !1);
                    return function() {
                        b.cancel(c)
                    }
                };
            f.supported = e;
            return f
        }]
    }

    function uf() {
        function a(a) {
            function b() {
                this.$$watchers = this.$$nextSibling = this.$$childHead =
                    this.$$childTail = null;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$watchersCount = 0;
                this.$id = ++pb;
                this.$$ChildScope = null
            }
            b.prototype = a;
            return b
        }
        var b = 10,
            d = H("$rootScope"),
            c = null,
            e = null;
        this.digestTtl = function(a) {
            arguments.length && (b = a);
            return b
        };
        this.$get = ["$exceptionHandler", "$parse", "$browser", function(f, g, h) {
            function k(a) {
                a.currentScope.$$destroyed = !0
            }

            function l(a) {
                9 === xa && (a.$$childHead && l(a.$$childHead), a.$$nextSibling && l(a.$$nextSibling));
                a.$parent = a.$$nextSibling = a.$$prevSibling = a.$$childHead =
                    a.$$childTail = a.$root = a.$$watchers = null
            }

            function m() {
                this.$id = ++pb;
                this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
                this.$root = this;
                this.$$destroyed = !1;
                this.$$listeners = {};
                this.$$listenerCount = {};
                this.$$watchersCount = 0;
                this.$$isolateBindings = null
            }

            function r(a) {
                if (w.$$phase) throw d("inprog", w.$$phase);
                w.$$phase = a
            }

            function s(a, b) {
                do a.$$watchersCount += b; while (a = a.$parent)
            }

            function I(a, b, c) {
                do a.$$listenerCount[c] -= b, 0 === a.$$listenerCount[c] &&
                    delete a.$$listenerCount[c]; while (a = a.$parent)
            }

            function q() {}

            function t() {
                for (; z.length;) try {
                    z.shift()()
                } catch (a) {
                    f(a)
                }
                e = null
            }

            function p() {
                null === e && (e = h.defer(function() {
                    w.$apply(t)
                }))
            }
            m.prototype = {
                constructor: m,
                $new: function(b, c) {
                    var d;
                    c = c || this;
                    b ? (d = new m, d.$root = this.$root) : (this.$$ChildScope || (this.$$ChildScope = a(this)), d = new this.$$ChildScope);
                    d.$parent = c;
                    d.$$prevSibling = c.$$childTail;
                    c.$$childHead ? (c.$$childTail.$$nextSibling = d, c.$$childTail = d) : c.$$childHead = c.$$childTail = d;
                    (b || c != this) && d.$on("$destroy",
                        k);
                    return d
                },
                $watch: function(a, b, d, e) {
                    var f = g(a);
                    if (f.$$watchDelegate) return f.$$watchDelegate(this, b, d, f, a);
                    var h = this,
                        k = h.$$watchers,
                        l = {
                            fn: b,
                            last: q,
                            get: f,
                            exp: e || a,
                            eq: !!d
                        };
                    c = null;
                    D(b) || (l.fn = B);
                    k || (k = h.$$watchers = []);
                    k.unshift(l);
                    s(this, 1);
                    return function() {
                        0 <= cb(k, l) && s(h, -1);
                        c = null
                    }
                },
                $watchGroup: function(a, b) {
                    function c() {
                        h = !1;
                        k ? (k = !1, b(e, e, g)) : b(e, d, g)
                    }
                    var d = Array(a.length),
                        e = Array(a.length),
                        f = [],
                        g = this,
                        h = !1,
                        k = !0;
                    if (!a.length) {
                        var l = !0;
                        g.$evalAsync(function() {
                            l && b(e, e, g)
                        });
                        return function() {
                            l = !1
                        }
                    }
                    if (1 === a.length) return this.$watch(a[0], function(a, c, f) {
                        e[0] = a;
                        d[0] = c;
                        b(e, a === c ? e : d, f)
                    });
                    n(a, function(a, b) {
                        var k = g.$watch(a, function(a, f) {
                            e[b] = a;
                            d[b] = f;
                            h || (h = !0, g.$evalAsync(c))
                        });
                        f.push(k)
                    });
                    return function() {
                        for (; f.length;) f.shift()()
                    }
                },
                $watchCollection: function(a, b) {
                    function c(a) {
                        e = a;
                        var b, d, g, h;
                        if (!x(e)) {
                            if (E(e))
                                if (Ca(e))
                                    for (f !== r && (f = r, u = f.length = 0, l++), a = e.length, u !== a && (l++, f.length = u = a), b = 0; b < a; b++) h = f[b], g = e[b], d = h !== h && g !== g, d || h === g || (l++, f[b] = g);
                                else {
                                    f !== s && (f = s = {}, u = 0, l++);
                                    a = 0;
                                    for (b in e) sa.call(e,
                                        b) && (a++, g = e[b], h = f[b], b in f ? (d = h !== h && g !== g, d || h === g || (l++, f[b] = g)) : (u++, f[b] = g, l++));
                                    if (u > a)
                                        for (b in l++, f) sa.call(e, b) || (u--, delete f[b])
                                } else f !== e && (f = e, l++);
                            return l
                        }
                    }
                    c.$stateful = !0;
                    var d = this,
                        e, f, h, k = 1 < b.length,
                        l = 0,
                        m = g(a, c),
                        r = [],
                        s = {},
                        p = !0,
                        u = 0;
                    return this.$watch(m, function() {
                        p ? (p = !1, b(e, e, d)) : b(e, h, d);
                        if (k)
                            if (E(e))
                                if (Ca(e)) {
                                    h = Array(e.length);
                                    for (var a = 0; a < e.length; a++) h[a] = e[a]
                                } else
                                    for (a in h = {}, e) sa.call(e, a) && (h[a] = e[a]);
                        else h = e
                    })
                },
                $digest: function() {
                    var a, g, k, l, m, s, p, n, I = b,
                        z, y = [],
                        x, C;
                    r("$digest");
                    h.$$checkUrlChange();
                    this === w && null !== e && (h.defer.cancel(e), t());
                    c = null;
                    do {
                        n = !1;
                        for (z = this; u.length;) {
                            try {
                                C = u.shift(), C.scope.$eval(C.expression, C.locals)
                            } catch (B) {
                                f(B)
                            }
                            c = null
                        }
                        a: do {
                            if (s = z.$$watchers)
                                for (p = s.length; p--;) try {
                                    if (a = s[p])
                                        if (m = a.get, (g = m(z)) !== (k = a.last) && !(a.eq ? oa(g, k) : "number" === typeof g && "number" === typeof k && isNaN(g) && isNaN(k))) n = !0, c = a, a.last = a.eq ? Oa(g, null) : g, l = a.fn, l(g, k === q ? g : k, z), 5 > I && (x = 4 - I, y[x] || (y[x] = []), y[x].push({
                                            msg: D(a.exp) ? "fn: " + (a.exp.name || a.exp.toString()) : a.exp,
                                            newVal: g,
                                            oldVal: k
                                        }));
                                        else if (a === c) {
                                        n = !1;
                                        break a
                                    }
                                } catch (E) {
                                    f(E)
                                }
                            if (!(s = z.$$watchersCount && z.$$childHead || z !== this && z.$$nextSibling))
                                for (; z !== this && !(s = z.$$nextSibling);) z = z.$parent
                        } while (z = s);
                        if ((n || u.length) && !I--) throw w.$$phase = null, d("infdig", b, y);
                    } while (n || u.length);
                    for (w.$$phase = null; v.length;) try {
                        v.shift()()
                    } catch (H) {
                        f(H)
                    }
                },
                $destroy: function() {
                    if (!this.$$destroyed) {
                        var a = this.$parent;
                        this.$broadcast("$destroy");
                        this.$$destroyed = !0;
                        this === w && h.$$applicationDestroyed();
                        s(this, -this.$$watchersCount);
                        for (var b in this.$$listenerCount) I(this, this.$$listenerCount[b], b);
                        a && a.$$childHead == this && (a.$$childHead = this.$$nextSibling);
                        a && a.$$childTail == this && (a.$$childTail = this.$$prevSibling);
                        this.$$prevSibling && (this.$$prevSibling.$$nextSibling = this.$$nextSibling);
                        this.$$nextSibling && (this.$$nextSibling.$$prevSibling = this.$$prevSibling);
                        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = B;
                        this.$on = this.$watch = this.$watchGroup = function() {
                            return B
                        };
                        this.$$listeners = {};
                        this.$$nextSibling =
                            null;
                        l(this)
                    }
                },
                $eval: function(a, b) {
                    return g(a)(this, b)
                },
                $evalAsync: function(a, b) {
                    w.$$phase || u.length || h.defer(function() {
                        u.length && w.$digest()
                    });
                    u.push({
                        scope: this,
                        expression: g(a),
                        locals: b
                    })
                },
                $$postDigest: function(a) {
                    v.push(a)
                },
                $apply: function(a) {
                    try {
                        r("$apply");
                        try {
                            return this.$eval(a)
                        } finally {
                            w.$$phase = null
                        }
                    } catch (b) {
                        f(b)
                    } finally {
                        try {
                            w.$digest()
                        } catch (c) {
                            throw f(c), c;
                        }
                    }
                },
                $applyAsync: function(a) {
                    function b() {
                        c.$eval(a)
                    }
                    var c = this;
                    a && z.push(b);
                    a = g(a);
                    p()
                },
                $on: function(a, b) {
                    var c = this.$$listeners[a];
                    c || (this.$$listeners[a] = c = []);
                    c.push(b);
                    var d = this;
                    do d.$$listenerCount[a] || (d.$$listenerCount[a] = 0), d.$$listenerCount[a]++; while (d = d.$parent);
                    var e = this;
                    return function() {
                        var d = c.indexOf(b); - 1 !== d && (c[d] = null, I(e, 1, a))
                    }
                },
                $emit: function(a, b) {
                    var c = [],
                        d, e = this,
                        g = !1,
                        h = {
                            name: a,
                            targetScope: e,
                            stopPropagation: function() {
                                g = !0
                            },
                            preventDefault: function() {
                                h.defaultPrevented = !0
                            },
                            defaultPrevented: !1
                        },
                        k = db([h], arguments, 1),
                        l, m;
                    do {
                        d = e.$$listeners[a] || c;
                        h.currentScope = e;
                        l = 0;
                        for (m = d.length; l < m; l++)
                            if (d[l]) try {
                                d[l].apply(null,
                                    k)
                            } catch (r) {
                                f(r)
                            } else d.splice(l, 1), l--, m--;
                        if (g) return h.currentScope = null, h;
                        e = e.$parent
                    } while (e);
                    h.currentScope = null;
                    return h
                },
                $broadcast: function(a, b) {
                    var c = this,
                        d = this,
                        e = {
                            name: a,
                            targetScope: this,
                            preventDefault: function() {
                                e.defaultPrevented = !0
                            },
                            defaultPrevented: !1
                        };
                    if (!this.$$listenerCount[a]) return e;
                    for (var g = db([e], arguments, 1), h, k; c = d;) {
                        e.currentScope = c;
                        d = c.$$listeners[a] || [];
                        h = 0;
                        for (k = d.length; h < k; h++)
                            if (d[h]) try {
                                d[h].apply(null, g)
                            } catch (l) {
                                f(l)
                            } else d.splice(h, 1), h--, k--;
                        if (!(d = c.$$listenerCount[a] &&
                                c.$$childHead || c !== this && c.$$nextSibling))
                            for (; c !== this && !(d = c.$$nextSibling);) c = c.$parent
                    }
                    e.currentScope = null;
                    return e
                }
            };
            var w = new m,
                u = w.$$asyncQueue = [],
                v = w.$$postDigestQueue = [],
                z = w.$$applyAsyncQueue = [];
            return w
        }]
    }

    function ne() {
        var a = /^\s*(https?|ftp|mailto|tel|file):/,
            b = /^\s*((https?|ftp|file|blob):|data:image\/)/;
        this.aHrefSanitizationWhitelist = function(b) {
            return y(b) ? (a = b, this) : a
        };
        this.imgSrcSanitizationWhitelist = function(a) {
            return y(a) ? (b = a, this) : b
        };
        this.$get = function() {
            return function(d, c) {
                var e =
                    c ? b : a,
                    f;
                f = za(d).href;
                return "" === f || f.match(e) ? d : "unsafe:" + f
            }
        }
    }

    function ng(a) {
        if ("self" === a) return a;
        if (F(a)) {
            if (-1 < a.indexOf("***")) throw Ba("iwcard", a);
            a = xd(a).replace("\\*\\*", ".*").replace("\\*", "[^:/.?&;]*");
            return new RegExp("^" + a + "$")
        }
        if ($a(a)) return new RegExp("^" + a.source + "$");
        throw Ba("imatcher");
    }

    function yd(a) {
        var b = [];
        y(a) && n(a, function(a) {
            b.push(ng(a))
        });
        return b
    }

    function yf() {
        this.SCE_CONTEXTS = qa;
        var a = ["self"],
            b = [];
        this.resourceUrlWhitelist = function(b) {
            arguments.length && (a = yd(b));
            return a
        };
        this.resourceUrlBlacklist = function(a) {
            arguments.length && (b = yd(a));
            return b
        };
        this.$get = ["$injector", function(d) {
            function c(a, b) {
                return "self" === a ? jd(b) : !!a.exec(b.href)
            }

            function e(a) {
                var b = function(a) {
                    this.$$unwrapTrustedValue = function() {
                        return a
                    }
                };
                a && (b.prototype = new a);
                b.prototype.valueOf = function() {
                    return this.$$unwrapTrustedValue()
                };
                b.prototype.toString = function() {
                    return this.$$unwrapTrustedValue().toString()
                };
                return b
            }
            var f = function(a) {
                throw Ba("unsafe");
            };
            d.has("$sanitize") && (f = d.get("$sanitize"));
            var g = e(),
                h = {};
            h[qa.HTML] = e(g);
            h[qa.CSS] = e(g);
            h[qa.URL] = e(g);
            h[qa.JS] = e(g);
            h[qa.RESOURCE_URL] = e(h[qa.URL]);
            return {
                trustAs: function(a, b) {
                    var c = h.hasOwnProperty(a) ? h[a] : null;
                    if (!c) throw Ba("icontext", a, b);
                    if (null === b || x(b) || "" === b) return b;
                    if ("string" !== typeof b) throw Ba("itype", a);
                    return new c(b)
                },
                getTrusted: function(d, e) {
                    if (null === e || x(e) || "" === e) return e;
                    var g = h.hasOwnProperty(d) ? h[d] : null;
                    if (g && e instanceof g) return e.$$unwrapTrustedValue();
                    if (d === qa.RESOURCE_URL) {
                        var g = za(e.toString()),
                            r, s, n = !1;
                        r = 0;
                        for (s = a.length; r < s; r++)
                            if (c(a[r], g)) {
                                n = !0;
                                break
                            }
                        if (n)
                            for (r = 0, s = b.length; r < s; r++)
                                if (c(b[r], g)) {
                                    n = !1;
                                    break
                                }
                        if (n) return e;
                        throw Ba("insecurl", e.toString());
                    }
                    if (d === qa.HTML) return f(e);
                    throw Ba("unsafe");
                },
                valueOf: function(a) {
                    return a instanceof g ? a.$$unwrapTrustedValue() : a
                }
            }
        }]
    }

    function xf() {
        var a = !0;
        this.enabled = function(b) {
            arguments.length && (a = !!b);
            return a
        };
        this.$get = ["$parse", "$sceDelegate", function(b, d) {
            if (a && 8 > xa) throw Ba("iequirks");
            var c = na(qa);
            c.isEnabled = function() {
                return a
            };
            c.trustAs = d.trustAs;
            c.getTrusted = d.getTrusted;
            c.valueOf = d.valueOf;
            a || (c.trustAs = c.getTrusted = function(a, b) {
                return b
            }, c.valueOf = ab);
            c.parseAs = function(a, d) {
                var e = b(d);
                return e.literal && e.constant ? e : b(d, function(b) {
                    return c.getTrusted(a, b)
                })
            };
            var e = c.parseAs,
                f = c.getTrusted,
                g = c.trustAs;
            n(qa, function(a, b) {
                var d = G(b);
                c[gb("parse_as_" + d)] = function(b) {
                    return e(a, b)
                };
                c[gb("get_trusted_" + d)] = function(b) {
                    return f(a, b)
                };
                c[gb("trust_as_" + d)] = function(b) {
                    return g(a, b)
                }
            });
            return c
        }]
    }

    function zf() {
        this.$get = ["$window", "$document",
            function(a, b) {
                var d = {},
                    c = ca((/android (\d+)/.exec(G((a.navigator || {}).userAgent)) || [])[1]),
                    e = /Boxee/i.test((a.navigator || {}).userAgent),
                    f = b[0] || {},
                    g, h = /^(Moz|webkit|ms)(?=[A-Z])/,
                    k = f.body && f.body.style,
                    l = !1,
                    m = !1;
                if (k) {
                    for (var r in k)
                        if (l = h.exec(r)) {
                            g = l[0];
                            g = g.substr(0, 1).toUpperCase() + g.substr(1);
                            break
                        }
                    g || (g = "WebkitOpacity" in k && "webkit");
                    l = !!("transition" in k || g + "Transition" in k);
                    m = !!("animation" in k || g + "Animation" in k);
                    !c || l && m || (l = F(k.webkitTransition), m = F(k.webkitAnimation))
                }
                return {
                    history: !(!a.history ||
                        !a.history.pushState || 4 > c || e),
                    hasEvent: function(a) {
                        if ("input" === a && 11 >= xa) return !1;
                        if (x(d[a])) {
                            var b = f.createElement("div");
                            d[a] = "on" + a in b
                        }
                        return d[a]
                    },
                    csp: Ea(),
                    vendorPrefix: g,
                    transitions: l,
                    animations: m,
                    android: c
                }
            }
        ]
    }

    function Bf() {
        var a;
        this.httpOptions = function(b) {
            return b ? (a = b, this) : a
        };
        this.$get = ["$templateCache", "$http", "$q", "$sce", function(b, d, c, e) {
            function f(g, h) {
                f.totalPendingRequests++;
                F(g) && b.get(g) || (g = e.getTrustedResourceUrl(g));
                var k = d.defaults && d.defaults.transformResponse;
                L(k) ? k = k.filter(function(a) {
                    return a !==
                        cc
                }) : k === cc && (k = null);
                return d.get(g, T({
                    cache: b,
                    transformResponse: k
                }, a))["finally"](function() {
                    f.totalPendingRequests--
                }).then(function(a) {
                    b.put(g, a.data);
                    return a.data
                }, function(a) {
                    if (!h) throw ja("tpload", g, a.status, a.statusText);
                    return c.reject(a)
                })
            }
            f.totalPendingRequests = 0;
            return f
        }]
    }

    function Cf() {
        this.$get = ["$rootScope", "$browser", "$location", function(a, b, d) {
            return {
                findBindings: function(a, b, d) {
                    a = a.getElementsByClassName("ng-binding");
                    var g = [];
                    n(a, function(a) {
                        var c = ia.element(a).data("$binding");
                        c && n(c, function(c) {
                            d ? (new RegExp("(^|\\s)" + xd(b) + "(\\s|\\||$)")).test(c) && g.push(a) : -1 != c.indexOf(b) && g.push(a)
                        })
                    });
                    return g
                },
                findModels: function(a, b, d) {
                    for (var g = ["ng-", "data-ng-", "ng\\:"], h = 0; h < g.length; ++h) {
                        var k = a.querySelectorAll("[" + g[h] + "model" + (d ? "=" : "*=") + '"' + b + '"]');
                        if (k.length) return k
                    }
                },
                getLocation: function() {
                    return d.url()
                },
                setLocation: function(b) {
                    b !== d.url() && (d.url(b), a.$digest())
                },
                whenStable: function(a) {
                    b.notifyWhenNoOutstandingRequests(a)
                }
            }
        }]
    }

    function Df() {
        this.$get = ["$rootScope",
            "$browser", "$q", "$$q", "$exceptionHandler",
            function(a, b, d, c, e) {
                function f(f, k, l) {
                    D(f) || (l = k, k = f, f = B);
                    var m = wa.call(arguments, 3),
                        r = y(l) && !l,
                        s = (r ? c : d).defer(),
                        n = s.promise,
                        q;
                    q = b.defer(function() {
                        try {
                            s.resolve(f.apply(null, m))
                        } catch (b) {
                            s.reject(b), e(b)
                        } finally {
                            delete g[n.$$timeoutId]
                        }
                        r || a.$apply()
                    }, k);
                    n.$$timeoutId = q;
                    g[q] = s;
                    return n
                }
                var g = {};
                f.cancel = function(a) {
                    return a && a.$$timeoutId in g ? (g[a.$$timeoutId].reject("canceled"), delete g[a.$$timeoutId], b.defer.cancel(a.$$timeoutId)) : !1
                };
                return f
            }
        ]
    }

    function za(a) {
        xa &&
            (Y.setAttribute("href", a), a = Y.href);
        Y.setAttribute("href", a);
        return {
            href: Y.href,
            protocol: Y.protocol ? Y.protocol.replace(/:$/, "") : "",
            host: Y.host,
            search: Y.search ? Y.search.replace(/^\?/, "") : "",
            hash: Y.hash ? Y.hash.replace(/^#/, "") : "",
            hostname: Y.hostname,
            port: Y.port,
            pathname: "/" === Y.pathname.charAt(0) ? Y.pathname : "/" + Y.pathname
        }
    }

    function jd(a) {
        a = F(a) ? za(a) : a;
        return a.protocol === zd.protocol && a.host === zd.host
    }

    function Ef() {
        this.$get = ba(O)
    }

    function Ad(a) {
        function b(a) {
            try {
                return decodeURIComponent(a)
            } catch (b) {
                return a
            }
        }
        var d = a[0] || {},
            c = {},
            e = "";
        return function() {
            var a, g, h, k, l;
            a = d.cookie || "";
            if (a !== e)
                for (e = a, a = e.split("; "), c = {}, h = 0; h < a.length; h++) g = a[h], k = g.indexOf("="), 0 < k && (l = b(g.substring(0, k)), x(c[l]) && (c[l] = b(g.substring(k + 1))));
            return c
        }
    }

    function If() {
        this.$get = Ad
    }

    function Lc(a) {
        function b(d, c) {
            if (E(d)) {
                var e = {};
                n(d, function(a, c) {
                    e[c] = b(c, a)
                });
                return e
            }
            return a.factory(d + "Filter", c)
        }
        this.register = b;
        this.$get = ["$injector", function(a) {
            return function(b) {
                return a.get(b + "Filter")
            }
        }];
        b("currency", Bd);
        b("date", Cd);
        b("filter", og);
        b("json", pg);
        b("limitTo", qg);
        b("lowercase", rg);
        b("number", Dd);
        b("orderBy", Ed);
        b("uppercase", sg)
    }

    function og() {
        return function(a, b, d) {
            if (!Ca(a)) {
                if (null == a) return a;
                throw H("filter")("notarray", a);
            }
            var c;
            switch (kc(b)) {
                case "function":
                    break;
                case "boolean":
                case "null":
                case "number":
                case "string":
                    c = !0;
                case "object":
                    b = tg(b, d, c);
                    break;
                default:
                    return a
            }
            return Array.prototype.filter.call(a, b)
        }
    }

    function tg(a, b, d) {
        var c = E(a) && "$" in a;
        !0 === b ? b = oa : D(b) || (b = function(a, b) {
            if (x(a)) return !1;
            if (null ===
                a || null === b) return a === b;
            if (E(b) || E(a) && !tc(a)) return !1;
            a = G("" + a);
            b = G("" + b);
            return -1 !== a.indexOf(b)
        });
        return function(e) {
            return c && !E(e) ? La(e, a.$, b, !1) : La(e, a, b, d)
        }
    }

    function La(a, b, d, c, e) {
        var f = kc(a),
            g = kc(b);
        if ("string" === g && "!" === b.charAt(0)) return !La(a, b.substring(1), d, c);
        if (L(a)) return a.some(function(a) {
            return La(a, b, d, c)
        });
        switch (f) {
            case "object":
                var h;
                if (c) {
                    for (h in a)
                        if ("$" !== h.charAt(0) && La(a[h], b, d, !0)) return !0;
                    return e ? !1 : La(a, b, d, !1)
                }
                if ("object" === g) {
                    for (h in b)
                        if (e = b[h], !D(e) && !x(e) &&
                            (f = "$" === h, !La(f ? a : a[h], e, d, f, f))) return !1;
                    return !0
                }
                return d(a, b);
            case "function":
                return !1;
            default:
                return d(a, b)
        }
    }

    function kc(a) {
        return null === a ? "null" : typeof a
    }

    function Bd(a) {
        var b = a.NUMBER_FORMATS;
        return function(a, c, e) {
            x(c) && (c = b.CURRENCY_SYM);
            x(e) && (e = b.PATTERNS[1].maxFrac);
            return null == a ? a : Fd(a, b.PATTERNS[1], b.GROUP_SEP, b.DECIMAL_SEP, e).replace(/\u00A4/g, c)
        }
    }

    function Dd(a) {
        var b = a.NUMBER_FORMATS;
        return function(a, c) {
            return null == a ? a : Fd(a, b.PATTERNS[0], b.GROUP_SEP, b.DECIMAL_SEP, c)
        }
    }

    function ug(a) {
        var b =
            0,
            d, c, e, f, g; - 1 < (c = a.indexOf(Gd)) && (a = a.replace(Gd, ""));
        0 < (e = a.search(/e/i)) ? (0 > c && (c = e), c += +a.slice(e + 1), a = a.substring(0, e)) : 0 > c && (c = a.length);
        for (e = 0; a.charAt(e) == lc; e++);
        if (e == (g = a.length)) d = [0], c = 1;
        else {
            for (g--; a.charAt(g) == lc;) g--;
            c -= e;
            d = [];
            for (f = 0; e <= g; e++, f++) d[f] = +a.charAt(e)
        }
        c > Hd && (d = d.splice(0, Hd - 1), b = c - 1, c = 1);
        return {
            d: d,
            e: b,
            i: c
        }
    }

    function vg(a, b, d, c) {
        var e = a.d,
            f = e.length - a.i;
        b = x(b) ? Math.min(Math.max(d, f), c) : +b;
        d = b + a.i;
        c = e[d];
        if (0 < d) e.splice(d);
        else {
            a.i = 1;
            e.length = d = b + 1;
            for (var g = 0; g < d; g++) e[g] =
                0
        }
        for (5 <= c && e[d - 1]++; f < b; f++) e.push(0);
        if (b = e.reduceRight(function(a, b, c, d) {
                b += a;
                d[c] = b % 10;
                return Math.floor(b / 10)
            }, 0)) e.unshift(b), a.i++
    }

    function Fd(a, b, d, c, e) {
        if (!F(a) && !N(a) || isNaN(a)) return "";
        var f = !isFinite(a),
            g = !1,
            h = Math.abs(a) + "",
            k = "";
        if (f) k = "\u221e";
        else {
            g = ug(h);
            vg(g, e, b.minFrac, b.maxFrac);
            k = g.d;
            h = g.i;
            e = g.e;
            f = [];
            for (g = k.reduce(function(a, b) {
                    return a && !b
                }, !0); 0 > h;) k.unshift(0), h++;
            0 < h ? f = k.splice(h) : (f = k, k = [0]);
            h = [];
            for (k.length > b.lgSize && h.unshift(k.splice(-b.lgSize).join("")); k.length > b.gSize;) h.unshift(k.splice(-b.gSize).join(""));
            k.length && h.unshift(k.join(""));
            k = h.join(d);
            f.length && (k += c + f.join(""));
            e && (k += "e+" + e)
        }
        return 0 > a && !g ? b.negPre + k + b.negSuf : b.posPre + k + b.posSuf
    }

    function Kb(a, b, d) {
        var c = "";
        0 > a && (c = "-", a = -a);
        for (a = "" + a; a.length < b;) a = lc + a;
        d && (a = a.substr(a.length - b));
        return c + a
    }

    function aa(a, b, d, c) {
        d = d || 0;
        return function(e) {
            e = e["get" + a]();
            if (0 < d || e > -d) e += d;
            0 === e && -12 == d && (e = 12);
            return Kb(e, b, c)
        }
    }

    function Lb(a, b) {
        return function(d, c) {
            var e = d["get" + a](),
                f = ub(b ? "SHORT" + a : a);
            return c[f][e]
        }
    }

    function Id(a) {
        var b = (new Date(a,
            0, 1)).getDay();
        return new Date(a, 0, (4 >= b ? 5 : 12) - b)
    }

    function Jd(a) {
        return function(b) {
            var d = Id(b.getFullYear());
            b = +new Date(b.getFullYear(), b.getMonth(), b.getDate() + (4 - b.getDay())) - +d;
            b = 1 + Math.round(b / 6048E5);
            return Kb(b, a)
        }
    }

    function mc(a, b) {
        return 0 >= a.getFullYear() ? b.ERAS[0] : b.ERAS[1]
    }

    function Cd(a) {
        function b(a) {
            var b;
            if (b = a.match(d)) {
                a = new Date(0);
                var f = 0,
                    g = 0,
                    h = b[8] ? a.setUTCFullYear : a.setFullYear,
                    k = b[8] ? a.setUTCHours : a.setHours;
                b[9] && (f = ca(b[9] + b[10]), g = ca(b[9] + b[11]));
                h.call(a, ca(b[1]), ca(b[2]) -
                    1, ca(b[3]));
                f = ca(b[4] || 0) - f;
                g = ca(b[5] || 0) - g;
                h = ca(b[6] || 0);
                b = Math.round(1E3 * parseFloat("0." + (b[7] || 0)));
                k.call(a, f, g, h, b)
            }
            return a
        }
        var d = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
        return function(c, d, f) {
            var g = "",
                h = [],
                k, l;
            d = d || "mediumDate";
            d = a.DATETIME_FORMATS[d] || d;
            F(c) && (c = wg.test(c) ? ca(c) : b(c));
            N(c) && (c = new Date(c));
            if (!V(c) || !isFinite(c.getTime())) return c;
            for (; d;)(l = xg.exec(d)) ? (h = db(h, l, 1), d = h.pop()) : (h.push(d), d = null);
            var m = c.getTimezoneOffset();
            f && (m = xc(f, m), c = Tb(c, f, !0));
            n(h, function(b) {
                k = yg[b];
                g += k ? k(c, a.DATETIME_FORMATS, m) : "''" === b ? "'" : b.replace(/(^'|'$)/g, "").replace(/''/g, "'")
            });
            return g
        }
    }

    function pg() {
        return function(a, b) {
            x(b) && (b = 2);
            return eb(a, b)
        }
    }

    function qg() {
        return function(a, b, d) {
            b = Infinity === Math.abs(Number(b)) ? Number(b) : ca(b);
            if (isNaN(b)) return a;
            N(a) && (a = a.toString());
            if (!L(a) && !F(a)) return a;
            d = !d || isNaN(d) ? 0 : ca(d);
            d = 0 > d ? Math.max(0, a.length + d) : d;
            return 0 <= b ? a.slice(d, d + b) : 0 === d ? a.slice(b, a.length) : a.slice(Math.max(0, d + b),
                d)
        }
    }

    function Ed(a) {
        function b(b, d) {
            d = d ? -1 : 1;
            return b.map(function(b) {
                var c = 1,
                    h = ab;
                if (D(b)) h = b;
                else if (F(b)) {
                    if ("+" == b.charAt(0) || "-" == b.charAt(0)) c = "-" == b.charAt(0) ? -1 : 1, b = b.substring(1);
                    if ("" !== b && (h = a(b), h.constant)) var k = h(),
                        h = function(a) {
                            return a[k]
                        }
                }
                return {
                    get: h,
                    descending: c * d
                }
            })
        }

        function d(a) {
            switch (typeof a) {
                case "number":
                case "boolean":
                case "string":
                    return !0;
                default:
                    return !1
            }
        }
        return function(a, e, f) {
            if (null == a) return a;
            if (!Ca(a)) throw H("orderBy")("notarray", a);
            L(e) || (e = [e]);
            0 === e.length &&
                (e = ["+"]);
            var g = b(e, f);
            g.push({
                get: function() {
                    return {}
                },
                descending: f ? -1 : 1
            });
            a = Array.prototype.map.call(a, function(a, b) {
                return {
                    value: a,
                    predicateValues: g.map(function(c) {
                        var e = c.get(a);
                        c = typeof e;
                        if (null === e) c = "string", e = "null";
                        else if ("string" === c) e = e.toLowerCase();
                        else if ("object" === c) a: {
                            if ("function" === typeof e.valueOf && (e = e.valueOf(), d(e))) break a;
                            if (tc(e) && (e = e.toString(), d(e))) break a;
                            e = b
                        }
                        return {
                            value: e,
                            type: c
                        }
                    })
                }
            });
            a.sort(function(a, b) {
                for (var c = 0, d = 0, e = g.length; d < e; ++d) {
                    var c = a.predicateValues[d],
                        f = b.predicateValues[d],
                        n = 0;
                    c.type === f.type ? c.value !== f.value && (n = c.value < f.value ? -1 : 1) : n = c.type < f.type ? -1 : 1;
                    if (c = n * g[d].descending) break
                }
                return c
            });
            return a = a.map(function(a) {
                return a.value
            })
        }
    }

    function Ma(a) {
        D(a) && (a = {
            link: a
        });
        a.restrict = a.restrict || "AC";
        return ba(a)
    }

    function Kd(a, b, d, c, e) {
        var f = this,
            g = [];
        f.$error = {};
        f.$$success = {};
        f.$pending = v;
        f.$name = e(b.name || b.ngForm || "")(d);
        f.$dirty = !1;
        f.$pristine = !0;
        f.$valid = !0;
        f.$invalid = !1;
        f.$submitted = !1;
        f.$$parentForm = Mb;
        f.$rollbackViewValue = function() {
            n(g,
                function(a) {
                    a.$rollbackViewValue()
                })
        };
        f.$commitViewValue = function() {
            n(g, function(a) {
                a.$commitViewValue()
            })
        };
        f.$addControl = function(a) {
            Ta(a.$name, "input");
            g.push(a);
            a.$name && (f[a.$name] = a);
            a.$$parentForm = f
        };
        f.$$renameControl = function(a, b) {
            var c = a.$name;
            f[c] === a && delete f[c];
            f[b] = a;
            a.$name = b
        };
        f.$removeControl = function(a) {
            a.$name && f[a.$name] === a && delete f[a.$name];
            n(f.$pending, function(b, c) {
                f.$setValidity(c, null, a)
            });
            n(f.$error, function(b, c) {
                f.$setValidity(c, null, a)
            });
            n(f.$$success, function(b, c) {
                f.$setValidity(c,
                    null, a)
            });
            cb(g, a);
            a.$$parentForm = Mb
        };
        Ld({
            ctrl: this,
            $element: a,
            set: function(a, b, c) {
                var d = a[b];
                d ? -1 === d.indexOf(c) && d.push(c) : a[b] = [c]
            },
            unset: function(a, b, c) {
                var d = a[b];
                d && (cb(d, c), 0 === d.length && delete a[b])
            },
            $animate: c
        });
        f.$setDirty = function() {
            c.removeClass(a, Ya);
            c.addClass(a, Nb);
            f.$dirty = !0;
            f.$pristine = !1;
            f.$$parentForm.$setDirty()
        };
        f.$setPristine = function() {
            c.setClass(a, Ya, Nb + " ng-submitted");
            f.$dirty = !1;
            f.$pristine = !0;
            f.$submitted = !1;
            n(g, function(a) {
                a.$setPristine()
            })
        };
        f.$setUntouched = function() {
            n(g,
                function(a) {
                    a.$setUntouched()
                })
        };
        f.$setSubmitted = function() {
            c.addClass(a, "ng-submitted");
            f.$submitted = !0;
            f.$$parentForm.$setSubmitted()
        }
    }

    function nc(a) {
        a.$formatters.push(function(b) {
            return a.$isEmpty(b) ? b : b.toString()
        })
    }

    function lb(a, b, d, c, e, f) {
        var g = G(b[0].type);
        if (!e.android) {
            var h = !1;
            b.on("compositionstart", function(a) {
                h = !0
            });
            b.on("compositionend", function() {
                h = !1;
                k()
            })
        }
        var k = function(a) {
            l && (f.defer.cancel(l), l = null);
            if (!h) {
                var e = b.val();
                a = a && a.type;
                "password" === g || d.ngTrim && "false" === d.ngTrim ||
                    (e = X(e));
                (c.$viewValue !== e || "" === e && c.$$hasNativeValidators) && c.$setViewValue(e, a)
            }
        };
        if (e.hasEvent("input")) b.on("input", k);
        else {
            var l, m = function(a, b, c) {
                l || (l = f.defer(function() {
                    l = null;
                    b && b.value === c || k(a)
                }))
            };
            b.on("keydown", function(a) {
                var b = a.keyCode;
                91 === b || 15 < b && 19 > b || 37 <= b && 40 >= b || m(a, this, this.value)
            });
            if (e.hasEvent("paste")) b.on("paste cut", m)
        }
        b.on("change", k);
        c.$render = function() {
            var a = c.$isEmpty(c.$viewValue) ? "" : c.$viewValue;
            b.val() !== a && b.val(a)
        }
    }

    function Ob(a, b) {
        return function(d, c) {
            var e,
                f;
            if (V(d)) return d;
            if (F(d)) {
                '"' == d.charAt(0) && '"' == d.charAt(d.length - 1) && (d = d.substring(1, d.length - 1));
                if (zg.test(d)) return new Date(d);
                a.lastIndex = 0;
                if (e = a.exec(d)) return e.shift(), f = c ? {
                    yyyy: c.getFullYear(),
                    MM: c.getMonth() + 1,
                    dd: c.getDate(),
                    HH: c.getHours(),
                    mm: c.getMinutes(),
                    ss: c.getSeconds(),
                    sss: c.getMilliseconds() / 1E3
                } : {
                    yyyy: 1970,
                    MM: 1,
                    dd: 1,
                    HH: 0,
                    mm: 0,
                    ss: 0,
                    sss: 0
                }, n(e, function(a, c) {
                    c < b.length && (f[b[c]] = +a)
                }), new Date(f.yyyy, f.MM - 1, f.dd, f.HH, f.mm, f.ss || 0, 1E3 * f.sss || 0)
            }
            return NaN
        }
    }

    function mb(a, b, d, c) {
        return function(e,
            f, g, h, k, l, m) {
            function r(a) {
                return a && !(a.getTime && a.getTime() !== a.getTime())
            }

            function s(a) {
                return y(a) && !V(a) ? d(a) || v : a
            }
            Md(e, f, g, h);
            lb(e, f, g, h, k, l);
            var n = h && h.$options && h.$options.timezone,
                q;
            h.$$parserName = a;
            h.$parsers.push(function(a) {
                return h.$isEmpty(a) ? null : b.test(a) ? (a = d(a, q), n && (a = Tb(a, n)), a) : v
            });
            h.$formatters.push(function(a) {
                if (a && !V(a)) throw nb("datefmt", a);
                if (r(a)) return (q = a) && n && (q = Tb(q, n, !0)), m("date")(a, c, n);
                q = null;
                return ""
            });
            if (y(g.min) || g.ngMin) {
                var t;
                h.$validators.min = function(a) {
                    return !r(a) ||
                        x(t) || d(a) >= t
                };
                g.$observe("min", function(a) {
                    t = s(a);
                    h.$validate()
                })
            }
            if (y(g.max) || g.ngMax) {
                var p;
                h.$validators.max = function(a) {
                    return !r(a) || x(p) || d(a) <= p
                };
                g.$observe("max", function(a) {
                    p = s(a);
                    h.$validate()
                })
            }
        }
    }

    function Md(a, b, d, c) {
        (c.$$hasNativeValidators = E(b[0].validity)) && c.$parsers.push(function(a) {
            var c = b.prop("validity") || {};
            return c.badInput || c.typeMismatch ? v : a
        })
    }

    function Nd(a, b, d, c, e) {
        if (y(c)) {
            a = a(c);
            if (!a.constant) throw nb("constexpr", d, c);
            return a(b)
        }
        return e
    }

    function oc(a, b) {
        a = "ngClass" + a;
        return ["$animate", function(d) {
            function c(a, b) {
                var c = [],
                    d = 0;
                a: for (; d < a.length; d++) {
                    for (var e = a[d], m = 0; m < b.length; m++)
                        if (e == b[m]) continue a;
                    c.push(e)
                }
                return c
            }

            function e(a) {
                var b = [];
                return L(a) ? (n(a, function(a) {
                    b = b.concat(e(a))
                }), b) : F(a) ? a.split(" ") : E(a) ? (n(a, function(a, c) {
                    a && (b = b.concat(c.split(" ")))
                }), b) : a
            }
            return {
                restrict: "AC",
                link: function(f, g, h) {
                    function k(a, b) {
                        var c = g.data("$classCounts") || Z(),
                            d = [];
                        n(a, function(a) {
                            if (0 < b || c[a]) c[a] = (c[a] || 0) + b, c[a] === +(0 < b) && d.push(a)
                        });
                        g.data("$classCounts",
                            c);
                        return d.join(" ")
                    }

                    function l(a) {
                        if (!0 === b || f.$index % 2 === b) {
                            var l = e(a || []);
                            if (!m) {
                                var n = k(l, 1);
                                h.$addClass(n)
                            } else if (!oa(a, m)) {
                                var q = e(m),
                                    n = c(l, q),
                                    l = c(q, l),
                                    n = k(n, 1),
                                    l = k(l, -1);
                                n && n.length && d.addClass(g, n);
                                l && l.length && d.removeClass(g, l)
                            }
                        }
                        m = na(a)
                    }
                    var m;
                    f.$watch(h[a], l, !0);
                    h.$observe("class", function(b) {
                        l(f.$eval(h[a]))
                    });
                    "ngClass" !== a && f.$watch("$index", function(c, d) {
                        var g = c & 1;
                        if (g !== (d & 1)) {
                            var l = e(f.$eval(h[a]));
                            g === b ? (g = k(l, 1), h.$addClass(g)) : (g = k(l, -1), h.$removeClass(g))
                        }
                    })
                }
            }
        }]
    }

    function Ld(a) {
        function b(a,
            b) {
            b && !f[a] ? (k.addClass(e, a), f[a] = !0) : !b && f[a] && (k.removeClass(e, a), f[a] = !1)
        }

        function d(a, c) {
            a = a ? "-" + Bc(a, "-") : "";
            b(ob + a, !0 === c);
            b(Od + a, !1 === c)
        }
        var c = a.ctrl,
            e = a.$element,
            f = {},
            g = a.set,
            h = a.unset,
            k = a.$animate;
        f[Od] = !(f[ob] = e.hasClass(ob));
        c.$setValidity = function(a, e, f) {
            x(e) ? (c.$pending || (c.$pending = {}), g(c.$pending, a, f)) : (c.$pending && h(c.$pending, a, f), Pd(c.$pending) && (c.$pending = v));
            Na(e) ? e ? (h(c.$error, a, f), g(c.$$success, a, f)) : (g(c.$error, a, f), h(c.$$success, a, f)) : (h(c.$error, a, f), h(c.$$success, a, f));
            c.$pending ? (b(Qd, !0), c.$valid = c.$invalid = v, d("", null)) : (b(Qd, !1), c.$valid = Pd(c.$error), c.$invalid = !c.$valid, d("", c.$valid));
            e = c.$pending && c.$pending[a] ? v : c.$error[a] ? !1 : c.$$success[a] ? !0 : null;
            d(a, e);
            c.$$parentForm.$setValidity(a, e, c)
        }
    }

    function Pd(a) {
        if (a)
            for (var b in a)
                if (a.hasOwnProperty(b)) return !1;
        return !0
    }
    var Ag = /^\/(.+)\/([a-z]*)$/,
        sa = Object.prototype.hasOwnProperty,
        G = function(a) {
            return F(a) ? a.toLowerCase() : a
        },
        ub = function(a) {
            return F(a) ? a.toUpperCase() : a
        },
        xa, C, ua, wa = [].slice,
        ag = [].splice,
        Bg = [].push,
        ga = Object.prototype.toString,
        uc = Object.getPrototypeOf,
        Da = H("ng"),
        ia = O.angular || (O.angular = {}),
        Vb, pb = 0;
    xa = W.documentMode;
    B.$inject = [];
    ab.$inject = [];
    var L = Array.isArray,
        ae = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,
        X = function(a) {
            return F(a) ? a.trim() : a
        },
        xd = function(a) {
            return a.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08")
        },
        Ea = function() {
            if (!y(Ea.rules)) {
                var a = W.querySelector("[ng-csp]") || W.querySelector("[data-ng-csp]");
                if (a) {
                    var b = a.getAttribute("ng-csp") || a.getAttribute("data-ng-csp");
                    Ea.rules = {
                        noUnsafeEval: !b || -1 !== b.indexOf("no-unsafe-eval"),
                        noInlineStyle: !b || -1 !== b.indexOf("no-inline-style")
                    }
                } else {
                    a = Ea;
                    try {
                        new Function(""), b = !1
                    } catch (d) {
                        b = !0
                    }
                    a.rules = {
                        noUnsafeEval: b,
                        noInlineStyle: !1
                    }
                }
            }
            return Ea.rules
        },
        rb = function() {
            if (y(rb.name_)) return rb.name_;
            var a, b, d = Qa.length,
                c, e;
            for (b = 0; b < d; ++b)
                if (c = Qa[b], a = W.querySelector("[" + c.replace(":", "\\:") + "jq]")) {
                    e = a.getAttribute(c + "jq");
                    break
                }
            return rb.name_ = e
        },
        de = /:/g,
        Qa = ["ng-",
            "data-ng-", "ng:", "x-ng-"
        ],
        ie = /[A-Z]/g,
        Cc = !1,
        Pa = 3,
        me = {
            full: "1.5.0",
            major: 1,
            minor: 5,
            dot: 0,
            codeName: "ennoblement-facilitation"
        };
    U.expando = "ng339";
    var ib = U.cache = {},
        Of = 1;
    U._data = function(a) {
        return this.cache[a[this.expando]] || {}
    };
    var Jf = /([\:\-\_]+(.))/g,
        Kf = /^moz([A-Z])/,
        yb = {
            mouseleave: "mouseout",
            mouseenter: "mouseover"
        },
        Xb = H("jqLite"),
        Nf = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,
        Wb = /<|&#?\w+;/,
        Lf = /<([\w:-]+)/,
        Mf = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
        da = {
            option: [1, '<select multiple="multiple">',
                "</select>"
            ],
            thead: [1, "<table>", "</table>"],
            col: [2, "<table><colgroup>", "</colgroup></table>"],
            tr: [2, "<table><tbody>", "</tbody></table>"],
            td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
            _default: [0, "", ""]
        };
    da.optgroup = da.option;
    da.tbody = da.tfoot = da.colgroup = da.caption = da.thead;
    da.th = da.td;
    var Tf = Node.prototype.contains || function(a) {
            return !!(this.compareDocumentPosition(a) & 16)
        },
        Ra = U.prototype = {
            ready: function(a) {
                function b() {
                    d || (d = !0, a())
                }
                var d = !1;
                "complete" === W.readyState ? setTimeout(b) : (this.on("DOMContentLoaded",
                    b), U(O).on("load", b))
            },
            toString: function() {
                var a = [];
                n(this, function(b) {
                    a.push("" + b)
                });
                return "[" + a.join(", ") + "]"
            },
            eq: function(a) {
                return 0 <= a ? C(this[a]) : C(this[this.length + a])
            },
            length: 0,
            push: Bg,
            sort: [].sort,
            splice: [].splice
        },
        Db = {};
    n("multiple selected checked disabled readOnly required open".split(" "), function(a) {
        Db[G(a)] = a
    });
    var Uc = {};
    n("input select option textarea button form details".split(" "), function(a) {
        Uc[a] = !0
    });
    var cd = {
        ngMinlength: "minlength",
        ngMaxlength: "maxlength",
        ngMin: "min",
        ngMax: "max",
        ngPattern: "pattern"
    };
    n({
        data: Zb,
        removeData: hb,
        hasData: function(a) {
            for (var b in ib[a.ng339]) return !0;
            return !1
        },
        cleanData: function(a) {
            for (var b = 0, d = a.length; b < d; b++) hb(a[b])
        }
    }, function(a, b) {
        U[b] = a
    });
    n({
        data: Zb,
        inheritedData: Cb,
        scope: function(a) {
            return C.data(a, "$scope") || Cb(a.parentNode || a, ["$isolateScope", "$scope"])
        },
        isolateScope: function(a) {
            return C.data(a, "$isolateScope") || C.data(a, "$isolateScopeNoTemplate")
        },
        controller: Rc,
        injector: function(a) {
            return Cb(a, "$injector")
        },
        removeAttr: function(a, b) {
            a.removeAttribute(b)
        },
        hasClass: zb,
        css: function(a, b, d) {
            b = gb(b);
            if (y(d)) a.style[b] = d;
            else return a.style[b]
        },
        attr: function(a, b, d) {
            var c = a.nodeType;
            if (c !== Pa && 2 !== c && 8 !== c)
                if (c = G(b), Db[c])
                    if (y(d)) d ? (a[b] = !0, a.setAttribute(b, c)) : (a[b] = !1, a.removeAttribute(c));
                    else return a[b] || (a.attributes.getNamedItem(b) || B).specified ? c : v;
            else if (y(d)) a.setAttribute(b, d);
            else if (a.getAttribute) return a = a.getAttribute(b, 2), null === a ? v : a
        },
        prop: function(a, b, d) {
            if (y(d)) a[b] = d;
            else return a[b]
        },
        text: function() {
            function a(a, d) {
                if (x(d)) {
                    var c = a.nodeType;
                    return 1 === c || c === Pa ? a.textContent : ""
                }
                a.textContent = d
            }
            a.$dv = "";
            return a
        }(),
        val: function(a, b) {
            if (x(b)) {
                if (a.multiple && "select" === ra(a)) {
                    var d = [];
                    n(a.options, function(a) {
                        a.selected && d.push(a.value || a.text)
                    });
                    return 0 === d.length ? null : d
                }
                return a.value
            }
            a.value = b
        },
        html: function(a, b) {
            if (x(b)) return a.innerHTML;
            wb(a, !0);
            a.innerHTML = b
        },
        empty: Sc
    }, function(a, b) {
        U.prototype[b] = function(b, c) {
            var e, f, g = this.length;
            if (a !== Sc && x(2 == a.length && a !== zb && a !== Rc ? b : c)) {
                if (E(b)) {
                    for (e = 0; e < g; e++)
                        if (a === Zb) a(this[e], b);
                        else
                            for (f in b) a(this[e],
                                f, b[f]);
                    return this
                }
                e = a.$dv;
                g = x(e) ? Math.min(g, 1) : g;
                for (f = 0; f < g; f++) {
                    var h = a(this[f], b, c);
                    e = e ? e + h : h
                }
                return e
            }
            for (e = 0; e < g; e++) a(this[e], b, c);
            return this
        }
    });
    n({
        removeData: hb,
        on: function(a, b, d, c) {
            if (y(c)) throw Xb("onargs");
            if (Mc(a)) {
                c = xb(a, !0);
                var e = c.events,
                    f = c.handle;
                f || (f = c.handle = Qf(a, e));
                c = 0 <= b.indexOf(" ") ? b.split(" ") : [b];
                for (var g = c.length, h = function(b, c, g) {
                        var h = e[b];
                        h || (h = e[b] = [], h.specialHandlerWrapper = c, "$destroy" === b || g || a.addEventListener(b, f, !1));
                        h.push(d)
                    }; g--;) b = c[g], yb[b] ? (h(yb[b], Sf),
                    h(b, v, !0)) : h(b)
            }
        },
        off: Qc,
        one: function(a, b, d) {
            a = C(a);
            a.on(b, function e() {
                a.off(b, d);
                a.off(b, e)
            });
            a.on(b, d)
        },
        replaceWith: function(a, b) {
            var d, c = a.parentNode;
            wb(a);
            n(new U(b), function(b) {
                d ? c.insertBefore(b, d.nextSibling) : c.replaceChild(b, a);
                d = b
            })
        },
        children: function(a) {
            var b = [];
            n(a.childNodes, function(a) {
                1 === a.nodeType && b.push(a)
            });
            return b
        },
        contents: function(a) {
            return a.contentDocument || a.childNodes || []
        },
        append: function(a, b) {
            var d = a.nodeType;
            if (1 === d || 11 === d) {
                b = new U(b);
                for (var d = 0, c = b.length; d < c; d++) a.appendChild(b[d])
            }
        },
        prepend: function(a, b) {
            if (1 === a.nodeType) {
                var d = a.firstChild;
                n(new U(b), function(b) {
                    a.insertBefore(b, d)
                })
            }
        },
        wrap: function(a, b) {
            Oc(a, C(b).eq(0).clone()[0])
        },
        remove: $b,
        detach: function(a) {
            $b(a, !0)
        },
        after: function(a, b) {
            var d = a,
                c = a.parentNode;
            b = new U(b);
            for (var e = 0, f = b.length; e < f; e++) {
                var g = b[e];
                c.insertBefore(g, d.nextSibling);
                d = g
            }
        },
        addClass: Bb,
        removeClass: Ab,
        toggleClass: function(a, b, d) {
            b && n(b.split(" "), function(b) {
                var e = d;
                x(e) && (e = !zb(a, b));
                (e ? Bb : Ab)(a, b)
            })
        },
        parent: function(a) {
            return (a = a.parentNode) &&
                11 !== a.nodeType ? a : null
        },
        next: function(a) {
            return a.nextElementSibling
        },
        find: function(a, b) {
            return a.getElementsByTagName ? a.getElementsByTagName(b) : []
        },
        clone: Yb,
        triggerHandler: function(a, b, d) {
            var c, e, f = b.type || b,
                g = xb(a);
            if (g = (g = g && g.events) && g[f]) c = {
                preventDefault: function() {
                    this.defaultPrevented = !0
                },
                isDefaultPrevented: function() {
                    return !0 === this.defaultPrevented
                },
                stopImmediatePropagation: function() {
                    this.immediatePropagationStopped = !0
                },
                isImmediatePropagationStopped: function() {
                    return !0 === this.immediatePropagationStopped
                },
                stopPropagation: B,
                type: f,
                target: a
            }, b.type && (c = T(c, b)), b = na(g), e = d ? [c].concat(d) : [c], n(b, function(b) {
                c.isImmediatePropagationStopped() || b.apply(a, e)
            })
        }
    }, function(a, b) {
        U.prototype[b] = function(b, c, e) {
            for (var f, g = 0, h = this.length; g < h; g++) x(f) ? (f = a(this[g], b, c, e), y(f) && (f = C(f))) : Pc(f, a(this[g], b, c, e));
            return y(f) ? f : this
        };
        U.prototype.bind = U.prototype.on;
        U.prototype.unbind = U.prototype.off
    });
    Ua.prototype = {
        put: function(a, b) {
            this[Fa(a, this.nextUid)] = b
        },
        get: function(a) {
            return this[Fa(a, this.nextUid)]
        },
        remove: function(a) {
            var b =
                this[a = Fa(a, this.nextUid)];
            delete this[a];
            return b
        }
    };
    var Hf = [function() {
            this.$get = [function() {
                return Ua
            }]
        }],
        Vf = /^([^\(]+?)=>/,
        Wf = /^[^\(]*\(\s*([^\)]*)\)/m,
        Cg = /,/,
        Dg = /^\s*(_?)(\S+?)\1\s*$/,
        Uf = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,
        Ga = H("$injector");
    fb.$$annotate = function(a, b, d) {
        var c;
        if ("function" === typeof a) {
            if (!(c = a.$inject)) {
                c = [];
                if (a.length) {
                    if (b) throw F(d) && d || (d = a.name || Xf(a)), Ga("strictdi", d);
                    b = Vc(a);
                    n(b[1].split(Cg), function(a) {
                        a.replace(Dg, function(a, b, d) {
                            c.push(d)
                        })
                    })
                }
                a.$inject = c
            }
        } else L(a) ?
            (b = a.length - 1, Sa(a[b], "fn"), c = a.slice(0, b)) : Sa(a, "fn", !0);
        return c
    };
    var Rd = H("$animate"),
        $e = function() {
            this.$get = function() {}
        },
        af = function() {
            var a = new Ua,
                b = [];
            this.$get = ["$$AnimateRunner", "$rootScope", function(d, c) {
                function e(a, b, c) {
                    var d = !1;
                    b && (b = F(b) ? b.split(" ") : L(b) ? b : [], n(b, function(b) {
                        b && (d = !0, a[b] = c)
                    }));
                    return d
                }

                function f() {
                    n(b, function(b) {
                        var c = a.get(b);
                        if (c) {
                            var d = Yf(b.attr("class")),
                                e = "",
                                f = "";
                            n(c, function(a, b) {
                                a !== !!d[b] && (a ? e += (e.length ? " " : "") + b : f += (f.length ? " " : "") + b)
                            });
                            n(b, function(a) {
                                e &&
                                    Bb(a, e);
                                f && Ab(a, f)
                            });
                            a.remove(b)
                        }
                    });
                    b.length = 0
                }
                return {
                    enabled: B,
                    on: B,
                    off: B,
                    pin: B,
                    push: function(g, h, k, l) {
                        l && l();
                        k = k || {};
                        k.from && g.css(k.from);
                        k.to && g.css(k.to);
                        if (k.addClass || k.removeClass)
                            if (h = k.addClass, l = k.removeClass, k = a.get(g) || {}, h = e(k, h, !0), l = e(k, l, !1), h || l) a.put(g, k), b.push(g), 1 === b.length && c.$$postDigest(f);
                        g = new d;
                        g.complete();
                        return g
                    }
                }
            }]
        },
        Ye = ["$provide", function(a) {
            var b = this;
            this.$$registeredAnimations = Object.create(null);
            this.register = function(d, c) {
                if (d && "." !== d.charAt(0)) throw Rd("notcsel",
                    d);
                var e = d + "-animation";
                b.$$registeredAnimations[d.substr(1)] = e;
                a.factory(e, c)
            };
            this.classNameFilter = function(a) {
                if (1 === arguments.length && (this.$$classNameFilter = a instanceof RegExp ? a : null) && /(\s+|\/)ng-animate(\s+|\/)/.test(this.$$classNameFilter.toString())) throw Rd("nongcls", "ng-animate");
                return this.$$classNameFilter
            };
            this.$get = ["$$animateQueue", function(a) {
                function b(a, c, d) {
                    if (d) {
                        var h;
                        a: {
                                for (h = 0; h < d.length; h++) {
                                    var k = d[h];
                                    if (1 === k.nodeType) {
                                        h = k;
                                        break a
                                    }
                                }
                                h = void 0
                            }!h || h.parentNode || h.previousElementSibling ||
                            (d = null)
                    }
                    d ? d.after(a) : c.prepend(a)
                }
                return {
                    on: a.on,
                    off: a.off,
                    pin: a.pin,
                    enabled: a.enabled,
                    cancel: function(a) {
                        a.end && a.end()
                    },
                    enter: function(e, f, g, h) {
                        f = f && C(f);
                        g = g && C(g);
                        f = f || g.parent();
                        b(e, f, g);
                        return a.push(e, "enter", Ha(h))
                    },
                    move: function(e, f, g, h) {
                        f = f && C(f);
                        g = g && C(g);
                        f = f || g.parent();
                        b(e, f, g);
                        return a.push(e, "move", Ha(h))
                    },
                    leave: function(b, c) {
                        return a.push(b, "leave", Ha(c), function() {
                            b.remove()
                        })
                    },
                    addClass: function(b, c, g) {
                        g = Ha(g);
                        g.addClass = jb(g.addclass, c);
                        return a.push(b, "addClass", g)
                    },
                    removeClass: function(b,
                        c, g) {
                        g = Ha(g);
                        g.removeClass = jb(g.removeClass, c);
                        return a.push(b, "removeClass", g)
                    },
                    setClass: function(b, c, g, h) {
                        h = Ha(h);
                        h.addClass = jb(h.addClass, c);
                        h.removeClass = jb(h.removeClass, g);
                        return a.push(b, "setClass", h)
                    },
                    animate: function(b, c, g, h, k) {
                        k = Ha(k);
                        k.from = k.from ? T(k.from, c) : c;
                        k.to = k.to ? T(k.to, g) : g;
                        k.tempClasses = jb(k.tempClasses, h || "ng-inline-animate");
                        return a.push(b, "animate", k)
                    }
                }
            }]
        }],
        cf = function() {
            this.$get = ["$$rAF", function(a) {
                function b(b) {
                    d.push(b);
                    1 < d.length || a(function() {
                        for (var a = 0; a < d.length; a++) d[a]();
                        d = []
                    })
                }
                var d = [];
                return function() {
                    var a = !1;
                    b(function() {
                        a = !0
                    });
                    return function(d) {
                        a ? d() : b(d)
                    }
                }
            }]
        },
        bf = function() {
            this.$get = ["$q", "$sniffer", "$$animateAsyncRun", "$document", "$timeout", function(a, b, d, c, e) {
                function f(a) {
                    this.setHost(a);
                    var b = d();
                    this._doneCallbacks = [];
                    this._tick = function(a) {
                        var d = c[0];
                        d && d.hidden ? e(a, 0, !1) : b(a)
                    };
                    this._state = 0
                }
                f.chain = function(a, b) {
                    function c() {
                        if (d === a.length) b(!0);
                        else a[d](function(a) {
                            !1 === a ? b(!1) : (d++, c())
                        })
                    }
                    var d = 0;
                    c()
                };
                f.all = function(a, b) {
                    function c(f) {
                        e = e && f;
                        ++d ===
                            a.length && b(e)
                    }
                    var d = 0,
                        e = !0;
                    n(a, function(a) {
                        a.done(c)
                    })
                };
                f.prototype = {
                    setHost: function(a) {
                        this.host = a || {}
                    },
                    done: function(a) {
                        2 === this._state ? a() : this._doneCallbacks.push(a)
                    },
                    progress: B,
                    getPromise: function() {
                        if (!this.promise) {
                            var b = this;
                            this.promise = a(function(a, c) {
                                b.done(function(b) {
                                    !1 === b ? c() : a()
                                })
                            })
                        }
                        return this.promise
                    },
                    then: function(a, b) {
                        return this.getPromise().then(a, b)
                    },
                    "catch": function(a) {
                        return this.getPromise()["catch"](a)
                    },
                    "finally": function(a) {
                        return this.getPromise()["finally"](a)
                    },
                    pause: function() {
                        this.host.pause &&
                            this.host.pause()
                    },
                    resume: function() {
                        this.host.resume && this.host.resume()
                    },
                    end: function() {
                        this.host.end && this.host.end();
                        this._resolve(!0)
                    },
                    cancel: function() {
                        this.host.cancel && this.host.cancel();
                        this._resolve(!1)
                    },
                    complete: function(a) {
                        var b = this;
                        0 === b._state && (b._state = 1, b._tick(function() {
                            b._resolve(a)
                        }))
                    },
                    _resolve: function(a) {
                        2 !== this._state && (n(this._doneCallbacks, function(b) {
                            b(a)
                        }), this._doneCallbacks.length = 0, this._state = 2)
                    }
                };
                return f
            }]
        },
        Ze = function() {
            this.$get = ["$$rAF", "$q", "$$AnimateRunner",
                function(a, b, d) {
                    return function(b, e) {
                        function f() {
                            a(function() {
                                g.addClass && (b.addClass(g.addClass), g.addClass = null);
                                g.removeClass && (b.removeClass(g.removeClass), g.removeClass = null);
                                g.to && (b.css(g.to), g.to = null);
                                h || k.complete();
                                h = !0
                            });
                            return k
                        }
                        var g = e || {};
                        g.$$prepared || (g = Oa(g));
                        g.cleanupStyles && (g.from = g.to = null);
                        g.from && (b.css(g.from), g.from = null);
                        var h, k = new d;
                        return {
                            start: f,
                            end: f
                        }
                    }
                }
            ]
        },
        ja = H("$compile");
    Ec.$inject = ["$provide", "$$sanitizeUriProvider"];
    var Xc = /^((?:x|data)[\:\-_])/i,
        bg = H("$controller"),
        dd = /^(\S+)(\s+as\s+([\w$]+))?$/,
        jf = function() {
            this.$get = ["$document", function(a) {
                return function(b) {
                    b ? !b.nodeType && b instanceof C && (b = b[0]) : b = a[0].body;
                    return b.offsetWidth + 1
                }
            }]
        },
        ed = "application/json",
        dc = {
            "Content-Type": ed + ";charset=utf-8"
        },
        dg = /^\[|^\{(?!\{)/,
        eg = {
            "[": /]$/,
            "{": /}$/
        },
        cg = /^\)\]\}',?\n/,
        Eg = H("$http"),
        id = function(a) {
            return function() {
                throw Eg("legacy", a);
            }
        },
        Ka = ia.$interpolateMinErr = H("$interpolate");
    Ka.throwNoconcat = function(a) {
        throw Ka("noconcat", a);
    };
    Ka.interr = function(a, b) {
        return Ka("interr",
            a, b.toString())
    };
    var Fg = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
        gg = {
            http: 80,
            https: 443,
            ftp: 21
        },
        Gb = H("$location"),
        Gg = {
            $$html5: !1,
            $$replace: !1,
            absUrl: Hb("$$absUrl"),
            url: function(a) {
                if (x(a)) return this.$$url;
                var b = Fg.exec(a);
                (b[1] || "" === a) && this.path(decodeURIComponent(b[1]));
                (b[2] || b[1] || "" === a) && this.search(b[3] || "");
                this.hash(b[5] || "");
                return this
            },
            protocol: Hb("$$protocol"),
            host: Hb("$$host"),
            port: Hb("$$port"),
            path: nd("$$path", function(a) {
                a = null !== a ? a.toString() : "";
                return "/" == a.charAt(0) ? a : "/" + a
            }),
            search: function(a,
                b) {
                switch (arguments.length) {
                    case 0:
                        return this.$$search;
                    case 1:
                        if (F(a) || N(a)) a = a.toString(), this.$$search = zc(a);
                        else if (E(a)) a = Oa(a, {}), n(a, function(b, c) {
                            null == b && delete a[c]
                        }), this.$$search = a;
                        else throw Gb("isrcharg");
                        break;
                    default:
                        x(b) || null === b ? delete this.$$search[a] : this.$$search[a] = b
                }
                this.$$compose();
                return this
            },
            hash: nd("$$hash", function(a) {
                return null !== a ? a.toString() : ""
            }),
            replace: function() {
                this.$$replace = !0;
                return this
            }
        };
    n([md, gc, fc], function(a) {
        a.prototype = Object.create(Gg);
        a.prototype.state =
            function(b) {
                if (!arguments.length) return this.$$state;
                if (a !== fc || !this.$$html5) throw Gb("nostate");
                this.$$state = x(b) ? null : b;
                return this
            }
    });
    var ka = H("$parse"),
        ig = Function.prototype.call,
        jg = Function.prototype.apply,
        kg = Function.prototype.bind,
        Pb = Z();
    n("+ - * / % === !== == != < > <= >= && || ! = |".split(" "), function(a) {
        Pb[a] = !0
    });
    var Hg = {
            n: "\n",
            f: "\f",
            r: "\r",
            t: "\t",
            v: "\v",
            "'": "'",
            '"': '"'
        },
        ic = function(a) {
            this.options = a
        };
    ic.prototype = {
        constructor: ic,
        lex: function(a) {
            this.text = a;
            this.index = 0;
            for (this.tokens = []; this.index < this.text.length;)
                if (a = this.text.charAt(this.index), '"' === a || "'" === a) this.readString(a);
                else if (this.isNumber(a) || "." === a && this.isNumber(this.peek())) this.readNumber();
            else if (this.isIdent(a)) this.readIdent();
            else if (this.is(a, "(){}[].,;:?")) this.tokens.push({
                index: this.index,
                text: a
            }), this.index++;
            else if (this.isWhitespace(a)) this.index++;
            else {
                var b = a + this.peek(),
                    d = b + this.peek(2),
                    c = Pb[b],
                    e = Pb[d];
                Pb[a] || c || e ? (a = e ? d : c ? b : a, this.tokens.push({
                        index: this.index,
                        text: a,
                        operator: !0
                    }), this.index +=
                    a.length) : this.throwError("Unexpected next character ", this.index, this.index + 1)
            }
            return this.tokens
        },
        is: function(a, b) {
            return -1 !== b.indexOf(a)
        },
        peek: function(a) {
            a = a || 1;
            return this.index + a < this.text.length ? this.text.charAt(this.index + a) : !1
        },
        isNumber: function(a) {
            return "0" <= a && "9" >= a && "string" === typeof a
        },
        isWhitespace: function(a) {
            return " " === a || "\r" === a || "\t" === a || "\n" === a || "\v" === a || "\u00a0" === a
        },
        isIdent: function(a) {
            return "a" <= a && "z" >= a || "A" <= a && "Z" >= a || "_" === a || "$" === a
        },
        isExpOperator: function(a) {
            return "-" ===
                a || "+" === a || this.isNumber(a)
        },
        throwError: function(a, b, d) {
            d = d || this.index;
            b = y(b) ? "s " + b + "-" + this.index + " [" + this.text.substring(b, d) + "]" : " " + d;
            throw ka("lexerr", a, b, this.text);
        },
        readNumber: function() {
            for (var a = "", b = this.index; this.index < this.text.length;) {
                var d = G(this.text.charAt(this.index));
                if ("." == d || this.isNumber(d)) a += d;
                else {
                    var c = this.peek();
                    if ("e" == d && this.isExpOperator(c)) a += d;
                    else if (this.isExpOperator(d) && c && this.isNumber(c) && "e" == a.charAt(a.length - 1)) a += d;
                    else if (!this.isExpOperator(d) ||
                        c && this.isNumber(c) || "e" != a.charAt(a.length - 1)) break;
                    else this.throwError("Invalid exponent")
                }
                this.index++
            }
            this.tokens.push({
                index: b,
                text: a,
                constant: !0,
                value: Number(a)
            })
        },
        readIdent: function() {
            for (var a = this.index; this.index < this.text.length;) {
                var b = this.text.charAt(this.index);
                if (!this.isIdent(b) && !this.isNumber(b)) break;
                this.index++
            }
            this.tokens.push({
                index: a,
                text: this.text.slice(a, this.index),
                identifier: !0
            })
        },
        readString: function(a) {
            var b = this.index;
            this.index++;
            for (var d = "", c = a, e = !1; this.index < this.text.length;) {
                var f =
                    this.text.charAt(this.index),
                    c = c + f;
                if (e) "u" === f ? (e = this.text.substring(this.index + 1, this.index + 5), e.match(/[\da-f]{4}/i) || this.throwError("Invalid unicode escape [\\u" + e + "]"), this.index += 4, d += String.fromCharCode(parseInt(e, 16))) : d += Hg[f] || f, e = !1;
                else if ("\\" === f) e = !0;
                else {
                    if (f === a) {
                        this.index++;
                        this.tokens.push({
                            index: b,
                            text: c,
                            constant: !0,
                            value: d
                        });
                        return
                    }
                    d += f
                }
                this.index++
            }
            this.throwError("Unterminated quote", b)
        }
    };
    var q = function(a, b) {
        this.lexer = a;
        this.options = b
    };
    q.Program = "Program";
    q.ExpressionStatement =
        "ExpressionStatement";
    q.AssignmentExpression = "AssignmentExpression";
    q.ConditionalExpression = "ConditionalExpression";
    q.LogicalExpression = "LogicalExpression";
    q.BinaryExpression = "BinaryExpression";
    q.UnaryExpression = "UnaryExpression";
    q.CallExpression = "CallExpression";
    q.MemberExpression = "MemberExpression";
    q.Identifier = "Identifier";
    q.Literal = "Literal";
    q.ArrayExpression = "ArrayExpression";
    q.Property = "Property";
    q.ObjectExpression = "ObjectExpression";
    q.ThisExpression = "ThisExpression";
    q.LocalsExpression = "LocalsExpression";
    q.NGValueParameter = "NGValueParameter";
    q.prototype = {
        ast: function(a) {
            this.text = a;
            this.tokens = this.lexer.lex(a);
            a = this.program();
            0 !== this.tokens.length && this.throwError("is an unexpected token", this.tokens[0]);
            return a
        },
        program: function() {
            for (var a = [];;)
                if (0 < this.tokens.length && !this.peek("}", ")", ";", "]") && a.push(this.expressionStatement()), !this.expect(";")) return {
                    type: q.Program,
                    body: a
                }
        },
        expressionStatement: function() {
            return {
                type: q.ExpressionStatement,
                expression: this.filterChain()
            }
        },
        filterChain: function() {
            for (var a =
                    this.expression(); this.expect("|");) a = this.filter(a);
            return a
        },
        expression: function() {
            return this.assignment()
        },
        assignment: function() {
            var a = this.ternary();
            this.expect("=") && (a = {
                type: q.AssignmentExpression,
                left: a,
                right: this.assignment(),
                operator: "="
            });
            return a
        },
        ternary: function() {
            var a = this.logicalOR(),
                b, d;
            return this.expect("?") && (b = this.expression(), this.consume(":")) ? (d = this.expression(), {
                type: q.ConditionalExpression,
                test: a,
                alternate: b,
                consequent: d
            }) : a
        },
        logicalOR: function() {
            for (var a = this.logicalAND(); this.expect("||");) a = {
                type: q.LogicalExpression,
                operator: "||",
                left: a,
                right: this.logicalAND()
            };
            return a
        },
        logicalAND: function() {
            for (var a = this.equality(); this.expect("&&");) a = {
                type: q.LogicalExpression,
                operator: "&&",
                left: a,
                right: this.equality()
            };
            return a
        },
        equality: function() {
            for (var a = this.relational(), b; b = this.expect("==", "!=", "===", "!==");) a = {
                type: q.BinaryExpression,
                operator: b.text,
                left: a,
                right: this.relational()
            };
            return a
        },
        relational: function() {
            for (var a = this.additive(), b; b = this.expect("<", ">", "<=", ">=");) a = {
                type: q.BinaryExpression,
                operator: b.text,
                left: a,
                right: this.additive()
            };
            return a
        },
        additive: function() {
            for (var a = this.multiplicative(), b; b = this.expect("+", "-");) a = {
                type: q.BinaryExpression,
                operator: b.text,
                left: a,
                right: this.multiplicative()
            };
            return a
        },
        multiplicative: function() {
            for (var a = this.unary(), b; b = this.expect("*", "/", "%");) a = {
                type: q.BinaryExpression,
                operator: b.text,
                left: a,
                right: this.unary()
            };
            return a
        },
        unary: function() {
            var a;
            return (a = this.expect("+", "-", "!")) ? {
                    type: q.UnaryExpression,
                    operator: a.text,
                    prefix: !0,
                    argument: this.unary()
                } :
                this.primary()
        },
        primary: function() {
            var a;
            this.expect("(") ? (a = this.filterChain(), this.consume(")")) : this.expect("[") ? a = this.arrayDeclaration() : this.expect("{") ? a = this.object() : this.constants.hasOwnProperty(this.peek().text) ? a = Oa(this.constants[this.consume().text]) : this.peek().identifier ? a = this.identifier() : this.peek().constant ? a = this.constant() : this.throwError("not a primary expression", this.peek());
            for (var b; b = this.expect("(", "[", ".");) "(" === b.text ? (a = {
                    type: q.CallExpression,
                    callee: a,
                    arguments: this.parseArguments()
                },
                this.consume(")")) : "[" === b.text ? (a = {
                type: q.MemberExpression,
                object: a,
                property: this.expression(),
                computed: !0
            }, this.consume("]")) : "." === b.text ? a = {
                type: q.MemberExpression,
                object: a,
                property: this.identifier(),
                computed: !1
            } : this.throwError("IMPOSSIBLE");
            return a
        },
        filter: function(a) {
            a = [a];
            for (var b = {
                    type: q.CallExpression,
                    callee: this.identifier(),
                    arguments: a,
                    filter: !0
                }; this.expect(":");) a.push(this.expression());
            return b
        },
        parseArguments: function() {
            var a = [];
            if (")" !== this.peekToken().text) {
                do a.push(this.expression());
                while (this.expect(","))
            }
            return a
        },
        identifier: function() {
            var a = this.consume();
            a.identifier || this.throwError("is not a valid identifier", a);
            return {
                type: q.Identifier,
                name: a.text
            }
        },
        constant: function() {
            return {
                type: q.Literal,
                value: this.consume().value
            }
        },
        arrayDeclaration: function() {
            var a = [];
            if ("]" !== this.peekToken().text) {
                do {
                    if (this.peek("]")) break;
                    a.push(this.expression())
                } while (this.expect(","))
            }
            this.consume("]");
            return {
                type: q.ArrayExpression,
                elements: a
            }
        },
        object: function() {
            var a = [],
                b;
            if ("}" !== this.peekToken().text) {
                do {
                    if (this.peek("}")) break;
                    b = {
                        type: q.Property,
                        kind: "init"
                    };
                    this.peek().constant ? b.key = this.constant() : this.peek().identifier ? b.key = this.identifier() : this.throwError("invalid key", this.peek());
                    this.consume(":");
                    b.value = this.expression();
                    a.push(b)
                } while (this.expect(","))
            }
            this.consume("}");
            return {
                type: q.ObjectExpression,
                properties: a
            }
        },
        throwError: function(a, b) {
            throw ka("syntax", b.text, a, b.index + 1, this.text, this.text.substring(b.index));
        },
        consume: function(a) {
            if (0 === this.tokens.length) throw ka("ueoe", this.text);
            var b = this.expect(a);
            b || this.throwError("is unexpected, expecting [" + a + "]", this.peek());
            return b
        },
        peekToken: function() {
            if (0 === this.tokens.length) throw ka("ueoe", this.text);
            return this.tokens[0]
        },
        peek: function(a, b, d, c) {
            return this.peekAhead(0, a, b, d, c)
        },
        peekAhead: function(a, b, d, c, e) {
            if (this.tokens.length > a) {
                a = this.tokens[a];
                var f = a.text;
                if (f === b || f === d || f === c || f === e || !(b || d || c || e)) return a
            }
            return !1
        },
        expect: function(a, b, d, c) {
            return (a = this.peek(a, b, d, c)) ? (this.tokens.shift(), a) : !1
        },
        constants: {
            "true": {
                type: q.Literal,
                value: !0
            },
            "false": {
                type: q.Literal,
                value: !1
            },
            "null": {
                type: q.Literal,
                value: null
            },
            undefined: {
                type: q.Literal,
                value: v
            },
            "this": {
                type: q.ThisExpression
            },
            $locals: {
                type: q.LocalsExpression
            }
        }
    };
    ud.prototype = {
        compile: function(a, b) {
            var d = this,
                c = this.astBuilder.ast(a);
            this.state = {
                nextId: 0,
                filters: {},
                expensiveChecks: b,
                fn: {
                    vars: [],
                    body: [],
                    own: {}
                },
                assign: {
                    vars: [],
                    body: [],
                    own: {}
                },
                inputs: []
            };
            R(c, d.$filter);
            var e = "",
                f;
            this.stage = "assign";
            if (f = sd(c)) this.state.computing = "assign", e = this.nextId(), this.recurse(f, e), this.return_(e),
                e = "fn.assign=" + this.generateFunction("assign", "s,v,l");
            f = qd(c.body);
            d.stage = "inputs";
            n(f, function(a, b) {
                var c = "fn" + b;
                d.state[c] = {
                    vars: [],
                    body: [],
                    own: {}
                };
                d.state.computing = c;
                var e = d.nextId();
                d.recurse(a, e);
                d.return_(e);
                d.state.inputs.push(c);
                a.watchId = b
            });
            this.state.computing = "fn";
            this.stage = "main";
            this.recurse(c);
            e = '"' + this.USE + " " + this.STRICT + '";\n' + this.filterPrefix() + "var fn=" + this.generateFunction("fn", "s,l,a,i") + e + this.watchFns() + "return fn;";
            e = (new Function("$filter", "ensureSafeMemberName", "ensureSafeObject",
                "ensureSafeFunction", "getStringValue", "ensureSafeAssignContext", "ifDefined", "plus", "text", e))(this.$filter, Xa, Aa, od, hg, Ib, lg, pd, a);
            this.state = this.stage = v;
            e.literal = td(c);
            e.constant = c.constant;
            return e
        },
        USE: "use",
        STRICT: "strict",
        watchFns: function() {
            var a = [],
                b = this.state.inputs,
                d = this;
            n(b, function(b) {
                a.push("var " + b + "=" + d.generateFunction(b, "s"))
            });
            b.length && a.push("fn.inputs=[" + b.join(",") + "];");
            return a.join("")
        },
        generateFunction: function(a, b) {
            return "function(" + b + "){" + this.varsPrefix(a) + this.body(a) +
                "};"
        },
        filterPrefix: function() {
            var a = [],
                b = this;
            n(this.state.filters, function(d, c) {
                a.push(d + "=$filter(" + b.escape(c) + ")")
            });
            return a.length ? "var " + a.join(",") + ";" : ""
        },
        varsPrefix: function(a) {
            return this.state[a].vars.length ? "var " + this.state[a].vars.join(",") + ";" : ""
        },
        body: function(a) {
            return this.state[a].body.join("")
        },
        recurse: function(a, b, d, c, e, f) {
            var g, h, k = this,
                l, m;
            c = c || B;
            if (!f && y(a.watchId)) b = b || this.nextId(), this.if_("i", this.lazyAssign(b, this.computedMember("i", a.watchId)), this.lazyRecurse(a, b, d,
                c, e, !0));
            else switch (a.type) {
                case q.Program:
                    n(a.body, function(b, c) {
                        k.recurse(b.expression, v, v, function(a) {
                            h = a
                        });
                        c !== a.body.length - 1 ? k.current().body.push(h, ";") : k.return_(h)
                    });
                    break;
                case q.Literal:
                    m = this.escape(a.value);
                    this.assign(b, m);
                    c(m);
                    break;
                case q.UnaryExpression:
                    this.recurse(a.argument, v, v, function(a) {
                        h = a
                    });
                    m = a.operator + "(" + this.ifDefined(h, 0) + ")";
                    this.assign(b, m);
                    c(m);
                    break;
                case q.BinaryExpression:
                    this.recurse(a.left, v, v, function(a) {
                        g = a
                    });
                    this.recurse(a.right, v, v, function(a) {
                        h = a
                    });
                    m = "+" ===
                        a.operator ? this.plus(g, h) : "-" === a.operator ? this.ifDefined(g, 0) + a.operator + this.ifDefined(h, 0) : "(" + g + ")" + a.operator + "(" + h + ")";
                    this.assign(b, m);
                    c(m);
                    break;
                case q.LogicalExpression:
                    b = b || this.nextId();
                    k.recurse(a.left, b);
                    k.if_("&&" === a.operator ? b : k.not(b), k.lazyRecurse(a.right, b));
                    c(b);
                    break;
                case q.ConditionalExpression:
                    b = b || this.nextId();
                    k.recurse(a.test, b);
                    k.if_(b, k.lazyRecurse(a.alternate, b), k.lazyRecurse(a.consequent, b));
                    c(b);
                    break;
                case q.Identifier:
                    b = b || this.nextId();
                    d && (d.context = "inputs" === k.stage ?
                        "s" : this.assign(this.nextId(), this.getHasOwnProperty("l", a.name) + "?l:s"), d.computed = !1, d.name = a.name);
                    Xa(a.name);
                    k.if_("inputs" === k.stage || k.not(k.getHasOwnProperty("l", a.name)), function() {
                        k.if_("inputs" === k.stage || "s", function() {
                            e && 1 !== e && k.if_(k.not(k.nonComputedMember("s", a.name)), k.lazyAssign(k.nonComputedMember("s", a.name), "{}"));
                            k.assign(b, k.nonComputedMember("s", a.name))
                        })
                    }, b && k.lazyAssign(b, k.nonComputedMember("l", a.name)));
                    (k.state.expensiveChecks || Jb(a.name)) && k.addEnsureSafeObject(b);
                    c(b);
                    break;
                case q.MemberExpression:
                    g = d && (d.context = this.nextId()) || this.nextId();
                    b = b || this.nextId();
                    k.recurse(a.object, g, v, function() {
                        k.if_(k.notNull(g), function() {
                            e && 1 !== e && k.addEnsureSafeAssignContext(g);
                            if (a.computed) h = k.nextId(), k.recurse(a.property, h), k.getStringValue(h), k.addEnsureSafeMemberName(h), e && 1 !== e && k.if_(k.not(k.computedMember(g, h)), k.lazyAssign(k.computedMember(g, h), "{}")), m = k.ensureSafeObject(k.computedMember(g, h)), k.assign(b, m), d && (d.computed = !0, d.name = h);
                            else {
                                Xa(a.property.name);
                                e &&
                                    1 !== e && k.if_(k.not(k.nonComputedMember(g, a.property.name)), k.lazyAssign(k.nonComputedMember(g, a.property.name), "{}"));
                                m = k.nonComputedMember(g, a.property.name);
                                if (k.state.expensiveChecks || Jb(a.property.name)) m = k.ensureSafeObject(m);
                                k.assign(b, m);
                                d && (d.computed = !1, d.name = a.property.name)
                            }
                        }, function() {
                            k.assign(b, "undefined")
                        });
                        c(b)
                    }, !!e);
                    break;
                case q.CallExpression:
                    b = b || this.nextId();
                    a.filter ? (h = k.filter(a.callee.name), l = [], n(a.arguments, function(a) {
                            var b = k.nextId();
                            k.recurse(a, b);
                            l.push(b)
                        }), m = h + "(" +
                        l.join(",") + ")", k.assign(b, m), c(b)) : (h = k.nextId(), g = {}, l = [], k.recurse(a.callee, h, g, function() {
                        k.if_(k.notNull(h), function() {
                            k.addEnsureSafeFunction(h);
                            n(a.arguments, function(a) {
                                k.recurse(a, k.nextId(), v, function(a) {
                                    l.push(k.ensureSafeObject(a))
                                })
                            });
                            g.name ? (k.state.expensiveChecks || k.addEnsureSafeObject(g.context), m = k.member(g.context, g.name, g.computed) + "(" + l.join(",") + ")") : m = h + "(" + l.join(",") + ")";
                            m = k.ensureSafeObject(m);
                            k.assign(b, m)
                        }, function() {
                            k.assign(b, "undefined")
                        });
                        c(b)
                    }));
                    break;
                case q.AssignmentExpression:
                    h =
                        this.nextId();
                    g = {};
                    if (!rd(a.left)) throw ka("lval");
                    this.recurse(a.left, v, g, function() {
                        k.if_(k.notNull(g.context), function() {
                            k.recurse(a.right, h);
                            k.addEnsureSafeObject(k.member(g.context, g.name, g.computed));
                            k.addEnsureSafeAssignContext(g.context);
                            m = k.member(g.context, g.name, g.computed) + a.operator + h;
                            k.assign(b, m);
                            c(b || m)
                        })
                    }, 1);
                    break;
                case q.ArrayExpression:
                    l = [];
                    n(a.elements, function(a) {
                        k.recurse(a, k.nextId(), v, function(a) {
                            l.push(a)
                        })
                    });
                    m = "[" + l.join(",") + "]";
                    this.assign(b, m);
                    c(m);
                    break;
                case q.ObjectExpression:
                    l = [];
                    n(a.properties, function(a) {
                        k.recurse(a.value, k.nextId(), v, function(b) {
                            l.push(k.escape(a.key.type === q.Identifier ? a.key.name : "" + a.key.value) + ":" + b)
                        })
                    });
                    m = "{" + l.join(",") + "}";
                    this.assign(b, m);
                    c(m);
                    break;
                case q.ThisExpression:
                    this.assign(b, "s");
                    c("s");
                    break;
                case q.LocalsExpression:
                    this.assign(b, "l");
                    c("l");
                    break;
                case q.NGValueParameter:
                    this.assign(b, "v"), c("v")
            }
        },
        getHasOwnProperty: function(a, b) {
            var d = a + "." + b,
                c = this.current().own;
            c.hasOwnProperty(d) || (c[d] = this.nextId(!1, a + "&&(" + this.escape(b) + " in " +
                a + ")"));
            return c[d]
        },
        assign: function(a, b) {
            if (a) return this.current().body.push(a, "=", b, ";"), a
        },
        filter: function(a) {
            this.state.filters.hasOwnProperty(a) || (this.state.filters[a] = this.nextId(!0));
            return this.state.filters[a]
        },
        ifDefined: function(a, b) {
            return "ifDefined(" + a + "," + this.escape(b) + ")"
        },
        plus: function(a, b) {
            return "plus(" + a + "," + b + ")"
        },
        return_: function(a) {
            this.current().body.push("return ", a, ";")
        },
        if_: function(a, b, d) {
            if (!0 === a) b();
            else {
                var c = this.current().body;
                c.push("if(", a, "){");
                b();
                c.push("}");
                d && (c.push("else{"), d(), c.push("}"))
            }
        },
        not: function(a) {
            return "!(" + a + ")"
        },
        notNull: function(a) {
            return a + "!=null"
        },
        nonComputedMember: function(a, b) {
            return a + "." + b
        },
        computedMember: function(a, b) {
            return a + "[" + b + "]"
        },
        member: function(a, b, d) {
            return d ? this.computedMember(a, b) : this.nonComputedMember(a, b)
        },
        addEnsureSafeObject: function(a) {
            this.current().body.push(this.ensureSafeObject(a), ";")
        },
        addEnsureSafeMemberName: function(a) {
            this.current().body.push(this.ensureSafeMemberName(a), ";")
        },
        addEnsureSafeFunction: function(a) {
            this.current().body.push(this.ensureSafeFunction(a),
                ";")
        },
        addEnsureSafeAssignContext: function(a) {
            this.current().body.push(this.ensureSafeAssignContext(a), ";")
        },
        ensureSafeObject: function(a) {
            return "ensureSafeObject(" + a + ",text)"
        },
        ensureSafeMemberName: function(a) {
            return "ensureSafeMemberName(" + a + ",text)"
        },
        ensureSafeFunction: function(a) {
            return "ensureSafeFunction(" + a + ",text)"
        },
        getStringValue: function(a) {
            this.assign(a, "getStringValue(" + a + ")")
        },
        ensureSafeAssignContext: function(a) {
            return "ensureSafeAssignContext(" + a + ",text)"
        },
        lazyRecurse: function(a, b, d, c, e, f) {
            var g =
                this;
            return function() {
                g.recurse(a, b, d, c, e, f)
            }
        },
        lazyAssign: function(a, b) {
            var d = this;
            return function() {
                d.assign(a, b)
            }
        },
        stringEscapeRegex: /[^ a-zA-Z0-9]/g,
        stringEscapeFn: function(a) {
            return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        },
        escape: function(a) {
            if (F(a)) return "'" + a.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";
            if (N(a)) return a.toString();
            if (!0 === a) return "true";
            if (!1 === a) return "false";
            if (null === a) return "null";
            if ("undefined" === typeof a) return "undefined";
            throw ka("esc");
        },
        nextId: function(a,
            b) {
            var d = "v" + this.state.nextId++;
            a || this.current().vars.push(d + (b ? "=" + b : ""));
            return d
        },
        current: function() {
            return this.state[this.state.computing]
        }
    };
    vd.prototype = {
        compile: function(a, b) {
            var d = this,
                c = this.astBuilder.ast(a);
            this.expression = a;
            this.expensiveChecks = b;
            R(c, d.$filter);
            var e, f;
            if (e = sd(c)) f = this.recurse(e);
            e = qd(c.body);
            var g;
            e && (g = [], n(e, function(a, b) {
                var c = d.recurse(a);
                a.input = c;
                g.push(c);
                a.watchId = b
            }));
            var h = [];
            n(c.body, function(a) {
                h.push(d.recurse(a.expression))
            });
            e = 0 === c.body.length ? function() {} :
                1 === c.body.length ? h[0] : function(a, b) {
                    var c;
                    n(h, function(d) {
                        c = d(a, b)
                    });
                    return c
                };
            f && (e.assign = function(a, b, c) {
                return f(a, c, b)
            });
            g && (e.inputs = g);
            e.literal = td(c);
            e.constant = c.constant;
            return e
        },
        recurse: function(a, b, d) {
            var c, e, f = this,
                g;
            if (a.input) return this.inputs(a.input, a.watchId);
            switch (a.type) {
                case q.Literal:
                    return this.value(a.value, b);
                case q.UnaryExpression:
                    return e = this.recurse(a.argument), this["unary" + a.operator](e, b);
                case q.BinaryExpression:
                    return c = this.recurse(a.left), e = this.recurse(a.right),
                        this["binary" + a.operator](c, e, b);
                case q.LogicalExpression:
                    return c = this.recurse(a.left), e = this.recurse(a.right), this["binary" + a.operator](c, e, b);
                case q.ConditionalExpression:
                    return this["ternary?:"](this.recurse(a.test), this.recurse(a.alternate), this.recurse(a.consequent), b);
                case q.Identifier:
                    return Xa(a.name, f.expression), f.identifier(a.name, f.expensiveChecks || Jb(a.name), b, d, f.expression);
                case q.MemberExpression:
                    return c = this.recurse(a.object, !1, !!d), a.computed || (Xa(a.property.name, f.expression),
                        e = a.property.name), a.computed && (e = this.recurse(a.property)), a.computed ? this.computedMember(c, e, b, d, f.expression) : this.nonComputedMember(c, e, f.expensiveChecks, b, d, f.expression);
                case q.CallExpression:
                    return g = [], n(a.arguments, function(a) {
                        g.push(f.recurse(a))
                    }), a.filter && (e = this.$filter(a.callee.name)), a.filter || (e = this.recurse(a.callee, !0)), a.filter ? function(a, c, d, f) {
                        for (var r = [], n = 0; n < g.length; ++n) r.push(g[n](a, c, d, f));
                        a = e.apply(v, r, f);
                        return b ? {
                            context: v,
                            name: v,
                            value: a
                        } : a
                    } : function(a, c, d, m) {
                        var r =
                            e(a, c, d, m),
                            n;
                        if (null != r.value) {
                            Aa(r.context, f.expression);
                            od(r.value, f.expression);
                            n = [];
                            for (var q = 0; q < g.length; ++q) n.push(Aa(g[q](a, c, d, m), f.expression));
                            n = Aa(r.value.apply(r.context, n), f.expression)
                        }
                        return b ? {
                            value: n
                        } : n
                    };
                case q.AssignmentExpression:
                    return c = this.recurse(a.left, !0, 1), e = this.recurse(a.right),
                        function(a, d, g, m) {
                            var r = c(a, d, g, m);
                            a = e(a, d, g, m);
                            Aa(r.value, f.expression);
                            Ib(r.context);
                            r.context[r.name] = a;
                            return b ? {
                                value: a
                            } : a
                        };
                case q.ArrayExpression:
                    return g = [], n(a.elements, function(a) {
                            g.push(f.recurse(a))
                        }),
                        function(a, c, d, e) {
                            for (var f = [], n = 0; n < g.length; ++n) f.push(g[n](a, c, d, e));
                            return b ? {
                                value: f
                            } : f
                        };
                case q.ObjectExpression:
                    return g = [], n(a.properties, function(a) {
                            g.push({
                                key: a.key.type === q.Identifier ? a.key.name : "" + a.key.value,
                                value: f.recurse(a.value)
                            })
                        }),
                        function(a, c, d, e) {
                            for (var f = {}, n = 0; n < g.length; ++n) f[g[n].key] = g[n].value(a, c, d, e);
                            return b ? {
                                value: f
                            } : f
                        };
                case q.ThisExpression:
                    return function(a) {
                        return b ? {
                            value: a
                        } : a
                    };
                case q.LocalsExpression:
                    return function(a, c) {
                        return b ? {
                            value: c
                        } : c
                    };
                case q.NGValueParameter:
                    return function(a,
                        c, d, e) {
                        return b ? {
                            value: d
                        } : d
                    }
            }
        },
        "unary+": function(a, b) {
            return function(d, c, e, f) {
                d = a(d, c, e, f);
                d = y(d) ? +d : 0;
                return b ? {
                    value: d
                } : d
            }
        },
        "unary-": function(a, b) {
            return function(d, c, e, f) {
                d = a(d, c, e, f);
                d = y(d) ? -d : 0;
                return b ? {
                    value: d
                } : d
            }
        },
        "unary!": function(a, b) {
            return function(d, c, e, f) {
                d = !a(d, c, e, f);
                return b ? {
                    value: d
                } : d
            }
        },
        "binary+": function(a, b, d) {
            return function(c, e, f, g) {
                var h = a(c, e, f, g);
                c = b(c, e, f, g);
                h = pd(h, c);
                return d ? {
                    value: h
                } : h
            }
        },
        "binary-": function(a, b, d) {
            return function(c, e, f, g) {
                var h = a(c, e, f, g);
                c = b(c, e, f, g);
                h = (y(h) ? h : 0) - (y(c) ? c : 0);
                return d ? {
                    value: h
                } : h
            }
        },
        "binary*": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) * b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary/": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) / b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary%": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) % b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary===": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) === b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary!==": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c,
                    e, f, g) !== b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary==": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) == b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary!=": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) != b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary<": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) < b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary>": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) > b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary<=": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f,
                    g) <= b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary>=": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) >= b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary&&": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) && b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "binary||": function(a, b, d) {
            return function(c, e, f, g) {
                c = a(c, e, f, g) || b(c, e, f, g);
                return d ? {
                    value: c
                } : c
            }
        },
        "ternary?:": function(a, b, d, c) {
            return function(e, f, g, h) {
                e = a(e, f, g, h) ? b(e, f, g, h) : d(e, f, g, h);
                return c ? {
                    value: e
                } : e
            }
        },
        value: function(a, b) {
            return function() {
                return b ? {
                    context: v,
                    name: v,
                    value: a
                } : a
            }
        },
        identifier: function(a, b, d, c, e) {
            return function(f, g, h, k) {
                f = g && a in g ? g : f;
                c && 1 !== c && f && !f[a] && (f[a] = {});
                g = f ? f[a] : v;
                b && Aa(g, e);
                return d ? {
                    context: f,
                    name: a,
                    value: g
                } : g
            }
        },
        computedMember: function(a, b, d, c, e) {
            return function(f, g, h, k) {
                var l = a(f, g, h, k),
                    m, n;
                null != l && (m = b(f, g, h, k), m += "", Xa(m, e), c && 1 !== c && (Ib(l), l && !l[m] && (l[m] = {})), n = l[m], Aa(n, e));
                return d ? {
                    context: l,
                    name: m,
                    value: n
                } : n
            }
        },
        nonComputedMember: function(a, b, d, c, e, f) {
            return function(g, h, k, l) {
                g = a(g, h, k, l);
                e && 1 !== e && (Ib(g), g && !g[b] &&
                    (g[b] = {}));
                h = null != g ? g[b] : v;
                (d || Jb(b)) && Aa(h, f);
                return c ? {
                    context: g,
                    name: b,
                    value: h
                } : h
            }
        },
        inputs: function(a, b) {
            return function(d, c, e, f) {
                return f ? f[b] : a(d, c, e)
            }
        }
    };
    var jc = function(a, b, d) {
        this.lexer = a;
        this.$filter = b;
        this.options = d;
        this.ast = new q(this.lexer);
        this.astCompiler = d.csp ? new vd(this.ast, b) : new ud(this.ast, b)
    };
    jc.prototype = {
        constructor: jc,
        parse: function(a) {
            return this.astCompiler.compile(a, this.options.expensiveChecks)
        }
    };
    var mg = Object.prototype.valueOf,
        Ba = H("$sce"),
        qa = {
            HTML: "html",
            CSS: "css",
            URL: "url",
            RESOURCE_URL: "resourceUrl",
            JS: "js"
        },
        ja = H("$compile"),
        Y = W.createElement("a"),
        zd = za(O.location.href);
    Ad.$inject = ["$document"];
    Lc.$inject = ["$provide"];
    var Hd = 22,
        Gd = ".",
        lc = "0";
    Bd.$inject = ["$locale"];
    Dd.$inject = ["$locale"];
    var yg = {
            yyyy: aa("FullYear", 4),
            yy: aa("FullYear", 2, 0, !0),
            y: aa("FullYear", 1),
            MMMM: Lb("Month"),
            MMM: Lb("Month", !0),
            MM: aa("Month", 2, 1),
            M: aa("Month", 1, 1),
            dd: aa("Date", 2),
            d: aa("Date", 1),
            HH: aa("Hours", 2),
            H: aa("Hours", 1),
            hh: aa("Hours", 2, -12),
            h: aa("Hours", 1, -12),
            mm: aa("Minutes", 2),
            m: aa("Minutes",
                1),
            ss: aa("Seconds", 2),
            s: aa("Seconds", 1),
            sss: aa("Milliseconds", 3),
            EEEE: Lb("Day"),
            EEE: Lb("Day", !0),
            a: function(a, b) {
                return 12 > a.getHours() ? b.AMPMS[0] : b.AMPMS[1]
            },
            Z: function(a, b, d) {
                a = -1 * d;
                return a = (0 <= a ? "+" : "") + (Kb(Math[0 < a ? "floor" : "ceil"](a / 60), 2) + Kb(Math.abs(a % 60), 2))
            },
            ww: Jd(2),
            w: Jd(1),
            G: mc,
            GG: mc,
            GGG: mc,
            GGGG: function(a, b) {
                return 0 >= a.getFullYear() ? b.ERANAMES[0] : b.ERANAMES[1]
            }
        },
        xg = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
        wg = /^\-?\d+$/;
    Cd.$inject = ["$locale"];
    var rg = ba(G),
        sg = ba(ub);
    Ed.$inject = ["$parse"];
    var oe = ba({
            restrict: "E",
            compile: function(a, b) {
                if (!b.href && !b.xlinkHref) return function(a, b) {
                    if ("a" === b[0].nodeName.toLowerCase()) {
                        var e = "[object SVGAnimatedString]" === ga.call(b.prop("href")) ? "xlink:href" : "href";
                        b.on("click", function(a) {
                            b.attr(e) || a.preventDefault()
                        })
                    }
                }
            }
        }),
        vb = {};
    n(Db, function(a, b) {
        function d(a, d, e) {
            a.$watch(e[c], function(a) {
                e.$set(b, !!a)
            })
        }
        if ("multiple" != a) {
            var c = va("ng-" + b),
                e = d;
            "checked" === a && (e = function(a, b, e) {
                e.ngModel !== e[c] && d(a, b,
                    e)
            });
            vb[c] = function() {
                return {
                    restrict: "A",
                    priority: 100,
                    link: e
                }
            }
        }
    });
    n(cd, function(a, b) {
        vb[b] = function() {
            return {
                priority: 100,
                link: function(a, c, e) {
                    if ("ngPattern" === b && "/" == e.ngPattern.charAt(0) && (c = e.ngPattern.match(Ag))) {
                        e.$set("ngPattern", new RegExp(c[1], c[2]));
                        return
                    }
                    a.$watch(e[b], function(a) {
                        e.$set(b, a)
                    })
                }
            }
        }
    });
    n(["src", "srcset", "href"], function(a) {
        var b = va("ng-" + a);
        vb[b] = function() {
            return {
                priority: 99,
                link: function(d, c, e) {
                    var f = a,
                        g = a;
                    "href" === a && "[object SVGAnimatedString]" === ga.call(c.prop("href")) &&
                        (g = "xlinkHref", e.$attr[g] = "xlink:href", f = null);
                    e.$observe(b, function(b) {
                        b ? (e.$set(g, b), xa && f && c.prop(f, e[g])) : "href" === a && e.$set(g, null)
                    })
                }
            }
        }
    });
    var Mb = {
        $addControl: B,
        $$renameControl: function(a, b) {
            a.$name = b
        },
        $removeControl: B,
        $setValidity: B,
        $setDirty: B,
        $setPristine: B,
        $setSubmitted: B
    };
    Kd.$inject = ["$element", "$attrs", "$scope", "$animate", "$interpolate"];
    var Sd = function(a) {
            return ["$timeout", "$parse", function(b, d) {
                function c(a) {
                    return "" === a ? d('this[""]').assign : d(a).assign || B
                }
                return {
                    name: "form",
                    restrict: a ?
                        "EAC" : "E",
                    require: ["form", "^^?form"],
                    controller: Kd,
                    compile: function(d, f) {
                        d.addClass(Ya).addClass(ob);
                        var g = f.name ? "name" : a && f.ngForm ? "ngForm" : !1;
                        return {
                            pre: function(a, d, e, f) {
                                var n = f[0];
                                if (!("action" in e)) {
                                    var s = function(b) {
                                        a.$apply(function() {
                                            n.$commitViewValue();
                                            n.$setSubmitted()
                                        });
                                        b.preventDefault()
                                    };
                                    d[0].addEventListener("submit", s, !1);
                                    d.on("$destroy", function() {
                                        b(function() {
                                            d[0].removeEventListener("submit", s, !1)
                                        }, 0, !1)
                                    })
                                }(f[1] || n.$$parentForm).$addControl(n);
                                var q = g ? c(n.$name) : B;
                                g && (q(a, n), e.$observe(g,
                                    function(b) {
                                        n.$name !== b && (q(a, v), n.$$parentForm.$$renameControl(n, b), q = c(n.$name), q(a, n))
                                    }));
                                d.on("$destroy", function() {
                                    n.$$parentForm.$removeControl(n);
                                    q(a, v);
                                    T(n, Mb)
                                })
                            }
                        }
                    }
                }
            }]
        },
        pe = Sd(),
        Ce = Sd(!0),
        zg = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,
        Ig = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+\])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,
        Jg = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,
        Kg =
        /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,
        Td = /^(\d{4})-(\d{2})-(\d{2})$/,
        Ud = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,
        pc = /^(\d{4})-W(\d\d)$/,
        Vd = /^(\d{4})-(\d\d)$/,
        Wd = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,
        Xd = {
            text: function(a, b, d, c, e, f) {
                lb(a, b, d, c, e, f);
                nc(c)
            },
            date: mb("date", Td, Ob(Td, ["yyyy", "MM", "dd"]), "yyyy-MM-dd"),
            "datetime-local": mb("datetimelocal", Ud, Ob(Ud, "yyyy MM dd HH mm ss sss".split(" ")), "yyyy-MM-ddTHH:mm:ss.sss"),
            time: mb("time", Wd, Ob(Wd, ["HH", "mm", "ss",
                "sss"
            ]), "HH:mm:ss.sss"),
            week: mb("week", pc, function(a, b) {
                if (V(a)) return a;
                if (F(a)) {
                    pc.lastIndex = 0;
                    var d = pc.exec(a);
                    if (d) {
                        var c = +d[1],
                            e = +d[2],
                            f = d = 0,
                            g = 0,
                            h = 0,
                            k = Id(c),
                            e = 7 * (e - 1);
                        b && (d = b.getHours(), f = b.getMinutes(), g = b.getSeconds(), h = b.getMilliseconds());
                        return new Date(c, 0, k.getDate() + e, d, f, g, h)
                    }
                }
                return NaN
            }, "yyyy-Www"),
            month: mb("month", Vd, Ob(Vd, ["yyyy", "MM"]), "yyyy-MM"),
            number: function(a, b, d, c, e, f) {
                Md(a, b, d, c);
                lb(a, b, d, c, e, f);
                c.$$parserName = "number";
                c.$parsers.push(function(a) {
                    return c.$isEmpty(a) ? null :
                        Kg.test(a) ? parseFloat(a) : v
                });
                c.$formatters.push(function(a) {
                    if (!c.$isEmpty(a)) {
                        if (!N(a)) throw nb("numfmt", a);
                        a = a.toString()
                    }
                    return a
                });
                if (y(d.min) || d.ngMin) {
                    var g;
                    c.$validators.min = function(a) {
                        return c.$isEmpty(a) || x(g) || a >= g
                    };
                    d.$observe("min", function(a) {
                        y(a) && !N(a) && (a = parseFloat(a, 10));
                        g = N(a) && !isNaN(a) ? a : v;
                        c.$validate()
                    })
                }
                if (y(d.max) || d.ngMax) {
                    var h;
                    c.$validators.max = function(a) {
                        return c.$isEmpty(a) || x(h) || a <= h
                    };
                    d.$observe("max", function(a) {
                        y(a) && !N(a) && (a = parseFloat(a, 10));
                        h = N(a) && !isNaN(a) ?
                            a : v;
                        c.$validate()
                    })
                }
            },
            url: function(a, b, d, c, e, f) {
                lb(a, b, d, c, e, f);
                nc(c);
                c.$$parserName = "url";
                c.$validators.url = function(a, b) {
                    var d = a || b;
                    return c.$isEmpty(d) || Ig.test(d)
                }
            },
            email: function(a, b, d, c, e, f) {
                lb(a, b, d, c, e, f);
                nc(c);
                c.$$parserName = "email";
                c.$validators.email = function(a, b) {
                    var d = a || b;
                    return c.$isEmpty(d) || Jg.test(d)
                }
            },
            radio: function(a, b, d, c) {
                x(d.name) && b.attr("name", ++pb);
                b.on("click", function(a) {
                    b[0].checked && c.$setViewValue(d.value, a && a.type)
                });
                c.$render = function() {
                    b[0].checked = d.value == c.$viewValue
                };
                d.$observe("value", c.$render)
            },
            checkbox: function(a, b, d, c, e, f, g, h) {
                var k = Nd(h, a, "ngTrueValue", d.ngTrueValue, !0),
                    l = Nd(h, a, "ngFalseValue", d.ngFalseValue, !1);
                b.on("click", function(a) {
                    c.$setViewValue(b[0].checked, a && a.type)
                });
                c.$render = function() {
                    b[0].checked = c.$viewValue
                };
                c.$isEmpty = function(a) {
                    return !1 === a
                };
                c.$formatters.push(function(a) {
                    return oa(a, k)
                });
                c.$parsers.push(function(a) {
                    return a ? k : l
                })
            },
            hidden: B,
            button: B,
            submit: B,
            reset: B,
            file: B
        },
        Fc = ["$browser", "$sniffer", "$filter", "$parse", function(a, b, d,
            c) {
            return {
                restrict: "E",
                require: ["?ngModel"],
                link: {
                    pre: function(e, f, g, h) {
                        h[0] && (Xd[G(g.type)] || Xd.text)(e, f, g, h[0], b, a, d, c)
                    }
                }
            }
        }],
        Lg = /^(true|false|\d+)$/,
        Ue = function() {
            return {
                restrict: "A",
                priority: 100,
                compile: function(a, b) {
                    return Lg.test(b.ngValue) ? function(a, b, e) {
                        e.$set("value", a.$eval(e.ngValue))
                    } : function(a, b, e) {
                        a.$watch(e.ngValue, function(a) {
                            e.$set("value", a)
                        })
                    }
                }
            }
        },
        ue = ["$compile", function(a) {
            return {
                restrict: "AC",
                compile: function(b) {
                    a.$$addBindingClass(b);
                    return function(b, c, e) {
                        a.$$addBindingInfo(c,
                            e.ngBind);
                        c = c[0];
                        b.$watch(e.ngBind, function(a) {
                            c.textContent = x(a) ? "" : a
                        })
                    }
                }
            }
        }],
        we = ["$interpolate", "$compile", function(a, b) {
            return {
                compile: function(d) {
                    b.$$addBindingClass(d);
                    return function(c, d, f) {
                        c = a(d.attr(f.$attr.ngBindTemplate));
                        b.$$addBindingInfo(d, c.expressions);
                        d = d[0];
                        f.$observe("ngBindTemplate", function(a) {
                            d.textContent = x(a) ? "" : a
                        })
                    }
                }
            }
        }],
        ve = ["$sce", "$parse", "$compile", function(a, b, d) {
            return {
                restrict: "A",
                compile: function(c, e) {
                    var f = b(e.ngBindHtml),
                        g = b(e.ngBindHtml, function(a) {
                            return (a || "").toString()
                        });
                    d.$$addBindingClass(c);
                    return function(b, c, e) {
                        d.$$addBindingInfo(c, e.ngBindHtml);
                        b.$watch(g, function() {
                            c.html(a.getTrustedHtml(f(b)) || "")
                        })
                    }
                }
            }
        }],
        Te = ba({
            restrict: "A",
            require: "ngModel",
            link: function(a, b, d, c) {
                c.$viewChangeListeners.push(function() {
                    a.$eval(d.ngChange)
                })
            }
        }),
        xe = oc("", !0),
        ze = oc("Odd", 0),
        ye = oc("Even", 1),
        Ae = Ma({
            compile: function(a, b) {
                b.$set("ngCloak", v);
                a.removeClass("ng-cloak")
            }
        }),
        Be = [function() {
            return {
                restrict: "A",
                scope: !0,
                controller: "@",
                priority: 500
            }
        }],
        Kc = {},
        Mg = {
            blur: !0,
            focus: !0
        };
    n("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),
        function(a) {
            var b = va("ng-" + a);
            Kc[b] = ["$parse", "$rootScope", function(d, c) {
                return {
                    restrict: "A",
                    compile: function(e, f) {
                        var g = d(f[b], null, !0);
                        return function(b, d) {
                            d.on(a, function(d) {
                                var e = function() {
                                    g(b, {
                                        $event: d
                                    })
                                };
                                Mg[a] && c.$$phase ? b.$evalAsync(e) : b.$apply(e)
                            })
                        }
                    }
                }
            }]
        });
    var Ee = ["$animate", function(a) {
            return {
                multiElement: !0,
                transclude: "element",
                priority: 600,
                terminal: !0,
                restrict: "A",
                $$tlb: !0,
                link: function(b, d, c, e, f) {
                    var g, h, k;
                    b.$watch(c.ngIf, function(b) {
                        b ? h || f(function(b, e) {
                            h = e;
                            b[b.length++] = W.createComment(" end ngIf: " +
                                c.ngIf + " ");
                            g = {
                                clone: b
                            };
                            a.enter(b, d.parent(), d)
                        }) : (k && (k.remove(), k = null), h && (h.$destroy(), h = null), g && (k = tb(g.clone), a.leave(k).then(function() {
                            k = null
                        }), g = null))
                    })
                }
            }
        }],
        Fe = ["$templateRequest", "$anchorScroll", "$animate", function(a, b, d) {
            return {
                restrict: "ECA",
                priority: 400,
                terminal: !0,
                transclude: "element",
                controller: ia.noop,
                compile: function(c, e) {
                    var f = e.ngInclude || e.src,
                        g = e.onload || "",
                        h = e.autoscroll;
                    return function(c, e, m, n, s) {
                        var q = 0,
                            v, t, p, w = function() {
                                t && (t.remove(), t = null);
                                v && (v.$destroy(), v = null);
                                p &&
                                    (d.leave(p).then(function() {
                                        t = null
                                    }), t = p, p = null)
                            };
                        c.$watch(f, function(f) {
                            var m = function() {
                                    !y(h) || h && !c.$eval(h) || b()
                                },
                                z = ++q;
                            f ? (a(f, !0).then(function(a) {
                                if (!c.$$destroyed && z === q) {
                                    var b = c.$new();
                                    n.template = a;
                                    a = s(b, function(a) {
                                        w();
                                        d.enter(a, null, e).then(m)
                                    });
                                    v = b;
                                    p = a;
                                    v.$emit("$includeContentLoaded", f);
                                    c.$eval(g)
                                }
                            }, function() {
                                c.$$destroyed || z !== q || (w(), c.$emit("$includeContentError", f))
                            }), c.$emit("$includeContentRequested", f)) : (w(), n.template = null)
                        })
                    }
                }
            }
        }],
        We = ["$compile", function(a) {
            return {
                restrict: "ECA",
                priority: -400,
                require: "ngInclude",
                link: function(b, d, c, e) {
                    ga.call(d[0]).match(/SVG/) ? (d.empty(), a(Nc(e.template, W).childNodes)(b, function(a) {
                        d.append(a)
                    }, {
                        futureParentElement: d
                    })) : (d.html(e.template), a(d.contents())(b))
                }
            }
        }],
        Ge = Ma({
            priority: 450,
            compile: function() {
                return {
                    pre: function(a, b, d) {
                        a.$eval(d.ngInit)
                    }
                }
            }
        }),
        Se = function() {
            return {
                restrict: "A",
                priority: 100,
                require: "ngModel",
                link: function(a, b, d, c) {
                    var e = b.attr(d.$attr.ngList) || ", ",
                        f = "false" !== d.ngTrim,
                        g = f ? X(e) : e;
                    c.$parsers.push(function(a) {
                        if (!x(a)) {
                            var b = [];
                            a && n(a.split(g), function(a) {
                                a && b.push(f ? X(a) : a)
                            });
                            return b
                        }
                    });
                    c.$formatters.push(function(a) {
                        return L(a) ? a.join(e) : v
                    });
                    c.$isEmpty = function(a) {
                        return !a || !a.length
                    }
                }
            }
        },
        ob = "ng-valid",
        Od = "ng-invalid",
        Ya = "ng-pristine",
        Nb = "ng-dirty",
        Qd = "ng-pending",
        nb = H("ngModel"),
        Ng = ["$scope", "$exceptionHandler", "$attrs", "$element", "$parse", "$animate", "$timeout", "$rootScope", "$q", "$interpolate", function(a, b, d, c, e, f, g, h, k, l) {
            this.$modelValue = this.$viewValue = Number.NaN;
            this.$$rawModelValue = v;
            this.$validators = {};
            this.$asyncValidators = {};
            this.$parsers = [];
            this.$formatters = [];
            this.$viewChangeListeners = [];
            this.$untouched = !0;
            this.$touched = !1;
            this.$pristine = !0;
            this.$dirty = !1;
            this.$valid = !0;
            this.$invalid = !1;
            this.$error = {};
            this.$$success = {};
            this.$pending = v;
            this.$name = l(d.name || "", !1)(a);
            this.$$parentForm = Mb;
            var m = e(d.ngModel),
                r = m.assign,
                q = m,
                I = r,
                K = null,
                t, p = this;
            this.$$setOptions = function(a) {
                if ((p.$options = a) && a.getterSetter) {
                    var b = e(d.ngModel + "()"),
                        f = e(d.ngModel + "($$$p)");
                    q = function(a) {
                        var c = m(a);
                        D(c) && (c = b(a));
                        return c
                    };
                    I = function(a,
                        b) {
                        D(m(a)) ? f(a, {
                            $$$p: p.$modelValue
                        }) : r(a, p.$modelValue)
                    }
                } else if (!m.assign) throw nb("nonassign", d.ngModel, ta(c));
            };
            this.$render = B;
            this.$isEmpty = function(a) {
                return x(a) || "" === a || null === a || a !== a
            };
            this.$$updateEmptyClasses = function(a) {
                p.$isEmpty(a) ? (f.removeClass(c, "ng-not-empty"), f.addClass(c, "ng-empty")) : (f.removeClass(c, "ng-empty"), f.addClass(c, "ng-not-empty"))
            };
            var w = 0;
            Ld({
                ctrl: this,
                $element: c,
                set: function(a, b) {
                    a[b] = !0
                },
                unset: function(a, b) {
                    delete a[b]
                },
                $animate: f
            });
            this.$setPristine = function() {
                p.$dirty = !1;
                p.$pristine = !0;
                f.removeClass(c, Nb);
                f.addClass(c, Ya)
            };
            this.$setDirty = function() {
                p.$dirty = !0;
                p.$pristine = !1;
                f.removeClass(c, Ya);
                f.addClass(c, Nb);
                p.$$parentForm.$setDirty()
            };
            this.$setUntouched = function() {
                p.$touched = !1;
                p.$untouched = !0;
                f.setClass(c, "ng-untouched", "ng-touched")
            };
            this.$setTouched = function() {
                p.$touched = !0;
                p.$untouched = !1;
                f.setClass(c, "ng-touched", "ng-untouched")
            };
            this.$rollbackViewValue = function() {
                g.cancel(K);
                p.$viewValue = p.$$lastCommittedViewValue;
                p.$render()
            };
            this.$validate = function() {
                if (!N(p.$modelValue) ||
                    !isNaN(p.$modelValue)) {
                    var a = p.$$rawModelValue,
                        b = p.$valid,
                        c = p.$modelValue,
                        d = p.$options && p.$options.allowInvalid;
                    p.$$runValidators(a, p.$$lastCommittedViewValue, function(e) {
                        d || b === e || (p.$modelValue = e ? a : v, p.$modelValue !== c && p.$$writeModelToScope())
                    })
                }
            };
            this.$$runValidators = function(a, b, c) {
                function d() {
                    var c = !0;
                    n(p.$validators, function(d, e) {
                        var g = d(a, b);
                        c = c && g;
                        f(e, g)
                    });
                    return c ? !0 : (n(p.$asyncValidators, function(a, b) {
                        f(b, null)
                    }), !1)
                }

                function e() {
                    var c = [],
                        d = !0;
                    n(p.$asyncValidators, function(e, g) {
                        var h = e(a,
                            b);
                        if (!h || !D(h.then)) throw nb("nopromise", h);
                        f(g, v);
                        c.push(h.then(function() {
                            f(g, !0)
                        }, function(a) {
                            d = !1;
                            f(g, !1)
                        }))
                    });
                    c.length ? k.all(c).then(function() {
                        g(d)
                    }, B) : g(!0)
                }

                function f(a, b) {
                    h === w && p.$setValidity(a, b)
                }

                function g(a) {
                    h === w && c(a)
                }
                w++;
                var h = w;
                (function() {
                    var a = p.$$parserName || "parse";
                    if (x(t)) f(a, null);
                    else return t || (n(p.$validators, function(a, b) {
                        f(b, null)
                    }), n(p.$asyncValidators, function(a, b) {
                        f(b, null)
                    })), f(a, t), t;
                    return !0
                })() ? d() ? e() : g(!1): g(!1)
            };
            this.$commitViewValue = function() {
                var a = p.$viewValue;
                g.cancel(K);
                if (p.$$lastCommittedViewValue !== a || "" === a && p.$$hasNativeValidators) p.$$updateEmptyClasses(a), p.$$lastCommittedViewValue = a, p.$pristine && this.$setDirty(), this.$$parseAndValidate()
            };
            this.$$parseAndValidate = function() {
                var b = p.$$lastCommittedViewValue;
                if (t = x(b) ? v : !0)
                    for (var c = 0; c < p.$parsers.length; c++)
                        if (b = p.$parsers[c](b), x(b)) {
                            t = !1;
                            break
                        }
                N(p.$modelValue) && isNaN(p.$modelValue) && (p.$modelValue = q(a));
                var d = p.$modelValue,
                    e = p.$options && p.$options.allowInvalid;
                p.$$rawModelValue = b;
                e && (p.$modelValue =
                    b, p.$modelValue !== d && p.$$writeModelToScope());
                p.$$runValidators(b, p.$$lastCommittedViewValue, function(a) {
                    e || (p.$modelValue = a ? b : v, p.$modelValue !== d && p.$$writeModelToScope())
                })
            };
            this.$$writeModelToScope = function() {
                I(a, p.$modelValue);
                n(p.$viewChangeListeners, function(a) {
                    try {
                        a()
                    } catch (c) {
                        b(c)
                    }
                })
            };
            this.$setViewValue = function(a, b) {
                p.$viewValue = a;
                p.$options && !p.$options.updateOnDefault || p.$$debounceViewValueCommit(b)
            };
            this.$$debounceViewValueCommit = function(b) {
                var c = 0,
                    d = p.$options;
                d && y(d.debounce) && (d = d.debounce,
                    N(d) ? c = d : N(d[b]) ? c = d[b] : N(d["default"]) && (c = d["default"]));
                g.cancel(K);
                c ? K = g(function() {
                    p.$commitViewValue()
                }, c) : h.$$phase ? p.$commitViewValue() : a.$apply(function() {
                    p.$commitViewValue()
                })
            };
            a.$watch(function() {
                var b = q(a);
                if (b !== p.$modelValue && (p.$modelValue === p.$modelValue || b === b)) {
                    p.$modelValue = p.$$rawModelValue = b;
                    t = v;
                    for (var c = p.$formatters, d = c.length, e = b; d--;) e = c[d](e);
                    p.$viewValue !== e && (p.$$updateEmptyClasses(e), p.$viewValue = p.$$lastCommittedViewValue = e, p.$render(), p.$$runValidators(b, e, B))
                }
                return b
            })
        }],
        Re = ["$rootScope", function(a) {
            return {
                restrict: "A",
                require: ["ngModel", "^?form", "^?ngModelOptions"],
                controller: Ng,
                priority: 1,
                compile: function(b) {
                    b.addClass(Ya).addClass("ng-untouched").addClass(ob);
                    return {
                        pre: function(a, b, e, f) {
                            var g = f[0];
                            b = f[1] || g.$$parentForm;
                            g.$$setOptions(f[2] && f[2].$options);
                            b.$addControl(g);
                            e.$observe("name", function(a) {
                                g.$name !== a && g.$$parentForm.$$renameControl(g, a)
                            });
                            a.$on("$destroy", function() {
                                g.$$parentForm.$removeControl(g)
                            })
                        },
                        post: function(b, c, e, f) {
                            var g = f[0];
                            if (g.$options &&
                                g.$options.updateOn) c.on(g.$options.updateOn, function(a) {
                                g.$$debounceViewValueCommit(a && a.type)
                            });
                            c.on("blur", function(c) {
                                g.$touched || (a.$$phase ? b.$evalAsync(g.$setTouched) : b.$apply(g.$setTouched))
                            })
                        }
                    }
                }
            }
        }],
        Og = /(\s+|^)default(\s+|$)/,
        Ve = function() {
            return {
                restrict: "A",
                controller: ["$scope", "$attrs", function(a, b) {
                    var d = this;
                    this.$options = Oa(a.$eval(b.ngModelOptions));
                    y(this.$options.updateOn) ? (this.$options.updateOnDefault = !1, this.$options.updateOn = X(this.$options.updateOn.replace(Og, function() {
                        d.$options.updateOnDefault = !0;
                        return " "
                    }))) : this.$options.updateOnDefault = !0
                }]
            }
        },
        He = Ma({
            terminal: !0,
            priority: 1E3
        }),
        Pg = H("ngOptions"),
        Qg = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
        Pe = ["$compile", "$parse", function(a, b) {
            function d(a, c, d) {
                function e(a, b, c, d, f) {
                    this.selectValue = a;
                    this.viewValue = b;
                    this.label = c;
                    this.group = d;
                    this.disabled = f
                }

                function l(a) {
                    var b;
                    if (!q && Ca(a)) b = a;
                    else {
                        b = [];
                        for (var c in a) a.hasOwnProperty(c) && "$" !== c.charAt(0) && b.push(c)
                    }
                    return b
                }
                var m = a.match(Qg);
                if (!m) throw Pg("iexp", a, ta(c));
                var n = m[5] || m[7],
                    q = m[6];
                a = / as /.test(m[0]) && m[1];
                var v = m[9];
                c = b(m[2] ? m[1] : n);
                var y = a && b(a) || c,
                    t = v && b(v),
                    p = v ? function(a, b) {
                        return t(d, b)
                    } : function(a) {
                        return Fa(a)
                    },
                    w = function(a, b) {
                        return p(a, B(a, b))
                    },
                    u = b(m[2] || m[1]),
                    x = b(m[3] || ""),
                    z = b(m[4] || ""),
                    A = b(m[8]),
                    C = {},
                    B = q ? function(a, b) {
                        C[q] = b;
                        C[n] = a;
                        return C
                    } : function(a) {
                        C[n] = a;
                        return C
                    };
                return {
                    trackBy: v,
                    getTrackByValue: w,
                    getWatchables: b(A, function(a) {
                        var b = [];
                        a = a || [];
                        for (var c = l(a), e = c.length, f = 0; f < e; f++) {
                            var g = a === c ? f : c[f],
                                k = B(a[g], g),
                                g = p(a[g], k);
                            b.push(g);
                            if (m[2] || m[1]) g = u(d, k), b.push(g);
                            m[4] && (k = z(d, k), b.push(k))
                        }
                        return b
                    }),
                    getOptions: function() {
                        for (var a = [], b = {}, c = A(d) || [], f = l(c), g = f.length, m = 0; m < g; m++) {
                            var n = c === f ? m : f[m],
                                r = B(c[n], n),
                                q = y(d, r),
                                n = p(q, r),
                                s = u(d, r),
                                t = x(d, r),
                                r = z(d, r),
                                q = new e(n, q, s, t, r);
                            a.push(q);
                            b[n] = q
                        }
                        return {
                            items: a,
                            selectValueMap: b,
                            getOptionFromViewValue: function(a) {
                                return b[w(a)]
                            },
                            getViewValueFromOption: function(a) {
                                return v ? ia.copy(a.viewValue) : a.viewValue
                            }
                        }
                    }
                }
            }
            var c = W.createElement("option"),
                e = W.createElement("optgroup");
            return {
                restrict: "A",
                terminal: !0,
                require: ["select", "ngModel"],
                link: {
                    pre: function(a, b, c, d) {
                        d[0].registerOption = B
                    },
                    post: function(b, g, h, k) {
                        function l(a, b) {
                            a.element = b;
                            b.disabled = a.disabled;
                            a.label !== b.label && (b.label = a.label, b.textContent = a.label);
                            a.value !== b.value && (b.value = a.selectValue)
                        }

                        function m(a, b, c, d) {
                            b && G(b.nodeName) === c ? c = b : (c = d.cloneNode(!1), b ? a.insertBefore(c,
                                b) : a.appendChild(c));
                            return c
                        }

                        function r(a) {
                            for (var b; a;) b = a.nextSibling, $b(a), a = b
                        }

                        function q(a) {
                            var b = w && w[0],
                                c = A && A[0];
                            if (b || c)
                                for (; a && (a === b || a === c || 8 === a.nodeType || "option" === ra(a) && "" === a.value);) a = a.nextSibling;
                            return a
                        }

                        function v() {
                            var a = D && x.readValue();
                            D = E.getOptions();
                            var b = {},
                                d = g[0].firstChild;
                            z && g.prepend(w);
                            d = q(d);
                            D.items.forEach(function(a) {
                                var f, h;
                                y(a.group) ? (f = b[a.group], f || (f = m(g[0], d, "optgroup", e), d = f.nextSibling, f.label = a.group, f = b[a.group] = {
                                        groupElement: f,
                                        currentOptionElement: f.firstChild
                                    }),
                                    h = m(f.groupElement, f.currentOptionElement, "option", c), l(a, h), f.currentOptionElement = h.nextSibling) : (h = m(g[0], d, "option", c), l(a, h), d = h.nextSibling)
                            });
                            Object.keys(b).forEach(function(a) {
                                r(b[a].currentOptionElement)
                            });
                            r(d);
                            t.$render();
                            if (!t.$isEmpty(a)) {
                                var f = x.readValue();
                                (E.trackBy || p ? oa(a, f) : a === f) || (t.$setViewValue(f), t.$render())
                            }
                        }
                        var x = k[0],
                            t = k[1],
                            p = h.multiple,
                            w;
                        k = 0;
                        for (var u = g.children(), B = u.length; k < B; k++)
                            if ("" === u[k].value) {
                                w = u.eq(k);
                                break
                            }
                        var z = !!w,
                            A = C(c.cloneNode(!1));
                        A.val("?");
                        var D, E = d(h.ngOptions,
                            g, b);
                        p ? (t.$isEmpty = function(a) {
                            return !a || 0 === a.length
                        }, x.writeValue = function(a) {
                            D.items.forEach(function(a) {
                                a.element.selected = !1
                            });
                            a && a.forEach(function(a) {
                                (a = D.getOptionFromViewValue(a)) && !a.disabled && (a.element.selected = !0)
                            })
                        }, x.readValue = function() {
                            var a = g.val() || [],
                                b = [];
                            n(a, function(a) {
                                (a = D.selectValueMap[a]) && !a.disabled && b.push(D.getViewValueFromOption(a))
                            });
                            return b
                        }, E.trackBy && b.$watchCollection(function() {
                                if (L(t.$viewValue)) return t.$viewValue.map(function(a) {
                                    return E.getTrackByValue(a)
                                })
                            },
                            function() {
                                t.$render()
                            })) : (x.writeValue = function(a) {
                            var b = D.getOptionFromViewValue(a);
                            b && !b.disabled ? g[0].value !== b.selectValue && (A.remove(), z || w.remove(), g[0].value = b.selectValue, b.element.selected = !0, b.element.setAttribute("selected", "selected")) : null === a || z ? (A.remove(), z || g.prepend(w), g.val(""), w.prop("selected", !0), w.attr("selected", !0)) : (z || w.remove(), g.prepend(A), g.val("?"), A.prop("selected", !0), A.attr("selected", !0))
                        }, x.readValue = function() {
                            var a = D.selectValueMap[g.val()];
                            return a && !a.disabled ?
                                (z || w.remove(), A.remove(), D.getViewValueFromOption(a)) : null
                        }, E.trackBy && b.$watch(function() {
                            return E.getTrackByValue(t.$viewValue)
                        }, function() {
                            t.$render()
                        }));
                        z ? (w.remove(), a(w)(b), w.removeClass("ng-scope")) : w = C(c.cloneNode(!1));
                        v();
                        b.$watchCollection(E.getWatchables, v)
                    }
                }
            }
        }],
        Ie = ["$locale", "$interpolate", "$log", function(a, b, d) {
            var c = /{}/g,
                e = /^when(Minus)?(.+)$/;
            return {
                link: function(f, g, h) {
                    function k(a) {
                        g.text(a || "")
                    }
                    var l = h.count,
                        m = h.$attr.when && g.attr(h.$attr.when),
                        r = h.offset || 0,
                        q = f.$eval(m) || {},
                        v = {},
                        y = b.startSymbol(),
                        t = b.endSymbol(),
                        p = y + l + "-" + r + t,
                        w = ia.noop,
                        u;
                    n(h, function(a, b) {
                        var c = e.exec(b);
                        c && (c = (c[1] ? "-" : "") + G(c[2]), q[c] = g.attr(h.$attr[b]))
                    });
                    n(q, function(a, d) {
                        v[d] = b(a.replace(c, p))
                    });
                    f.$watch(l, function(b) {
                        var c = parseFloat(b),
                            e = isNaN(c);
                        e || c in q || (c = a.pluralCat(c - r));
                        c === u || e && N(u) && isNaN(u) || (w(), e = v[c], x(e) ? (null != b && d.debug("ngPluralize: no rule defined for '" + c + "' in " + m), w = B, k()) : w = f.$watch(e, k), u = c)
                    })
                }
            }
        }],
        Je = ["$parse", "$animate", function(a, b) {
            var d = H("ngRepeat"),
                c = function(a, b,
                    c, d, k, l, m) {
                    a[c] = d;
                    k && (a[k] = l);
                    a.$index = b;
                    a.$first = 0 === b;
                    a.$last = b === m - 1;
                    a.$middle = !(a.$first || a.$last);
                    a.$odd = !(a.$even = 0 === (b & 1))
                };
            return {
                restrict: "A",
                multiElement: !0,
                transclude: "element",
                priority: 1E3,
                terminal: !0,
                $$tlb: !0,
                compile: function(e, f) {
                    var g = f.ngRepeat,
                        h = W.createComment(" end ngRepeat: " + g + " "),
                        k = g.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                    if (!k) throw d("iexp", g);
                    var l = k[1],
                        m = k[2],
                        r = k[3],
                        q = k[4],
                        k = l.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);
                    if (!k) throw d("iidexp", l);
                    var x = k[3] || k[1],
                        y = k[2];
                    if (r && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(r) || /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(r))) throw d("badident", r);
                    var t, p, w, u, B = {
                        $id: Fa
                    };
                    q ? t = a(q) : (w = function(a, b) {
                        return Fa(b)
                    }, u = function(a) {
                        return a
                    });
                    return function(a, e, f, k, l) {
                        t && (p = function(b, c, d) {
                            y && (B[y] = b);
                            B[x] = c;
                            B.$index = d;
                            return t(a, B)
                        });
                        var q = Z();
                        a.$watchCollection(m, function(f) {
                            var k, m, s = e[0],
                                t, B = Z(),
                                D, E, H, F, L, G, N;
                            r && (a[r] = f);
                            if (Ca(f)) L =
                                f, m = p || w;
                            else
                                for (N in m = p || u, L = [], f) sa.call(f, N) && "$" !== N.charAt(0) && L.push(N);
                            D = L.length;
                            N = Array(D);
                            for (k = 0; k < D; k++)
                                if (E = f === L ? k : L[k], H = f[E], F = m(E, H, k), q[F]) G = q[F], delete q[F], B[F] = G, N[k] = G;
                                else {
                                    if (B[F]) throw n(N, function(a) {
                                        a && a.scope && (q[a.id] = a)
                                    }), d("dupes", g, F, H);
                                    N[k] = {
                                        id: F,
                                        scope: v,
                                        clone: v
                                    };
                                    B[F] = !0
                                }
                            for (t in q) {
                                G = q[t];
                                F = tb(G.clone);
                                b.leave(F);
                                if (F[0].parentNode)
                                    for (k = 0, m = F.length; k < m; k++) F[k].$$NG_REMOVED = !0;
                                G.scope.$destroy()
                            }
                            for (k = 0; k < D; k++)
                                if (E = f === L ? k : L[k], H = f[E], G = N[k], G.scope) {
                                    t = s;
                                    do t =
                                        t.nextSibling; while (t && t.$$NG_REMOVED);
                                    G.clone[0] != t && b.move(tb(G.clone), null, C(s));
                                    s = G.clone[G.clone.length - 1];
                                    c(G.scope, k, x, H, y, E, D)
                                } else l(function(a, d) {
                                    G.scope = d;
                                    var e = h.cloneNode(!1);
                                    a[a.length++] = e;
                                    b.enter(a, null, C(s));
                                    s = e;
                                    G.clone = a;
                                    B[G.id] = G;
                                    c(G.scope, k, x, H, y, E, D)
                                });
                            q = B
                        })
                    }
                }
            }
        }],
        Ke = ["$animate", function(a) {
            return {
                restrict: "A",
                multiElement: !0,
                link: function(b, d, c) {
                    b.$watch(c.ngShow, function(b) {
                        a[b ? "removeClass" : "addClass"](d, "ng-hide", {
                            tempClasses: "ng-hide-animate"
                        })
                    })
                }
            }
        }],
        De = ["$animate", function(a) {
            return {
                restrict: "A",
                multiElement: !0,
                link: function(b, d, c) {
                    b.$watch(c.ngHide, function(b) {
                        a[b ? "addClass" : "removeClass"](d, "ng-hide", {
                            tempClasses: "ng-hide-animate"
                        })
                    })
                }
            }
        }],
        Le = Ma(function(a, b, d) {
            a.$watch(d.ngStyle, function(a, d) {
                d && a !== d && n(d, function(a, c) {
                    b.css(c, "")
                });
                a && b.css(a)
            }, !0)
        }),
        Me = ["$animate", function(a) {
            return {
                require: "ngSwitch",
                controller: ["$scope", function() {
                    this.cases = {}
                }],
                link: function(b, d, c, e) {
                    var f = [],
                        g = [],
                        h = [],
                        k = [],
                        l = function(a, b) {
                            return function() {
                                a.splice(b, 1)
                            }
                        };
                    b.$watch(c.ngSwitch || c.on, function(b) {
                        var c,
                            d;
                        c = 0;
                        for (d = h.length; c < d; ++c) a.cancel(h[c]);
                        c = h.length = 0;
                        for (d = k.length; c < d; ++c) {
                            var q = tb(g[c].clone);
                            k[c].$destroy();
                            (h[c] = a.leave(q)).then(l(h, c))
                        }
                        g.length = 0;
                        k.length = 0;
                        (f = e.cases["!" + b] || e.cases["?"]) && n(f, function(b) {
                            b.transclude(function(c, d) {
                                k.push(d);
                                var e = b.element;
                                c[c.length++] = W.createComment(" end ngSwitchWhen: ");
                                g.push({
                                    clone: c
                                });
                                a.enter(c, e.parent(), e)
                            })
                        })
                    })
                }
            }
        }],
        Ne = Ma({
            transclude: "element",
            priority: 1200,
            require: "^ngSwitch",
            multiElement: !0,
            link: function(a, b, d, c, e) {
                c.cases["!" + d.ngSwitchWhen] =
                    c.cases["!" + d.ngSwitchWhen] || [];
                c.cases["!" + d.ngSwitchWhen].push({
                    transclude: e,
                    element: b
                })
            }
        }),
        Oe = Ma({
            transclude: "element",
            priority: 1200,
            require: "^ngSwitch",
            multiElement: !0,
            link: function(a, b, d, c, e) {
                c.cases["?"] = c.cases["?"] || [];
                c.cases["?"].push({
                    transclude: e,
                    element: b
                })
            }
        }),
        Rg = H("ngTransclude"),
        Qe = Ma({
            restrict: "EAC",
            link: function(a, b, d, c, e) {
                d.ngTransclude === d.$attr.ngTransclude && (d.ngTransclude = "");
                if (!e) throw Rg("orphan", ta(b));
                e(function(a) {
                        a.length && (b.empty(), b.append(a))
                    }, null, d.ngTransclude ||
                    d.ngTranscludeSlot)
            }
        }),
        qe = ["$templateCache", function(a) {
            return {
                restrict: "E",
                terminal: !0,
                compile: function(b, d) {
                    "text/ng-template" == d.type && a.put(d.id, b[0].text)
                }
            }
        }],
        Sg = {
            $setViewValue: B,
            $render: B
        },
        Tg = ["$element", "$scope", "$attrs", function(a, b, d) {
            var c = this,
                e = new Ua;
            c.ngModelCtrl = Sg;
            c.unknownOption = C(W.createElement("option"));
            c.renderUnknownOption = function(b) {
                b = "? " + Fa(b) + " ?";
                c.unknownOption.val(b);
                a.prepend(c.unknownOption);
                a.val(b)
            };
            b.$on("$destroy", function() {
                c.renderUnknownOption = B
            });
            c.removeUnknownOption =
                function() {
                    c.unknownOption.parent() && c.unknownOption.remove()
                };
            c.readValue = function() {
                c.removeUnknownOption();
                return a.val()
            };
            c.writeValue = function(b) {
                c.hasOption(b) ? (c.removeUnknownOption(), a.val(b), "" === b && c.emptyOption.prop("selected", !0)) : null == b && c.emptyOption ? (c.removeUnknownOption(), a.val("")) : c.renderUnknownOption(b)
            };
            c.addOption = function(a, b) {
                if (8 !== b[0].nodeType) {
                    Ta(a, '"option value"');
                    "" === a && (c.emptyOption = b);
                    var d = e.get(a) || 0;
                    e.put(a, d + 1);
                    c.ngModelCtrl.$render();
                    b[0].hasAttribute("selected") &&
                        (b[0].selected = !0)
                }
            };
            c.removeOption = function(a) {
                var b = e.get(a);
                b && (1 === b ? (e.remove(a), "" === a && (c.emptyOption = v)) : e.put(a, b - 1))
            };
            c.hasOption = function(a) {
                return !!e.get(a)
            };
            c.registerOption = function(a, b, d, e, l) {
                if (e) {
                    var m;
                    d.$observe("value", function(a) {
                        y(m) && c.removeOption(m);
                        m = a;
                        c.addOption(a, b)
                    })
                } else l ? a.$watch(l, function(a, e) {
                    d.$set("value", a);
                    e !== a && c.removeOption(e);
                    c.addOption(a, b)
                }) : c.addOption(d.value, b);
                b.on("$destroy", function() {
                    c.removeOption(d.value);
                    c.ngModelCtrl.$render()
                })
            }
        }],
        re = function() {
            return {
                restrict: "E",
                require: ["select", "?ngModel"],
                controller: Tg,
                priority: 1,
                link: {
                    pre: function(a, b, d, c) {
                        var e = c[1];
                        if (e) {
                            var f = c[0];
                            f.ngModelCtrl = e;
                            b.on("change", function() {
                                a.$apply(function() {
                                    e.$setViewValue(f.readValue())
                                })
                            });
                            if (d.multiple) {
                                f.readValue = function() {
                                    var a = [];
                                    n(b.find("option"), function(b) {
                                        b.selected && a.push(b.value)
                                    });
                                    return a
                                };
                                f.writeValue = function(a) {
                                    var c = new Ua(a);
                                    n(b.find("option"), function(a) {
                                        a.selected = y(c.get(a.value))
                                    })
                                };
                                var g, h = NaN;
                                a.$watch(function() {
                                    h !== e.$viewValue || oa(g, e.$viewValue) || (g =
                                        na(e.$viewValue), e.$render());
                                    h = e.$viewValue
                                });
                                e.$isEmpty = function(a) {
                                    return !a || 0 === a.length
                                }
                            }
                        }
                    },
                    post: function(a, b, d, c) {
                        var e = c[1];
                        if (e) {
                            var f = c[0];
                            e.$render = function() {
                                f.writeValue(e.$viewValue)
                            }
                        }
                    }
                }
            }
        },
        te = ["$interpolate", function(a) {
            return {
                restrict: "E",
                priority: 100,
                compile: function(b, d) {
                    if (y(d.value)) var c = a(d.value, !0);
                    else {
                        var e = a(b.text(), !0);
                        e || d.$set("value", b.text())
                    }
                    return function(a, b, d) {
                        var k = b.parent();
                        (k = k.data("$selectController") || k.parent().data("$selectController")) && k.registerOption(a,
                            b, d, c, e)
                    }
                }
            }
        }],
        se = ba({
            restrict: "E",
            terminal: !1
        }),
        Hc = function() {
            return {
                restrict: "A",
                require: "?ngModel",
                link: function(a, b, d, c) {
                    c && (d.required = !0, c.$validators.required = function(a, b) {
                        return !d.required || !c.$isEmpty(b)
                    }, d.$observe("required", function() {
                        c.$validate()
                    }))
                }
            }
        },
        Gc = function() {
            return {
                restrict: "A",
                require: "?ngModel",
                link: function(a, b, d, c) {
                    if (c) {
                        var e, f = d.ngPattern || d.pattern;
                        d.$observe("pattern", function(a) {
                            F(a) && 0 < a.length && (a = new RegExp("^" + a + "$"));
                            if (a && !a.test) throw H("ngPattern")("noregexp",
                                f, a, ta(b));
                            e = a || v;
                            c.$validate()
                        });
                        c.$validators.pattern = function(a, b) {
                            return c.$isEmpty(b) || x(e) || e.test(b)
                        }
                    }
                }
            }
        },
        Jc = function() {
            return {
                restrict: "A",
                require: "?ngModel",
                link: function(a, b, d, c) {
                    if (c) {
                        var e = -1;
                        d.$observe("maxlength", function(a) {
                            a = ca(a);
                            e = isNaN(a) ? -1 : a;
                            c.$validate()
                        });
                        c.$validators.maxlength = function(a, b) {
                            return 0 > e || c.$isEmpty(b) || b.length <= e
                        }
                    }
                }
            }
        },
        Ic = function() {
            return {
                restrict: "A",
                require: "?ngModel",
                link: function(a, b, d, c) {
                    if (c) {
                        var e = 0;
                        d.$observe("minlength", function(a) {
                            e = ca(a) || 0;
                            c.$validate()
                        });
                        c.$validators.minlength = function(a, b) {
                            return c.$isEmpty(b) || b.length >= e
                        }
                    }
                }
            }
        };
    O.angular.bootstrap ? console.log("WARNING: Tried to load angular more than once.") : (je(), le(ia), ia.module("ngLocale", [], ["$provide", function(a) {
        function b(a) {
            a += "";
            var b = a.indexOf(".");
            return -1 == b ? 0 : a.length - b - 1
        }
        a.value("$locale", {
            DATETIME_FORMATS: {
                AMPMS: ["AM", "PM"],
                DAY: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
                ERANAMES: ["Before Christ", "Anno Domini"],
                ERAS: ["BC", "AD"],
                FIRSTDAYOFWEEK: 6,
                MONTH: "January February March April May June July August September October November December".split(" "),
                SHORTDAY: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
                SHORTMONTH: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
                STANDALONEMONTH: "January February March April May June July August September October November December".split(" "),
                WEEKENDRANGE: [5, 6],
                fullDate: "EEEE, MMMM d, y",
                longDate: "MMMM d, y",
                medium: "MMM d, y h:mm:ss a",
                mediumDate: "MMM d, y",
                mediumTime: "h:mm:ss a",
                "short": "M/d/yy h:mm a",
                shortDate: "M/d/yy",
                shortTime: "h:mm a"
            },
            NUMBER_FORMATS: {
                CURRENCY_SYM: "$",
                DECIMAL_SEP: ".",
                GROUP_SEP: ",",
                PATTERNS: [{
                    gSize: 3,
                    lgSize: 3,
                    maxFrac: 3,
                    minFrac: 0,
                    minInt: 1,
                    negPre: "-",
                    negSuf: "",
                    posPre: "",
                    posSuf: ""
                }, {
                    gSize: 3,
                    lgSize: 3,
                    maxFrac: 2,
                    minFrac: 2,
                    minInt: 1,
                    negPre: "-\u00a4",
                    negSuf: "",
                    posPre: "\u00a4",
                    posSuf: ""
                }]
            },
            id: "en-us",
            localeID: "en_US",
            pluralCat: function(a, c) {
                var e = a | 0,
                    f = c;
                v === f && (f = Math.min(b(a), 3));
                Math.pow(10, f);
                return 1 == e && 0 == f ? "one" : "other"
            }
        })
    }]), C(W).ready(function() {
        fe(W, Ac)
    }))
})(window, document);
!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
//# sourceMappingURL=angular.min.js.map

;
(function(global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
        global.moment = factory()
}(this, function() {
    'use strict';

    var hookCallback;

    function utils_hooks__hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid(flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    function isUndefined(input) {
        return input === void 0;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function Locale() {}

    // internal storage for locale config files
    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = locale_locales__getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, values) {
        if (values !== null) {
            values.abbr = name;
            locales[name] = locales[name] || new Locale();
            locales[name].set(values);

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    // returns locale data
    function locale_locales__getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function makeGetSet(unit, keepTime) {
        return function(value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get(mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function get_set__set(mom, unit, value) {
        if (mom.isValid()) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    // MOMENTS

    function getSet(units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function() {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function() {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function() {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function(mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1 = /\d/; //       0 - 9
    var match2 = /\d\d/; //      00 - 99
    var match3 = /\d{3}/; //     000 - 999
    var match4 = /\d{4}/; //    0000 - 9999
    var match6 = /[+-]?\d{6}/; // -999999 - 999999
    var match1to2 = /\d\d?/; //       0 - 99
    var match3to4 = /\d\d\d\d?/; //     999 - 9999
    var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3 = /\d{1,3}/; //       0 - 999
    var match1to4 = /\d{1,4}/; //       0 - 9999
    var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

    var matchUnsigned = /\d+/; //       0 - inf
    var matchSigned = /[+-]?\d+/; //    -inf - inf

    var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


    var regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function(input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function(input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function() {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function(format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function(format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function(isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function(isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function(input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function(input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

    function localeMonths(m, format) {
        return isArray(this._months) ? this._months[m.month()] :
            this._months[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

    function localeMonthsShort(m, format) {
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')$', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')$', 'i');
    }

    function checkOverflow(m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11 ? MONTH :
                a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR] < 0 || a[HOUR] > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE :
                a[SECOND] < 0 || a[SECOND] > 59 ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false &&
            (typeof console !== 'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function() {
            if (firstTime) {
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(arguments).join(', ') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function(config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    function createDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));

        //the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function() {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function(input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function(input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function(input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(utils_hooks__hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i, date, input = [],
            currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    utils_hooks__hooks.ISO_8601 = function() {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (getParsingFlags(config).bigHour === true &&
            config._a[HOUR] <= 12 &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function(obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({
                nullInput: true
            });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }

        if (!valid__isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date(utils_hooks__hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function(obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
        function() {
            var other = local__createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return valid__createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
        function() {
            var other = local__createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return valid__createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function() {
        return Date.now ? Date.now() : +(new Date());
    };

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function() {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = ((string || '').match(matcher) || []);
        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function() {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
            } else if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(matchOffset, this._i));
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                d: parseIso(match[4], sign),
                h: parseIso(match[5], sign),
                m: parseIso(match[6], sign),
                s: parseIso(match[7], sign),
                w: parseIso(match[8], sign)
            };
        } else if (duration == null) { // checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {
            milliseconds: 0,
            months: 0
        };

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {
                milliseconds: 0,
                months: 0
            };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function(val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val;
                val = period;
                period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar(time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            diff = this.diff(sod, 'days', true),
            format = diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format]() : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return +this > +localInput;
        } else {
            return +localInput < +this.clone().startOf(units);
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return +this < +localInput;
        } else {
            return +this.clone().endOf(units) < +localInput;
        }
    }

    function isBetween(from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return +this === +localInput;
        } else {
            inputMs = +localInput;
            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that,
            zoneDelta,
            delta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString() {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function moment_format__format(inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
                local__createLocal(time).isValid())) {
            return create__createDuration({
                to: this,
                from: time
            }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
                local__createLocal(time).isValid())) {
            return create__createDuration({
                from: this,
                to: time
            }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function(key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    function startOf(units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf() {
        return +this._d - ((this._offset || 0) * 60000);
    }

    function unix() {
        return Math.floor(+this / 1000);
    }

    function toDate() {
        return this._offset ? new Date(+this) : this._d;
    }

    function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON() {
        // JSON.stringify(new Date(NaN)) === 'null'
        return this.isValid() ? this.toISOString() : 'null';
    }

    function moment_valid__isValid() {
        return valid__isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function() {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function() {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function(input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function(input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        // console.log("got", weekYear, week, weekday, "set", date.toISOString());
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function(input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6 // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function(isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function(format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function(format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function(format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', matchWord);
    addRegexToken('ddd', matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function(input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function(input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

    function localeWeekdays(m, format) {
        return isArray(this._weekdays) ? this._weekdays[m.day()] :
            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

    function localeWeekdaysShort(m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

    function localeWeekdaysMin(m) {
        return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = local__createLocal([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function(input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);

    addFormatToken('hmm', 0, 0, function() {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function() {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function() {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function() {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function() {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function(input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function(input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function() {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function() {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function() {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function() {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function() {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function() {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function() {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function() {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add = add_subtract__add;
    momentPrototype__proto.calendar = moment_calendar__calendar;
    momentPrototype__proto.clone = clone;
    momentPrototype__proto.diff = diff;
    momentPrototype__proto.endOf = endOf;
    momentPrototype__proto.format = moment_format__format;
    momentPrototype__proto.from = from;
    momentPrototype__proto.fromNow = fromNow;
    momentPrototype__proto.to = to;
    momentPrototype__proto.toNow = toNow;
    momentPrototype__proto.get = getSet;
    momentPrototype__proto.invalidAt = invalidAt;
    momentPrototype__proto.isAfter = isAfter;
    momentPrototype__proto.isBefore = isBefore;
    momentPrototype__proto.isBetween = isBetween;
    momentPrototype__proto.isSame = isSame;
    momentPrototype__proto.isSameOrAfter = isSameOrAfter;
    momentPrototype__proto.isSameOrBefore = isSameOrBefore;
    momentPrototype__proto.isValid = moment_valid__isValid;
    momentPrototype__proto.lang = lang;
    momentPrototype__proto.locale = locale;
    momentPrototype__proto.localeData = localeData;
    momentPrototype__proto.max = prototypeMax;
    momentPrototype__proto.min = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set = getSet;
    momentPrototype__proto.startOf = startOf;
    momentPrototype__proto.subtract = add_subtract__subtract;
    momentPrototype__proto.toArray = toArray;
    momentPrototype__proto.toObject = toObject;
    momentPrototype__proto.toDate = toDate;
    momentPrototype__proto.toISOString = moment_format__toISOString;
    momentPrototype__proto.toJSON = toJSON;
    momentPrototype__proto.toString = toString;
    momentPrototype__proto.unix = unix;
    momentPrototype__proto.valueOf = to_type__valueOf;
    momentPrototype__proto.creationData = creationData;

    // Year
    momentPrototype__proto.year = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
    momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
    momentPrototype__proto.weeksInYear = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date = getSetDayOfMonth;
    momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
    momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset = getSetOffset;
    momentPrototype__proto.utc = setOffsetToUTC;
    momentPrototype__proto.local = setOffsetToLocal;
    momentPrototype__proto.parseZone = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal = isLocal;
    momentPrototype__proto.isUtcOffset = isUtcOffset;
    momentPrototype__proto.isUtc = isUtc;
    momentPrototype__proto.isUTC = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment_moment__createUnix(input) {
        return local__createLocal(input * 1000);
    }

    function moment_moment__createInZone() {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };

    function locale_calendar__calendar(key, mom, now) {
        var output = this._calendar[key];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function(val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat(string) {
        return string;
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };

    function relative__relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar = defaultCalendar;
    prototype__proto.calendar = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat = longDateFormat;
    prototype__proto._invalidDate = defaultInvalidDate;
    prototype__proto.invalidDate = invalidDate;
    prototype__proto._ordinal = defaultOrdinal;
    prototype__proto.ordinal = ordinal;
    prototype__proto._ordinalParse = defaultOrdinalParse;
    prototype__proto.preparse = preParsePostFormat;
    prototype__proto.postformat = preParsePostFormat;
    prototype__proto._relativeTime = defaultRelativeTime;
    prototype__proto.relativeTime = relative__relativeTime;
    prototype__proto.pastFuture = pastFuture;
    prototype__proto.set = locale_set__set;

    // Month
    prototype__proto.months = localeMonths;
    prototype__proto._months = defaultLocaleMonths;
    prototype__proto.monthsShort = localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse = localeMonthsParse;
    prototype__proto._monthsRegex = defaultMonthsRegex;
    prototype__proto.monthsRegex = monthsRegex;
    prototype__proto._monthsShortRegex = defaultMonthsShortRegex;
    prototype__proto.monthsShortRegex = monthsShortRegex;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays = localeWeekdays;
    prototype__proto._weekdays = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin = localeWeekdaysMin;
    prototype__proto._weekdaysMin = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort = localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse = localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get(format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function list(format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, setter);
        }

        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }

    function lists__listMonths(format, index) {
        return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort(format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays(format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort(format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin(format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract(duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as(units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf() {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function() {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');

    function duration_get__get(units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function() {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var duration_get__months = makeGetter('months');
    var years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45, // seconds to minute
        m: 45, // minutes to hour
        h: 22, // hours to day
        d: 26, // days to month
        M: 11 // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds] ||
            minutes <= 1 && ['m'] ||
            minutes < thresholds.m && ['mm', minutes] ||
            hours <= 1 && ['h'] ||
            hours < thresholds.h && ['hh', hours] ||
            days <= 1 && ['d'] ||
            days < thresholds.d && ['dd', days] ||
            months <= 1 && ['M'] ||
            months < thresholds.M && ['MM', months] ||
            years <= 1 && ['y'] || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize(withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days = iso_string__abs(this._days);
        var months = iso_string__abs(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs = duration_abs__abs;
    duration_prototype__proto.add = duration_add_subtract__add;
    duration_prototype__proto.subtract = duration_add_subtract__subtract;
    duration_prototype__proto.as = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds = asSeconds;
    duration_prototype__proto.asMinutes = asMinutes;
    duration_prototype__proto.asHours = asHours;
    duration_prototype__proto.asDays = asDays;
    duration_prototype__proto.asWeeks = asWeeks;
    duration_prototype__proto.asMonths = asMonths;
    duration_prototype__proto.asYears = asYears;
    duration_prototype__proto.valueOf = duration_as__valueOf;
    duration_prototype__proto._bubble = bubble;
    duration_prototype__proto.get = duration_get__get;
    duration_prototype__proto.milliseconds = milliseconds;
    duration_prototype__proto.seconds = seconds;
    duration_prototype__proto.minutes = minutes;
    duration_prototype__proto.hours = hours;
    duration_prototype__proto.days = days;
    duration_prototype__proto.weeks = weeks;
    duration_prototype__proto.months = duration_get__months;
    duration_prototype__proto.years = years;
    duration_prototype__proto.humanize = humanize;
    duration_prototype__proto.toISOString = iso_string__toISOString;
    duration_prototype__proto.toString = iso_string__toISOString;
    duration_prototype__proto.toJSON = iso_string__toISOString;
    duration_prototype__proto.locale = locale;
    duration_prototype__proto.localeData = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function(input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function(input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports

    ;

    //! moment.js
    //! version : 2.11.2
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com

    utils_hooks__hooks.version = '2.11.2';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn = momentPrototype;
    utils_hooks__hooks.min = min;
    utils_hooks__hooks.max = max;
    utils_hooks__hooks.now = now;
    utils_hooks__hooks.utc = create_utc__createUTC;
    utils_hooks__hooks.unix = moment_moment__createUnix;
    utils_hooks__hooks.months = lists__listMonths;
    utils_hooks__hooks.isDate = isDate;
    utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid = valid__createInvalid;
    utils_hooks__hooks.duration = create__createDuration;
    utils_hooks__hooks.isMoment = isMoment;
    utils_hooks__hooks.weekdays = lists__listWeekdays;
    utils_hooks__hooks.parseZone = moment_moment__createInZone;
    utils_hooks__hooks.localeData = locale_locales__getLocale;
    utils_hooks__hooks.isDuration = isDuration;
    utils_hooks__hooks.monthsShort = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale = defineLocale;
    utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    utils_hooks__hooks.prototype = momentPrototype;

    var moment__default = utils_hooks__hooks;

    //! moment.js locale configuration
    //! locale : afrikaans (af)
    //! author : Werner Mollentze : https://github.com/wernerm

    var af = moment__default.defineLocale('af', {
        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM: function(input) {
            return /^nm$/i.test(input);
        },
        meridiem: function(hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Vandag om] LT',
            nextDay: '[Môre om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[Gister om] LT',
            lastWeek: '[Laas] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'oor %s',
            past: '%s gelede',
            s: '\'n paar sekondes',
            m: '\'n minuut',
            mm: '%d minute',
            h: '\'n uur',
            hh: '%d ure',
            d: '\'n dag',
            dd: '%d dae',
            M: '\'n maand',
            MM: '%d maande',
            y: '\'n jaar',
            yy: '%d jaar'
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week: {
            dow: 1, // Maandag is die eerste dag van die week.
            doy: 4 // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        }
    });

    //! moment.js locale configuration
    //! locale : Moroccan Arabic (ar-ma)
    //! author : ElFadili Yassine : https://github.com/ElFadiliY
    //! author : Abdel Said : https://github.com/abdelsaid

    var ar_ma = moment__default.defineLocale('ar-ma', {
        months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Arabic Saudi Arabia (ar-sa)
    //! author : Suhail Alkowaileet : https://github.com/xsoh

    var ar_sa__symbolMap = {
            '1': '١',
            '2': '٢',
            '3': '٣',
            '4': '٤',
            '5': '٥',
            '6': '٦',
            '7': '٧',
            '8': '٨',
            '9': '٩',
            '0': '٠'
        },
        ar_sa__numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0'
        };

    var ar_sa = moment__default.defineLocale('ar-sa', {
        months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM: function(input) {
            return 'م' === input;
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        preparse: function(string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(match) {
                return ar_sa__numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function(string) {
            return string.replace(/\d/g, function(match) {
                return ar_sa__symbolMap[match];
            }).replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale  : Tunisian Arabic (ar-tn)

    var ar_tn = moment__default.defineLocale('ar-tn', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! Locale: Arabic (ar)
    //! Author: Abdel Said: https://github.com/abdelsaid
    //! Changes in months, weekdays: Ahmed Elkhatib
    //! Native plural forms: forabi https://github.com/forabi

    var ar__symbolMap = {
            '1': '١',
            '2': '٢',
            '3': '٣',
            '4': '٤',
            '5': '٥',
            '6': '٦',
            '7': '٧',
            '8': '٨',
            '9': '٩',
            '0': '٠'
        },
        ar__numberMap = {
            '١': '1',
            '٢': '2',
            '٣': '3',
            '٤': '4',
            '٥': '5',
            '٦': '6',
            '٧': '7',
            '٨': '8',
            '٩': '9',
            '٠': '0'
        },
        pluralForm = function(n) {
            return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
        },
        plurals = {
            s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
            m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
            h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
            d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
            M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
            y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
        },
        pluralize = function(u) {
            return function(number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        ar__months = [
            'كانون الثاني يناير',
            'شباط فبراير',
            'آذار مارس',
            'نيسان أبريل',
            'أيار مايو',
            'حزيران يونيو',
            'تموز يوليو',
            'آب أغسطس',
            'أيلول سبتمبر',
            'تشرين الأول أكتوبر',
            'تشرين الثاني نوفمبر',
            'كانون الأول ديسمبر'
        ];

    var ar = moment__default.defineLocale('ar', {
        months: ar__months,
        monthsShort: ar__months,
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM: function(input) {
            return 'م' === input;
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar: {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'بعد %s',
            past: 'منذ %s',
            s: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y')
        },
        preparse: function(string) {
            return string.replace(/\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(match) {
                return ar__numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function(string) {
            return string.replace(/\d/g, function(match) {
                return ar__symbolMap[match];
            }).replace(/,/g, '،');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : azerbaijani (az)
    //! author : topchiyev : https://github.com/topchiyev

    var az__suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-üncü',
        4: '-üncü',
        100: '-üncü',
        6: '-ncı',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-ıncı',
        90: '-ıncı'
    };

    var az = moment__default.defineLocale('az', {
        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays: 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
        weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
        weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[sabah saat] LT',
            nextWeek: '[gələn həftə] dddd [saat] LT',
            lastDay: '[dünən] LT',
            lastWeek: '[keçən həftə] dddd [saat] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s əvvəl',
            s: 'birneçə saniyyə',
            m: 'bir dəqiqə',
            mm: '%d dəqiqə',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir il',
            yy: '%d il'
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM: function(input) {
            return /^(gündüz|axşam)$/.test(input);
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 4) {
                return 'gecə';
            } else if (hour < 12) {
                return 'səhər';
            } else if (hour < 17) {
                return 'gündüz';
            } else {
                return 'axşam';
            }
        },
        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal: function(number) {
            if (number === 0) { // special case for zero
                return number + '-ıncı';
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (az__suffixes[a] || az__suffixes[b] || az__suffixes[c]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : belarusian (be)
    //! author : Dmitry Demidov : https://github.com/demidov91
    //! author: Praleska: http://praleska.pro/
    //! Author : Menelion Elensúle : https://github.com/Oire

    function be__plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }

    function be__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            'dd': 'дзень_дні_дзён',
            'MM': 'месяц_месяцы_месяцаў',
            'yy': 'год_гады_гадоў'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        } else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        } else {
            return number + ' ' + be__plural(format[key], +number);
        }
    }

    var be = moment__default.defineLocale('be', {
        months: {
            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
        },
        monthsShort: 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays: {
            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
            isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
        },
        weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., HH:mm',
            LLLL: 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar: {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function() {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return '[У мінулую] dddd [ў] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'праз %s',
            past: '%s таму',
            s: 'некалькі секунд',
            m: be__relativeTimeWithPlural,
            mm: be__relativeTimeWithPlural,
            h: be__relativeTimeWithPlural,
            hh: be__relativeTimeWithPlural,
            d: 'дзень',
            dd: be__relativeTimeWithPlural,
            M: 'месяц',
            MM: be__relativeTimeWithPlural,
            y: 'год',
            yy: be__relativeTimeWithPlural
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM: function(input) {
            return /^(дня|вечара)$/.test(input);
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 4) {
                return 'ночы';
            } else if (hour < 12) {
                return 'раніцы';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечара';
            }
        },
        ordinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function(number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
                case 'D':
                    return number + '-га';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : bulgarian (bg)
    //! author : Krasen Borisov : https://github.com/kraz

    var bg = moment__default.defineLocale('bg', {
        months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort: 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
        weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[Днес в] LT',
            nextDay: '[Утре в] LT',
            nextWeek: 'dddd [в] LT',
            lastDay: '[Вчера в] LT',
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[В изминалата] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[В изминалия] dddd [в] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'след %s',
            past: 'преди %s',
            s: 'няколко секунди',
            m: 'минута',
            mm: '%d минути',
            h: 'час',
            hh: '%d часа',
            d: 'ден',
            dd: '%d дни',
            M: 'месец',
            MM: '%d месеца',
            y: 'година',
            yy: '%d години'
        },
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function(number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bengali (bn)
    //! author : Kaushik Gandhi : https://github.com/kaushikgandhi

    var bn__symbolMap = {
            '1': '১',
            '2': '২',
            '3': '৩',
            '4': '৪',
            '5': '৫',
            '6': '৬',
            '7': '৭',
            '8': '৮',
            '9': '৯',
            '0': '০'
        },
        bn__numberMap = {
            '১': '1',
            '২': '2',
            '৩': '3',
            '৪': '4',
            '৫': '5',
            '৬': '6',
            '৭': '7',
            '৮': '8',
            '৯': '9',
            '০': '0'
        };

    var bn = moment__default.defineLocale('bn', {
        months: 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
        monthsShort: 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split('_'),
        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রবার_শনিবার'.split('_'),
        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্র_শনি'.split('_'),
        weekdaysMin: 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split('_'),
        longDateFormat: {
            LT: 'A h:mm সময়',
            LTS: 'A h:mm:ss সময়',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm সময়',
            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়'
        },
        calendar: {
            sameDay: '[আজ] LT',
            nextDay: '[আগামীকাল] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[গতকাল] LT',
            lastWeek: '[গত] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s পরে',
            past: '%s আগে',
            s: 'কয়েক সেকেন্ড',
            m: 'এক মিনিট',
            mm: '%d মিনিট',
            h: 'এক ঘন্টা',
            hh: '%d ঘন্টা',
            d: 'এক দিন',
            dd: '%d দিন',
            M: 'এক মাস',
            MM: '%d মাস',
            y: 'এক বছর',
            yy: '%d বছর'
        },
        preparse: function(string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function(match) {
                return bn__numberMap[match];
            });
        },
        postformat: function(string) {
            return string.replace(/\d/g, function(match) {
                return bn__symbolMap[match];
            });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
        isPM: function(input) {
            return /^(দুপুর|বিকাল|রাত)$/.test(input);
        },
        //Bengali is a vast language its spoken
        //in different forms in various parts of the world.
        //I have just generalized with most common one used
        meridiem: function(hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 10) {
                return 'সকাল';
            } else if (hour < 17) {
                return 'দুপুর';
            } else if (hour < 20) {
                return 'বিকাল';
            } else {
                return 'রাত';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : tibetan (bo)
    //! author : Thupten N. Chakrishar : https://github.com/vajradog

    var bo__symbolMap = {
            '1': '༡',
            '2': '༢',
            '3': '༣',
            '4': '༤',
            '5': '༥',
            '6': '༦',
            '7': '༧',
            '8': '༨',
            '9': '༩',
            '0': '༠'
        },
        bo__numberMap = {
            '༡': '1',
            '༢': '2',
            '༣': '3',
            '༤': '4',
            '༥': '5',
            '༦': '6',
            '༧': '7',
            '༨': '8',
            '༩': '9',
            '༠': '0'
        };

    var bo = moment__default.defineLocale('bo', {
        months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        monthsShort: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        weekdays: 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
        weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        weekdaysMin: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar: {
            sameDay: '[དི་རིང] LT',
            nextDay: '[སང་ཉིན] LT',
            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay: '[ཁ་སང] LT',
            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s ལ་',
            past: '%s སྔན་ལ',
            s: 'ལམ་སང',
            m: 'སྐར་མ་གཅིག',
            mm: '%d སྐར་མ',
            h: 'ཆུ་ཚོད་གཅིག',
            hh: '%d ཆུ་ཚོད',
            d: 'ཉིན་གཅིག',
            dd: '%d ཉིན་',
            M: 'ཟླ་བ་གཅིག',
            MM: '%d ཟླ་བ',
            y: 'ལོ་གཅིག',
            yy: '%d ལོ'
        },
        preparse: function(string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function(match) {
                return bo__numberMap[match];
            });
        },
        postformat: function(string) {
            return string.replace(/\d/g, function(match) {
                return bo__symbolMap[match];
            });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        isPM: function(input) {
            return /^(ཉིན་གུང|དགོང་དག|མཚན་མོ)$/.test(input);
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 4) {
                return 'མཚན་མོ';
            } else if (hour < 10) {
                return 'ཞོགས་ཀས';
            } else if (hour < 17) {
                return 'ཉིན་གུང';
            } else if (hour < 20) {
                return 'དགོང་དག';
            } else {
                return 'མཚན་མོ';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : breton (br)
    //! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            'mm': 'munutenn',
            'MM': 'miz',
            'dd': 'devezh'
        };
        return number + ' ' + mutation(format[key], number);
    }

    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return number + ' bloaz';
            default:
                return number + ' vloaz';
        }
    }

    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }

    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }

    function softMutation(text) {
        var mutationTable = {
            'm': 'v',
            'b': 'v',
            'd': 'z'
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var br = moment__default.defineLocale('br', {
        months: 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
        monthsShort: 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays: 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        longDateFormat: {
            LT: 'h[e]mm A',
            LTS: 'h[e]mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D [a viz] MMMM YYYY',
            LLL: 'D [a viz] MMMM YYYY h[e]mm A',
            LLLL: 'dddd, D [a viz] MMMM YYYY h[e]mm A'
        },
        calendar: {
            sameDay: '[Hiziv da] LT',
            nextDay: '[Warc\'hoazh da] LT',
            nextWeek: 'dddd [da] LT',
            lastDay: '[Dec\'h da] LT',
            lastWeek: 'dddd [paset da] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'a-benn %s',
            past: '%s \'zo',
            s: 'un nebeud segondennoù',
            m: 'ur vunutenn',
            mm: relativeTimeWithMutation,
            h: 'un eur',
            hh: '%d eur',
            d: 'un devezh',
            dd: relativeTimeWithMutation,
            M: 'ur miz',
            MM: relativeTimeWithMutation,
            y: 'ur bloaz',
            yy: specialMutationForYears
        },
        ordinalParse: /\d{1,2}(añ|vet)/,
        ordinal: function(number) {
            var output = (number === 1) ? 'añ' : 'vet';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : bosnian (bs)
    //! author : Nedim Cholich : https://github.com/frontyard
    //! based on (hr) translation by Bojan Marković

    function bs__translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var bs = moment__default.defineLocale('bs', {
        months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            m: bs__translate,
            mm: bs__translate,
            h: bs__translate,
            hh: bs__translate,
            d: 'dan',
            dd: bs__translate,
            M: 'mjesec',
            MM: bs__translate,
            y: 'godinu',
            yy: bs__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : catalan (ca)
    //! author : Juan G. Hurtado : https://github.com/juanghurtado

    var ca = moment__default.defineLocale('ca', {
        months: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
        monthsShort: 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
        weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: function() {
                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextDay: function() {
                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextWeek: function() {
                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastDay: function() {
                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastWeek: function() {
                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'en %s',
            past: 'fa %s',
            s: 'uns segons',
            m: 'un minut',
            mm: '%d minuts',
            h: 'una hora',
            hh: '%d hores',
            d: 'un dia',
            dd: '%d dies',
            M: 'un mes',
            MM: '%d mesos',
            y: 'un any',
            yy: '%d anys'
        },
        ordinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function(number, period) {
            var output = (number === 1) ? 'r' :
                (number === 2) ? 'n' :
                (number === 3) ? 'r' :
                (number === 4) ? 't' : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : czech (cs)
    //! author : petrbela : https://github.com/petrbela

    var cs__months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
        cs__monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');

    function cs__plural(n) {
        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
    }

    function cs__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (cs__plural(number) ? 'minuty' : 'minut');
                } else {
                    return result + 'minutami';
                }
                break;
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (cs__plural(number) ? 'hodiny' : 'hodin');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd': // a day / in a day / a day ago
                return (withoutSuffix || isFuture) ? 'den' : 'dnem';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (cs__plural(number) ? 'dny' : 'dní');
                } else {
                    return result + 'dny';
                }
                break;
            case 'M': // a month / in a month / a month ago
                return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (cs__plural(number) ? 'měsíce' : 'měsíců');
                } else {
                    return result + 'měsíci';
                }
                break;
            case 'y': // a year / in a year / a year ago
                return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (cs__plural(number) ? 'roky' : 'let');
                } else {
                    return result + 'lety';
                }
                break;
        }
    }

    var cs = moment__default.defineLocale('cs', {
        months: cs__months,
        monthsShort: cs__monthsShort,
        monthsParse: (function(months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(cs__months, cs__monthsShort)),
        shortMonthsParse: (function(monthsShort) {
            var i, _shortMonthsParse = [];
            for (i = 0; i < 12; i++) {
                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
            }
            return _shortMonthsParse;
        }(cs__monthsShort)),
        longMonthsParse: (function(months) {
            var i, _longMonthsParse = [];
            for (i = 0; i < 12; i++) {
                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
            }
            return _longMonthsParse;
        }(cs__months)),
        weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
        weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),
        weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[v neděli v] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [v] LT';
                    case 3:
                        return '[ve středu v] LT';
                    case 4:
                        return '[ve čtvrtek v] LT';
                    case 5:
                        return '[v pátek v] LT';
                    case 6:
                        return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[minulou neděli v] LT';
                    case 1:
                    case 2:
                        return '[minulé] dddd [v] LT';
                    case 3:
                        return '[minulou středu v] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [v] LT';
                    case 6:
                        return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'před %s',
            s: cs__translate,
            m: cs__translate,
            mm: cs__translate,
            h: cs__translate,
            hh: cs__translate,
            d: cs__translate,
            dd: cs__translate,
            M: cs__translate,
            MM: cs__translate,
            y: cs__translate,
            yy: cs__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : chuvash (cv)
    //! author : Anatoly Mironov : https://github.com/mirontoli

    var cv = moment__default.defineLocale('cv', {
        months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
        monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
        weekdays: 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
        weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
        weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
        },
        calendar: {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L'
        },
        relativeTime: {
            future: function(output) {
                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
                return output + affix;
            },
            past: '%s каялла',
            s: 'пӗр-ик ҫеккунт',
            m: 'пӗр минут',
            mm: '%d минут',
            h: 'пӗр сехет',
            hh: '%d сехет',
            d: 'пӗр кун',
            dd: '%d кун',
            M: 'пӗр уйӑх',
            MM: '%d уйӑх',
            y: 'пӗр ҫул',
            yy: '%d ҫул'
        },
        ordinalParse: /\d{1,2}-мӗш/,
        ordinal: '%d-мӗш',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Welsh (cy)
    //! author : Robert Allen

    var cy = moment__default.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd'
        },
        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function(number) {
            var b = number,
                output = '',
                lookup = [
                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
                ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : danish (da)
    //! author : Ulrik Nielsen : https://github.com/mrbase

    var da = moment__default.defineLocale('da', {
        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd [d.] D. MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[I dag kl.] LT',
            nextDay: '[I morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[I går kl.] LT',
            lastWeek: '[sidste] dddd [kl] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'få sekunder',
            m: 'et minut',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dage',
            M: 'en måned',
            MM: '%d måneder',
            y: 'et år',
            yy: '%d år'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : austrian german (de-at)
    //! author : lluchs : https://github.com/lluchs
    //! author: Menelion Elensúle: https://github.com/Oire
    //! author : Martin Groller : https://github.com/MadMG
    //! author : Mikolaj Dadela : https://github.com/mik01aj

    function de_at__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de_at = moment__default.defineLocale('de-at', {
        months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            m: de_at__processRelativeTime,
            mm: '%d Minuten',
            h: de_at__processRelativeTime,
            hh: '%d Stunden',
            d: de_at__processRelativeTime,
            dd: de_at__processRelativeTime,
            M: de_at__processRelativeTime,
            MM: de_at__processRelativeTime,
            y: de_at__processRelativeTime,
            yy: de_at__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : german (de)
    //! author : lluchs : https://github.com/lluchs
    //! author: Menelion Elensúle: https://github.com/Oire
    //! author : Mikolaj Dadela : https://github.com/mik01aj

    function de__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = moment__default.defineLocale('de', {
        months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            m: de__processRelativeTime,
            mm: '%d Minuten',
            h: de__processRelativeTime,
            hh: '%d Stunden',
            d: de__processRelativeTime,
            dd: de__processRelativeTime,
            M: de__processRelativeTime,
            MM: de__processRelativeTime,
            y: de__processRelativeTime,
            yy: de__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : dhivehi (dv)
    //! author : Jawish Hameed : https://github.com/jawish

    var dv__months = [
            'ޖެނުއަރީ',
            'ފެބްރުއަރީ',
            'މާރިޗު',
            'އޭޕްރީލު',
            'މޭ',
            'ޖޫން',
            'ޖުލައި',
            'އޯގަސްޓު',
            'ސެޕްޓެމްބަރު',
            'އޮކްޓޯބަރު',
            'ނޮވެމްބަރު',
            'ޑިސެމްބަރު'
        ],
        dv__weekdays = [
            'އާދިއްތަ',
            'ހޯމަ',
            'އަންގާރަ',
            'ބުދަ',
            'ބުރާސްފަތި',
            'ހުކުރު',
            'ހޮނިހިރު'
        ];

    var dv = moment__default.defineLocale('dv', {
        months: dv__months,
        monthsShort: dv__months,
        weekdays: dv__weekdays,
        weekdaysShort: dv__weekdays,
        weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
        longDateFormat: {

            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/M/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /މކ|މފ/,
        isPM: function(input) {
            return '' === input;
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 12) {
                return 'މކ';
            } else {
                return 'މފ';
            }
        },
        calendar: {
            sameDay: '[މިއަދު] LT',
            nextDay: '[މާދަމާ] LT',
            nextWeek: 'dddd LT',
            lastDay: '[އިއްޔެ] LT',
            lastWeek: '[ފާއިތުވި] dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'ތެރޭގައި %s',
            past: 'ކުރިން %s',
            s: 'ސިކުންތުކޮޅެއް',
            m: 'މިނިޓެއް',
            mm: 'މިނިޓު %d',
            h: 'ގަޑިއިރެއް',
            hh: 'ގަޑިއިރު %d',
            d: 'ދުވަހެއް',
            dd: 'ދުވަސް %d',
            M: 'މަހެއް',
            MM: 'މަސް %d',
            y: 'އަހަރެއް',
            yy: 'އަހަރު %d'
        },
        preparse: function(string) {
            return string.replace(/،/g, ',');
        },
        postformat: function(string) {
            return string.replace(/,/g, '،');
        },
        week: {
            dow: 7, // Sunday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : modern greek (el)
    //! author : Aggelos Karalias : https://github.com/mehiel

    var el = moment__default.defineLocale('el', {
        monthsNominativeEl: 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
        monthsGenitiveEl: 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
        months: function(momentToFormat, format) {
            if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
        weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
        weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
        weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
        meridiem: function(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        isPM: function(input) {
            return ((input + '').toLowerCase()[0] === 'μ');
        },
        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendarEl: {
            sameDay: '[Σήμερα {}] LT',
            nextDay: '[Αύριο {}] LT',
            nextWeek: 'dddd [{}] LT',
            lastDay: '[Χθες {}] LT',
            lastWeek: function() {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse: 'L'
        },
        calendar: function(key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (isFunction(output)) {
                output = output.apply(mom);
            }
            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
        },
        relativeTime: {
            future: 'σε %s',
            past: '%s πριν',
            s: 'λίγα δευτερόλεπτα',
            m: 'ένα λεπτό',
            mm: '%d λεπτά',
            h: 'μία ώρα',
            hh: '%d ώρες',
            d: 'μία μέρα',
            dd: '%d μέρες',
            M: 'ένας μήνας',
            MM: '%d μήνες',
            y: 'ένας χρόνος',
            yy: '%d χρόνια'
        },
        ordinalParse: /\d{1,2}η/,
        ordinal: '%dη',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : australian english (en-au)

    var en_au = moment__default.defineLocale('en-au', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : canadian english (en-ca)
    //! author : Jonathan Abourbih : https://github.com/jonbca

    var en_ca = moment__default.defineLocale('en-ca', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM, YYYY',
            LLL: 'D MMMM, YYYY h:mm A',
            LLLL: 'dddd, D MMMM, YYYY h:mm A'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    //! moment.js locale configuration
    //! locale : great britain english (en-gb)
    //! author : Chris Gedrim : https://github.com/chrisgedrim

    var en_gb = moment__default.defineLocale('en-gb', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Irish english (en-ie)
    //! author : Chris Cartlidge : https://github.com/chriscartlidge

    var en_ie = moment__default.defineLocale('en-ie', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : New Zealand english (en-nz)

    var en_nz = moment__default.defineLocale('en-nz', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : esperanto (eo)
    //! author : Colin Dean : https://github.com/colindean
    //! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
    //!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

    var eo = moment__default.defineLocale('eo', {
        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
        weekdays: 'Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato'.split('_'),
        weekdaysShort: 'Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Ĵa_Ve_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D[-an de] MMMM, YYYY',
            LLL: 'D[-an de] MMMM, YYYY HH:mm',
            LLLL: 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function(input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem: function(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar: {
            sameDay: '[Hodiaŭ je] LT',
            nextDay: '[Morgaŭ je] LT',
            nextWeek: 'dddd [je] LT',
            lastDay: '[Hieraŭ je] LT',
            lastWeek: '[pasinta] dddd [je] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'je %s',
            past: 'antaŭ %s',
            s: 'sekundoj',
            m: 'minuto',
            mm: '%d minutoj',
            h: 'horo',
            hh: '%d horoj',
            d: 'tago', //ne 'diurno', ĉar estas uzita por proksimumo
            dd: '%d tagoj',
            M: 'monato',
            MM: '%d monatoj',
            y: 'jaro',
            yy: '%d jaroj'
        },
        ordinalParse: /\d{1,2}a/,
        ordinal: '%da',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : spanish (es)
    //! author : Julio Napurí : https://github.com/julionc

    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
        es__monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var es = moment__default.defineLocale('es', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort: function(m, format) {
            if (/-MMM-/.test(format)) {
                return es__monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'
        },
        calendar: {
            sameDay: function() {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay: function() {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek: function() {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay: function() {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek: function() {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un año',
            yy: '%d años'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : estonian (et)
    //! author : Henry Kehlmann : https://github.com/madhenry
    //! improvements : Illimar Tambek : https://github.com/ragulka

    function et__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            'm': ['ühe minuti', 'üks minut'],
            'mm': [number + ' minuti', number + ' minutit'],
            'h': ['ühe tunni', 'tund aega', 'üks tund'],
            'hh': [number + ' tunni', number + ' tundi'],
            'd': ['ühe päeva', 'üks päev'],
            'M': ['kuu aja', 'kuu aega', 'üks kuu'],
            'MM': [number + ' kuu', number + ' kuud'],
            'y': ['ühe aasta', 'aasta', 'üks aasta'],
            'yy': [number + ' aasta', number + ' aastat']
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = moment__default.defineLocale('et', {
        months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
        monthsShort: 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays: 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[Täna,] LT',
            nextDay: '[Homme,] LT',
            nextWeek: '[Järgmine] dddd LT',
            lastDay: '[Eile,] LT',
            lastWeek: '[Eelmine] dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s pärast',
            past: '%s tagasi',
            s: et__processRelativeTime,
            m: et__processRelativeTime,
            mm: et__processRelativeTime,
            h: et__processRelativeTime,
            hh: et__processRelativeTime,
            d: et__processRelativeTime,
            dd: '%d päeva',
            M: et__processRelativeTime,
            MM: et__processRelativeTime,
            y: et__processRelativeTime,
            yy: et__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : euskara (eu)
    //! author : Eneko Illarramendi : https://github.com/eillarra

    var eu = moment__default.defineLocale('eu', {
        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
        monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
        weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY[ko] MMMM[ren] D[a]',
            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l: 'YYYY-M-D',
            ll: 'YYYY[ko] MMM D[a]',
            lll: 'YYYY[ko] MMM D[a] HH:mm',
            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm'
        },
        calendar: {
            sameDay: '[gaur] LT[etan]',
            nextDay: '[bihar] LT[etan]',
            nextWeek: 'dddd LT[etan]',
            lastDay: '[atzo] LT[etan]',
            lastWeek: '[aurreko] dddd LT[etan]',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s barru',
            past: 'duela %s',
            s: 'segundo batzuk',
            m: 'minutu bat',
            mm: '%d minutu',
            h: 'ordu bat',
            hh: '%d ordu',
            d: 'egun bat',
            dd: '%d egun',
            M: 'hilabete bat',
            MM: '%d hilabete',
            y: 'urte bat',
            yy: '%d urte'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Persian (fa)
    //! author : Ebrahim Byagowi : https://github.com/ebraminio

    var fa__symbolMap = {
            '1': '۱',
            '2': '۲',
            '3': '۳',
            '4': '۴',
            '5': '۵',
            '6': '۶',
            '7': '۷',
            '8': '۸',
            '9': '۹',
            '0': '۰'
        },
        fa__numberMap = {
            '۱': '1',
            '۲': '2',
            '۳': '3',
            '۴': '4',
            '۵': '5',
            '۶': '6',
            '۷': '7',
            '۸': '8',
            '۹': '9',
            '۰': '0'
        };

    var fa = moment__default.defineLocale('fa', {
        months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        weekdays: 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysShort: 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function(input) {
            return /بعد از ظهر/.test(input);
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 12) {
                return 'قبل از ظهر';
            } else {
                return 'بعد از ظهر';
            }
        },
        calendar: {
            sameDay: '[امروز ساعت] LT',
            nextDay: '[فردا ساعت] LT',
            nextWeek: 'dddd [ساعت] LT',
            lastDay: '[دیروز ساعت] LT',
            lastWeek: 'dddd [پیش] [ساعت] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'در %s',
            past: '%s پیش',
            s: 'چندین ثانیه',
            m: 'یک دقیقه',
            mm: '%d دقیقه',
            h: 'یک ساعت',
            hh: '%d ساعت',
            d: 'یک روز',
            dd: '%d روز',
            M: 'یک ماه',
            MM: '%d ماه',
            y: 'یک سال',
            yy: '%d سال'
        },
        preparse: function(string) {
            return string.replace(/[۰-۹]/g, function(match) {
                return fa__numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function(string) {
            return string.replace(/\d/g, function(match) {
                return fa__symbolMap[match];
            }).replace(/,/g, '،');
        },
        ordinalParse: /\d{1,2}م/,
        ordinal: '%dم',
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : finnish (fi)
    //! author : Tarmo Aidantausta : https://github.com/bleadof

    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
        numbersFuture = [
            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
            numbersPast[7], numbersPast[8], numbersPast[9]
        ];

    function fi__translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
            case 's':
                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'm':
                return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
                result = isFuture ? 'minuutin' : 'minuuttia';
                break;
            case 'h':
                return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
                result = isFuture ? 'tunnin' : 'tuntia';
                break;
            case 'd':
                return isFuture ? 'päivän' : 'päivä';
            case 'dd':
                result = isFuture ? 'päivän' : 'päivää';
                break;
            case 'M':
                return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
                result = isFuture ? 'kuukauden' : 'kuukautta';
                break;
            case 'y':
                return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
                result = isFuture ? 'vuoden' : 'vuotta';
                break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }

    function verbalNumber(number, isFuture) {
        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
    }

    var fi = moment__default.defineLocale('fi', {
        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
        monthsShort: 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
        weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM[ta] YYYY',
            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l: 'D.M.YYYY',
            ll: 'Do MMM YYYY',
            lll: 'Do MMM YYYY, [klo] HH.mm',
            llll: 'ddd, Do MMM YYYY, [klo] HH.mm'
        },
        calendar: {
            sameDay: '[tänään] [klo] LT',
            nextDay: '[huomenna] [klo] LT',
            nextWeek: 'dddd [klo] LT',
            lastDay: '[eilen] [klo] LT',
            lastWeek: '[viime] dddd[na] [klo] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s päästä',
            past: '%s sitten',
            s: fi__translate,
            m: fi__translate,
            mm: fi__translate,
            h: fi__translate,
            hh: fi__translate,
            d: fi__translate,
            dd: fi__translate,
            M: fi__translate,
            MM: fi__translate,
            y: fi__translate,
            yy: fi__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : faroese (fo)
    //! author : Ragnar Johannesen : https://github.com/ragnar123

    var fo = moment__default.defineLocale('fo', {
        months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
        weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
        weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D. MMMM, YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Í dag kl.] LT',
            nextDay: '[Í morgin kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[Í gjár kl.] LT',
            lastWeek: '[síðstu] dddd [kl] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'um %s',
            past: '%s síðani',
            s: 'fá sekund',
            m: 'ein minutt',
            mm: '%d minuttir',
            h: 'ein tími',
            hh: '%d tímar',
            d: 'ein dagur',
            dd: '%d dagar',
            M: 'ein mánaði',
            MM: '%d mánaðir',
            y: 'eitt ár',
            yy: '%d ár'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : canadian french (fr-ca)
    //! author : Jonathan Abourbih : https://github.com/jonbca

    var fr_ca = moment__default.defineLocale('fr-ca', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Aujourd\'hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
        },
        ordinalParse: /\d{1,2}(er|e)/,
        ordinal: function(number) {
            return number + (number === 1 ? 'er' : 'e');
        }
    });

    //! moment.js locale configuration
    //! locale : swiss french (fr)
    //! author : Gaspard Bucher : https://github.com/gaspard

    var fr_ch = moment__default.defineLocale('fr-ch', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Aujourd\'hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
        },
        ordinalParse: /\d{1,2}(er|e)/,
        ordinal: function(number) {
            return number + (number === 1 ? 'er' : 'e');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : french (fr)
    //! author : John Fischer : https://github.com/jfroffice

    var fr = moment__default.defineLocale('fr', {
        months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Aujourd\'hui à] LT',
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
        },
        ordinalParse: /\d{1,2}(er|)/,
        ordinal: function(number) {
            return number + (number === 1 ? 'er' : '');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : frisian (fy)
    //! author : Robin van der Vliet : https://github.com/robin0van0der0v

    var fy__monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
        fy__monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

    var fy = moment__default.defineLocale('fy', {
        months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
        monthsShort: function(m, format) {
            if (/-MMM-/.test(format)) {
                return fy__monthsShortWithoutDots[m.month()];
            } else {
                return fy__monthsShortWithDots[m.month()];
            }
        },
        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'oer %s',
            past: '%s lyn',
            s: 'in pear sekonden',
            m: 'ien minút',
            mm: '%d minuten',
            h: 'ien oere',
            hh: '%d oeren',
            d: 'ien dei',
            dd: '%d dagen',
            M: 'ien moanne',
            MM: '%d moannen',
            y: 'ien jier',
            yy: '%d jierren'
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : great britain scottish gealic (gd)
    //! author : Jon Ashdown : https://github.com/jonashdown

    var gd__months = [
        'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
    ];

    var gd__monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

    var gd__weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

    var gd = moment__default.defineLocale('gd', {
        months: gd__months,
        monthsShort: gd__monthsShort,
        monthsParseExact: true,
        weekdays: gd__weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[An-diugh aig] LT',
            nextDay: '[A-màireach aig] LT',
            nextWeek: 'dddd [aig] LT',
            lastDay: '[An-dè aig] LT',
            lastWeek: 'dddd [seo chaidh] [aig] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'ann an %s',
            past: 'bho chionn %s',
            s: 'beagan diogan',
            m: 'mionaid',
            mm: '%d mionaidean',
            h: 'uair',
            hh: '%d uairean',
            d: 'latha',
            dd: '%d latha',
            M: 'mìos',
            MM: '%d mìosan',
            y: 'bliadhna',
            yy: '%d bliadhna'
        },
        ordinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function(number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : galician (gl)
    //! author : Juan G. Hurtado : https://github.com/juanghurtado

    var gl = moment__default.defineLocale('gl', {
        months: 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),
        monthsShort: 'Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),
        weekdays: 'Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado'.split('_'),
        weekdaysShort: 'Dom._Lun._Mar._Mér._Xov._Ven._Sáb.'.split('_'),
        weekdaysMin: 'Do_Lu_Ma_Mé_Xo_Ve_Sá'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: function() {
                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextDay: function() {
                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextWeek: function() {
                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            lastDay: function() {
                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
            },
            lastWeek: function() {
                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: function(str) {
                if (str === 'uns segundos') {
                    return 'nuns segundos';
                }
                return 'en ' + str;
            },
            past: 'hai %s',
            s: 'uns segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'unha hora',
            hh: '%d horas',
            d: 'un día',
            dd: '%d días',
            M: 'un mes',
            MM: '%d meses',
            y: 'un ano',
            yy: '%d anos'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Hebrew (he)
    //! author : Tomer Cohen : https://github.com/tomer
    //! author : Moshe Simantov : https://github.com/DevelopmentIL
    //! author : Tal Ater : https://github.com/TalAter

    var he = moment__default.defineLocale('he', {
        months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
        monthsShort: 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
        weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
        weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
        weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [ב]MMMM YYYY',
            LLL: 'D [ב]MMMM YYYY HH:mm',
            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',
            l: 'D/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[היום ב־]LT',
            nextDay: '[מחר ב־]LT',
            nextWeek: 'dddd [בשעה] LT',
            lastDay: '[אתמול ב־]LT',
            lastWeek: '[ביום] dddd [האחרון בשעה] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'בעוד %s',
            past: 'לפני %s',
            s: 'מספר שניות',
            m: 'דקה',
            mm: '%d דקות',
            h: 'שעה',
            hh: function(number) {
                if (number === 2) {
                    return 'שעתיים';
                }
                return number + ' שעות';
            },
            d: 'יום',
            dd: function(number) {
                if (number === 2) {
                    return 'יומיים';
                }
                return number + ' ימים';
            },
            M: 'חודש',
            MM: function(number) {
                if (number === 2) {
                    return 'חודשיים';
                }
                return number + ' חודשים';
            },
            y: 'שנה',
            yy: function(number) {
                if (number === 2) {
                    return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' שנה';
                }
                return number + ' שנים';
            }
        }
    });

    //! moment.js locale configuration
    //! locale : hindi (hi)
    //! author : Mayank Singhal : https://github.com/mayanksinghal

    var hi__symbolMap = {
            '1': '१',
            '2': '२',
            '3': '३',
            '4': '४',
            '5': '५',
            '6': '६',
            '7': '७',
            '8': '८',
            '9': '९',
            '0': '०'
        },
        hi__numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0'
        };

    var hi = moment__default.defineLocale('hi', {
        months: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
        monthsShort: 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
        weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm बजे',
            LTS: 'A h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे'
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[कल] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[कल] LT',
            lastWeek: '[पिछले] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s में',
            past: '%s पहले',
            s: 'कुछ ही क्षण',
            m: 'एक मिनट',
            mm: '%d मिनट',
            h: 'एक घंटा',
            hh: '%d घंटे',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महीने',
            MM: '%d महीने',
            y: 'एक वर्ष',
            yy: '%d वर्ष'
        },
        preparse: function(string) {
            return string.replace(/[१२३४५६७८९०]/g, function(match) {
                return hi__numberMap[match];
            });
        },
        postformat: function(string) {
            return string.replace(/\d/g, function(match) {
                return hi__symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour: function(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
                return hour;
            } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
                return hour + 12;
            }
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 4) {
                return 'रात';
            } else if (hour < 10) {
                return 'सुबह';
            } else if (hour < 17) {
                return 'दोपहर';
            } else if (hour < 20) {
                return 'शाम';
            } else {
                return 'रात';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : hrvatski (hr)
    //! author : Bojan Marković : https://github.com/bmarkovic

    function hr__translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var hr = moment__default.defineLocale('hr', {
        months: {
            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
        },
        monthsShort: 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[jučer u] LT',
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            m: hr__translate,
            mm: hr__translate,
            h: hr__translate,
            hh: hr__translate,
            d: 'dan',
            dd: hr__translate,
            M: 'mjesec',
            MM: hr__translate,
            y: 'godinu',
            yy: hr__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : hungarian (hu)
    //! author : Adam Brunner : https://github.com/adambrunner

    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');

    function hu__translate(number, withoutSuffix, key, isFuture) {
        var num = number,
            suffix;
        switch (key) {
            case 's':
                return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
            case 'm':
                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'hh':
                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'd':
                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'MM':
                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'y':
                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
            case 'yy':
                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }
        return '';
    }

    function week(isFuture) {
        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
    }

    var hu = moment__default.defineLocale('hu', {
        months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
        monthsShort: 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
        weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
        weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY. MMMM D.',
            LLL: 'YYYY. MMMM D. H:mm',
            LLLL: 'YYYY. MMMM D., dddd H:mm'
        },
        meridiemParse: /de|du/i,
        isPM: function(input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem: function(hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar: {
            sameDay: '[ma] LT[-kor]',
            nextDay: '[holnap] LT[-kor]',
            nextWeek: function() {
                return week.call(this, true);
            },
            lastDay: '[tegnap] LT[-kor]',
            lastWeek: function() {
                return week.call(this, false);
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s múlva',
            past: '%s',
            s: hu__translate,
            m: hu__translate,
            mm: hu__translate,
            h: hu__translate,
            hh: hu__translate,
            d: hu__translate,
            dd: hu__translate,
            M: hu__translate,
            MM: hu__translate,
            y: hu__translate,
            yy: hu__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Armenian (hy-am)
    //! author : Armendarabyan : https://github.com/armendarabyan

    var hy_am = moment__default.defineLocale('hy-am', {
        months: {
            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
        },
        monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
        weekdays: 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
        weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY թ.',
            LLL: 'D MMMM YYYY թ., HH:mm',
            LLLL: 'dddd, D MMMM YYYY թ., HH:mm'
        },
        calendar: {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function() {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function() {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s հետո',
            past: '%s առաջ',
            s: 'մի քանի վայրկյան',
            m: 'րոպե',
            mm: '%d րոպե',
            h: 'ժամ',
            hh: '%d ժամ',
            d: 'օր',
            dd: '%d օր',
            M: 'ամիս',
            MM: '%d ամիս',
            y: 'տարի',
            yy: '%d տարի'
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function(input) {
            return /^(ցերեկվա|երեկոյան)$/.test(input);
        },
        meridiem: function(hour) {
            if (hour < 4) {
                return 'գիշերվա';
            } else if (hour < 12) {
                return 'առավոտվա';
            } else if (hour < 17) {
                return 'ցերեկվա';
            } else {
                return 'երեկոյան';
            }
        },
        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function(number, period) {
            switch (period) {
                case 'DDD':
                case 'w':
                case 'W':
                case 'DDDo':
                    if (number === 1) {
                        return number + '-ին';
                    }
                    return number + '-րդ';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bahasa Indonesia (id)
    //! author : Mohammad Satrio Utomo : https://github.com/tyok
    //! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

    var id = moment__default.defineLocale('id', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour: function(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function(hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Besok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kemarin pukul] LT',
            lastWeek: 'dddd [lalu pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lalu',
            s: 'beberapa detik',
            m: 'semenit',
            mm: '%d menit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : icelandic (is)
    //! author : Hinrik Örn Sigurðsson : https://github.com/hinrik

    function is__plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }

    function is__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
            case 'm':
                return withoutSuffix ? 'mínúta' : 'mínútu';
            case 'mm':
                if (is__plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
                } else if (withoutSuffix) {
                    return result + 'mínúta';
                }
                return result + 'mínútu';
            case 'hh':
                if (is__plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
                }
                return result + 'klukkustund';
            case 'd':
                if (withoutSuffix) {
                    return 'dagur';
                }
                return isFuture ? 'dag' : 'degi';
            case 'dd':
                if (is__plural(number)) {
                    if (withoutSuffix) {
                        return result + 'dagar';
                    }
                    return result + (isFuture ? 'daga' : 'dögum');
                } else if (withoutSuffix) {
                    return result + 'dagur';
                }
                return result + (isFuture ? 'dag' : 'degi');
            case 'M':
                if (withoutSuffix) {
                    return 'mánuður';
                }
                return isFuture ? 'mánuð' : 'mánuði';
            case 'MM':
                if (is__plural(number)) {
                    if (withoutSuffix) {
                        return result + 'mánuðir';
                    }
                    return result + (isFuture ? 'mánuði' : 'mánuðum');
                } else if (withoutSuffix) {
                    return result + 'mánuður';
                }
                return result + (isFuture ? 'mánuð' : 'mánuði');
            case 'y':
                return withoutSuffix || isFuture ? 'ár' : 'ári';
            case 'yy':
                if (is__plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
                }
                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    var is = moment__default.defineLocale('is', {
        months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
        weekdays: 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
        weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
        weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm'
        },
        calendar: {
            sameDay: '[í dag kl.] LT',
            nextDay: '[á morgun kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[í gær kl.] LT',
            lastWeek: '[síðasta] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'eftir %s',
            past: 'fyrir %s síðan',
            s: is__translate,
            m: is__translate,
            mm: is__translate,
            h: 'klukkustund',
            hh: is__translate,
            d: is__translate,
            dd: is__translate,
            M: is__translate,
            MM: is__translate,
            y: is__translate,
            yy: is__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : italian (it)
    //! author : Lorenzo : https://github.com/aliem
    //! author: Mattia Larentis: https://github.com/nostalgiaz

    var it = moment__default.defineLocale('it', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato'.split('_'),
        weekdaysShort: 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
        weekdaysMin: 'Do_Lu_Ma_Me_Gi_Ve_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: function(s) {
                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past: '%s fa',
            s: 'alcuni secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: 'un\'ora',
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : japanese (ja)
    //! author : LI Long : https://github.com/baryon

    var ja = moment__default.defineLocale('ja', {
        months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
        weekdaysShort: '日_月_火_水_木_金_土'.split('_'),
        weekdaysMin: '日_月_火_水_木_金_土'.split('_'),
        longDateFormat: {
            LT: 'Ah時m分',
            LTS: 'Ah時m分s秒',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日Ah時m分',
            LLLL: 'YYYY年M月D日Ah時m分 dddd'
        },
        meridiemParse: /午前|午後/i,
        isPM: function(input) {
            return input === '午後';
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 12) {
                return '午前';
            } else {
                return '午後';
            }
        },
        calendar: {
            sameDay: '[今日] LT',
            nextDay: '[明日] LT',
            nextWeek: '[来週]dddd LT',
            lastDay: '[昨日] LT',
            lastWeek: '[前週]dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '数秒',
            m: '1分',
            mm: '%d分',
            h: '1時間',
            hh: '%d時間',
            d: '1日',
            dd: '%d日',
            M: '1ヶ月',
            MM: '%dヶ月',
            y: '1年',
            yy: '%d年'
        }
    });

    //! moment.js locale configuration
    //! locale : Boso Jowo (jv)
    //! author : Rony Lantip : https://github.com/lantip
    //! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

    var jv = moment__default.defineLocale('jv', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour: function(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem: function(hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar: {
            sameDay: '[Dinten puniko pukul] LT',
            nextDay: '[Mbenjang pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kala wingi pukul] LT',
            lastWeek: 'dddd [kepengker pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'wonten ing %s',
            past: '%s ingkang kepengker',
            s: 'sawetawis detik',
            m: 'setunggal menit',
            mm: '%d menit',
            h: 'setunggal jam',
            hh: '%d jam',
            d: 'sedinten',
            dd: '%d dinten',
            M: 'sewulan',
            MM: '%d wulan',
            y: 'setaun',
            yy: '%d taun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Georgian (ka)
    //! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

    var ka = moment__default.defineLocale('ka', {
        months: {
            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
        },
        monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
        weekdays: {
            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
            isFormat: /(წინა|შემდეგ)/
        },
        weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
        weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A'
        },
        calendar: {
            sameDay: '[დღეს] LT[-ზე]',
            nextDay: '[ხვალ] LT[-ზე]',
            lastDay: '[გუშინ] LT[-ზე]',
            nextWeek: '[შემდეგ] dddd LT[-ზე]',
            lastWeek: '[წინა] dddd LT-ზე',
            sameElse: 'L'
        },
        relativeTime: {
            future: function(s) {
                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                    s.replace(/ი$/, 'ში') :
                    s + 'ში';
            },
            past: function(s) {
                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                    return s.replace(/(ი|ე)$/, 'ის წინ');
                }
                if ((/წელი/).test(s)) {
                    return s.replace(/წელი$/, 'წლის წინ');
                }
            },
            s: 'რამდენიმე წამი',
            m: 'წუთი',
            mm: '%d წუთი',
            h: 'საათი',
            hh: '%d საათი',
            d: 'დღე',
            dd: '%d დღე',
            M: 'თვე',
            MM: '%d თვე',
            y: 'წელი',
            yy: '%d წელი'
        },
        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal: function(number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-ლი';
            }
            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
                return 'მე-' + number;
            }
            return number + '-ე';
        },
        week: {
            dow: 1,
            doy: 7
        }
    });

    //! moment.js locale configuration
    //! locale : kazakh (kk)
    //! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

    var kk__suffixes = {
        0: '-ші',
        1: '-ші',
        2: '-ші',
        3: '-ші',
        4: '-ші',
        5: '-ші',
        6: '-шы',
        7: '-ші',
        8: '-ші',
        9: '-шы',
        10: '-шы',
        20: '-шы',
        30: '-шы',
        40: '-шы',
        50: '-ші',
        60: '-шы',
        70: '-ші',
        80: '-ші',
        90: '-шы',
        100: '-ші'
    };

    var kk = moment__default.defineLocale('kk', {
        months: 'Қаңтар_Ақпан_Наурыз_Сәуір_Мамыр_Маусым_Шілде_Тамыз_Қыркүйек_Қазан_Қараша_Желтоқсан'.split('_'),
        monthsShort: 'Қаң_Ақп_Нау_Сәу_Мам_Мау_Шіл_Там_Қыр_Қаз_Қар_Жел'.split('_'),
        weekdays: 'Жексенбі_Дүйсенбі_Сейсенбі_Сәрсенбі_Бейсенбі_Жұма_Сенбі'.split('_'),
        weekdaysShort: 'Жек_Дүй_Сей_Сәр_Бей_Жұм_Сен'.split('_'),
        weekdaysMin: 'Жк_Дй_Сй_Ср_Бй_Жм_Сн'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Бүгін сағат] LT',
            nextDay: '[Ертең сағат] LT',
            nextWeek: 'dddd [сағат] LT',
            lastDay: '[Кеше сағат] LT',
            lastWeek: '[Өткен аптаның] dddd [сағат] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s ішінде',
            past: '%s бұрын',
            s: 'бірнеше секунд',
            m: 'бір минут',
            mm: '%d минут',
            h: 'бір сағат',
            hh: '%d сағат',
            d: 'бір күн',
            dd: '%d күн',
            M: 'бір ай',
            MM: '%d ай',
            y: 'бір жыл',
            yy: '%d жыл'
        },
        ordinalParse: /\d{1,2}-(ші|шы)/,
        ordinal: function(number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (kk__suffixes[number] || kk__suffixes[a] || kk__suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : khmer (km)
    //! author : Kruy Vanna : https://github.com/kruyvanna

    var km = moment__default.defineLocale('km', {
        months: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
        monthsShort: 'មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : korean (ko)
    //!
    //! authors
    //!
    //! - Kyungwook, Park : https://github.com/kyungw00k
    //! - Jeeeyul Lee <jeeeyul@gmail.com>

    var ko = moment__default.defineLocale('ko', {
        months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
        weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
        weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
        longDateFormat: {
            LT: 'A h시 m분',
            LTS: 'A h시 m분 s초',
            L: 'YYYY.MM.DD',
            LL: 'YYYY년 MMMM D일',
            LLL: 'YYYY년 MMMM D일 A h시 m분',
            LLLL: 'YYYY년 MMMM D일 dddd A h시 m분'
        },
        calendar: {
            sameDay: '오늘 LT',
            nextDay: '내일 LT',
            nextWeek: 'dddd LT',
            lastDay: '어제 LT',
            lastWeek: '지난주 dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s 후',
            past: '%s 전',
            s: '몇초',
            ss: '%d초',
            m: '일분',
            mm: '%d분',
            h: '한시간',
            hh: '%d시간',
            d: '하루',
            dd: '%d일',
            M: '한달',
            MM: '%d달',
            y: '일년',
            yy: '%d년'
        },
        ordinalParse: /\d{1,2}일/,
        ordinal: '%d일',
        meridiemParse: /오전|오후/,
        isPM: function(token) {
            return token === '오후';
        },
        meridiem: function(hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        }
    });

    //! moment.js locale configuration
    //! locale : Luxembourgish (lb)
    //! author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz

    function lb__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eng Minutt', 'enger Minutt'],
            'h': ['eng Stonn', 'enger Stonn'],
            'd': ['een Dag', 'engem Dag'],
            'M': ['ee Mount', 'engem Mount'],
            'y': ['ee Joer', 'engem Joer']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }

    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10,
                firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = moment__default.defineLocale('lb', {
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function() {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            }
        },
        relativeTime: {
            future: processFutureTime,
            past: processPastTime,
            s: 'e puer Sekonnen',
            m: lb__processRelativeTime,
            mm: '%d Minutten',
            h: lb__processRelativeTime,
            hh: '%d Stonnen',
            d: lb__processRelativeTime,
            dd: '%d Deeg',
            M: lb__processRelativeTime,
            MM: '%d Méint',
            y: lb__processRelativeTime,
            yy: '%d Joer'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : lao (lo)
    //! author : Ryan Hart : https://github.com/ryanhart2

    var lo = moment__default.defineLocale('lo', {
        months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
        monthsShort: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
        weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'ວັນdddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
        isPM: function(input) {
            return input === 'ຕອນແລງ';
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 12) {
                return 'ຕອນເຊົ້າ';
            } else {
                return 'ຕອນແລງ';
            }
        },
        calendar: {
            sameDay: '[ມື້ນີ້ເວລາ] LT',
            nextDay: '[ມື້ອື່ນເວລາ] LT',
            nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',
            lastDay: '[ມື້ວານນີ້ເວລາ] LT',
            lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'ອີກ %s',
            past: '%sຜ່ານມາ',
            s: 'ບໍ່ເທົ່າໃດວິນາທີ',
            m: '1 ນາທີ',
            mm: '%d ນາທີ',
            h: '1 ຊົ່ວໂມງ',
            hh: '%d ຊົ່ວໂມງ',
            d: '1 ມື້',
            dd: '%d ມື້',
            M: '1 ເດືອນ',
            MM: '%d ເດືອນ',
            y: '1 ປີ',
            yy: '%d ປີ'
        },
        ordinalParse: /(ທີ່)\d{1,2}/,
        ordinal: function(number) {
            return 'ທີ່' + number;
        }
    });

    //! moment.js locale configuration
    //! locale : Lithuanian (lt)
    //! author : Mindaugas Mozūras : https://github.com/mmozuras

    var lt__units = {
        'm': 'minutė_minutės_minutę',
        'mm': 'minutės_minučių_minutes',
        'h': 'valanda_valandos_valandą',
        'hh': 'valandos_valandų_valandas',
        'd': 'diena_dienos_dieną',
        'dd': 'dienos_dienų_dienas',
        'M': 'mėnuo_mėnesio_mėnesį',
        'MM': 'mėnesiai_mėnesių_mėnesius',
        'y': 'metai_metų_metus',
        'yy': 'metai_metų_metus'
    };

    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundės';
        } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
        }
    }

    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
    }

    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }

    function forms(key) {
        return lt__units[key].split('_');
    }

    function lt__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    var lt = moment__default.defineLocale('lt', {
        months: {
            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_')
        },
        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays: {
            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
            isFormat: /dddd HH:mm/
        },
        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
        weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY [m.] MMMM D [d.]',
            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l: 'YYYY-MM-DD',
            ll: 'YYYY [m.] MMMM D [d.]',
            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
        },
        calendar: {
            sameDay: '[Šiandien] LT',
            nextDay: '[Rytoj] LT',
            nextWeek: 'dddd LT',
            lastDay: '[Vakar] LT',
            lastWeek: '[Praėjusį] dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'po %s',
            past: 'prieš %s',
            s: translateSeconds,
            m: translateSingular,
            mm: lt__translate,
            h: translateSingular,
            hh: lt__translate,
            d: translateSingular,
            dd: lt__translate,
            M: translateSingular,
            MM: lt__translate,
            y: translateSingular,
            yy: lt__translate
        },
        ordinalParse: /\d{1,2}-oji/,
        ordinal: function(number) {
            return number + '-oji';
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : latvian (lv)
    //! author : Kristaps Karlsons : https://github.com/skakri
    //! author : Jānis Elmeris : https://github.com/JanisE

    var lv__units = {
        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'h': 'stundas_stundām_stunda_stundas'.split('_'),
        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
        'd': 'dienas_dienām_diena_dienas'.split('_'),
        'dd': 'dienas_dienām_diena_dienas'.split('_'),
        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'y': 'gada_gadiem_gads_gadi'.split('_'),
        'yy': 'gada_gadiem_gads_gadi'.split('_')
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function lv__format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
        }
    }

    function lv__relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + lv__format(lv__units[key], number, withoutSuffix);
    }

    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return lv__format(lv__units[key], number, withoutSuffix);
    }

    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
    }

    var lv = moment__default.defineLocale('lv', {
        months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY.',
            LL: 'YYYY. [gada] D. MMMM',
            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm'
        },
        calendar: {
            sameDay: '[Šodien pulksten] LT',
            nextDay: '[Rīt pulksten] LT',
            nextWeek: 'dddd [pulksten] LT',
            lastDay: '[Vakar pulksten] LT',
            lastWeek: '[Pagājušā] dddd [pulksten] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'pēc %s',
            past: 'pirms %s',
            s: relativeSeconds,
            m: relativeTimeWithSingular,
            mm: lv__relativeTimeWithPlural,
            h: relativeTimeWithSingular,
            hh: lv__relativeTimeWithPlural,
            d: relativeTimeWithSingular,
            dd: lv__relativeTimeWithPlural,
            M: relativeTimeWithSingular,
            MM: lv__relativeTimeWithPlural,
            y: relativeTimeWithSingular,
            yy: lv__relativeTimeWithPlural
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Montenegrin (me)
    //! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac

    var me__translator = {
        words: { //Different grammatical cases
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function(number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function(number, withoutSuffix, key) {
            var wordKey = me__translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + me__translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var me = moment__default.defineLocale('me', {
        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
        weekdays: ['nedjelja', 'ponedjeljak', 'utorak', 'srijeda', 'četvrtak', 'petak', 'subota'],
        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sri.', 'čet.', 'pet.', 'sub.'],
        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function() {
                var lastWeekDays = [
                    '[prošle] [nedjelje] [u] LT',
                    '[prošlog] [ponedjeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srijede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'nekoliko sekundi',
            m: me__translator.translate,
            mm: me__translator.translate,
            h: me__translator.translate,
            hh: me__translator.translate,
            d: 'dan',
            dd: me__translator.translate,
            M: 'mjesec',
            MM: me__translator.translate,
            y: 'godinu',
            yy: me__translator.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : macedonian (mk)
    //! author : Borislav Mickov : https://github.com/B0k0

    var mk = moment__default.defineLocale('mk', {
        months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
        weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
        weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
        weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[Денес во] LT',
            nextDay: '[Утре во] LT',
            nextWeek: '[Во] dddd [во] LT',
            lastDay: '[Вчера во] LT',
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Изминатата] dddd [во] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Изминатиот] dddd [во] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'после %s',
            past: 'пред %s',
            s: 'неколку секунди',
            m: 'минута',
            mm: '%d минути',
            h: 'час',
            hh: '%d часа',
            d: 'ден',
            dd: '%d дена',
            M: 'месец',
            MM: '%d месеци',
            y: 'година',
            yy: '%d години'
        },
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function(number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : malayalam (ml)
    //! author : Floyd Pink : https://github.com/floydpink

    var ml = moment__default.defineLocale('ml', {
        months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
        monthsShort: 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
        weekdays: 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
        weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
        weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm -നു',
            LTS: 'A h:mm:ss -നു',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm -നു',
            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു'
        },
        calendar: {
            sameDay: '[ഇന്ന്] LT',
            nextDay: '[നാളെ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ഇന്നലെ] LT',
            lastWeek: '[കഴിഞ്ഞ] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s കഴിഞ്ഞ്',
            past: '%s മുൻപ്',
            s: 'അൽപ നിമിഷങ്ങൾ',
            m: 'ഒരു മിനിറ്റ്',
            mm: '%d മിനിറ്റ്',
            h: 'ഒരു മണിക്കൂർ',
            hh: '%d മണിക്കൂർ',
            d: 'ഒരു ദിവസം',
            dd: '%d ദിവസം',
            M: 'ഒരു മാസം',
            MM: '%d മാസം',
            y: 'ഒരു വർഷം',
            yy: '%d വർഷം'
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        isPM: function(input) {
            return /^(ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി)$/.test(input);
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 4) {
                return 'രാത്രി';
            } else if (hour < 12) {
                return 'രാവിലെ';
            } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
                return 'വൈകുന്നേരം';
            } else {
                return 'രാത്രി';
            }
        }
    });

    //! moment.js locale configuration
    //! locale : Marathi (mr)
    //! author : Harshad Kale : https://github.com/kalehv
    //! author : Vivek Athalye : https://github.com/vnathalye

    var mr__symbolMap = {
            '1': '१',
            '2': '२',
            '3': '३',
            '4': '४',
            '5': '५',
            '6': '६',
            '7': '७',
            '8': '८',
            '9': '९',
            '0': '०'
        },
        mr__numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0'
        };

    function relativeTimeMr(number, withoutSuffix, string, isFuture) {
        var output = '';
        if (withoutSuffix) {
            switch (string) {
                case 's':
                    output = 'काही सेकंद';
                    break;
                case 'm':
                    output = 'एक मिनिट';
                    break;
                case 'mm':
                    output = '%d मिनिटे';
                    break;
                case 'h':
                    output = 'एक तास';
                    break;
                case 'hh':
                    output = '%d तास';
                    break;
                case 'd':
                    output = 'एक दिवस';
                    break;
                case 'dd':
                    output = '%d दिवस';
                    break;
                case 'M':
                    output = 'एक महिना';
                    break;
                case 'MM':
                    output = '%d महिने';
                    break;
                case 'y':
                    output = 'एक वर्ष';
                    break;
                case 'yy':
                    output = '%d वर्षे';
                    break;
            }
        } else {
            switch (string) {
                case 's':
                    output = 'काही सेकंदां';
                    break;
                case 'm':
                    output = 'एका मिनिटा';
                    break;
                case 'mm':
                    output = '%d मिनिटां';
                    break;
                case 'h':
                    output = 'एका तासा';
                    break;
                case 'hh':
                    output = '%d तासां';
                    break;
                case 'd':
                    output = 'एका दिवसा';
                    break;
                case 'dd':
                    output = '%d दिवसां';
                    break;
                case 'M':
                    output = 'एका महिन्या';
                    break;
                case 'MM':
                    output = '%d महिन्यां';
                    break;
                case 'y':
                    output = 'एका वर्षा';
                    break;
                case 'yy':
                    output = '%d वर्षां';
                    break;
            }
        }
        return output.replace(/%d/i, number);
    }

    var mr = moment__default.defineLocale('mr', {
        months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
        weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat: {
            LT: 'A h:mm वाजता',
            LTS: 'A h:mm:ss वाजता',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm वाजता',
            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता'
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[उद्या] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sमध्ये',
            past: '%sपूर्वी',
            s: relativeTimeMr,
            m: relativeTimeMr,
            mm: relativeTimeMr,
            h: relativeTimeMr,
            hh: relativeTimeMr,
            d: relativeTimeMr,
            dd: relativeTimeMr,
            M: relativeTimeMr,
            MM: relativeTimeMr,
            y: relativeTimeMr,
            yy: relativeTimeMr
        },
        preparse: function(string) {
            return string.replace(/[१२३४५६७८९०]/g, function(match) {
                return mr__numberMap[match];
            });
        },
        postformat: function(string) {
            return string.replace(/\d/g, function(match) {
                return mr__symbolMap[match];
            });
        },
        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
        meridiemHour: function(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात्री') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळी') {
                return hour;
            } else if (meridiem === 'दुपारी') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'सायंकाळी') {
                return hour + 12;
            }
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 4) {
                return 'रात्री';
            } else if (hour < 10) {
                return 'सकाळी';
            } else if (hour < 17) {
                return 'दुपारी';
            } else if (hour < 20) {
                return 'सायंकाळी';
            } else {
                return 'रात्री';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bahasa Malaysia (ms-MY)
    //! author : Weldan Jamili : https://github.com/weldan

    var ms_my = moment__default.defineLocale('ms-my', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function(hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Bahasa Malaysia (ms-MY)
    //! author : Weldan Jamili : https://github.com/weldan

    var locale_ms = moment__default.defineLocale('ms', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function(hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Burmese (my)
    //! author : Squar team, mysquar.com

    var my__symbolMap = {
            '1': '၁',
            '2': '၂',
            '3': '၃',
            '4': '၄',
            '5': '၅',
            '6': '၆',
            '7': '၇',
            '8': '၈',
            '9': '၉',
            '0': '၀'
        },
        my__numberMap = {
            '၁': '1',
            '၂': '2',
            '၃': '3',
            '၄': '4',
            '၅': '5',
            '၆': '6',
            '၇': '7',
            '၈': '8',
            '၉': '9',
            '၀': '0'
        };

    var my = moment__default.defineLocale('my', {
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်'
        },
        preparse: function(string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function(match) {
                return my__numberMap[match];
            });
        },
        postformat: function(string) {
            return string.replace(/\d/g, function(match) {
                return my__symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : norwegian bokmål (nb)
    //! authors : Espen Hovlandsdal : https://github.com/rexxars
    //!           Sigurd Gartmann : https://github.com/sigurdga

    var nb = moment__default.defineLocale('nb', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),
        weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: 'for %s siden',
            s: 'noen sekunder',
            m: 'ett minutt',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dager',
            M: 'en måned',
            MM: '%d måneder',
            y: 'ett år',
            yy: '%d år'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : nepali/nepalese
    //! author : suvash : https://github.com/suvash

    var ne__symbolMap = {
            '1': '१',
            '2': '२',
            '3': '३',
            '4': '४',
            '5': '५',
            '6': '६',
            '7': '७',
            '8': '८',
            '9': '९',
            '0': '०'
        },
        ne__numberMap = {
            '१': '1',
            '२': '2',
            '३': '3',
            '४': '4',
            '५': '5',
            '६': '6',
            '७': '7',
            '८': '8',
            '९': '9',
            '०': '0'
        };

    var ne = moment__default.defineLocale('ne', {
        months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
        monthsShort: 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
        weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
        weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
        weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
        longDateFormat: {
            LT: 'Aको h:mm बजे',
            LTS: 'Aको h:mm:ss बजे',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, Aको h:mm बजे',
            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे'
        },
        preparse: function(string) {
            return string.replace(/[१२३४५६७८९०]/g, function(match) {
                return ne__numberMap[match];
            });
        },
        postformat: function(string) {
            return string.replace(/\d/g, function(match) {
                return ne__symbolMap[match];
            });
        },
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
        meridiemHour: function(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राति') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
                return hour;
            } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'साँझ') {
                return hour + 12;
            }
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 3) {
                return 'राति';
            } else if (hour < 12) {
                return 'बिहान';
            } else if (hour < 16) {
                return 'दिउँसो';
            } else if (hour < 20) {
                return 'साँझ';
            } else {
                return 'राति';
            }
        },
        calendar: {
            sameDay: '[आज] LT',
            nextDay: '[भोलि] LT',
            nextWeek: '[आउँदो] dddd[,] LT',
            lastDay: '[हिजो] LT',
            lastWeek: '[गएको] dddd[,] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sमा',
            past: '%s अगाडि',
            s: 'केही क्षण',
            m: 'एक मिनेट',
            mm: '%d मिनेट',
            h: 'एक घण्टा',
            hh: '%d घण्टा',
            d: 'एक दिन',
            dd: '%d दिन',
            M: 'एक महिना',
            MM: '%d महिना',
            y: 'एक बर्ष',
            yy: '%d बर्ष'
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : dutch (nl)
    //! author : Joris Röling : https://github.com/jjupiter

    var nl__monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        nl__monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

    var nl = moment__default.defineLocale('nl', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort: function(m, format) {
            if (/-MMM-/.test(format)) {
                return nl__monthsShortWithoutDots[m.month()];
            } else {
                return nl__monthsShortWithDots[m.month()];
            }
        },
        weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            m: 'één minuut',
            mm: '%d minuten',
            h: 'één uur',
            hh: '%d uur',
            d: 'één dag',
            dd: '%d dagen',
            M: 'één maand',
            MM: '%d maanden',
            y: 'één jaar',
            yy: '%d jaar'
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : norwegian nynorsk (nn)
    //! author : https://github.com/mechuwind

    var nn = moment__default.defineLocale('nn', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort: 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
        weekdaysMin: 'su_må_ty_on_to_fr_lø'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'
        },
        calendar: {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: 'for %s sidan',
            s: 'nokre sekund',
            m: 'eit minutt',
            mm: '%d minutt',
            h: 'ein time',
            hh: '%d timar',
            d: 'ein dag',
            dd: '%d dagar',
            M: 'ein månad',
            MM: '%d månader',
            y: 'eit år',
            yy: '%d år'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : polish (pl)
    //! author : Rafal Hirsz : https://github.com/evoL

    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');

    function pl__plural(n) {
        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
    }

    function pl__translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'm':
                return withoutSuffix ? 'minuta' : 'minutę';
            case 'mm':
                return result + (pl__plural(number) ? 'minuty' : 'minut');
            case 'h':
                return withoutSuffix ? 'godzina' : 'godzinę';
            case 'hh':
                return result + (pl__plural(number) ? 'godziny' : 'godzin');
            case 'MM':
                return result + (pl__plural(number) ? 'miesiące' : 'miesięcy');
            case 'yy':
                return result + (pl__plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = moment__default.defineLocale('pl', {
        months: function(momentToFormat, format) {
            if (format === '') {
                // Hack: if format empty we know this is used to generate
                // RegExp by moment. Give then back both valid forms of months
                // in RegExp ready format.
                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
        weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
        weekdaysShort: 'nie_pon_wt_śr_czw_pt_sb'.split('_'),
        weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: '[W] dddd [o] LT',
            lastDay: '[Wczoraj o] LT',
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[W zeszłą niedzielę o] LT';
                    case 3:
                        return '[W zeszłą środę o] LT';
                    case 6:
                        return '[W zeszłą sobotę o] LT';
                    default:
                        return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: '%s temu',
            s: 'kilka sekund',
            m: pl__translate,
            mm: pl__translate,
            h: pl__translate,
            hh: pl__translate,
            d: '1 dzień',
            dd: '%d dni',
            M: 'miesiąc',
            MM: pl__translate,
            y: 'rok',
            yy: pl__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : brazilian portuguese (pt-br)
    //! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

    var pt_br = moment__default.defineLocale('pt-br', {
        months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays: 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin: 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function() {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'em %s',
            past: '%s atrás',
            s: 'poucos segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: '%dº'
    });

    //! moment.js locale configuration
    //! locale : portuguese (pt)
    //! author : Jefferson : https://github.com/jalex79

    var pt = moment__default.defineLocale('pt', {
        months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays: 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),
        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin: 'Dom_2ª_3ª_4ª_5ª_6ª_Sáb'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function() {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'em %s',
            past: 'há %s',
            s: 'segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mês',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos'
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : romanian (ro)
    //! author : Vlad Gurdiga : https://github.com/gurdiga
    //! author : Valentin Agachi : https://github.com/avaly

    function ro__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                'mm': 'minute',
                'hh': 'ore',
                'dd': 'zile',
                'MM': 'luni',
                'yy': 'ani'
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = moment__default.defineLocale('ro', {
        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
        monthsShort: 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
        weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'peste %s',
            past: '%s în urmă',
            s: 'câteva secunde',
            m: 'un minut',
            mm: ro__relativeTimeWithPlural,
            h: 'o oră',
            hh: ro__relativeTimeWithPlural,
            d: 'o zi',
            dd: ro__relativeTimeWithPlural,
            M: 'o lună',
            MM: ro__relativeTimeWithPlural,
            y: 'un an',
            yy: ro__relativeTimeWithPlural
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : russian (ru)
    //! author : Viktorminator : https://github.com/Viktorminator
    //! Author : Menelion Elensúle : https://github.com/Oire

    function ru__plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }

    function ru__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            'hh': 'час_часа_часов',
            'dd': 'день_дня_дней',
            'MM': 'месяц_месяца_месяцев',
            'yy': 'год_года_лет'
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        } else {
            return number + ' ' + ru__plural(format[key], +number);
        }
    }
    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

    var ru = moment__default.defineLocale('ru', {
        months: {
            format: 'Января_Февраля_Марта_Апреля_Мая_Июня_Июля_Августа_Сентября_Октября_Ноября_Декабря'.split('_'),
            standalone: 'Январь_Февраль_Март_Апрель_Май_Июнь_Июль_Август_Сентябрь_Октябрь_Ноябрь_Декабрь'.split('_')
        },
        monthsShort: {
            format: 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_'),
            standalone: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_')
        },
        weekdays: {
            standalone: 'Воскресенье_Понедельник_Вторник_Среда_Четверг_Пятница_Суббота'.split('_'),
            format: 'Воскресенье_Понедельник_Вторник_Среду_Четверг_Пятницу_Субботу'.split('_'),
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
        },
        weekdaysShort: 'Вс_Пн_Вт_Ср_Чт_Пт_Сб'.split('_'),
        weekdaysMin: 'Вс_Пн_Вт_Ср_Чт_Пт_Сб'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY г.',
            LLL: 'D MMMM YYYY г., HH:mm',
            LLLL: 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar: {
            sameDay: '[Сегодня в] LT',
            nextDay: '[Завтра в] LT',
            lastDay: '[Вчера в] LT',
            nextWeek: function(now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В следующее] dddd [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В следующий] dddd [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В следующую] dddd [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd [в] LT';
                    } else {
                        return '[В] dddd [в] LT';
                    }
                }
            },
            lastWeek: function(now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В прошлое] dddd [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В прошлый] dddd [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В прошлую] dddd [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd [в] LT';
                    } else {
                        return '[В] dddd [в] LT';
                    }
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'через %s',
            past: '%s назад',
            s: 'несколько секунд',
            m: ru__relativeTimeWithPlural,
            mm: ru__relativeTimeWithPlural,
            h: 'час',
            hh: ru__relativeTimeWithPlural,
            d: 'день',
            dd: ru__relativeTimeWithPlural,
            M: 'месяц',
            MM: ru__relativeTimeWithPlural,
            y: 'год',
            yy: ru__relativeTimeWithPlural
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function(input) {
            return /^(дня|вечера)$/.test(input);
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        ordinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function(number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                case 'w':
                case 'W':
                    return number + '-я';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Northern Sami (se)
    //! authors : Bård Rolstad Henriksen : https://github.com/karamell


    var se = moment__default.defineLocale('se', {
        months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
        monthsShort: 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
        weekdays: 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
        weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
        weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'MMMM D. [b.] YYYY',
            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
        },
        calendar: {
            sameDay: '[otne ti] LT',
            nextDay: '[ihttin ti] LT',
            nextWeek: 'dddd [ti] LT',
            lastDay: '[ikte ti] LT',
            lastWeek: '[ovddit] dddd [ti] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s geažes',
            past: 'maŋit %s',
            s: 'moadde sekunddat',
            m: 'okta minuhta',
            mm: '%d minuhtat',
            h: 'okta diimmu',
            hh: '%d diimmut',
            d: 'okta beaivi',
            dd: '%d beaivvit',
            M: 'okta mánnu',
            MM: '%d mánut',
            y: 'okta jahki',
            yy: '%d jagit'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Sinhalese (si)
    //! author : Sampath Sitinamaluwa : https://github.com/sampathsris

    /*jshint -W100*/
    var si = moment__default.defineLocale('si', {
        months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
        monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
        weekdays: 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
        weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
        weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
        longDateFormat: {
            LT: 'a h:mm',
            LTS: 'a h:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY MMMM D',
            LLL: 'YYYY MMMM D, a h:mm',
            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
        },
        calendar: {
            sameDay: '[අද] LT[ට]',
            nextDay: '[හෙට] LT[ට]',
            nextWeek: 'dddd LT[ට]',
            lastDay: '[ඊයේ] LT[ට]',
            lastWeek: '[පසුගිය] dddd LT[ට]',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sකින්',
            past: '%sකට පෙර',
            s: 'තත්පර කිහිපය',
            m: 'මිනිත්තුව',
            mm: 'මිනිත්තු %d',
            h: 'පැය',
            hh: 'පැය %d',
            d: 'දිනය',
            dd: 'දින %d',
            M: 'මාසය',
            MM: 'මාස %d',
            y: 'වසර',
            yy: 'වසර %d'
        },
        ordinalParse: /\d{1,2} වැනි/,
        ordinal: function(number) {
            return number + ' වැනි';
        },
        meridiem: function(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
        }
    });

    //! moment.js locale configuration
    //! locale : slovak (sk)
    //! author : Martin Minka : https://github.com/k2s
    //! based on work of petrbela : https://github.com/petrbela

    var sk__months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
        sk__monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');

    function sk__plural(n) {
        return (n > 1) && (n < 5);
    }

    function sk__translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (sk__plural(number) ? 'minúty' : 'minút');
                } else {
                    return result + 'minútami';
                }
                break;
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (sk__plural(number) ? 'hodiny' : 'hodín');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd': // a day / in a day / a day ago
                return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (sk__plural(number) ? 'dni' : 'dní');
                } else {
                    return result + 'dňami';
                }
                break;
            case 'M': // a month / in a month / a month ago
                return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (sk__plural(number) ? 'mesiace' : 'mesiacov');
                } else {
                    return result + 'mesiacmi';
                }
                break;
            case 'y': // a year / in a year / a year ago
                return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (sk__plural(number) ? 'roky' : 'rokov');
                } else {
                    return result + 'rokmi';
                }
                break;
        }
    }

    var sk = moment__default.defineLocale('sk', {
        months: sk__months,
        monthsShort: sk__monthsShort,
        weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
        weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),
        weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[v nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [o] LT';
                    case 3:
                        return '[v stredu o] LT';
                    case 4:
                        return '[vo štvrtok o] LT';
                    case 5:
                        return '[v piatok o] LT';
                    case 6:
                        return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[minulú nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[minulý] dddd [o] LT';
                    case 3:
                        return '[minulú stredu o] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [o] LT';
                    case 6:
                        return '[minulú sobotu o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'pred %s',
            s: sk__translate,
            m: sk__translate,
            mm: sk__translate,
            h: sk__translate,
            hh: sk__translate,
            d: sk__translate,
            dd: sk__translate,
            M: sk__translate,
            MM: sk__translate,
            y: sk__translate,
            yy: sk__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : slovenian (sl)
    //! author : Robert Sedovšek : https://github.com/sedovsek

    function sl__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
                if (number === 1) {
                    result += withoutSuffix ? 'minuta' : 'minuto';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
                } else {
                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
                if (number === 1) {
                    result += withoutSuffix ? 'ura' : 'uro';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
                } else {
                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
                }
                return result;
            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
                } else {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
                }
                return result;
            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
                } else {
                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
                }
                return result;
            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
                } else {
                    result += withoutSuffix || isFuture ? 'let' : 'leti';
                }
                return result;
        }
    }

    var sl = moment__default.defineLocale('sl', {
        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danes ob] LT',
            nextDay: '[jutri ob] LT',

            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';
                    case 3:
                        return '[v] [sredo] [ob] LT';
                    case 6:
                        return '[v] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay: '[včeraj ob] LT',
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[prejšnjo] [nedeljo] [ob] LT';
                    case 3:
                        return '[prejšnjo] [sredo] [ob] LT';
                    case 6:
                        return '[prejšnjo] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'čez %s',
            past: 'pred %s',
            s: sl__processRelativeTime,
            m: sl__processRelativeTime,
            mm: sl__processRelativeTime,
            h: sl__processRelativeTime,
            hh: sl__processRelativeTime,
            d: sl__processRelativeTime,
            dd: sl__processRelativeTime,
            M: sl__processRelativeTime,
            MM: sl__processRelativeTime,
            y: sl__processRelativeTime,
            yy: sl__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Albanian (sq)
    //! author : Flakërim Ismani : https://github.com/flakerimi
    //! author: Menelion Elensúle: https://github.com/Oire (tests)
    //! author : Oerd Cukalla : https://github.com/oerd (fixes)

    var sq = moment__default.defineLocale('sq', {
        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
        weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
        weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
        weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),
        meridiemParse: /PD|MD/,
        isPM: function(input) {
            return input.charAt(0) === 'M';
        },
        meridiem: function(hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Sot në] LT',
            nextDay: '[Nesër në] LT',
            nextWeek: 'dddd [në] LT',
            lastDay: '[Dje në] LT',
            lastWeek: 'dddd [e kaluar në] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'në %s',
            past: '%s më parë',
            s: 'disa sekonda',
            m: 'një minutë',
            mm: '%d minuta',
            h: 'një orë',
            hh: '%d orë',
            d: 'një ditë',
            dd: '%d ditë',
            M: 'një muaj',
            MM: '%d muaj',
            y: 'një vit',
            yy: '%d vite'
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Serbian-cyrillic (sr-cyrl)
    //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

    var sr_cyrl__translator = {
        words: { //Different grammatical cases
            m: ['један минут', 'једне минуте'],
            mm: ['минут', 'минуте', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            dd: ['дан', 'дана', 'дана'],
            MM: ['месец', 'месеца', 'месеци'],
            yy: ['година', 'године', 'година']
        },
        correctGrammaticalCase: function(number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function(number, withoutSuffix, key) {
            var wordKey = sr_cyrl__translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + sr_cyrl__translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var sr_cyrl = moment__default.defineLocale('sr-cyrl', {
        months: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар'],
        monthsShort: ['јан.', 'феб.', 'мар.', 'апр.', 'мај', 'јун', 'јул', 'авг.', 'сеп.', 'окт.', 'нов.', 'дец.'],
        weekdays: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота'],
        weekdaysShort: ['нед.', 'пон.', 'уто.', 'сре.', 'чет.', 'пет.', 'суб.'],
        weekdaysMin: ['не', 'по', 'ут', 'ср', 'че', 'пе', 'су'],
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[у] [недељу] [у] LT';
                    case 3:
                        return '[у] [среду] [у] LT';
                    case 6:
                        return '[у] [суботу] [у] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[у] dddd [у] LT';
                }
            },
            lastDay: '[јуче у] LT',
            lastWeek: function() {
                var lastWeekDays = [
                    '[прошле] [недеље] [у] LT',
                    '[прошлог] [понедељка] [у] LT',
                    '[прошлог] [уторка] [у] LT',
                    '[прошле] [среде] [у] LT',
                    '[прошлог] [четвртка] [у] LT',
                    '[прошлог] [петка] [у] LT',
                    '[прошле] [суботе] [у] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'за %s',
            past: 'пре %s',
            s: 'неколико секунди',
            m: sr_cyrl__translator.translate,
            mm: sr_cyrl__translator.translate,
            h: sr_cyrl__translator.translate,
            hh: sr_cyrl__translator.translate,
            d: 'дан',
            dd: sr_cyrl__translator.translate,
            M: 'месец',
            MM: sr_cyrl__translator.translate,
            y: 'годину',
            yy: sr_cyrl__translator.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Serbian-latin (sr)
    //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

    var sr__translator = {
        words: { //Different grammatical cases
            m: ['jedan minut', 'jedne minute'],
            mm: ['minut', 'minute', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mesec', 'meseca', 'meseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function(number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function(number, withoutSuffix, key) {
            var wordKey = sr__translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + sr__translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var sr = moment__default.defineLocale('sr', {
        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
        weekdays: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota'],
        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sre.', 'čet.', 'pet.', 'sub.'],
        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function() {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedelju] [u] LT';
                    case 3:
                        return '[u] [sredu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juče u] LT',
            lastWeek: function() {
                var lastWeekDays = [
                    '[prošle] [nedelje] [u] LT',
                    '[prošlog] [ponedeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'pre %s',
            s: 'nekoliko sekundi',
            m: sr__translator.translate,
            mm: sr__translator.translate,
            h: sr__translator.translate,
            hh: sr__translator.translate,
            d: 'dan',
            dd: sr__translator.translate,
            M: 'mesec',
            MM: sr__translator.translate,
            y: 'godinu',
            yy: sr__translator.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : swedish (sv)
    //! author : Jens Alm : https://github.com/ulmus

    var sv = moment__default.defineLocale('sv', {
        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
        weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
        weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: 'för %s sedan',
            s: 'några sekunder',
            m: 'en minut',
            mm: '%d minuter',
            h: 'en timme',
            hh: '%d timmar',
            d: 'en dag',
            dd: '%d dagar',
            M: 'en månad',
            MM: '%d månader',
            y: 'ett år',
            yy: '%d år'
        },
        ordinalParse: /\d{1,2}(e|a)/,
        ordinal: function(number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'e' :
                (b === 1) ? 'a' :
                (b === 2) ? 'a' :
                (b === 3) ? 'e' : 'e';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : swahili (sw)
    //! author : Fahad Kassim : https://github.com/fadsel

    var sw = moment__default.defineLocale('sw', {
        months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
        weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
        weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[leo saa] LT',
            nextDay: '[kesho saa] LT',
            nextWeek: '[wiki ijayo] dddd [saat] LT',
            lastDay: '[jana] LT',
            lastWeek: '[wiki iliyopita] dddd [saat] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s baadaye',
            past: 'tokea %s',
            s: 'hivi punde',
            m: 'dakika moja',
            mm: 'dakika %d',
            h: 'saa limoja',
            hh: 'masaa %d',
            d: 'siku moja',
            dd: 'masiku %d',
            M: 'mwezi mmoja',
            MM: 'miezi %d',
            y: 'mwaka mmoja',
            yy: 'miaka %d'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : tamil (ta)
    //! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

    var ta__symbolMap = {
            '1': '௧',
            '2': '௨',
            '3': '௩',
            '4': '௪',
            '5': '௫',
            '6': '௬',
            '7': '௭',
            '8': '௮',
            '9': '௯',
            '0': '௦'
        },
        ta__numberMap = {
            '௧': '1',
            '௨': '2',
            '௩': '3',
            '௪': '4',
            '௫': '5',
            '௬': '6',
            '௭': '7',
            '௮': '8',
            '௯': '9',
            '௦': '0'
        };

    var ta = moment__default.defineLocale('ta', {
        months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        monthsShort: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        weekdays: 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
        weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
        weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, HH:mm',
            LLLL: 'dddd, D MMMM YYYY, HH:mm'
        },
        calendar: {
            sameDay: '[இன்று] LT',
            nextDay: '[நாளை] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[நேற்று] LT',
            lastWeek: '[கடந்த வாரம்] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s இல்',
            past: '%s முன்',
            s: 'ஒரு சில விநாடிகள்',
            m: 'ஒரு நிமிடம்',
            mm: '%d நிமிடங்கள்',
            h: 'ஒரு மணி நேரம்',
            hh: '%d மணி நேரம்',
            d: 'ஒரு நாள்',
            dd: '%d நாட்கள்',
            M: 'ஒரு மாதம்',
            MM: '%d மாதங்கள்',
            y: 'ஒரு வருடம்',
            yy: '%d ஆண்டுகள்'
        },
        ordinalParse: /\d{1,2}வது/,
        ordinal: function(number) {
            return number + 'வது';
        },
        preparse: function(string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function(match) {
                return ta__numberMap[match];
            });
        },
        postformat: function(string) {
            return string.replace(/\d/g, function(match) {
                return ta__symbolMap[match];
            });
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem: function(hour, minute, isLower) {
            if (hour < 2) {
                return ' யாமம்';
            } else if (hour < 6) {
                return ' வைகறை'; // வைகறை
            } else if (hour < 10) {
                return ' காலை'; // காலை
            } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
                return ' மாலை'; // மாலை
            } else {
                return ' யாமம்';
            }
        },
        meridiemHour: function(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
            } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : telugu (te)
    //! author : Krishna Chaitanya Thota : https://github.com/kcthota

    var te = moment__default.defineLocale('te', {
        months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
        monthsShort: 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
        weekdays: 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
        weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
        weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar: {
            sameDay: '[నేడు] LT',
            nextDay: '[రేపు] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[నిన్న] LT',
            lastWeek: '[గత] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s లో',
            past: '%s క్రితం',
            s: 'కొన్ని క్షణాలు',
            m: 'ఒక నిమిషం',
            mm: '%d నిమిషాలు',
            h: 'ఒక గంట',
            hh: '%d గంటలు',
            d: 'ఒక రోజు',
            dd: '%d రోజులు',
            M: 'ఒక నెల',
            MM: '%d నెలలు',
            y: 'ఒక సంవత్సరం',
            yy: '%d సంవత్సరాలు'
        },
        ordinalParse: /\d{1,2}వ/,
        ordinal: '%dవ',
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
        meridiemHour: function(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'రాత్రి') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ఉదయం') {
                return hour;
            } else if (meridiem === 'మధ్యాహ్నం') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'సాయంత్రం') {
                return hour + 12;
            }
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 4) {
                return 'రాత్రి';
            } else if (hour < 10) {
                return 'ఉదయం';
            } else if (hour < 17) {
                return 'మధ్యాహ్నం';
            } else if (hour < 20) {
                return 'సాయంత్రం';
            } else {
                return 'రాత్రి';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : thai (th)
    //! author : Kridsada Thanabulpong : https://github.com/sirn

    var th = moment__default.defineLocale('th', {
        months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
        monthsShort: 'มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา'.split('_'),
        weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
        weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
        weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
        longDateFormat: {
            LT: 'H นาฬิกา m นาที',
            LTS: 'H นาฬิกา m นาที s วินาที',
            L: 'YYYY/MM/DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY เวลา H นาฬิกา m นาที',
            LLLL: 'วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที'
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function(input) {
            return input === 'หลังเที่ยง';
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 12) {
                return 'ก่อนเที่ยง';
            } else {
                return 'หลังเที่ยง';
            }
        },
        calendar: {
            sameDay: '[วันนี้ เวลา] LT',
            nextDay: '[พรุ่งนี้ เวลา] LT',
            nextWeek: 'dddd[หน้า เวลา] LT',
            lastDay: '[เมื่อวานนี้ เวลา] LT',
            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'อีก %s',
            past: '%sที่แล้ว',
            s: 'ไม่กี่วินาที',
            m: '1 นาที',
            mm: '%d นาที',
            h: '1 ชั่วโมง',
            hh: '%d ชั่วโมง',
            d: '1 วัน',
            dd: '%d วัน',
            M: '1 เดือน',
            MM: '%d เดือน',
            y: '1 ปี',
            yy: '%d ปี'
        }
    });

    //! moment.js locale configuration
    //! locale : Tagalog/Filipino (tl-ph)
    //! author : Dan Hagman

    var tl_ph = moment__default.defineLocale('tl-ph', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Ngayon sa] LT',
            nextDay: '[Bukas sa] LT',
            nextWeek: 'dddd [sa] LT',
            lastDay: '[Kahapon sa] LT',
            lastWeek: 'dddd [huling linggo] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon'
        },
        ordinalParse: /\d{1,2}/,
        ordinal: function(number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Klingon (tlh)
    //! author : Dominika Kruk : https://github.com/amaranthrose

    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

    function translateFuture(output) {
        var time = output;
        time = (output.indexOf('jaj') !== -1) ?
            time.slice(0, -3) + 'leS' :
            (output.indexOf('jar') !== -1) ?
            time.slice(0, -3) + 'waQ' :
            (output.indexOf('DIS') !== -1) ?
            time.slice(0, -3) + 'nem' :
            time + ' pIq';
        return time;
    }

    function translatePast(output) {
        var time = output;
        time = (output.indexOf('jaj') !== -1) ?
            time.slice(0, -3) + 'Hu’' :
            (output.indexOf('jar') !== -1) ?
            time.slice(0, -3) + 'wen' :
            (output.indexOf('DIS') !== -1) ?
            time.slice(0, -3) + 'ben' :
            time + ' ret';
        return time;
    }

    function tlh__translate(number, withoutSuffix, string, isFuture) {
        var numberNoun = numberAsNoun(number);
        switch (string) {
            case 'mm':
                return numberNoun + ' tup';
            case 'hh':
                return numberNoun + ' rep';
            case 'dd':
                return numberNoun + ' jaj';
            case 'MM':
                return numberNoun + ' jar';
            case 'yy':
                return numberNoun + ' DIS';
        }
    }

    function numberAsNoun(number) {
        var hundred = Math.floor((number % 1000) / 100),
            ten = Math.floor((number % 100) / 10),
            one = number % 10,
            word = '';
        if (hundred > 0) {
            word += numbersNouns[hundred] + 'vatlh';
        }
        if (ten > 0) {
            word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
        }
        if (one > 0) {
            word += ((word !== '') ? ' ' : '') + numbersNouns[one];
        }
        return (word === '') ? 'pagh' : word;
    }

    var tlh = moment__default.defineLocale('tlh', {
        months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
        monthsShort: 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
        weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysShort: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysMin: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[DaHjaj] LT',
            nextDay: '[wa’leS] LT',
            nextWeek: 'LLL',
            lastDay: '[wa’Hu’] LT',
            lastWeek: 'LLL',
            sameElse: 'L'
        },
        relativeTime: {
            future: translateFuture,
            past: translatePast,
            s: 'puS lup',
            m: 'wa’ tup',
            mm: tlh__translate,
            h: 'wa’ rep',
            hh: tlh__translate,
            d: 'wa’ jaj',
            dd: tlh__translate,
            M: 'wa’ jar',
            MM: tlh__translate,
            y: 'wa’ DIS',
            yy: tlh__translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : turkish (tr)
    //! authors : Erhan Gundogan : https://github.com/erhangundogan,
    //!           Burak Yiğit Kaya: https://github.com/BYK

    var tr__suffixes = {
        1: '\'inci',
        5: '\'inci',
        8: '\'inci',
        70: '\'inci',
        80: '\'inci',
        2: '\'nci',
        7: '\'nci',
        20: '\'nci',
        50: '\'nci',
        3: '\'üncü',
        4: '\'üncü',
        100: '\'üncü',
        6: '\'ncı',
        9: '\'uncu',
        10: '\'uncu',
        30: '\'uncu',
        60: '\'ıncı',
        90: '\'ıncı'
    };

    var tr = moment__default.defineLocale('tr', {
        months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
        monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
        weekdaysShort: 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
        weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[bugün saat] LT',
            nextDay: '[yarın saat] LT',
            nextWeek: '[haftaya] dddd [saat] LT',
            lastDay: '[dün] LT',
            lastWeek: '[geçen hafta] dddd [saat] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s önce',
            s: 'birkaç saniye',
            m: 'bir dakika',
            mm: '%d dakika',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gün',
            dd: '%d gün',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir yıl',
            yy: '%d yıl'
        },
        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
        ordinal: function(number) {
            if (number === 0) { // special case for zero
                return number + '\'ıncı';
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (tr__suffixes[a] || tr__suffixes[b] || tr__suffixes[c]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : talossan (tzl)
    //! author : Robin van der Vliet : https://github.com/robin0van0der0v with the help of Iustì Canun


    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
    // This is currently too difficult (maybe even impossible) to add.
    var tzl = moment__default.defineLocale('tzl', {
        months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
        monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
        weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
        weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM [dallas] YYYY',
            LLL: 'D. MMMM [dallas] YYYY HH.mm',
            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
        },
        meridiem: function(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'd\'o' : 'D\'O';
            } else {
                return isLower ? 'd\'a' : 'D\'A';
            }
        },
        calendar: {
            sameDay: '[oxhi à] LT',
            nextDay: '[demà à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[ieiri à] LT',
            lastWeek: '[sür el] dddd [lasteu à] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'osprei %s',
            past: 'ja%s',
            s: tzl__processRelativeTime,
            m: tzl__processRelativeTime,
            mm: tzl__processRelativeTime,
            h: tzl__processRelativeTime,
            hh: tzl__processRelativeTime,
            d: tzl__processRelativeTime,
            dd: tzl__processRelativeTime,
            M: tzl__processRelativeTime,
            MM: tzl__processRelativeTime,
            y: tzl__processRelativeTime,
            yy: tzl__processRelativeTime
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    function tzl__processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['viensas secunds', '\'iensas secunds'],
            'm': ['\'n míut', '\'iens míut'],
            'mm': [number + ' míuts', '' + number + ' míuts'],
            'h': ['\'n þora', '\'iensa þora'],
            'hh': [number + ' þoras', '' + number + ' þoras'],
            'd': ['\'n ziua', '\'iensa ziua'],
            'dd': [number + ' ziuas', '' + number + ' ziuas'],
            'M': ['\'n mes', '\'iens mes'],
            'MM': [number + ' mesen', '' + number + ' mesen'],
            'y': ['\'n ar', '\'iens ar'],
            'yy': [number + ' ars', '' + number + ' ars']
        };
        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
    }

    //! moment.js locale configuration
    //! locale : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)
    //! author : Abdel Said : https://github.com/abdelsaid

    var tzm_latn = moment__default.defineLocale('tzm-latn', {
        months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        monthsShort: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dadkh s yan %s',
            past: 'yan %s',
            s: 'imik',
            m: 'minuḍ',
            mm: '%d minuḍ',
            h: 'saɛa',
            hh: '%d tassaɛin',
            d: 'ass',
            dd: '%d ossan',
            M: 'ayowr',
            MM: '%d iyyirn',
            y: 'asgas',
            yy: '%d isgasn'
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : Morocco Central Atlas Tamaziɣt (tzm)
    //! author : Abdel Said : https://github.com/abdelsaid

    var tzm = moment__default.defineLocale('tzm', {
        months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        monthsShort: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past: 'ⵢⴰⵏ %s',
            s: 'ⵉⵎⵉⴽ',
            m: 'ⵎⵉⵏⵓⴺ',
            mm: '%d ⵎⵉⵏⵓⴺ',
            h: 'ⵙⴰⵄⴰ',
            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d: 'ⴰⵙⵙ',
            dd: '%d oⵙⵙⴰⵏ',
            M: 'ⴰⵢoⵓⵔ',
            MM: '%d ⵉⵢⵢⵉⵔⵏ',
            y: 'ⴰⵙⴳⴰⵙ',
            yy: '%d ⵉⵙⴳⴰⵙⵏ'
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : ukrainian (uk)
    //! author : zemlanin : https://github.com/zemlanin
    //! Author : Menelion Elensúle : https://github.com/Oire

    function uk__plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }

    function uk__relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
            'dd': 'день_дні_днів',
            'MM': 'місяць_місяці_місяців',
            'yy': 'рік_роки_років'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        } else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        } else {
            return number + ' ' + uk__plural(format[key], +number);
        }
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
                'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
                'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
                'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
            },
            nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
            'accusative' :
            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
                'genitive' :
                'nominative');
        return weekdays[nounCase][m.day()];
    }

    function processHoursFunction(str) {
        return function() {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    var uk = moment__default.defineLocale('uk', {
        months: {
            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
        },
        monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY р.',
            LLL: 'D MMMM YYYY р., HH:mm',
            LLLL: 'dddd, D MMMM YYYY р., HH:mm'
        },
        calendar: {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function() {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return processHoursFunction('[Минулої] dddd [').call(this);
                    case 1:
                    case 2:
                    case 4:
                        return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'за %s',
            past: '%s тому',
            s: 'декілька секунд',
            m: uk__relativeTimeWithPlural,
            mm: uk__relativeTimeWithPlural,
            h: 'годину',
            hh: uk__relativeTimeWithPlural,
            d: 'день',
            dd: uk__relativeTimeWithPlural,
            M: 'місяць',
            MM: uk__relativeTimeWithPlural,
            y: 'рік',
            yy: uk__relativeTimeWithPlural
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function(input) {
            return /^(дня|вечора)$/.test(input);
        },
        meridiem: function(hour, minute, isLower) {
            if (hour < 4) {
                return 'ночі';
            } else if (hour < 12) {
                return 'ранку';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечора';
            }
        },
        ordinalParse: /\d{1,2}-(й|го)/,
        ordinal: function(number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : uzbek (uz)
    //! author : Sardor Muminov : https://github.com/muminoff

    var uz = moment__default.defineLocale('uz', {
        months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
        monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
        weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
        weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm'
        },
        calendar: {
            sameDay: '[Бугун соат] LT [да]',
            nextDay: '[Эртага] LT [да]',
            nextWeek: 'dddd [куни соат] LT [да]',
            lastDay: '[Кеча соат] LT [да]',
            lastWeek: '[Утган] dddd [куни соат] LT [да]',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'Якин %s ичида',
            past: 'Бир неча %s олдин',
            s: 'фурсат',
            m: 'бир дакика',
            mm: '%d дакика',
            h: 'бир соат',
            hh: '%d соат',
            d: 'бир кун',
            dd: '%d кун',
            M: 'бир ой',
            MM: '%d ой',
            y: 'бир йил',
            yy: '%d йил'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : vietnamese (vi)
    //! author : Bang Nguyen : https://github.com/bangnk

    var vi = moment__default.defineLocale('vi', {
        months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
        monthsShort: 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
        weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [năm] YYYY',
            LLL: 'D MMMM [năm] YYYY HH:mm',
            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',
            l: 'DD/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần rồi lúc] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s tới',
            past: '%s trước',
            s: 'vài giây',
            m: 'một phút',
            mm: '%d phút',
            h: 'một giờ',
            hh: '%d giờ',
            d: 'một ngày',
            dd: '%d ngày',
            M: 'một tháng',
            MM: '%d tháng',
            y: 'một năm',
            yy: '%d năm'
        },
        ordinalParse: /\d{1,2}/,
        ordinal: function(number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : chinese (zh-cn)
    //! author : suupic : https://github.com/suupic
    //! author : Zeno Zeng : https://github.com/zenozeng

    var zh_cn = moment__default.defineLocale('zh-cn', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'Ah点mm分',
            LTS: 'Ah点m分s秒',
            L: 'YYYY-MM-DD',
            LL: 'YYYY年MMMD日',
            LLL: 'YYYY年MMMD日Ah点mm分',
            LLLL: 'YYYY年MMMD日ddddAh点mm分',
            l: 'YYYY-MM-DD',
            ll: 'YYYY年MMMD日',
            lll: 'YYYY年MMMD日Ah点mm分',
            llll: 'YYYY年MMMD日ddddAh点mm分'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' ||
                meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function(hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: function() {
                return this.minutes() === 0 ? '[今天]Ah[点整]' : '[今天]LT';
            },
            nextDay: function() {
                return this.minutes() === 0 ? '[明天]Ah[点整]' : '[明天]LT';
            },
            lastDay: function() {
                return this.minutes() === 0 ? '[昨天]Ah[点整]' : '[昨天]LT';
            },
            nextWeek: function() {
                var startOfWeek, prefix;
                startOfWeek = moment__default().startOf('week');
                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            lastWeek: function() {
                var startOfWeek, prefix;
                startOfWeek = moment__default().startOf('week');
                prefix = this.unix() < startOfWeek.unix() ? '[上]' : '[本]';
                return this.minutes() === 0 ? prefix + 'dddAh点整' : prefix + 'dddAh点mm';
            },
            sameElse: 'LL'
        },
        ordinalParse: /\d{1,2}(日|月|周)/,
        ordinal: function(number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s内',
            past: '%s前',
            s: '几秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年'
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    //! moment.js locale configuration
    //! locale : traditional chinese (zh-tw)
    //! author : Ben : https://github.com/ben-lin

    var zh_tw = moment__default.defineLocale('zh-tw', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'Ah點mm分',
            LTS: 'Ah點m分s秒',
            L: 'YYYY年MMMD日',
            LL: 'YYYY年MMMD日',
            LLL: 'YYYY年MMMD日Ah點mm分',
            LLLL: 'YYYY年MMMD日ddddAh點mm分',
            l: 'YYYY年MMMD日',
            ll: 'YYYY年MMMD日',
            lll: 'YYYY年MMMD日Ah點mm分',
            llll: 'YYYY年MMMD日ddddAh點mm分'
        },
        meridiemParse: /早上|上午|中午|下午|晚上/,
        meridiemHour: function(hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function(hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天]LT',
            nextDay: '[明天]LT',
            nextWeek: '[下]ddddLT',
            lastDay: '[昨天]LT',
            lastWeek: '[上]ddddLT',
            sameElse: 'L'
        },
        ordinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function(number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s內',
            past: '%s前',
            s: '幾秒',
            m: '一分鐘',
            mm: '%d分鐘',
            h: '一小時',
            hh: '%d小時',
            d: '一天',
            dd: '%d天',
            M: '一個月',
            MM: '%d個月',
            y: '一年',
            yy: '%d年'
        }
    });

    var moment_with_locales = moment__default;
    moment_with_locales.locale('en');

    return moment_with_locales;

}));
! function(a, b) {
    b["true"] = a,
        function(b, c) {
            "function" == typeof define && define.amd ? define(b) : "undefined" != typeof module && "object" == typeof a ? module.exports = b() : c.rangy = b()
        }(function() {
            function a(a, b) {
                var c = typeof a[b];
                return c == u || !(c != t || !a[b]) || "unknown" == c
            }

            function b(a, b) {
                return !(typeof a[b] != t || !a[b])
            }

            function c(a, b) {
                return typeof a[b] != v
            }

            function d(a) {
                return function(b, c) {
                    for (var d = c.length; d--;)
                        if (!a(b, c[d])) return !1;
                    return !0
                }
            }

            function e(a) {
                return a && A(a, z) && C(a, y)
            }

            function f(a) {
                return b(a, "body") ? a.body : a.getElementsByTagName("body")[0]
            }

            function g(b) {
                typeof console != v && a(console, "log") && console.log(b)
            }

            function h(a, b) {
                F && b ? alert(a) : g(a)
            }

            function i(a) {
                H.initialized = !0, H.supported = !1, h("Rangy is not supported in this environment. Reason: " + a, H.config.alertOnFail)
            }

            function j(a) {
                h("Rangy warning: " + a, H.config.alertOnWarn)
            }

            function k(a) {
                return a.message || a.description || String(a)
            }

            function l() {
                if (F && !H.initialized) {
                    var b, c = !1,
                        d = !1;
                    a(document, "createRange") && (b = document.createRange(), A(b, x) && C(b, w) && (c = !0));
                    var h = f(document);
                    if (!h || "body" != h.nodeName.toLowerCase()) return void i("No body element found");
                    if (h && a(h, "createTextRange") && (b = h.createTextRange(), e(b) && (d = !0)), !c && !d) return void i("Neither Range nor TextRange are available");
                    H.initialized = !0, H.features = {
                        implementsDomRange: c,
                        implementsTextRange: d
                    };
                    var j, l;
                    for (var m in E)(j = E[m]) instanceof p && j.init(j, H);
                    for (var n = 0, o = K.length; o > n; ++n) try {
                        K[n](H)
                    } catch (q) {
                        l = "Rangy init listener threw an exception. Continuing. Detail: " + k(q), g(l)
                    }
                }
            }

            function m(a, b, c) {
                c && (a += " in module " + c.name), H.warn("DEPRECATED: " + a + " is deprecated. Please use " + b + " instead.")
            }

            function n(a, b, c, d) {
                a[b] = function() {
                    return m(b, c, d), a[c].apply(a, G.toArray(arguments))
                }
            }

            function o(a) {
                a = a || window, l();
                for (var b = 0, c = L.length; c > b; ++b) L[b](a)
            }

            function p(a, b, c) {
                this.name = a, this.dependencies = b, this.initialized = !1, this.supported = !1, this.initializer = c
            }

            function q(a, b, c) {
                var d = new p(a, b, function(b) {
                    if (!b.initialized) {
                        b.initialized = !0;
                        try {
                            c(H, b), b.supported = !0
                        } catch (d) {
                            var e = "Module '" + a + "' failed to load: " + k(d);
                            g(e), d.stack && g(d.stack)
                        }
                    }
                });
                return E[a] = d, d
            }

            function r() {}

            function s() {}
            var t = "object",
                u = "function",
                v = "undefined",
                w = ["startContainer", "startOffset", "endContainer", "endOffset", "collapsed", "commonAncestorContainer"],
                x = ["setStart", "setStartBefore", "setStartAfter", "setEnd", "setEndBefore", "setEndAfter", "collapse", "selectNode", "selectNodeContents", "compareBoundaryPoints", "deleteContents", "extractContents", "cloneContents", "insertNode", "surroundContents", "cloneRange", "toString", "detach"],
                y = ["boundingHeight", "boundingLeft", "boundingTop", "boundingWidth", "htmlText", "text"],
                z = ["collapse", "compareEndPoints", "duplicate", "moveToElementText", "parentElement", "select", "setEndPoint", "getBoundingClientRect"],
                A = d(a),
                B = d(b),
                C = d(c),
                D = [].forEach ? function(a, b) {
                    a.forEach(b)
                } : function(a, b) {
                    for (var c = 0, d = a.length; d > c; ++c) b(a[c], c)
                },
                E = {},
                F = typeof window != v && typeof document != v,
                G = {
                    isHostMethod: a,
                    isHostObject: b,
                    isHostProperty: c,
                    areHostMethods: A,
                    areHostObjects: B,
                    areHostProperties: C,
                    isTextRange: e,
                    getBody: f,
                    forEach: D
                },
                H = {
                    version: "1.3.0",
                    initialized: !1,
                    isBrowser: F,
                    supported: !0,
                    util: G,
                    features: {},
                    modules: E,
                    config: {
                        alertOnFail: !1,
                        alertOnWarn: !1,
                        preferTextRange: !1,
                        autoInitialize: typeof rangyAutoInitialize == v ? !0 : rangyAutoInitialize
                    }
                };
            H.fail = i, H.warn = j;
            var I;
            ({}).hasOwnProperty ? (G.extend = I = function(a, b, c) {
                    var d, e;
                    for (var f in b) b.hasOwnProperty(f) && (d = a[f], e = b[f], c && null !== d && "object" == typeof d && null !== e && "object" == typeof e && I(d, e, !0), a[f] = e);
                    return b.hasOwnProperty("toString") && (a.toString = b.toString), a
                }, G.createOptions = function(a, b) {
                    var c = {};
                    return I(c, b), a && I(c, a), c
                }) : i("hasOwnProperty not supported"), F || i("Rangy can only run in a browser"),
                function() {
                    var a;
                    if (F) {
                        var b = document.createElement("div");
                        b.appendChild(document.createElement("span"));
                        var c = [].slice;
                        try {
                            1 == c.call(b.childNodes, 0)[0].nodeType && (a = function(a) {
                                return c.call(a, 0)
                            })
                        } catch (d) {}
                    }
                    a || (a = function(a) {
                        for (var b = [], c = 0, d = a.length; d > c; ++c) b[c] = a[c];
                        return b
                    }), G.toArray = a
                }();
            var J;
            F && (a(document, "addEventListener") ? J = function(a, b, c) {
                a.addEventListener(b, c, !1)
            } : a(document, "attachEvent") ? J = function(a, b, c) {
                a.attachEvent("on" + b, c)
            } : i("Document does not have required addEventListener or attachEvent method"), G.addListener = J);
            var K = [];
            G.deprecationNotice = m, G.createAliasForDeprecatedMethod = n, H.init = l, H.addInitListener = function(a) {
                H.initialized ? a(H) : K.push(a)
            };
            var L = [];
            H.addShimListener = function(a) {
                L.push(a)
            }, F && (H.shim = H.createMissingNativeApi = o, n(H, "createMissingNativeApi", "shim")), p.prototype = {
                init: function() {
                    for (var a, b, c = this.dependencies || [], d = 0, e = c.length; e > d; ++d) {
                        if (b = c[d], a = E[b], !(a && a instanceof p)) throw new Error("required module '" + b + "' not found");
                        if (a.init(), !a.supported) throw new Error("required module '" + b + "' not supported")
                    }
                    this.initializer(this)
                },
                fail: function(a) {
                    throw this.initialized = !0, this.supported = !1, new Error(a)
                },
                warn: function(a) {
                    H.warn("Module " + this.name + ": " + a)
                },
                deprecationNotice: function(a, b) {
                    H.warn("DEPRECATED: " + a + " in module " + this.name + " is deprecated. Please use " + b + " instead")
                },
                createError: function(a) {
                    return new Error("Error in Rangy " + this.name + " module: " + a)
                }
            }, H.createModule = function(a) {
                var b, c;
                2 == arguments.length ? (b = arguments[1], c = []) : (b = arguments[2], c = arguments[1]);
                var d = q(a, c, b);
                H.initialized && H.supported && d.init()
            }, H.createCoreModule = function(a, b, c) {
                q(a, b, c)
            }, H.RangePrototype = r, H.rangePrototype = new r, H.selectionPrototype = new s, H.createCoreModule("DomUtil", [], function(a, b) {
                function c(a) {
                    var b;
                    return typeof a.namespaceURI == F || null === (b = a.namespaceURI) || "http://www.w3.org/1999/xhtml" == b
                }

                function d(a) {
                    var b = a.parentNode;
                    return 1 == b.nodeType ? b : null
                }

                function e(a) {
                    for (var b = 0; a = a.previousSibling;) ++b;
                    return b
                }

                function f(a) {
                    switch (a.nodeType) {
                        case 7:
                        case 10:
                            return 0;
                        case 3:
                        case 8:
                            return a.length;
                        default:
                            return a.childNodes.length
                    }
                }

                function g(a, b) {
                    var c, d = [];
                    for (c = a; c; c = c.parentNode) d.push(c);
                    for (c = b; c; c = c.parentNode)
                        if (K(d, c)) return c;
                    return null
                }

                function h(a, b, c) {
                    for (var d = c ? b : b.parentNode; d;) {
                        if (d === a) return !0;
                        d = d.parentNode
                    }
                    return !1
                }

                function i(a, b) {
                    return h(a, b, !0)
                }

                function j(a, b, c) {
                    for (var d, e = c ? a : a.parentNode; e;) {
                        if (d = e.parentNode, d === b) return e;
                        e = d
                    }
                    return null
                }

                function k(a) {
                    var b = a.nodeType;
                    return 3 == b || 4 == b || 8 == b
                }

                function l(a) {
                    if (!a) return !1;
                    var b = a.nodeType;
                    return 3 == b || 8 == b
                }

                function m(a, b) {
                    var c = b.nextSibling,
                        d = b.parentNode;
                    return c ? d.insertBefore(a, c) : d.appendChild(a), a
                }

                function n(a, b, c) {
                    var d = a.cloneNode(!1);
                    if (d.deleteData(0, b), a.deleteData(b, a.length - b), m(d, a), c)
                        for (var f, g = 0; f = c[g++];) f.node == a && f.offset > b ? (f.node = d, f.offset -= b) : f.node == a.parentNode && f.offset > e(a) && ++f.offset;
                    return d
                }

                function o(a) {
                    if (9 == a.nodeType) return a;
                    if (typeof a.ownerDocument != F) return a.ownerDocument;
                    if (typeof a.document != F) return a.document;
                    if (a.parentNode) return o(a.parentNode);
                    throw b.createError("getDocument: no document found for node")
                }

                function p(a) {
                    var c = o(a);
                    if (typeof c.defaultView != F) return c.defaultView;
                    if (typeof c.parentWindow != F) return c.parentWindow;
                    throw b.createError("Cannot get a window object for node")
                }

                function q(a) {
                    if (typeof a.contentDocument != F) return a.contentDocument;
                    if (typeof a.contentWindow != F) return a.contentWindow.document;
                    throw b.createError("getIframeDocument: No Document object found for iframe element")
                }

                function r(a) {
                    if (typeof a.contentWindow != F) return a.contentWindow;
                    if (typeof a.contentDocument != F) return a.contentDocument.defaultView;
                    throw b.createError("getIframeWindow: No Window object found for iframe element")
                }

                function s(a) {
                    return a && G.isHostMethod(a, "setTimeout") && G.isHostObject(a, "document")
                }

                function t(a, b, c) {
                    var d;
                    if (a ? G.isHostProperty(a, "nodeType") ? d = 1 == a.nodeType && "iframe" == a.tagName.toLowerCase() ? q(a) : o(a) : s(a) && (d = a.document) : d = document, !d) throw b.createError(c + "(): Parameter must be a Window object or DOM node");
                    return d
                }

                function u(a) {
                    for (var b; b = a.parentNode;) a = b;
                    return a
                }

                function v(a, c, d, f) {
                    var h, i, k, l, m;
                    if (a == d) return c === f ? 0 : f > c ? -1 : 1;
                    if (h = j(d, a, !0)) return c <= e(h) ? -1 : 1;
                    if (h = j(a, d, !0)) return e(h) < f ? -1 : 1;
                    if (i = g(a, d), !i) throw new Error("comparePoints error: nodes have no common ancestor");
                    if (k = a === i ? i : j(a, i, !0), l = d === i ? i : j(d, i, !0), k === l) throw b.createError("comparePoints got to case 4 and childA and childB are the same!");
                    for (m = i.firstChild; m;) {
                        if (m === k) return -1;
                        if (m === l) return 1;
                        m = m.nextSibling
                    }
                }

                function w(a) {
                    var b;
                    try {
                        return b = a.parentNode, !1
                    } catch (c) {
                        return !0
                    }
                }

                function x(a) {
                    if (!a) return "[No node]";
                    if (L && w(a)) return "[Broken node]";
                    if (k(a)) return '"' + a.data + '"';
                    if (1 == a.nodeType) {
                        var b = a.id ? ' id="' + a.id + '"' : "";
                        return "<" + a.nodeName + b + ">[index:" + e(a) + ",length:" + a.childNodes.length + "][" + (a.innerHTML || "[innerHTML not supported]").slice(0, 25) + "]"
                    }
                    return a.nodeName
                }

                function y(a) {
                    for (var b, c = o(a).createDocumentFragment(); b = a.firstChild;) c.appendChild(b);
                    return c
                }

                function z(a, b, c) {
                    var d = H(a),
                        e = a.createElement("div");
                    e.contentEditable = "" + !!c, b && (e.innerHTML = b);
                    var f = d.firstChild;
                    return f ? d.insertBefore(e, f) : d.appendChild(e), e
                }

                function A(a) {
                    return a.parentNode.removeChild(a)
                }

                function B(a) {
                    this.root = a, this._next = a
                }

                function C(a) {
                    return new B(a)
                }

                function D(a, b) {
                    this.node = a, this.offset = b
                }

                function E(a) {
                    this.code = this[a], this.codeName = a, this.message = "DOMException: " + this.codeName
                }
                var F = "undefined",
                    G = a.util,
                    H = G.getBody;
                G.areHostMethods(document, ["createDocumentFragment", "createElement", "createTextNode"]) || b.fail("document missing a Node creation method"), G.isHostMethod(document, "getElementsByTagName") || b.fail("document missing getElementsByTagName method");
                var I = document.createElement("div");
                G.areHostMethods(I, ["insertBefore", "appendChild", "cloneNode"] || !G.areHostObjects(I, ["previousSibling", "nextSibling", "childNodes", "parentNode"])) || b.fail("Incomplete Element implementation"), G.isHostProperty(I, "innerHTML") || b.fail("Element is missing innerHTML property");
                var J = document.createTextNode("test");
                G.areHostMethods(J, ["splitText", "deleteData", "insertData", "appendData", "cloneNode"] || !G.areHostObjects(I, ["previousSibling", "nextSibling", "childNodes", "parentNode"]) || !G.areHostProperties(J, ["data"])) || b.fail("Incomplete Text Node implementation");
                var K = function(a, b) {
                        for (var c = a.length; c--;)
                            if (a[c] === b) return !0;
                        return !1
                    },
                    L = !1;
                ! function() {
                    var b = document.createElement("b");
                    b.innerHTML = "1";
                    var c = b.firstChild;
                    b.innerHTML = "<br />", L = w(c), a.features.crashyTextNodes = L
                }();
                var M;
                typeof window.getComputedStyle != F ? M = function(a, b) {
                    return p(a).getComputedStyle(a, null)[b]
                } : typeof document.documentElement.currentStyle != F ? M = function(a, b) {
                    return a.currentStyle ? a.currentStyle[b] : ""
                } : b.fail("No means of obtaining computed style properties found"), B.prototype = {
                    _current: null,
                    hasNext: function() {
                        return !!this._next
                    },
                    next: function() {
                        var a, b, c = this._current = this._next;
                        if (this._current)
                            if (a = c.firstChild) this._next = a;
                            else {
                                for (b = null; c !== this.root && !(b = c.nextSibling);) c = c.parentNode;
                                this._next = b
                            }
                        return this._current
                    },
                    detach: function() {
                        this._current = this._next = this.root = null
                    }
                }, D.prototype = {
                    equals: function(a) {
                        return !!a && this.node === a.node && this.offset == a.offset
                    },
                    inspect: function() {
                        return "[DomPosition(" + x(this.node) + ":" + this.offset + ")]"
                    },
                    toString: function() {
                        return this.inspect()
                    }
                }, E.prototype = {
                    INDEX_SIZE_ERR: 1,
                    HIERARCHY_REQUEST_ERR: 3,
                    WRONG_DOCUMENT_ERR: 4,
                    NO_MODIFICATION_ALLOWED_ERR: 7,
                    NOT_FOUND_ERR: 8,
                    NOT_SUPPORTED_ERR: 9,
                    INVALID_STATE_ERR: 11,
                    INVALID_NODE_TYPE_ERR: 24
                }, E.prototype.toString = function() {
                    return this.message
                }, a.dom = {
                    arrayContains: K,
                    isHtmlNamespace: c,
                    parentElement: d,
                    getNodeIndex: e,
                    getNodeLength: f,
                    getCommonAncestor: g,
                    isAncestorOf: h,
                    isOrIsAncestorOf: i,
                    getClosestAncestorIn: j,
                    isCharacterDataNode: k,
                    isTextOrCommentNode: l,
                    insertAfter: m,
                    splitDataNode: n,
                    getDocument: o,
                    getWindow: p,
                    getIframeWindow: r,
                    getIframeDocument: q,
                    getBody: H,
                    isWindow: s,
                    getContentDocument: t,
                    getRootContainer: u,
                    comparePoints: v,
                    isBrokenNode: w,
                    inspectNode: x,
                    getComputedStyleProperty: M,
                    createTestElement: z,
                    removeNode: A,
                    fragmentFromNodeChildren: y,
                    createIterator: C,
                    DomPosition: D
                }, a.DOMException = E
            }), H.createCoreModule("DomRange", ["DomUtil"], function(a, b) {
                function c(a, b) {
                    return 3 != a.nodeType && (P(a, b.startContainer) || P(a, b.endContainer))
                }

                function d(a) {
                    return a.document || Q(a.startContainer)
                }

                function e(a) {
                    return W(a.startContainer)
                }

                function f(a) {
                    return new L(a.parentNode, O(a))
                }

                function g(a) {
                    return new L(a.parentNode, O(a) + 1)
                }

                function h(a, b, c) {
                    var d = 11 == a.nodeType ? a.firstChild : a;
                    return N(b) ? c == b.length ? J.insertAfter(a, b) : b.parentNode.insertBefore(a, 0 == c ? b : S(b, c)) : c >= b.childNodes.length ? b.appendChild(a) : b.insertBefore(a, b.childNodes[c]), d
                }

                function i(a, b, c) {
                    if (z(a), z(b), d(b) != d(a)) throw new M("WRONG_DOCUMENT_ERR");
                    var e = R(a.startContainer, a.startOffset, b.endContainer, b.endOffset),
                        f = R(a.endContainer, a.endOffset, b.startContainer, b.startOffset);
                    return c ? 0 >= e && f >= 0 : 0 > e && f > 0
                }

                function j(a) {
                    for (var b, c, e, f = d(a.range).createDocumentFragment(); c = a.next();) {
                        if (b = a.isPartiallySelectedSubtree(), c = c.cloneNode(!b), b && (e = a.getSubtreeIterator(), c.appendChild(j(e)), e.detach()), 10 == c.nodeType) throw new M("HIERARCHY_REQUEST_ERR");
                        f.appendChild(c)
                    }
                    return f
                }

                function k(a, b, c) {
                    var d, e;
                    c = c || {
                        stop: !1
                    };
                    for (var f, g; f = a.next();)
                        if (a.isPartiallySelectedSubtree()) {
                            if (b(f) === !1) return void(c.stop = !0);
                            if (g = a.getSubtreeIterator(), k(g, b, c), g.detach(), c.stop) return
                        } else
                            for (d = J.createIterator(f); e = d.next();)
                                if (b(e) === !1) return void(c.stop = !0)
                }

                function l(a) {
                    for (var b; a.next();) a.isPartiallySelectedSubtree() ? (b = a.getSubtreeIterator(), l(b), b.detach()) : a.remove()
                }

                function m(a) {
                    for (var b, c, e = d(a.range).createDocumentFragment(); b = a.next();) {
                        if (a.isPartiallySelectedSubtree() ? (b = b.cloneNode(!1), c = a.getSubtreeIterator(), b.appendChild(m(c)), c.detach()) : a.remove(), 10 == b.nodeType) throw new M("HIERARCHY_REQUEST_ERR");
                        e.appendChild(b)
                    }
                    return e
                }

                function n(a, b, c) {
                    var d, e = !(!b || !b.length),
                        f = !!c;
                    e && (d = new RegExp("^(" + b.join("|") + ")$"));
                    var g = [];
                    return k(new p(a, !1), function(b) {
                        if ((!e || d.test(b.nodeType)) && (!f || c(b))) {
                            var h = a.startContainer;
                            if (b != h || !N(h) || a.startOffset != h.length) {
                                var i = a.endContainer;
                                b == i && N(i) && 0 == a.endOffset || g.push(b)
                            }
                        }
                    }), g
                }

                function o(a) {
                    var b = "undefined" == typeof a.getName ? "Range" : a.getName();
                    return "[" + b + "(" + J.inspectNode(a.startContainer) + ":" + a.startOffset + ", " + J.inspectNode(a.endContainer) + ":" + a.endOffset + ")]"
                }

                function p(a, b) {
                    if (this.range = a, this.clonePartiallySelectedTextNodes = b, !a.collapsed) {
                        this.sc = a.startContainer, this.so = a.startOffset, this.ec = a.endContainer, this.eo = a.endOffset;
                        var c = a.commonAncestorContainer;
                        this.sc === this.ec && N(this.sc) ? (this.isSingleCharacterDataNode = !0, this._first = this._last = this._next = this.sc) : (this._first = this._next = this.sc !== c || N(this.sc) ? T(this.sc, c, !0) : this.sc.childNodes[this.so], this._last = this.ec !== c || N(this.ec) ? T(this.ec, c, !0) : this.ec.childNodes[this.eo - 1])
                    }
                }

                function q(a) {
                    return function(b, c) {
                        for (var d, e = c ? b : b.parentNode; e;) {
                            if (d = e.nodeType, V(a, d)) return e;
                            e = e.parentNode
                        }
                        return null
                    }
                }

                function r(a, b) {
                    if (ea(a, b)) throw new M("INVALID_NODE_TYPE_ERR")
                }

                function s(a, b) {
                    if (!V(b, a.nodeType)) throw new M("INVALID_NODE_TYPE_ERR")
                }

                function t(a, b) {
                    if (0 > b || b > (N(a) ? a.length : a.childNodes.length)) throw new M("INDEX_SIZE_ERR")
                }

                function u(a, b) {
                    if (ca(a, !0) !== ca(b, !0)) throw new M("WRONG_DOCUMENT_ERR")
                }

                function v(a) {
                    if (da(a, !0)) throw new M("NO_MODIFICATION_ALLOWED_ERR")
                }

                function w(a, b) {
                    if (!a) throw new M(b)
                }

                function x(a, b) {
                    return b <= (N(a) ? a.length : a.childNodes.length)
                }

                function y(a) {
                    return !!a.startContainer && !!a.endContainer && !(X && (J.isBrokenNode(a.startContainer) || J.isBrokenNode(a.endContainer))) && W(a.startContainer) == W(a.endContainer) && x(a.startContainer, a.startOffset) && x(a.endContainer, a.endOffset)
                }

                function z(a) {
                    if (!y(a)) throw new Error("Range error: Range is not valid. This usually happens after DOM mutation. Range: (" + a.inspect() + ")")
                }

                function A(a, b) {
                    z(a);
                    var c = a.startContainer,
                        d = a.startOffset,
                        e = a.endContainer,
                        f = a.endOffset,
                        g = c === e;
                    N(e) && f > 0 && f < e.length && S(e, f, b), N(c) && d > 0 && d < c.length && (c = S(c, d, b), g ? (f -= d, e = c) : e == c.parentNode && f >= O(c) && f++, d = 0), a.setStartAndEnd(c, d, e, f)
                }

                function B(a) {
                    z(a);
                    var b = a.commonAncestorContainer.parentNode.cloneNode(!1);
                    return b.appendChild(a.cloneContents()), b.innerHTML
                }

                function C(a) {
                    a.START_TO_START = ka, a.START_TO_END = la, a.END_TO_END = ma, a.END_TO_START = na, a.NODE_BEFORE = oa, a.NODE_AFTER = pa, a.NODE_BEFORE_AND_AFTER = qa, a.NODE_INSIDE = ra
                }

                function D(a) {
                    C(a), C(a.prototype)
                }

                function E(a, b) {
                    return function() {
                        z(this);
                        var c, d, e = this.startContainer,
                            f = this.startOffset,
                            h = this.commonAncestorContainer,
                            i = new p(this, !0);
                        e !== h && (c = T(e, h, !0), d = g(c), e = d.node, f = d.offset), k(i, v), i.reset();
                        var j = a(i);
                        return i.detach(), b(this, e, f, e, f), j
                    }
                }

                function F(b, d) {
                    function e(a, b) {
                        return function(c) {
                            s(c, Z), s(W(c), $);
                            var d = (a ? f : g)(c);
                            (b ? h : i)(this, d.node, d.offset)
                        }
                    }

                    function h(a, b, c) {
                        var e = a.endContainer,
                            f = a.endOffset;
                        (b !== a.startContainer || c !== a.startOffset) && ((W(b) != W(e) || 1 == R(b, c, e, f)) && (e = b, f = c), d(a, b, c, e, f))
                    }

                    function i(a, b, c) {
                        var e = a.startContainer,
                            f = a.startOffset;
                        (b !== a.endContainer || c !== a.endOffset) && ((W(b) != W(e) || -1 == R(b, c, e, f)) && (e = b, f = c), d(a, e, f, b, c))
                    }
                    var j = function() {};
                    j.prototype = a.rangePrototype, b.prototype = new j, K.extend(b.prototype, {
                        setStart: function(a, b) {
                            r(a, !0), t(a, b), h(this, a, b)
                        },
                        setEnd: function(a, b) {
                            r(a, !0), t(a, b), i(this, a, b)
                        },
                        setStartAndEnd: function() {
                            var a = arguments,
                                b = a[0],
                                c = a[1],
                                e = b,
                                f = c;
                            switch (a.length) {
                                case 3:
                                    f = a[2];
                                    break;
                                case 4:
                                    e = a[2], f = a[3]
                            }
                            d(this, b, c, e, f)
                        },
                        setBoundary: function(a, b, c) {
                            this["set" + (c ? "Start" : "End")](a, b)
                        },
                        setStartBefore: e(!0, !0),
                        setStartAfter: e(!1, !0),
                        setEndBefore: e(!0, !1),
                        setEndAfter: e(!1, !1),
                        collapse: function(a) {
                            z(this), a ? d(this, this.startContainer, this.startOffset, this.startContainer, this.startOffset) : d(this, this.endContainer, this.endOffset, this.endContainer, this.endOffset)
                        },
                        selectNodeContents: function(a) {
                            r(a, !0), d(this, a, 0, a, U(a))
                        },
                        selectNode: function(a) {
                            r(a, !1), s(a, Z);
                            var b = f(a),
                                c = g(a);
                            d(this, b.node, b.offset, c.node, c.offset)
                        },
                        extractContents: E(m, d),
                        deleteContents: E(l, d),
                        canSurroundContents: function() {
                            z(this), v(this.startContainer), v(this.endContainer);
                            var a = new p(this, !0),
                                b = a._first && c(a._first, this) || a._last && c(a._last, this);
                            return a.detach(), !b
                        },
                        splitBoundaries: function() {
                            A(this)
                        },
                        splitBoundariesPreservingPositions: function(a) {
                            A(this, a)
                        },
                        normalizeBoundaries: function() {
                            z(this);
                            var a, b = this.startContainer,
                                c = this.startOffset,
                                e = this.endContainer,
                                f = this.endOffset,
                                g = function(a) {
                                    var b = a.nextSibling;
                                    b && b.nodeType == a.nodeType && (e = a, f = a.length, a.appendData(b.data), Y(b))
                                },
                                h = function(a) {
                                    var d = a.previousSibling;
                                    if (d && d.nodeType == a.nodeType) {
                                        b = a;
                                        var g = a.length;
                                        if (c = d.length, a.insertData(0, d.data), Y(d), b == e) f += c, e = b;
                                        else if (e == a.parentNode) {
                                            var h = O(a);
                                            f == h ? (e = a, f = g) : f > h && f--
                                        }
                                    }
                                },
                                i = !0;
                            if (N(e)) f == e.length ? g(e) : 0 == f && (a = e.previousSibling, a && a.nodeType == e.nodeType && (f = a.length, b == e && (i = !1), a.appendData(e.data), Y(e), e = a));
                            else {
                                if (f > 0) {
                                    var j = e.childNodes[f - 1];
                                    j && N(j) && g(j)
                                }
                                i = !this.collapsed
                            }
                            if (i) {
                                if (N(b)) 0 == c ? h(b) : c == b.length && (a = b.nextSibling, a && a.nodeType == b.nodeType && (e == a && (e = b, f += b.length), b.appendData(a.data), Y(a)));
                                else if (c < b.childNodes.length) {
                                    var k = b.childNodes[c];
                                    k && N(k) && h(k)
                                }
                            } else b = e, c = f;
                            d(this, b, c, e, f)
                        },
                        collapseToPoint: function(a, b) {
                            r(a, !0), t(a, b), this.setStartAndEnd(a, b)
                        }
                    }), D(b)
                }

                function G(a) {
                    a.collapsed = a.startContainer === a.endContainer && a.startOffset === a.endOffset, a.commonAncestorContainer = a.collapsed ? a.startContainer : J.getCommonAncestor(a.startContainer, a.endContainer)
                }

                function H(a, b, c, d, e) {
                    a.startContainer = b, a.startOffset = c, a.endContainer = d, a.endOffset = e, a.document = J.getDocument(b), G(a)
                }

                function I(a) {
                    this.startContainer = a, this.startOffset = 0, this.endContainer = a, this.endOffset = 0, this.document = a, G(this)
                }
                var J = a.dom,
                    K = a.util,
                    L = J.DomPosition,
                    M = a.DOMException,
                    N = J.isCharacterDataNode,
                    O = J.getNodeIndex,
                    P = J.isOrIsAncestorOf,
                    Q = J.getDocument,
                    R = J.comparePoints,
                    S = J.splitDataNode,
                    T = J.getClosestAncestorIn,
                    U = J.getNodeLength,
                    V = J.arrayContains,
                    W = J.getRootContainer,
                    X = a.features.crashyTextNodes,
                    Y = J.removeNode;
                p.prototype = {
                    _current: null,
                    _next: null,
                    _first: null,
                    _last: null,
                    isSingleCharacterDataNode: !1,
                    reset: function() {
                        this._current = null, this._next = this._first
                    },
                    hasNext: function() {
                        return !!this._next
                    },
                    next: function() {
                        var a = this._current = this._next;
                        return a && (this._next = a !== this._last ? a.nextSibling : null, N(a) && this.clonePartiallySelectedTextNodes && (a === this.ec && (a = a.cloneNode(!0)).deleteData(this.eo, a.length - this.eo), this._current === this.sc && (a = a.cloneNode(!0)).deleteData(0, this.so))), a
                    },
                    remove: function() {
                        var a, b, c = this._current;
                        !N(c) || c !== this.sc && c !== this.ec ? c.parentNode && Y(c) : (a = c === this.sc ? this.so : 0, b = c === this.ec ? this.eo : c.length, a != b && c.deleteData(a, b - a))
                    },
                    isPartiallySelectedSubtree: function() {
                        var a = this._current;
                        return c(a, this.range)
                    },
                    getSubtreeIterator: function() {
                        var a;
                        if (this.isSingleCharacterDataNode) a = this.range.cloneRange(), a.collapse(!1);
                        else {
                            a = new I(d(this.range));
                            var b = this._current,
                                c = b,
                                e = 0,
                                f = b,
                                g = U(b);
                            P(b, this.sc) && (c = this.sc, e = this.so), P(b, this.ec) && (f = this.ec, g = this.eo), H(a, c, e, f, g)
                        }
                        return new p(a, this.clonePartiallySelectedTextNodes)
                    },
                    detach: function() {
                        this.range = this._current = this._next = this._first = this._last = this.sc = this.so = this.ec = this.eo = null
                    }
                };
                var Z = [1, 3, 4, 5, 7, 8, 10],
                    $ = [2, 9, 11],
                    _ = [5, 6, 10, 12],
                    aa = [1, 3, 4, 5, 7, 8, 10, 11],
                    ba = [1, 3, 4, 5, 7, 8],
                    ca = q([9, 11]),
                    da = q(_),
                    ea = q([6, 10, 12]),
                    fa = document.createElement("style"),
                    ga = !1;
                try {
                    fa.innerHTML = "<b>x</b>", ga = 3 == fa.firstChild.nodeType
                } catch (ha) {}
                a.features.htmlParsingConforms = ga;
                var ia = ga ? function(a) {
                        var b = this.startContainer,
                            c = Q(b);
                        if (!b) throw new M("INVALID_STATE_ERR");
                        var d = null;
                        return 1 == b.nodeType ? d = b : N(b) && (d = J.parentElement(b)), d = null === d || "HTML" == d.nodeName && J.isHtmlNamespace(Q(d).documentElement) && J.isHtmlNamespace(d) ? c.createElement("body") : d.cloneNode(!1), d.innerHTML = a, J.fragmentFromNodeChildren(d)
                    } : function(a) {
                        var b = d(this),
                            c = b.createElement("body");
                        return c.innerHTML = a, J.fragmentFromNodeChildren(c)
                    },
                    ja = ["startContainer", "startOffset", "endContainer", "endOffset", "collapsed", "commonAncestorContainer"],
                    ka = 0,
                    la = 1,
                    ma = 2,
                    na = 3,
                    oa = 0,
                    pa = 1,
                    qa = 2,
                    ra = 3;
                K.extend(a.rangePrototype, {
                    compareBoundaryPoints: function(a, b) {
                        z(this), u(this.startContainer, b.startContainer);
                        var c, d, e, f, g = a == na || a == ka ? "start" : "end",
                            h = a == la || a == ka ? "start" : "end";
                        return c = this[g + "Container"], d = this[g + "Offset"], e = b[h + "Container"], f = b[h + "Offset"], R(c, d, e, f)
                    },
                    insertNode: function(a) {
                        if (z(this), s(a, aa), v(this.startContainer), P(a, this.startContainer)) throw new M("HIERARCHY_REQUEST_ERR");
                        var b = h(a, this.startContainer, this.startOffset);
                        this.setStartBefore(b)
                    },
                    cloneContents: function() {
                        z(this);
                        var a, b;
                        if (this.collapsed) return d(this).createDocumentFragment();
                        if (this.startContainer === this.endContainer && N(this.startContainer)) return a = this.startContainer.cloneNode(!0), a.data = a.data.slice(this.startOffset, this.endOffset), b = d(this).createDocumentFragment(), b.appendChild(a), b;
                        var c = new p(this, !0);
                        return a = j(c), c.detach(), a
                    },
                    canSurroundContents: function() {
                        z(this), v(this.startContainer), v(this.endContainer);
                        var a = new p(this, !0),
                            b = a._first && c(a._first, this) || a._last && c(a._last, this);
                        return a.detach(), !b
                    },
                    surroundContents: function(a) {
                        if (s(a, ba), !this.canSurroundContents()) throw new M("INVALID_STATE_ERR");
                        var b = this.extractContents();
                        if (a.hasChildNodes())
                            for (; a.lastChild;) a.removeChild(a.lastChild);
                        h(a, this.startContainer, this.startOffset), a.appendChild(b), this.selectNode(a)
                    },
                    cloneRange: function() {
                        z(this);
                        for (var a, b = new I(d(this)), c = ja.length; c--;) a = ja[c], b[a] = this[a];
                        return b
                    },
                    toString: function() {
                        z(this);
                        var a = this.startContainer;
                        if (a === this.endContainer && N(a)) return 3 == a.nodeType || 4 == a.nodeType ? a.data.slice(this.startOffset, this.endOffset) : "";
                        var b = [],
                            c = new p(this, !0);
                        return k(c, function(a) {
                            (3 == a.nodeType || 4 == a.nodeType) && b.push(a.data)
                        }), c.detach(), b.join("")
                    },
                    compareNode: function(a) {
                        z(this);
                        var b = a.parentNode,
                            c = O(a);
                        if (!b) throw new M("NOT_FOUND_ERR");
                        var d = this.comparePoint(b, c),
                            e = this.comparePoint(b, c + 1);
                        return 0 > d ? e > 0 ? qa : oa : e > 0 ? pa : ra
                    },
                    comparePoint: function(a, b) {
                        return z(this), w(a, "HIERARCHY_REQUEST_ERR"), u(a, this.startContainer), R(a, b, this.startContainer, this.startOffset) < 0 ? -1 : R(a, b, this.endContainer, this.endOffset) > 0 ? 1 : 0
                    },
                    createContextualFragment: ia,
                    toHtml: function() {
                        return B(this)
                    },
                    intersectsNode: function(a, b) {
                        if (z(this), W(a) != e(this)) return !1;
                        var c = a.parentNode,
                            d = O(a);
                        if (!c) return !0;
                        var f = R(c, d, this.endContainer, this.endOffset),
                            g = R(c, d + 1, this.startContainer, this.startOffset);
                        return b ? 0 >= f && g >= 0 : 0 > f && g > 0
                    },
                    isPointInRange: function(a, b) {
                        return z(this), w(a, "HIERARCHY_REQUEST_ERR"), u(a, this.startContainer), R(a, b, this.startContainer, this.startOffset) >= 0 && R(a, b, this.endContainer, this.endOffset) <= 0
                    },
                    intersectsRange: function(a) {
                        return i(this, a, !1)
                    },
                    intersectsOrTouchesRange: function(a) {
                        return i(this, a, !0)
                    },
                    intersection: function(a) {
                        if (this.intersectsRange(a)) {
                            var b = R(this.startContainer, this.startOffset, a.startContainer, a.startOffset),
                                c = R(this.endContainer, this.endOffset, a.endContainer, a.endOffset),
                                d = this.cloneRange();
                            return -1 == b && d.setStart(a.startContainer, a.startOffset), 1 == c && d.setEnd(a.endContainer, a.endOffset), d
                        }
                        return null
                    },
                    union: function(a) {
                        if (this.intersectsOrTouchesRange(a)) {
                            var b = this.cloneRange();
                            return -1 == R(a.startContainer, a.startOffset, this.startContainer, this.startOffset) && b.setStart(a.startContainer, a.startOffset), 1 == R(a.endContainer, a.endOffset, this.endContainer, this.endOffset) && b.setEnd(a.endContainer, a.endOffset), b
                        }
                        throw new M("Ranges do not intersect")
                    },
                    containsNode: function(a, b) {
                        return b ? this.intersectsNode(a, !1) : this.compareNode(a) == ra
                    },
                    containsNodeContents: function(a) {
                        return this.comparePoint(a, 0) >= 0 && this.comparePoint(a, U(a)) <= 0
                    },
                    containsRange: function(a) {
                        var b = this.intersection(a);
                        return null !== b && a.equals(b)
                    },
                    containsNodeText: function(a) {
                        var b = this.cloneRange();
                        b.selectNode(a);
                        var c = b.getNodes([3]);
                        if (c.length > 0) {
                            b.setStart(c[0], 0);
                            var d = c.pop();
                            return b.setEnd(d, d.length), this.containsRange(b)
                        }
                        return this.containsNodeContents(a)
                    },
                    getNodes: function(a, b) {
                        return z(this), n(this, a, b)
                    },
                    getDocument: function() {
                        return d(this)
                    },
                    collapseBefore: function(a) {
                        this.setEndBefore(a), this.collapse(!1)
                    },
                    collapseAfter: function(a) {
                        this.setStartAfter(a), this.collapse(!0)
                    },
                    getBookmark: function(b) {
                        var c = d(this),
                            e = a.createRange(c);
                        b = b || J.getBody(c), e.selectNodeContents(b);
                        var f = this.intersection(e),
                            g = 0,
                            h = 0;
                        return f && (e.setEnd(f.startContainer, f.startOffset), g = e.toString().length, h = g + f.toString().length), {
                            start: g,
                            end: h,
                            containerNode: b
                        }
                    },
                    moveToBookmark: function(a) {
                        var b = a.containerNode,
                            c = 0;
                        this.setStart(b, 0), this.collapse(!0);
                        for (var d, e, f, g, h = [b], i = !1, j = !1; !j && (d = h.pop());)
                            if (3 == d.nodeType) e = c + d.length, !i && a.start >= c && a.start <= e && (this.setStart(d, a.start - c), i = !0), i && a.end >= c && a.end <= e && (this.setEnd(d, a.end - c), j = !0), c = e;
                            else
                                for (g = d.childNodes, f = g.length; f--;) h.push(g[f])
                    },
                    getName: function() {
                        return "DomRange"
                    },
                    equals: function(a) {
                        return I.rangesEqual(this, a)
                    },
                    isValid: function() {
                        return y(this)
                    },
                    inspect: function() {
                        return o(this)
                    },
                    detach: function() {}
                }), F(I, H), K.extend(I, {
                    rangeProperties: ja,
                    RangeIterator: p,
                    copyComparisonConstants: D,
                    createPrototypeRange: F,
                    inspect: o,
                    toHtml: B,
                    getRangeDocument: d,
                    rangesEqual: function(a, b) {
                        return a.startContainer === b.startContainer && a.startOffset === b.startOffset && a.endContainer === b.endContainer && a.endOffset === b.endOffset
                    }
                }), a.DomRange = I
            }), H.createCoreModule("WrappedRange", ["DomRange"], function(a, b) {
                var c, d, e = a.dom,
                    f = a.util,
                    g = e.DomPosition,
                    h = a.DomRange,
                    i = e.getBody,
                    j = e.getContentDocument,
                    k = e.isCharacterDataNode;
                if (a.features.implementsDomRange && ! function() {
                        function d(a) {
                            for (var b, c = m.length; c--;) b = m[c], a[b] = a.nativeRange[b];
                            a.collapsed = a.startContainer === a.endContainer && a.startOffset === a.endOffset
                        }

                        function g(a, b, c, d, e) {
                            var f = a.startContainer !== b || a.startOffset != c,
                                g = a.endContainer !== d || a.endOffset != e,
                                h = !a.equals(a.nativeRange);
                            (f || g || h) && (a.setEnd(d, e), a.setStart(b, c))
                        }
                        var k, l, m = h.rangeProperties;
                        c = function(a) {
                            if (!a) throw b.createError("WrappedRange: Range must be specified");
                            this.nativeRange = a, d(this)
                        }, h.createPrototypeRange(c, g), k = c.prototype, k.selectNode = function(a) {
                            this.nativeRange.selectNode(a), d(this)
                        }, k.cloneContents = function() {
                            return this.nativeRange.cloneContents()
                        }, k.surroundContents = function(a) {
                            this.nativeRange.surroundContents(a), d(this)
                        }, k.collapse = function(a) {
                            this.nativeRange.collapse(a), d(this)
                        }, k.cloneRange = function() {
                            return new c(this.nativeRange.cloneRange())
                        }, k.refresh = function() {
                            d(this)
                        }, k.toString = function() {
                            return this.nativeRange.toString()
                        };
                        var n = document.createTextNode("test");
                        i(document).appendChild(n);
                        var o = document.createRange();
                        o.setStart(n, 0), o.setEnd(n, 0);
                        try {
                            o.setStart(n, 1), k.setStart = function(a, b) {
                                this.nativeRange.setStart(a, b), d(this)
                            }, k.setEnd = function(a, b) {
                                this.nativeRange.setEnd(a, b), d(this)
                            }, l = function(a) {
                                return function(b) {
                                    this.nativeRange[a](b), d(this)
                                }
                            }
                        } catch (p) {
                            k.setStart = function(a, b) {
                                try {
                                    this.nativeRange.setStart(a, b)
                                } catch (c) {
                                    this.nativeRange.setEnd(a, b), this.nativeRange.setStart(a, b)
                                }
                                d(this)
                            }, k.setEnd = function(a, b) {
                                try {
                                    this.nativeRange.setEnd(a, b)
                                } catch (c) {
                                    this.nativeRange.setStart(a, b), this.nativeRange.setEnd(a, b)
                                }
                                d(this)
                            }, l = function(a, b) {
                                return function(c) {
                                    try {
                                        this.nativeRange[a](c)
                                    } catch (e) {
                                        this.nativeRange[b](c), this.nativeRange[a](c)
                                    }
                                    d(this)
                                }
                            }
                        }
                        k.setStartBefore = l("setStartBefore", "setEndBefore"), k.setStartAfter = l("setStartAfter", "setEndAfter"), k.setEndBefore = l("setEndBefore", "setStartBefore"), k.setEndAfter = l("setEndAfter", "setStartAfter"), k.selectNodeContents = function(a) {
                            this.setStartAndEnd(a, 0, e.getNodeLength(a))
                        }, o.selectNodeContents(n), o.setEnd(n, 3);
                        var q = document.createRange();
                        q.selectNodeContents(n), q.setEnd(n, 4), q.setStart(n, 2), -1 == o.compareBoundaryPoints(o.START_TO_END, q) && 1 == o.compareBoundaryPoints(o.END_TO_START, q) ? k.compareBoundaryPoints = function(a, b) {
                            return b = b.nativeRange || b, a == b.START_TO_END ? a = b.END_TO_START : a == b.END_TO_START && (a = b.START_TO_END), this.nativeRange.compareBoundaryPoints(a, b)
                        } : k.compareBoundaryPoints = function(a, b) {
                            return this.nativeRange.compareBoundaryPoints(a, b.nativeRange || b)
                        };
                        var r = document.createElement("div");
                        r.innerHTML = "123";
                        var s = r.firstChild,
                            t = i(document);
                        t.appendChild(r), o.setStart(s, 1), o.setEnd(s, 2), o.deleteContents(), "13" == s.data && (k.deleteContents = function() {
                            this.nativeRange.deleteContents(), d(this)
                        }, k.extractContents = function() {
                            var a = this.nativeRange.extractContents();
                            return d(this), a
                        }), t.removeChild(r), t = null, f.isHostMethod(o, "createContextualFragment") && (k.createContextualFragment = function(a) {
                            return this.nativeRange.createContextualFragment(a)
                        }), i(document).removeChild(n), k.getName = function() {
                            return "WrappedRange"
                        }, a.WrappedRange = c, a.createNativeRange = function(a) {
                            return a = j(a, b, "createNativeRange"), a.createRange()
                        }
                    }(), a.features.implementsTextRange) {
                    var l = function(a) {
                            var b = a.parentElement(),
                                c = a.duplicate();
                            c.collapse(!0);
                            var d = c.parentElement();
                            c = a.duplicate(), c.collapse(!1);
                            var f = c.parentElement(),
                                g = d == f ? d : e.getCommonAncestor(d, f);
                            return g == b ? g : e.getCommonAncestor(b, g)
                        },
                        m = function(a) {
                            return 0 == a.compareEndPoints("StartToEnd", a)
                        },
                        n = function(a, b, c, d, f) {
                            var h = a.duplicate();
                            h.collapse(c);
                            var i = h.parentElement();
                            if (e.isOrIsAncestorOf(b, i) || (i = b), !i.canHaveHTML) {
                                var j = new g(i.parentNode, e.getNodeIndex(i));
                                return {
                                    boundaryPosition: j,
                                    nodeInfo: {
                                        nodeIndex: j.offset,
                                        containerElement: j.node
                                    }
                                }
                            }
                            var l = e.getDocument(i).createElement("span");
                            l.parentNode && e.removeNode(l);
                            for (var m, n, o, p, q, r = c ? "StartToStart" : "StartToEnd", s = f && f.containerElement == i ? f.nodeIndex : 0, t = i.childNodes.length, u = t, v = u;;) {
                                if (v == t ? i.appendChild(l) : i.insertBefore(l, i.childNodes[v]), h.moveToElementText(l), m = h.compareEndPoints(r, a), 0 == m || s == u) break;
                                if (-1 == m) {
                                    if (u == s + 1) break;
                                    s = v
                                } else u = u == s + 1 ? s : v;
                                v = Math.floor((s + u) / 2), i.removeChild(l)
                            }
                            if (q = l.nextSibling, -1 == m && q && k(q)) {
                                h.setEndPoint(c ? "EndToStart" : "EndToEnd", a);
                                var w;
                                if (/[\r\n]/.test(q.data)) {
                                    var x = h.duplicate(),
                                        y = x.text.replace(/\r\n/g, "\r").length;
                                    for (w = x.moveStart("character", y); - 1 == (m = x.compareEndPoints("StartToEnd", x));) w++, x.moveStart("character", 1)
                                } else w = h.text.length;
                                p = new g(q, w)
                            } else n = (d || !c) && l.previousSibling, o = (d || c) && l.nextSibling, p = o && k(o) ? new g(o, 0) : n && k(n) ? new g(n, n.data.length) : new g(i, e.getNodeIndex(l));
                            return e.removeNode(l), {
                                boundaryPosition: p,
                                nodeInfo: {
                                    nodeIndex: v,
                                    containerElement: i
                                }
                            }
                        },
                        o = function(a, b) {
                            var c, d, f, g, h = a.offset,
                                j = e.getDocument(a.node),
                                l = i(j).createTextRange(),
                                m = k(a.node);
                            return m ? (c = a.node, d = c.parentNode) : (g = a.node.childNodes, c = h < g.length ? g[h] : null, d = a.node), f = j.createElement("span"), f.innerHTML = "&#feff;", c ? d.insertBefore(f, c) : d.appendChild(f), l.moveToElementText(f), l.collapse(!b), d.removeChild(f), m && l[b ? "moveStart" : "moveEnd"]("character", h), l
                        };
                    d = function(a) {
                            this.textRange = a, this.refresh()
                        }, d.prototype = new h(document),
                        d.prototype.refresh = function() {
                            var a, b, c, d = l(this.textRange);
                            m(this.textRange) ? b = a = n(this.textRange, d, !0, !0).boundaryPosition : (c = n(this.textRange, d, !0, !1), a = c.boundaryPosition, b = n(this.textRange, d, !1, !1, c.nodeInfo).boundaryPosition), this.setStart(a.node, a.offset), this.setEnd(b.node, b.offset)
                        }, d.prototype.getName = function() {
                            return "WrappedTextRange"
                        }, h.copyComparisonConstants(d);
                    var p = function(a) {
                        if (a.collapsed) return o(new g(a.startContainer, a.startOffset), !0);
                        var b = o(new g(a.startContainer, a.startOffset), !0),
                            c = o(new g(a.endContainer, a.endOffset), !1),
                            d = i(h.getRangeDocument(a)).createTextRange();
                        return d.setEndPoint("StartToStart", b), d.setEndPoint("EndToEnd", c), d
                    };
                    if (d.rangeToTextRange = p, d.prototype.toTextRange = function() {
                            return p(this)
                        }, a.WrappedTextRange = d, !a.features.implementsDomRange || a.config.preferTextRange) {
                        var q = function(a) {
                            return a("return this;")()
                        }(Function);
                        "undefined" == typeof q.Range && (q.Range = d), a.createNativeRange = function(a) {
                            return a = j(a, b, "createNativeRange"), i(a).createTextRange()
                        }, a.WrappedRange = d
                    }
                }
                a.createRange = function(c) {
                    return c = j(c, b, "createRange"), new a.WrappedRange(a.createNativeRange(c))
                }, a.createRangyRange = function(a) {
                    return a = j(a, b, "createRangyRange"), new h(a)
                }, f.createAliasForDeprecatedMethod(a, "createIframeRange", "createRange"), f.createAliasForDeprecatedMethod(a, "createIframeRangyRange", "createRangyRange"), a.addShimListener(function(b) {
                    var c = b.document;
                    "undefined" == typeof c.createRange && (c.createRange = function() {
                        return a.createRange(c)
                    }), c = b = null
                })
            }), H.createCoreModule("WrappedSelection", ["DomRange", "WrappedRange"], function(a, b) {
                function c(a) {
                    return "string" == typeof a ? /^backward(s)?$/i.test(a) : !!a
                }

                function d(a, c) {
                    if (a) {
                        if (C.isWindow(a)) return a;
                        if (a instanceof r) return a.win;
                        var d = C.getContentDocument(a, b, c);
                        return C.getWindow(d)
                    }
                    return window
                }

                function e(a) {
                    return d(a, "getWinSelection").getSelection()
                }

                function f(a) {
                    return d(a, "getDocSelection").document.selection
                }

                function g(a) {
                    var b = !1;
                    return a.anchorNode && (b = 1 == C.comparePoints(a.anchorNode, a.anchorOffset, a.focusNode, a.focusOffset)), b
                }

                function h(a, b, c) {
                    var d = c ? "end" : "start",
                        e = c ? "start" : "end";
                    a.anchorNode = b[d + "Container"], a.anchorOffset = b[d + "Offset"], a.focusNode = b[e + "Container"], a.focusOffset = b[e + "Offset"]
                }

                function i(a) {
                    var b = a.nativeSelection;
                    a.anchorNode = b.anchorNode, a.anchorOffset = b.anchorOffset, a.focusNode = b.focusNode, a.focusOffset = b.focusOffset
                }

                function j(a) {
                    a.anchorNode = a.focusNode = null, a.anchorOffset = a.focusOffset = 0, a.rangeCount = 0, a.isCollapsed = !0, a._ranges.length = 0
                }

                function k(b) {
                    var c;
                    return b instanceof F ? (c = a.createNativeRange(b.getDocument()), c.setEnd(b.endContainer, b.endOffset), c.setStart(b.startContainer, b.startOffset)) : b instanceof G ? c = b.nativeRange : J.implementsDomRange && b instanceof C.getWindow(b.startContainer).Range && (c = b), c
                }

                function l(a) {
                    if (!a.length || 1 != a[0].nodeType) return !1;
                    for (var b = 1, c = a.length; c > b; ++b)
                        if (!C.isAncestorOf(a[0], a[b])) return !1;
                    return !0
                }

                function m(a) {
                    var c = a.getNodes();
                    if (!l(c)) throw b.createError("getSingleElementFromRange: range " + a.inspect() + " did not consist of a single element");
                    return c[0]
                }

                function n(a) {
                    return !!a && "undefined" != typeof a.text
                }

                function o(a, b) {
                    var c = new G(b);
                    a._ranges = [c], h(a, c, !1), a.rangeCount = 1, a.isCollapsed = c.collapsed
                }

                function p(b) {
                    if (b._ranges.length = 0, "None" == b.docSelection.type) j(b);
                    else {
                        var c = b.docSelection.createRange();
                        if (n(c)) o(b, c);
                        else {
                            b.rangeCount = c.length;
                            for (var d, e = L(c.item(0)), f = 0; f < b.rangeCount; ++f) d = a.createRange(e), d.selectNode(c.item(f)), b._ranges.push(d);
                            b.isCollapsed = 1 == b.rangeCount && b._ranges[0].collapsed, h(b, b._ranges[b.rangeCount - 1], !1)
                        }
                    }
                }

                function q(a, c) {
                    for (var d = a.docSelection.createRange(), e = m(c), f = L(d.item(0)), g = M(f).createControlRange(), h = 0, i = d.length; i > h; ++h) g.add(d.item(h));
                    try {
                        g.add(e)
                    } catch (j) {
                        throw b.createError("addRange(): Element within the specified Range could not be added to control selection (does it have layout?)")
                    }
                    g.select(), p(a)
                }

                function r(a, b, c) {
                    this.nativeSelection = a, this.docSelection = b, this._ranges = [], this.win = c, this.refresh()
                }

                function s(a) {
                    a.win = a.anchorNode = a.focusNode = a._ranges = null, a.rangeCount = a.anchorOffset = a.focusOffset = 0, a.detached = !0
                }

                function t(a, b) {
                    for (var c, d, e = ba.length; e--;)
                        if (c = ba[e], d = c.selection, "deleteAll" == b) s(d);
                        else if (c.win == a) return "delete" == b ? (ba.splice(e, 1), !0) : d;
                    return "deleteAll" == b && (ba.length = 0), null
                }

                function u(a, c) {
                    for (var d, e = L(c[0].startContainer), f = M(e).createControlRange(), g = 0, h = c.length; h > g; ++g) {
                        d = m(c[g]);
                        try {
                            f.add(d)
                        } catch (i) {
                            throw b.createError("setRanges(): Element within one of the specified Ranges could not be added to control selection (does it have layout?)")
                        }
                    }
                    f.select(), p(a)
                }

                function v(a, b) {
                    if (a.win.document != L(b)) throw new H("WRONG_DOCUMENT_ERR")
                }

                function w(b) {
                    return function(c, d) {
                        var e;
                        this.rangeCount ? (e = this.getRangeAt(0), e["set" + (b ? "Start" : "End")](c, d)) : (e = a.createRange(this.win.document), e.setStartAndEnd(c, d)), this.setSingleRange(e, this.isBackward())
                    }
                }

                function x(a) {
                    var b = [],
                        c = new I(a.anchorNode, a.anchorOffset),
                        d = new I(a.focusNode, a.focusOffset),
                        e = "function" == typeof a.getName ? a.getName() : "Selection";
                    if ("undefined" != typeof a.rangeCount)
                        for (var f = 0, g = a.rangeCount; g > f; ++f) b[f] = F.inspect(a.getRangeAt(f));
                    return "[" + e + "(Ranges: " + b.join(", ") + ")(anchor: " + c.inspect() + ", focus: " + d.inspect() + "]"
                }
                a.config.checkSelectionRanges = !0;
                var y, z, A = "boolean",
                    B = "number",
                    C = a.dom,
                    D = a.util,
                    E = D.isHostMethod,
                    F = a.DomRange,
                    G = a.WrappedRange,
                    H = a.DOMException,
                    I = C.DomPosition,
                    J = a.features,
                    K = "Control",
                    L = C.getDocument,
                    M = C.getBody,
                    N = F.rangesEqual,
                    O = E(window, "getSelection"),
                    P = D.isHostObject(document, "selection");
                J.implementsWinGetSelection = O, J.implementsDocSelection = P;
                var Q = P && (!O || a.config.preferTextRange);
                if (Q) y = f, a.isSelectionValid = function(a) {
                    var b = d(a, "isSelectionValid").document,
                        c = b.selection;
                    return "None" != c.type || L(c.createRange().parentElement()) == b
                };
                else {
                    if (!O) return b.fail("Neither document.selection or window.getSelection() detected."), !1;
                    y = e, a.isSelectionValid = function() {
                        return !0
                    }
                }
                a.getNativeSelection = y;
                var R = y();
                if (!R) return b.fail("Native selection was null (possibly issue 138?)"), !1;
                var S = a.createNativeRange(document),
                    T = M(document),
                    U = D.areHostProperties(R, ["anchorNode", "focusNode", "anchorOffset", "focusOffset"]);
                J.selectionHasAnchorAndFocus = U;
                var V = E(R, "extend");
                J.selectionHasExtend = V;
                var W = typeof R.rangeCount == B;
                J.selectionHasRangeCount = W;
                var X = !1,
                    Y = !0,
                    Z = V ? function(b, c) {
                        var d = F.getRangeDocument(c),
                            e = a.createRange(d);
                        e.collapseToPoint(c.endContainer, c.endOffset), b.addRange(k(e)), b.extend(c.startContainer, c.startOffset)
                    } : null;
                D.areHostMethods(R, ["addRange", "getRangeAt", "removeAllRanges"]) && typeof R.rangeCount == B && J.implementsDomRange && ! function() {
                    var b = window.getSelection();
                    if (b) {
                        for (var c = b.rangeCount, d = c > 1, e = [], f = g(b), h = 0; c > h; ++h) e[h] = b.getRangeAt(h);
                        var i = C.createTestElement(document, "", !1),
                            j = i.appendChild(document.createTextNode("   ")),
                            k = document.createRange();
                        if (k.setStart(j, 1), k.collapse(!0), b.removeAllRanges(), b.addRange(k), Y = 1 == b.rangeCount, b.removeAllRanges(), !d) {
                            var l = window.navigator.appVersion.match(/Chrome\/(.*?) /);
                            if (l && parseInt(l[1]) >= 36) X = !1;
                            else {
                                var m = k.cloneRange();
                                k.setStart(j, 0), m.setEnd(j, 3), m.setStart(j, 2), b.addRange(k), b.addRange(m), X = 2 == b.rangeCount
                            }
                        }
                        for (C.removeNode(i), b.removeAllRanges(), h = 0; c > h; ++h) 0 == h && f ? Z ? Z(b, e[h]) : (a.warn("Rangy initialization: original selection was backwards but selection has been restored forwards because the browser does not support Selection.extend"), b.addRange(e[h])) : b.addRange(e[h])
                    }
                }(), J.selectionSupportsMultipleRanges = X, J.collapsedNonEditableSelectionsSupported = Y;
                var $, _ = !1;
                T && E(T, "createControlRange") && ($ = T.createControlRange(), D.areHostProperties($, ["item", "add"]) && (_ = !0)), J.implementsControlRange = _, z = U ? function(a) {
                    return a.anchorNode === a.focusNode && a.anchorOffset === a.focusOffset
                } : function(a) {
                    return a.rangeCount ? a.getRangeAt(a.rangeCount - 1).collapsed : !1
                };
                var aa;
                E(R, "getRangeAt") ? aa = function(a, b) {
                    try {
                        return a.getRangeAt(b)
                    } catch (c) {
                        return null
                    }
                } : U && (aa = function(b) {
                    var c = L(b.anchorNode),
                        d = a.createRange(c);
                    return d.setStartAndEnd(b.anchorNode, b.anchorOffset, b.focusNode, b.focusOffset), d.collapsed !== this.isCollapsed && d.setStartAndEnd(b.focusNode, b.focusOffset, b.anchorNode, b.anchorOffset), d
                }), r.prototype = a.selectionPrototype;
                var ba = [],
                    ca = function(a) {
                        if (a && a instanceof r) return a.refresh(), a;
                        a = d(a, "getNativeSelection");
                        var b = t(a),
                            c = y(a),
                            e = P ? f(a) : null;
                        return b ? (b.nativeSelection = c, b.docSelection = e, b.refresh()) : (b = new r(c, e, a), ba.push({
                            win: a,
                            selection: b
                        })), b
                    };
                a.getSelection = ca, D.createAliasForDeprecatedMethod(a, "getIframeSelection", "getSelection");
                var da = r.prototype;
                if (!Q && U && D.areHostMethods(R, ["removeAllRanges", "addRange"])) {
                    da.removeAllRanges = function() {
                        this.nativeSelection.removeAllRanges(), j(this)
                    };
                    var ea = function(a, b) {
                        Z(a.nativeSelection, b), a.refresh()
                    };
                    W ? da.addRange = function(b, d) {
                        if (_ && P && this.docSelection.type == K) q(this, b);
                        else if (c(d) && V) ea(this, b);
                        else {
                            var e;
                            X ? e = this.rangeCount : (this.removeAllRanges(), e = 0);
                            var f = k(b).cloneRange();
                            try {
                                this.nativeSelection.addRange(f)
                            } catch (g) {}
                            if (this.rangeCount = this.nativeSelection.rangeCount, this.rangeCount == e + 1) {
                                if (a.config.checkSelectionRanges) {
                                    var i = aa(this.nativeSelection, this.rangeCount - 1);
                                    i && !N(i, b) && (b = new G(i))
                                }
                                this._ranges[this.rangeCount - 1] = b, h(this, b, ha(this.nativeSelection)), this.isCollapsed = z(this)
                            } else this.refresh()
                        }
                    } : da.addRange = function(a, b) {
                        c(b) && V ? ea(this, a) : (this.nativeSelection.addRange(k(a)), this.refresh())
                    }, da.setRanges = function(a) {
                        if (_ && P && a.length > 1) u(this, a);
                        else {
                            this.removeAllRanges();
                            for (var b = 0, c = a.length; c > b; ++b) this.addRange(a[b])
                        }
                    }
                } else {
                    if (!(E(R, "empty") && E(S, "select") && _ && Q)) return b.fail("No means of selecting a Range or TextRange was found"), !1;
                    da.removeAllRanges = function() {
                        try {
                            if (this.docSelection.empty(), "None" != this.docSelection.type) {
                                var a;
                                if (this.anchorNode) a = L(this.anchorNode);
                                else if (this.docSelection.type == K) {
                                    var b = this.docSelection.createRange();
                                    b.length && (a = L(b.item(0)))
                                }
                                if (a) {
                                    var c = M(a).createTextRange();
                                    c.select(), this.docSelection.empty()
                                }
                            }
                        } catch (d) {}
                        j(this)
                    }, da.addRange = function(b) {
                        this.docSelection.type == K ? q(this, b) : (a.WrappedTextRange.rangeToTextRange(b).select(), this._ranges[0] = b, this.rangeCount = 1, this.isCollapsed = this._ranges[0].collapsed, h(this, b, !1))
                    }, da.setRanges = function(a) {
                        this.removeAllRanges();
                        var b = a.length;
                        b > 1 ? u(this, a) : b && this.addRange(a[0])
                    }
                }
                da.getRangeAt = function(a) {
                    if (0 > a || a >= this.rangeCount) throw new H("INDEX_SIZE_ERR");
                    return this._ranges[a].cloneRange()
                };
                var fa;
                if (Q) fa = function(b) {
                    var c;
                    a.isSelectionValid(b.win) ? c = b.docSelection.createRange() : (c = M(b.win.document).createTextRange(), c.collapse(!0)), b.docSelection.type == K ? p(b) : n(c) ? o(b, c) : j(b)
                };
                else if (E(R, "getRangeAt") && typeof R.rangeCount == B) fa = function(b) {
                    if (_ && P && b.docSelection.type == K) p(b);
                    else if (b._ranges.length = b.rangeCount = b.nativeSelection.rangeCount, b.rangeCount) {
                        for (var c = 0, d = b.rangeCount; d > c; ++c) b._ranges[c] = new a.WrappedRange(b.nativeSelection.getRangeAt(c));
                        h(b, b._ranges[b.rangeCount - 1], ha(b.nativeSelection)), b.isCollapsed = z(b)
                    } else j(b)
                };
                else {
                    if (!U || typeof R.isCollapsed != A || typeof S.collapsed != A || !J.implementsDomRange) return b.fail("No means of obtaining a Range or TextRange from the user's selection was found"), !1;
                    fa = function(a) {
                        var b, c = a.nativeSelection;
                        c.anchorNode ? (b = aa(c, 0), a._ranges = [b], a.rangeCount = 1, i(a), a.isCollapsed = z(a)) : j(a)
                    }
                }
                da.refresh = function(a) {
                    var b = a ? this._ranges.slice(0) : null,
                        c = this.anchorNode,
                        d = this.anchorOffset;
                    if (fa(this), a) {
                        var e = b.length;
                        if (e != this._ranges.length) return !0;
                        if (this.anchorNode != c || this.anchorOffset != d) return !0;
                        for (; e--;)
                            if (!N(b[e], this._ranges[e])) return !0;
                        return !1
                    }
                };
                var ga = function(a, b) {
                    var c = a.getAllRanges();
                    a.removeAllRanges();
                    for (var d = 0, e = c.length; e > d; ++d) N(b, c[d]) || a.addRange(c[d]);
                    a.rangeCount || j(a)
                };
                _ && P ? da.removeRange = function(a) {
                    if (this.docSelection.type == K) {
                        for (var b, c = this.docSelection.createRange(), d = m(a), e = L(c.item(0)), f = M(e).createControlRange(), g = !1, h = 0, i = c.length; i > h; ++h) b = c.item(h), b !== d || g ? f.add(c.item(h)) : g = !0;
                        f.select(), p(this)
                    } else ga(this, a)
                } : da.removeRange = function(a) {
                    ga(this, a)
                };
                var ha;
                !Q && U && J.implementsDomRange ? (ha = g, da.isBackward = function() {
                    return ha(this)
                }) : ha = da.isBackward = function() {
                    return !1
                }, da.isBackwards = da.isBackward, da.toString = function() {
                    for (var a = [], b = 0, c = this.rangeCount; c > b; ++b) a[b] = "" + this._ranges[b];
                    return a.join("")
                }, da.collapse = function(b, c) {
                    v(this, b);
                    var d = a.createRange(b);
                    d.collapseToPoint(b, c), this.setSingleRange(d), this.isCollapsed = !0
                }, da.collapseToStart = function() {
                    if (!this.rangeCount) throw new H("INVALID_STATE_ERR");
                    var a = this._ranges[0];
                    this.collapse(a.startContainer, a.startOffset)
                }, da.collapseToEnd = function() {
                    if (!this.rangeCount) throw new H("INVALID_STATE_ERR");
                    var a = this._ranges[this.rangeCount - 1];
                    this.collapse(a.endContainer, a.endOffset)
                }, da.selectAllChildren = function(b) {
                    v(this, b);
                    var c = a.createRange(b);
                    c.selectNodeContents(b), this.setSingleRange(c)
                }, da.deleteFromDocument = function() {
                    if (_ && P && this.docSelection.type == K) {
                        for (var a, b = this.docSelection.createRange(); b.length;) a = b.item(0), b.remove(a), C.removeNode(a);
                        this.refresh()
                    } else if (this.rangeCount) {
                        var c = this.getAllRanges();
                        if (c.length) {
                            this.removeAllRanges();
                            for (var d = 0, e = c.length; e > d; ++d) c[d].deleteContents();
                            this.addRange(c[e - 1])
                        }
                    }
                }, da.eachRange = function(a, b) {
                    for (var c = 0, d = this._ranges.length; d > c; ++c)
                        if (a(this.getRangeAt(c))) return b
                }, da.getAllRanges = function() {
                    var a = [];
                    return this.eachRange(function(b) {
                        a.push(b)
                    }), a
                }, da.setSingleRange = function(a, b) {
                    this.removeAllRanges(), this.addRange(a, b)
                }, da.callMethodOnEachRange = function(a, b) {
                    var c = [];
                    return this.eachRange(function(d) {
                        c.push(d[a].apply(d, b || []))
                    }), c
                }, da.setStart = w(!0), da.setEnd = w(!1), a.rangePrototype.select = function(a) {
                    ca(this.getDocument()).setSingleRange(this, a)
                }, da.changeEachRange = function(a) {
                    var b = [],
                        c = this.isBackward();
                    this.eachRange(function(c) {
                        a(c), b.push(c)
                    }), this.removeAllRanges(), c && 1 == b.length ? this.addRange(b[0], "backward") : this.setRanges(b)
                }, da.containsNode = function(a, b) {
                    return this.eachRange(function(c) {
                        return c.containsNode(a, b)
                    }, !0) || !1
                }, da.getBookmark = function(a) {
                    return {
                        backward: this.isBackward(),
                        rangeBookmarks: this.callMethodOnEachRange("getBookmark", [a])
                    }
                }, da.moveToBookmark = function(b) {
                    for (var c, d, e = [], f = 0; c = b.rangeBookmarks[f++];) d = a.createRange(this.win), d.moveToBookmark(c), e.push(d);
                    b.backward ? this.setSingleRange(e[0], "backward") : this.setRanges(e)
                }, da.saveRanges = function() {
                    return {
                        backward: this.isBackward(),
                        ranges: this.callMethodOnEachRange("cloneRange")
                    }
                }, da.restoreRanges = function(a) {
                    this.removeAllRanges();
                    for (var b, c = 0; b = a.ranges[c]; ++c) this.addRange(b, a.backward && 0 == c)
                }, da.toHtml = function() {
                    var a = [];
                    return this.eachRange(function(b) {
                        a.push(F.toHtml(b))
                    }), a.join("")
                }, J.implementsTextRange && (da.getNativeTextRange = function() {
                    var c;
                    if (c = this.docSelection) {
                        var d = c.createRange();
                        if (n(d)) return d;
                        throw b.createError("getNativeTextRange: selection is a control selection")
                    }
                    if (this.rangeCount > 0) return a.WrappedTextRange.rangeToTextRange(this.getRangeAt(0));
                    throw b.createError("getNativeTextRange: selection contains no range")
                }), da.getName = function() {
                    return "WrappedSelection"
                }, da.inspect = function() {
                    return x(this)
                }, da.detach = function() {
                    t(this.win, "delete"), s(this)
                }, r.detachAll = function() {
                    t(null, "deleteAll")
                }, r.inspect = x, r.isDirectionBackward = c, a.Selection = r, a.selectionPrototype = da, a.addShimListener(function(a) {
                    "undefined" == typeof a.getSelection && (a.getSelection = function() {
                        return ca(a)
                    }), a = null
                })
            });
            var M = !1,
                N = function(a) {
                    M || (M = !0, !H.initialized && H.config.autoInitialize && l())
                };
            return F && ("complete" == document.readyState ? N() : (a(document, "addEventListener") && document.addEventListener("DOMContentLoaded", N, !1), J(window, "load", N))), H
        }, this),
        function(b, c) {
            "function" == typeof define && define.amd ? define(["./rangy-core"], b) : "undefined" != typeof module && "object" == typeof a ? module.exports = b(require("rangy")) : b(c.rangy)
        }(function(a) {
            return a.createModule("SaveRestore", ["WrappedRange"], function(a, b) {
                function c(a, b) {
                    return (b || document).getElementById(a)
                }

                function d(a, b) {
                    var c, d = "selectionBoundary_" + +new Date + "_" + ("" + Math.random()).slice(2),
                        e = o.getDocument(a.startContainer),
                        f = a.cloneRange();
                    return f.collapse(b), c = e.createElement("span"), c.id = d, c.style.lineHeight = "0", c.style.display = "none", c.className = "rangySelectionBoundary", c.appendChild(e.createTextNode(r)), f.insertNode(c), c
                }

                function e(a, d, e, f) {
                    var g = c(e, a);
                    g ? (d[f ? "setStartBefore" : "setEndBefore"](g), p(g)) : b.warn("Marker element has been removed. Cannot restore selection.")
                }

                function f(a, b) {
                    return b.compareBoundaryPoints(a.START_TO_START, a)
                }

                function g(b, c) {
                    var e, f, g = a.DomRange.getRangeDocument(b),
                        h = b.toString(),
                        i = q(c);
                    return b.collapsed ? (f = d(b, !1), {
                        document: g,
                        markerId: f.id,
                        collapsed: !0
                    }) : (f = d(b, !1), e = d(b, !0), {
                        document: g,
                        startMarkerId: e.id,
                        endMarkerId: f.id,
                        collapsed: !1,
                        backward: i,
                        toString: function() {
                            return "original text: '" + h + "', new text: '" + b.toString() + "'"
                        }
                    })
                }

                function h(d, f) {
                    var g = d.document;
                    "undefined" == typeof f && (f = !0);
                    var h = a.createRange(g);
                    if (d.collapsed) {
                        var i = c(d.markerId, g);
                        if (i) {
                            i.style.display = "inline";
                            var j = i.previousSibling;
                            j && 3 == j.nodeType ? (p(i), h.collapseToPoint(j, j.length)) : (h.collapseBefore(i), p(i))
                        } else b.warn("Marker element has been removed. Cannot restore selection.")
                    } else e(g, h, d.startMarkerId, !0), e(g, h, d.endMarkerId, !1);
                    return f && h.normalizeBoundaries(), h
                }

                function i(b, d) {
                    var e, h, i = [],
                        j = q(d);
                    b = b.slice(0), b.sort(f);
                    for (var k = 0, l = b.length; l > k; ++k) i[k] = g(b[k], j);
                    for (k = l - 1; k >= 0; --k) e = b[k], h = a.DomRange.getRangeDocument(e), e.collapsed ? e.collapseAfter(c(i[k].markerId, h)) : (e.setEndBefore(c(i[k].endMarkerId, h)), e.setStartAfter(c(i[k].startMarkerId, h)));
                    return i
                }

                function j(c) {
                    if (!a.isSelectionValid(c)) return b.warn("Cannot save selection. This usually happens when the selection is collapsed and the selection document has lost focus."), null;
                    var d = a.getSelection(c),
                        e = d.getAllRanges(),
                        f = 1 == e.length && d.isBackward(),
                        g = i(e, f);
                    return f ? d.setSingleRange(e[0], f) : d.setRanges(e), {
                        win: c,
                        rangeInfos: g,
                        restored: !1
                    }
                }

                function k(a) {
                    for (var b = [], c = a.length, d = c - 1; d >= 0; d--) b[d] = h(a[d], !0);
                    return b
                }

                function l(b, c) {
                    if (!b.restored) {
                        var d = b.rangeInfos,
                            e = a.getSelection(b.win),
                            f = k(d),
                            g = d.length;
                        1 == g && c && a.features.selectionHasExtend && d[0].backward ? (e.removeAllRanges(), e.addRange(f[0], !0)) : e.setRanges(f), b.restored = !0
                    }
                }

                function m(a, b) {
                    var d = c(b, a);
                    d && p(d)
                }

                function n(a) {
                    for (var b, c = a.rangeInfos, d = 0, e = c.length; e > d; ++d) b = c[d], b.collapsed ? m(a.doc, b.markerId) : (m(a.doc, b.startMarkerId), m(a.doc, b.endMarkerId))
                }
                var o = a.dom,
                    p = o.removeNode,
                    q = a.Selection.isDirectionBackward,
                    r = "\ufeff";
                a.util.extend(a, {
                    saveRange: g,
                    restoreRange: h,
                    saveRanges: i,
                    restoreRanges: k,
                    saveSelection: j,
                    restoreSelection: l,
                    removeMarkerElement: m,
                    removeMarkers: n
                })
            }), a
        }, this)
}({}, function() {
    return this
}());
! function(a, b) {
    b["true"] = a,
        /**
         * @license AngularJS v1.3.10
         * (c) 2010-2014 Google, Inc. http://angularjs.org
         * License: MIT
         */
        function(a, b, c) {
            "use strict";

            function d() {
                this.$get = ["$$sanitizeUri", function(a) {
                    return function(b) {
                        "undefined" != typeof arguments[1] && (arguments[1].version = "taSanitize");
                        var c = [];
                        return g(b, l(c, function(b, c) {
                            return !/^unsafe/.test(a(b, c))
                        })), c.join("")
                    }
                }]
            }

            function e(a) {
                var c = [],
                    d = l(c, b.noop);
                return d.chars(a), c.join("")
            }

            function f(a) {
                var b, c = {},
                    d = a.split(",");
                for (b = 0; b < d.length; b++) c[d[b]] = !0;
                return c
            }

            function g(a, c) {
                function d(a, d, f, g) {
                    if (d = b.lowercase(d), D[d])
                        for (; k.last() && E[k.last()];) e("", k.last());
                    C[d] && k.last() == d && e("", d), g = z[d] || !!g, g || k.push(d);
                    var i = {};
                    f.replace(p, function(a, b, c, d, e) {
                        var f = c || d || e || "";
                        i[b] = h(f)
                    }), c.start && c.start(d, i, g)
                }

                function e(a, d) {
                    var e, f = 0;
                    if (d = b.lowercase(d))
                        for (f = k.length - 1; f >= 0 && k[f] != d; f--);
                    if (f >= 0) {
                        for (e = k.length - 1; e >= f; e--) c.end && c.end(k[e]);
                        k.length = f
                    }
                }
                "string" != typeof a && (a = null === a || "undefined" == typeof a ? "" : "" + a);
                var f, g, i, j, k = [],
                    l = a;
                for (k.last = function() {
                        return k[k.length - 1]
                    }; a;) {
                    if (j = "", g = !0, k.last() && G[k.last()]) a = a.replace(new RegExp("([^]*)<\\s*\\/\\s*" + k.last() + "[^>]*>", "i"), function(a, b) {
                        return b = b.replace(s, "$1").replace(v, "$1"), c.chars && c.chars(h(b)), ""
                    }), e("", k.last());
                    else {
                        if (y.test(a)) {
                            if (i = a.match(y)) {
                                i[0];
                                c.whitespace && c.whitespace(i[0]), a = a.replace(i[0], ""), g = !1
                            }
                        } else t.test(a) ? (i = a.match(t), i && (c.comment && c.comment(i[1]), a = a.replace(i[0], ""), g = !1)) : u.test(a) ? (i = a.match(u), i && (a = a.replace(i[0], ""), g = !1)) : r.test(a) ? (i = a.match(o), i && (a = a.substring(i[0].length), i[0].replace(o, e), g = !1)) : q.test(a) && (i = a.match(n), i ? (i[4] && (a = a.substring(i[0].length), i[0].replace(n, d)), g = !1) : (j += "<", a = a.substring(1)));
                        g && (f = a.indexOf("<"), j += 0 > f ? a : a.substring(0, f), a = 0 > f ? "" : a.substring(f), c.chars && c.chars(h(j)))
                    }
                    if (a == l) throw m("badparse", "The sanitizer was unable to parse the following block of html: {0}", a);
                    l = a
                }
                e()
            }

            function h(a) {
                if (!a) return "";
                var b = N.exec(a),
                    c = b[1],
                    d = b[3],
                    e = b[2];
                return e && (M.innerHTML = e.replace(/</g, "&lt;"), e = "textContent" in M ? M.textContent : M.innerText), c + e + d
            }

            function i(a) {
                return a.replace(/&/g, "&amp;").replace(w, function(a) {
                    var b = a.charCodeAt(0),
                        c = a.charCodeAt(1);
                    return "&#" + (1024 * (b - 55296) + (c - 56320) + 65536) + ";"
                }).replace(x, function(a) {
                    var b = a.charCodeAt(0);
                    return 159 >= b || 173 == b || b >= 1536 && 1540 >= b || 1807 == b || 6068 == b || 6069 == b || b >= 8204 && 8207 >= b || b >= 8232 && 8239 >= b || b >= 8288 && 8303 >= b || 65279 == b || b >= 65520 && 65535 >= b ? "&#" + b + ";" : a
                }).replace(/</g, "&lt;").replace(/>/g, "&gt;")
            }

            function j(a) {
                var c = "",
                    d = a.split(";");
                return b.forEach(d, function(a) {
                    var d = a.split(":");
                    if (2 == d.length) {
                        var e = O(b.lowercase(d[0])),
                            a = O(b.lowercase(d[1]));
                        (("color" === e || "background-color" === e) && (a.match(/^rgb\([0-9%,\. ]*\)$/i) || a.match(/^rgba\([0-9%,\. ]*\)$/i) || a.match(/^hsl\([0-9%,\. ]*\)$/i) || a.match(/^hsla\([0-9%,\. ]*\)$/i) || a.match(/^#[0-9a-f]{3,6}$/i) || a.match(/^[a-z]*$/i)) || "text-align" === e && ("left" === a || "right" === a || "center" === a || "justify" === a) || "text-decoration" === e && ("underline" === a || "line-through" === a) || "font-weight" === e && "bold" === a || "float" === e && ("left" === a || "right" === a || "none" === a) || ("width" === e || "height" === e) && a.match(/[0-9\.]*(px|em|rem|%)/) || "direction" === e && a.match(/^ltr|rtl|initial|inherit$/)) && (c += e + ": " + a + ";")
                    }
                }), c
            }

            function k(a, b, c, d) {
                return "img" === a && b["ta-insert-video"] && ("ta-insert-video" === c || "allowfullscreen" === c || "frameborder" === c || "contenteditable" === c && "false" === d) ? !0 : !1
            }

            function l(a, c) {
                var d = !1,
                    e = b.bind(a, a.push);
                return {
                    start: function(a, f, g) {
                        a = b.lowercase(a), !d && G[a] && (d = a), d || H[a] !== !0 || (e("<"), e(a), b.forEach(f, function(d, g) {
                            var h = b.lowercase(g),
                                l = "img" === a && "src" === h || "background" === h;
                            ("style" === h && "" !== (d = j(d)) || k(a, f, h, d) || L[h] === !0 && (I[h] !== !0 || c(d, l))) && (e(" "), e(g), e('="'), e(i(d)), e('"'))
                        }), e(g ? "/>" : ">"))
                    },
                    comment: function(a) {
                        e(a)
                    },
                    whitespace: function(a) {
                        e(i(a))
                    },
                    end: function(a) {
                        a = b.lowercase(a), d || H[a] !== !0 || (e("</"), e(a), e(">")), a == d && (d = !1)
                    },
                    chars: function(a) {
                        d || e(i(a))
                    }
                }
            }
            var m = b.$$minErr("$sanitize"),
                n = /^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,
                o = /^<\/\s*([\w:-]+)[^>]*>/,
                p = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,
                q = /^</,
                r = /^<\//,
                s = /<!--(.*?)-->/g,
                t = /(^<!--.*?-->)/,
                u = /<!DOCTYPE([^>]*?)>/i,
                v = /<!\[CDATA\[(.*?)]]>/g,
                w = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
                x = /([^\#-~| |!])/g,
                y = /^(\s+)/,
                z = f("area,br,col,hr,img,wbr,input"),
                A = f("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
                B = f("rp,rt"),
                C = b.extend({}, B, A),
                D = b.extend({}, A, f("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),
                E = b.extend({}, B, f("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),
                F = f("animate,animateColor,animateMotion,animateTransform,circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,stop,svg,switch,text,title,tspan,use"),
                G = f("script,style"),
                H = b.extend({}, z, D, E, C, F),
                I = f("background,cite,href,longdesc,src,usemap,xlink:href"),
                J = f("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,id,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width"),
                K = f("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan"),
                L = b.extend({}, I, K, J),
                M = document.createElement("pre"),
                N = /^(\s*)([\s\S]*?)(\s*)$/,
                O = function() {
                    return String.prototype.trim ? function(a) {
                        return b.isString(a) ? a.trim() : a
                    } : function(a) {
                        return b.isString(a) ? a.replace(/^\s\s*/, "").replace(/\s\s*$/, "") : a
                    }
                }();
            b.module("ngSanitize", []).provider("$sanitize", d), b.module("ngSanitize").filter("linky", ["$sanitize", function(a) {
                var c = /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"”’]/,
                    d = /^mailto:/;
                return function(f, g) {
                    function h(a) {
                        a && n.push(e(a))
                    }

                    function i(a, c) {
                        n.push("<a "), b.isDefined(g) && n.push('target="', g, '" '), n.push('href="', a.replace(/"/g, "&quot;"), '">'), h(c), n.push("</a>")
                    }
                    if (!f) return f;
                    for (var j, k, l, m = f, n = []; j = m.match(c);) k = j[0], j[2] || j[4] || (k = (j[3] ? "http://" : "mailto:") + k), l = j.index, h(m.substr(0, l)), i(k, j[0].replace(d, "")), m = m.substring(l + j[0].length);
                    return h(m), a(n.join(""))
                }
            }])
        }(window, window.angular)
}({}, function() {
    return this
}());
! function(a, b) {
    function c(a) {
        try {
            return 0 !== angular.element(a).length
        } catch (b) {
            return !1
        }
    }

    function d(a, b) {
        if (!a || "" === a || e.hasOwnProperty(a)) throw "textAngular Error: A unique name is required for a Tool Definition";
        if (b.display && ("" === b.display || !c(b.display)) || !b.display && !b.buttontext && !b.iconclass) throw 'textAngular Error: Tool Definition for "' + a + '" does not have a valid display/iconclass/buttontext value';
        e[a] = b
    }
    b["true"] = a;
    var e = {};
    angular.module("textAngularSetup", []).constant("taRegisterTool", d).value("taTools", e).value("taOptions", {
            forceTextAngularSanitize: !0,
            keyMappings: [],
            toolbar: [
                ["h1", "h2", "h3", "h4", "h5", "h6", "p", "pre", "quote"],
                ["bold", "italics", "underline", "strikeThrough", "ul", "ol", "redo", "undo", "clear"],
                ["justifyLeft", "justifyCenter", "justifyRight", "justifyFull", "indent", "outdent"],
                ["html", "insertImage", "insertLink", "insertVideo", "wordcount", "charcount"]
            ],
            classes: {
                focussed: "focussed",
                toolbar: "btn-toolbar",
                toolbarGroup: "btn-group",
                toolbarButton: "btn btn-default",
                toolbarButtonActive: "active",
                disabled: "disabled",
                textEditor: "form-control",
                htmlEditor: "form-control"
            },
            defaultTagAttributes: {
                a: {
                    target: ""
                }
            },
            setup: {
                textEditorSetup: function(a) {},
                htmlEditorSetup: function(a) {}
            },
            defaultFileDropHandler: function(a, b) {
                var c = new FileReader;
                return "image" === a.type.substring(0, 5) ? (c.onload = function() {
                    "" !== c.result && b("insertImage", c.result, !0)
                }, c.readAsDataURL(a), !0) : !1
            }
        }).value("taSelectableElements", ["a", "img"]).value("taCustomRenderers", [{
            selector: "img",
            customAttribute: "ta-insert-video",
            renderLogic: function(a) {
                var b = angular.element("<iframe></iframe>"),
                    c = a.prop("attributes");
                angular.forEach(c, function(a) {
                    b.attr(a.name, a.value)
                }), b.attr("src", b.attr("ta-insert-video")), a.replaceWith(b)
            }
        }]).value("taTranslations", {
            html: {
                tooltip: "Toggle html / Rich Text"
            },
            heading: {
                tooltip: "Heading "
            },
            p: {
                tooltip: "Paragraph"
            },
            pre: {
                tooltip: "Preformatted text"
            },
            ul: {
                tooltip: "Unordered List"
            },
            ol: {
                tooltip: "Ordered List"
            },
            quote: {
                tooltip: "Quote/unquote selection or paragraph"
            },
            undo: {
                tooltip: "Undo"
            },
            redo: {
                tooltip: "Redo"
            },
            bold: {
                tooltip: "Bold"
            },
            italic: {
                tooltip: "Italic"
            },
            underline: {
                tooltip: "Underline"
            },
            strikeThrough: {
                tooltip: "Strikethrough"
            },
            justifyLeft: {
                tooltip: "Align text left"
            },
            justifyRight: {
                tooltip: "Align text right"
            },
            justifyFull: {
                tooltip: "Justify text"
            },
            justifyCenter: {
                tooltip: "Center"
            },
            indent: {
                tooltip: "Increase indent"
            },
            outdent: {
                tooltip: "Decrease indent"
            },
            clear: {
                tooltip: "Clear formatting"
            },
            insertImage: {
                dialogPrompt: "Please enter an image URL to insert",
                tooltip: "Insert image",
                hotkey: "the - possibly language dependent hotkey ... for some future implementation"
            },
            insertVideo: {
                tooltip: "Insert video",
                dialogPrompt: "Please enter a youtube URL to embed"
            },
            insertLink: {
                tooltip: "Insert / edit link",
                dialogPrompt: "Please enter a URL to insert"
            },
            editLink: {
                reLinkButton: {
                    tooltip: "Relink"
                },
                unLinkButton: {
                    tooltip: "Unlink"
                },
                targetToggle: {
                    buttontext: "Open in New Window"
                }
            },
            wordcount: {
                tooltip: "Display words Count"
            },
            charcount: {
                tooltip: "Display characters Count"
            }
        }).factory("taToolFunctions", ["$window", "taTranslations", function(a, b) {
            return {
                imgOnSelectAction: function(a, b, c) {
                    var d = function() {
                        c.updateTaBindtaTextElement(), c.hidePopover()
                    };
                    a.preventDefault(), c.displayElements.popover.css("width", "375px");
                    var e = c.displayElements.popoverContainer;
                    e.empty();
                    var f = angular.element('<div class="btn-group" style="padding-right: 6px;">'),
                        g = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">100% </button>');
                    g.on("click", function(a) {
                        a.preventDefault(), b.css({
                            width: "100%",
                            height: ""
                        }), d()
                    });
                    var h = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">50% </button>');
                    h.on("click", function(a) {
                        a.preventDefault(), b.css({
                            width: "50%",
                            height: ""
                        }), d()
                    });
                    var i = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">25% </button>');
                    i.on("click", function(a) {
                        a.preventDefault(), b.css({
                            width: "25%",
                            height: ""
                        }), d()
                    });
                    var j = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">Reset</button>');
                    j.on("click", function(a) {
                        a.preventDefault(), b.css({
                            width: "",
                            height: ""
                        }), d()
                    }), f.append(g), f.append(h), f.append(i), f.append(j), e.append(f), f = angular.element('<div class="btn-group" style="padding-right: 6px;">');
                    var k = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-left"></i></button>');
                    k.on("click", function(a) {
                        a.preventDefault(), b.css("float", "left"), b.css("cssFloat", "left"), b.css("styleFloat", "left"), d()
                    });
                    var l = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-right"></i></button>');
                    l.on("click", function(a) {
                        a.preventDefault(), b.css("float", "right"), b.css("cssFloat", "right"), b.css("styleFloat", "right"), d()
                    });
                    var m = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-justify"></i></button>');
                    m.on("click", function(a) {
                        a.preventDefault(), b.css("float", ""), b.css("cssFloat", ""), b.css("styleFloat", ""), d()
                    }), f.append(k), f.append(m), f.append(l), e.append(f), f = angular.element('<div class="btn-group">');
                    var n = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-trash-o"></i></button>');
                    n.on("click", function(a) {
                        a.preventDefault(), b.remove(), d()
                    }), f.append(n), e.append(f), c.showPopover(b), c.showResizeOverlay(b)
                },
                aOnSelectAction: function(c, d, e) {
                    c.preventDefault(), e.displayElements.popover.css("width", "436px");
                    var f = e.displayElements.popoverContainer;
                    f.empty(), f.css("line-height", "28px");
                    var g = angular.element('<a href="' + d.attr("href") + '" target="_blank">' + d.attr("href") + "</a>");
                    g.css({
                        display: "inline-block",
                        "max-width": "200px",
                        overflow: "hidden",
                        "text-overflow": "ellipsis",
                        "white-space": "nowrap",
                        "vertical-align": "middle"
                    }), f.append(g);
                    var h = angular.element('<div class="btn-group pull-right">'),
                        i = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on" title="' + b.editLink.reLinkButton.tooltip + '"><i class="fa fa-edit icon-edit"></i></button>');
                    i.on("click", function(c) {
                        c.preventDefault();
                        var f = a.prompt(b.insertLink.dialogPrompt, d.attr("href"));
                        f && "" !== f && "http://" !== f && (d.attr("href", f), e.updateTaBindtaTextElement()), e.hidePopover()
                    }), h.append(i);
                    var j = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on" title="' + b.editLink.unLinkButton.tooltip + '"><i class="fa fa-unlink icon-unlink"></i></button>');
                    j.on("click", function(a) {
                        a.preventDefault(), d.replaceWith(d.contents()), e.updateTaBindtaTextElement(), e.hidePopover()
                    }), h.append(j);
                    var k = angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on">' + b.editLink.targetToggle.buttontext + "</button>");
                    "_blank" === d.attr("target") && k.addClass("active"), k.on("click", function(a) {
                        a.preventDefault(), d.attr("target", "_blank" === d.attr("target") ? "" : "_blank"), k.toggleClass("active"), e.updateTaBindtaTextElement()
                    }), h.append(k), f.append(h), e.showPopover(d)
                },
                extractYoutubeVideoId: function(a) {
                    var b = /(?:youtube(?:-nocookie)?\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/i,
                        c = a.match(b);
                    return c && c[1] || null
                }
            }
        }]).run(["taRegisterTool", "$window", "taTranslations", "taSelection", "taToolFunctions", "$sanitize", "taOptions", function(a, b, c, d, e, f, g) {
            var h = {};
            if (f("", h), g.forceTextAngularSanitize === !0 && "taSanitize" !== h.version) throw angular.$$minErr("textAngular")("textAngularSetup", "The textAngular-sanitize provider has been replaced by another -- have you included angular-sanitize by mistake?");
            a("html", {
                iconclass: "fa fa-code",
                tooltiptext: c.html.tooltip,
                action: function() {
                    this.$editor().switchView()
                },
                activeState: function() {
                    return this.$editor().showHtml
                }
            });
            var i = function(a) {
                    return function() {
                        return this.$editor().queryFormatBlockState(a)
                    }
                },
                j = function() {
                    return this.$editor().wrapSelection("formatBlock", "<" + this.name.toUpperCase() + ">")
                };
            angular.forEach(["h1", "h2", "h3", "h4", "h5", "h6"], function(b) {
                a(b.toLowerCase(), {
                    buttontext: b.toUpperCase(),
                    tooltiptext: c.heading.tooltip + b.charAt(1),
                    action: j,
                    activeState: i(b.toLowerCase())
                })
            }), a("p", {
                buttontext: "P",
                tooltiptext: c.p.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("formatBlock", "<P>")
                },
                activeState: function() {
                    return this.$editor().queryFormatBlockState("p")
                }
            }), a("pre", {
                buttontext: "pre",
                tooltiptext: c.pre.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("formatBlock", "<PRE>")
                },
                activeState: function() {
                    return this.$editor().queryFormatBlockState("pre")
                }
            }), a("ul", {
                iconclass: "fa fa-list-ul",
                tooltiptext: c.ul.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("insertUnorderedList", null)
                },
                activeState: function() {
                    return this.$editor().queryCommandState("insertUnorderedList")
                }
            }), a("ol", {
                iconclass: "fa fa-list-ol",
                tooltiptext: c.ol.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("insertOrderedList", null)
                },
                activeState: function() {
                    return this.$editor().queryCommandState("insertOrderedList")
                }
            }), a("quote", {
                iconclass: "fa fa-quote-right",
                tooltiptext: c.quote.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("formatBlock", "<BLOCKQUOTE>")
                },
                activeState: function() {
                    return this.$editor().queryFormatBlockState("blockquote")
                }
            }), a("undo", {
                iconclass: "fa fa-undo",
                tooltiptext: c.undo.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("undo", null)
                }
            }), a("redo", {
                iconclass: "fa fa-repeat",
                tooltiptext: c.redo.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("redo", null)
                }
            }), a("bold", {
                iconclass: "fa fa-bold",
                tooltiptext: c.bold.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("bold", null)
                },
                activeState: function() {
                    return this.$editor().queryCommandState("bold")
                },
                commandKeyCode: 98
            }), a("justifyLeft", {
                iconclass: "fa fa-align-left",
                tooltiptext: c.justifyLeft.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("justifyLeft", null)
                },
                activeState: function(a) {
                    if (a && "#document" === a.nodeName) return !1;
                    var b = !1;
                    return a && (b = "left" === a.css("text-align") || "left" === a.attr("align") || "right" !== a.css("text-align") && "center" !== a.css("text-align") && "justify" !== a.css("text-align") && !this.$editor().queryCommandState("justifyRight") && !this.$editor().queryCommandState("justifyCenter") && !this.$editor().queryCommandState("justifyFull")), b = b || this.$editor().queryCommandState("justifyLeft")
                }
            }), a("justifyRight", {
                iconclass: "fa fa-align-right",
                tooltiptext: c.justifyRight.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("justifyRight", null)
                },
                activeState: function(a) {
                    if (a && "#document" === a.nodeName) return !1;
                    var b = !1;
                    return a && (b = "right" === a.css("text-align")), b = b || this.$editor().queryCommandState("justifyRight")
                }
            }), a("justifyFull", {
                iconclass: "fa fa-align-justify",
                tooltiptext: c.justifyFull.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("justifyFull", null)
                },
                activeState: function(a) {
                    var b = !1;
                    return a && (b = "justify" === a.css("text-align")), b = b || this.$editor().queryCommandState("justifyFull")
                }
            }), a("justifyCenter", {
                iconclass: "fa fa-align-center",
                tooltiptext: c.justifyCenter.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("justifyCenter", null)
                },
                activeState: function(a) {
                    if (a && "#document" === a.nodeName) return !1;
                    var b = !1;
                    return a && (b = "center" === a.css("text-align")), b = b || this.$editor().queryCommandState("justifyCenter")
                }
            }), a("indent", {
                iconclass: "fa fa-indent",
                tooltiptext: c.indent.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("indent", null)
                },
                activeState: function() {
                    return this.$editor().queryFormatBlockState("blockquote")
                },
                commandKeyCode: "TabKey"
            }), a("outdent", {
                iconclass: "fa fa-outdent",
                tooltiptext: c.outdent.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("outdent", null)
                },
                activeState: function() {
                    return !1
                },
                commandKeyCode: "ShiftTabKey"
            }), a("italics", {
                iconclass: "fa fa-italic",
                tooltiptext: c.italic.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("italic", null)
                },
                activeState: function() {
                    return this.$editor().queryCommandState("italic")
                },
                commandKeyCode: 105
            }), a("underline", {
                iconclass: "fa fa-underline",
                tooltiptext: c.underline.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("underline", null)
                },
                activeState: function() {
                    return this.$editor().queryCommandState("underline")
                },
                commandKeyCode: 117
            }), a("strikeThrough", {
                iconclass: "fa fa-strikethrough",
                tooltiptext: c.strikeThrough.tooltip,
                action: function() {
                    return this.$editor().wrapSelection("strikeThrough", null)
                },
                activeState: function() {
                    return document.queryCommandState("strikeThrough")
                }
            }), a("clear", {
                iconclass: "fa fa-ban",
                tooltiptext: c.clear.tooltip,
                action: function(a, b) {
                    var c;
                    this.$editor().wrapSelection("removeFormat", null);
                    var e = angular.element(d.getSelectionElement()),
                        f = function(a) {
                            a = angular.element(a);
                            var b = a;
                            angular.forEach(a.children(), function(a) {
                                var c = angular.element("<p></p>");
                                c.html(angular.element(a).html()), b.after(c), b = c
                            }), a.remove()
                        };
                    if (angular.forEach(e.find("ul"), f), angular.forEach(e.find("ol"), f), "li" === e[0].tagName.toLowerCase()) {
                        var g = e[0].parentNode.childNodes,
                            h = [],
                            i = [],
                            j = !1;
                        for (c = 0; c < g.length; c++) g[c] === e[0] ? j = !0 : j ? i.push(g[c]) : h.push(g[c]);
                        var k = angular.element(e[0].parentNode),
                            l = angular.element("<p></p>");
                        if (l.html(angular.element(e[0]).html()), 0 === h.length || 0 === i.length) 0 === i.length ? k.after(l) : k[0].parentNode.insertBefore(l[0], k[0]), 0 === h.length && 0 === i.length ? k.remove() : angular.element(e[0]).remove();
                        else {
                            var m = angular.element("<" + k[0].tagName + "></" + k[0].tagName + ">"),
                                n = angular.element("<" + k[0].tagName + "></" + k[0].tagName + ">");
                            for (c = 0; c < h.length; c++) m.append(angular.element(h[c]));
                            for (c = 0; c < i.length; c++) n.append(angular.element(i[c]));
                            k.after(n), k.after(l), k.after(m), k.remove()
                        }
                        d.setSelectionToElementEnd(l[0])
                    }
                    var o = this.$editor(),
                        p = function(a) {
                            a = angular.element(a), a[0] !== o.displayElements.text[0] && a.removeAttr("class"), angular.forEach(a.children(), p)
                        };
                    angular.forEach(e, p), "li" !== e[0].tagName.toLowerCase() && "ol" !== e[0].tagName.toLowerCase() && "ul" !== e[0].tagName.toLowerCase() && this.$editor().wrapSelection("formatBlock", "default"), b()
                }
            }), a("insertImage", {
                iconclass: "fa fa-picture-o",
                tooltiptext: c.insertImage.tooltip,
                action: function() {
                    var a;
                    return a = b.prompt(c.insertImage.dialogPrompt, "http://"), a && "" !== a && "http://" !== a ? this.$editor().wrapSelection("insertImage", a, !0) : void 0
                },
                onElementSelect: {
                    element: "img",
                    action: e.imgOnSelectAction
                }
            }), a("insertVideo", {
                iconclass: "fa fa-youtube-play",
                tooltiptext: c.insertVideo.tooltip,
                action: function() {
                    var a;
                    if (a = b.prompt(c.insertVideo.dialogPrompt, "https://"), a && "" !== a && "https://" !== a && (videoId = e.extractYoutubeVideoId(a), videoId)) {
                        var d = "https://www.youtube.com/embed/" + videoId,
                            f = '<img class="ta-insert-video" src="https://img.youtube.com/vi/' + videoId + '/hqdefault.jpg" ta-insert-video="' + d + '" contenteditable="false" allowfullscreen="true" frameborder="0" />';
                        return this.$editor().wrapSelection("insertHTML", f, !0)
                    }
                },
                onElementSelect: {
                    element: "img",
                    onlyWithAttrs: ["ta-insert-video"],
                    action: e.imgOnSelectAction
                }
            }), a("insertLink", {
                tooltiptext: c.insertLink.tooltip,
                iconclass: "fa fa-link",
                action: function() {
                    var a;
                    return a = b.prompt(c.insertLink.dialogPrompt, "http://"), a && "" !== a && "http://" !== a ? this.$editor().wrapSelection("createLink", a, !0) : void 0
                },
                activeState: function(a) {
                    return a ? "A" === a[0].tagName : !1
                },
                onElementSelect: {
                    element: "a",
                    action: e.aOnSelectAction
                }
            }), a("wordcount", {
                display: '<div id="toolbarWC" style="display:block; min-width:100px;">Words: <span ng-bind="wordcount"></span></div>',
                disabled: !0,
                wordcount: 0,
                activeState: function() {
                    var a = this.$editor().displayElements.text,
                        b = a[0].innerHTML || "",
                        c = 0;
                    return "" !== b.replace(/\s*<[^>]*?>\s*/g, "") && (c = b.replace(/<\/?(b|i|em|strong|span|u|strikethrough|a|img|small|sub|sup|label)( [^>*?])?>/gi, "").replace(/(<[^>]*?>\s*<[^>]*?>)/gi, " ").replace(/(<[^>]*?>)/gi, "").replace(/\s+/gi, " ").match(/\S+/g).length), this.wordcount = c, this.$editor().wordcount = c, !1
                }
            }), a("charcount", {
                display: '<div id="toolbarCC" style="display:block; min-width:120px;">Characters: <span ng-bind="charcount"></span></div>',
                disabled: !0,
                charcount: 0,
                activeState: function() {
                    var a = this.$editor().displayElements.text,
                        b = a[0].innerText || a[0].textContent,
                        c = b.replace(/(\r\n|\n|\r)/gm, "").replace(/^\s+/g, " ").replace(/\s+$/g, " ").length;
                    return this.charcount = c, this.$editor().charcount = c, !1
                }
            })
        }]),
        /*
        @license textAngular
        Author : Austin Anderson
        License : 2013 MIT
        Version 1.5.0

        See README.md or https://github.com/fraywing/textAngular/wiki for requirements and use.
        */
        "undefined" != typeof module && "undefined" != typeof a && module.exports === a && (module.exports = "textAngular"),
        function() {
            "use strict";
            var b = {
                    ie: function() {
                        for (var a, b = 3, c = document.createElement("div"), d = c.getElementsByTagName("i"); c.innerHTML = "<!--[if gt IE " + ++b + "]><i></i><![endif]-->", d[0];);
                        return b > 4 ? b : a
                    }(),
                    webkit: /AppleWebKit\/([\d.]+)/i.test(navigator.userAgent)
                },
                c = !1;
            b.webkit && (document.addEventListener("mousedown", function(a) {
                var b = a || window.event,
                    d = b.target;
                if (c && null !== d) {
                    for (var e = !1, f = d; null !== f && "html" !== f.tagName.toLowerCase() && !e;) e = "true" === f.contentEditable, f = f.parentNode;
                    e || (document.getElementById("textAngular-editableFix-010203040506070809").setSelectionRange(0, 0), d.focus(), d.select && d.select())
                }
                c = !1
            }, !1), angular.element(document).ready(function() {
                angular.element(document.body).append(angular.element('<input id="textAngular-editableFix-010203040506070809" class="ta-hidden-input" aria-hidden="true" unselectable="on" tabIndex="-1">'))
            }));
            var d = /^(address|article|aside|audio|blockquote|canvas|dd|div|dl|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hgroup|hr|noscript|ol|output|p|pre|section|table|tfoot|ul|video)$/i,
                f = /^(ul|li|ol)$/i,
                g = /^(address|article|aside|audio|blockquote|canvas|dd|div|dl|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hgroup|hr|noscript|ol|output|p|pre|section|table|tfoot|ul|video|li)$/i;
            String.prototype.trim || (String.prototype.trim = function() {
                return this.replace(/^\s+|\s+$/g, "")
            });
            var h, i, j, k, l, m;
            if (b.ie > 8 || void 0 === b.ie) {
                for (var n = document.styleSheets, o = 0; o < n.length; o++)
                    if ((0 === n[o].media.length || n[o].media.mediaText.match(/(all|screen)/gi)) && n[o].href && n[o].href.match(/textangular\.(min\.|)css/gi)) {
                        h = n[o];
                        break
                    }
                h || (h = function() {
                    var a = document.createElement("style");
                    return b.webkit && a.appendChild(document.createTextNode("")), document.getElementsByTagName("head")[0].appendChild(a), a.sheet
                }()), i = function(a, b) {
                    return k(h, a, b)
                }, k = function(a, b, c) {
                    var d, e;
                    return a.cssRules ? d = Math.max(a.cssRules.length - 1, 0) : a.rules && (d = Math.max(a.rules.length - 1, 0)), a.insertRule ? a.insertRule(b + "{" + c + "}", d) : a.addRule(b, c, d), h.rules ? e = h.rules[d] : h.cssRules && (e = h.cssRules[d]), e
                }, m = function(a, b) {
                    var c, d;
                    for (c = 0; c < b.length; c++)
                        if (b[c].cssText === a.cssText) {
                            d = c;
                            break
                        }
                    return d
                }, j = function(a) {
                    l(h, a)
                }, l = function(a, b) {
                    var c = a.cssRules || a.rules;
                    if (c && 0 !== c.length) {
                        var d = m(b, c);
                        a.removeRule ? a.removeRule(d) : a.deleteRule(d)
                    }
                }
            }
            angular.module("textAngular.factories", []).factory("taBrowserTag", [function() {
                return function(a) {
                    return a ? "" === a ? void 0 === b.ie ? "div" : b.ie <= 8 ? "P" : "p" : b.ie <= 8 ? a.toUpperCase() : a : b.ie <= 8 ? "P" : "p"
                }
            }]).factory("taApplyCustomRenderers", ["taCustomRenderers", "taDOM", function(a, b) {
                return function(c) {
                    var d = angular.element("<div></div>");
                    return d[0].innerHTML = c, angular.forEach(a, function(a) {
                        var c = [];
                        a.selector && "" !== a.selector ? c = d.find(a.selector) : a.customAttribute && "" !== a.customAttribute && (c = b.getByAttribute(d, a.customAttribute)), angular.forEach(c, function(b) {
                            b = angular.element(b), a.selector && "" !== a.selector && a.customAttribute && "" !== a.customAttribute ? void 0 !== b.attr(a.customAttribute) && a.renderLogic(b) : a.renderLogic(b)
                        })
                    }), d[0].innerHTML
                }
            }]).factory("taFixChrome", function() {
                var a = function(a) {
                    if (!a || !angular.isString(a) || a.length <= 0) return a;
                    for (var b, c, d, e = /<([^>\/]+?)style=("([^"]+)"|'([^']+)')([^>]*)>/gi, f = "", g = 0; b = e.exec(a);) c = b[3] || b[4], c && c.match(/line-height: 1.[0-9]{3,12};|color: inherit; line-height: 1.1;/i) && (c = c.replace(/( |)font-family: inherit;|( |)line-height: 1.[0-9]{3,12};|( |)color: inherit;/gi, ""), d = "<" + b[1].trim(), c.trim().length > 0 && (d += " style=" + b[2].substring(0, 1) + c + b[2].substring(0, 1)), d += b[5].trim() + ">", f += a.substring(g, b.index) + d, g = b.index + b[0].length);
                    return f += a.substring(g), g > 0 ? f.replace(/<span\s?>(.*?)<\/span>(<br(\/|)>|)/gi, "$1") : a
                };
                return a
            }).factory("taSanitize", ["$sanitize", function(a) {
                function b(a, b) {
                    for (var c, d = 0, e = 0, f = /<[^>]*>/gi; c = f.exec(a);)
                        if (e = c.index, "/" === c[0].substr(1, 1)) {
                            if (0 === d) break;
                            d--
                        } else d++;
                    return b + a.substring(0, e) + angular.element(b)[0].outerHTML.substring(b.length) + a.substring(e)
                }

                function c(a) {
                    if (!a || !angular.isString(a) || a.length <= 0) return a;
                    for (var d, f, g, h, i, k, l = /<([^>\/]+?)style=("([^"]+)"|'([^']+)')([^>]*)>/gi, m = "", n = "", o = 0; f = l.exec(a);) {
                        h = f[3] || f[4];
                        var p = new RegExp(j, "i");
                        if (angular.isString(h) && p.test(h)) {
                            i = "";
                            for (var q = new RegExp(j, "ig"); g = q.exec(h);)
                                for (d = 0; d < e.length; d++) g[2 * d + 2] && (i += "<" + e[d].tag + ">");
                            k = c(a.substring(o, f.index)), n += m.length > 0 ? b(k, m) : k, h = h.replace(new RegExp(j, "ig"), ""), n += "<" + f[1].trim(), h.length > 0 && (n += ' style="' + h + '"'), n += f[5] + ">", o = f.index + f[0].length, m = i
                        }
                    }
                    return n += m.length > 0 ? b(a.substring(o), m) : a.substring(o)
                }

                function d(a) {
                    if (!a || !angular.isString(a) || a.length <= 0) return a;
                    for (var b, c = /<([^>\/]+?)align=("([^"]+)"|'([^']+)')([^>]*)>/gi, d = "", e = 0; b = c.exec(a);) {
                        d += a.substring(e, b.index), e = b.index + b[0].length;
                        var f = "<" + b[1] + b[5];
                        /style=("([^"]+)"|'([^']+)')/gi.test(f) ? f = f.replace(/style=("([^"]+)"|'([^']+)')/i, 'style="$2$3 text-align:' + (b[3] || b[4]) + ';"') : f += ' style="text-align:' + (b[3] || b[4]) + ';"', f += ">", d += f
                    }
                    return d + a.substring(e)
                }
                for (var e = [{
                        property: "font-weight",
                        values: ["bold"],
                        tag: "b"
                    }, {
                        property: "font-style",
                        values: ["italic"],
                        tag: "i"
                    }], f = [], g = 0; g < e.length; g++) {
                    for (var h = "(" + e[g].property + ":\\s*(", i = 0; i < e[g].values.length; i++) i > 0 && (h += "|"), h += e[g].values[i];
                    h += ");)", f.push(h)
                }
                var j = "(" + f.join("|") + ")";
                return function(b, e, f) {
                    if (!f) try {
                        b = c(b)
                    } catch (g) {}
                    b = d(b);
                    var h;
                    try {
                        h = a(b), f && (h = b)
                    } catch (g) {
                        h = e || ""
                    }
                    var i, j = h.match(/(<pre[^>]*>.*?<\/pre[^>]*>)/gi),
                        k = h.replace(/(&#(9|10);)*/gi, ""),
                        l = /<pre[^>]*>.*?<\/pre[^>]*>/gi,
                        m = 0,
                        n = 0;
                    for (h = ""; null !== (i = l.exec(k)) && m < j.length;) h += k.substring(n, i.index) + j[m], n = i.index + i[0].length, m++;
                    return h + k.substring(n)
                }
            }]).factory("taToolExecuteAction", ["$q", "$log", function(a, b) {
                return function(c) {
                    void 0 !== c && (this.$editor = function() {
                        return c
                    });
                    var d, e = a.defer(),
                        f = e.promise,
                        g = this.$editor();
                    try {
                        d = this.action(e, g.startAction()), f["finally"](function() {
                            g.endAction.call(g)
                        })
                    } catch (h) {
                        b.error(h)
                    }(d || void 0 === d) && e.resolve()
                }
            }]), angular.module("textAngular.DOM", ["textAngular.factories"]).factory("taExecCommand", ["taSelection", "taBrowserTag", "$document", function(a, b, c) {
                var e = function(b, c) {
                        var d, e, f = b.find("li");
                        for (e = f.length - 1; e >= 0; e--) d = angular.element("<" + c + ">" + f[e].innerHTML + "</" + c + ">"), b.after(d);
                        b.remove(), a.setSelectionToElementEnd(d[0])
                    },
                    g = function(b) {
                        /(<br(|\/)>)$/i.test(b.innerHTML.trim()) ? a.setSelectionBeforeElement(angular.element(b).find("br")[0]) : a.setSelectionToElementEnd(b)
                    },
                    h = function(a, b) {
                        var c = angular.element("<" + b + ">" + a[0].innerHTML + "</" + b + ">");
                        a.after(c), a.remove(), g(c.find("li")[0])
                    },
                    i = function(a, c, d) {
                        for (var e = "", f = 0; f < a.length; f++) e += "<" + b("li") + ">" + a[f].innerHTML + "</" + b("li") + ">";
                        var h = angular.element("<" + d + ">" + e + "</" + d + ">");
                        c.after(h), c.remove(), g(h.find("li")[0])
                    };
                return function(g, j) {
                    return g = b(g),
                        function(k, l, m, n) {
                            var o, p, q, r, s, t, u, v = angular.element("<" + g + ">");
                            try {
                                u = a.getSelectionElement()
                            } catch (w) {}
                            var x = angular.element(u);
                            if (void 0 !== u) {
                                var y = u.tagName.toLowerCase();
                                if ("insertorderedlist" === k.toLowerCase() || "insertunorderedlist" === k.toLowerCase()) {
                                    var z = b("insertorderedlist" === k.toLowerCase() ? "ol" : "ul");
                                    if (y === z) return e(x, g);
                                    if ("li" === y && x.parent()[0].tagName.toLowerCase() === z && 1 === x.parent().children().length) return e(x.parent(), g);
                                    if ("li" === y && x.parent()[0].tagName.toLowerCase() !== z && 1 === x.parent().children().length) return h(x.parent(), z);
                                    if (y.match(d) && !x.hasClass("ta-bind")) {
                                        if ("ol" === y || "ul" === y) return h(x, z);
                                        var A = !1;
                                        return angular.forEach(x.children(), function(a) {
                                            a.tagName.match(d) && (A = !0)
                                        }), A ? i(x.children(), x, z) : i([angular.element("<div>" + u.innerHTML + "</div>")[0]], x, z)
                                    }
                                    if (y.match(d)) {
                                        if (r = a.getOnlySelectedElements(), 0 === r.length) p = angular.element("<" + z + "><li>" + u.innerHTML + "</li></" + z + ">"), x.html(""), x.append(p);
                                        else {
                                            if (1 === r.length && ("ol" === r[0].tagName.toLowerCase() || "ul" === r[0].tagName.toLowerCase())) return r[0].tagName.toLowerCase() === z ? e(angular.element(r[0]), g) : h(angular.element(r[0]), z);
                                            q = "";
                                            var B = [];
                                            for (o = 0; o < r.length; o++)
                                                if (3 !== r[o].nodeType) {
                                                    var C = angular.element(r[o]);
                                                    if ("li" === r[o].tagName.toLowerCase()) continue;
                                                    q += "ol" === r[o].tagName.toLowerCase() || "ul" === r[o].tagName.toLowerCase() ? C[0].innerHTML : "span" !== r[o].tagName.toLowerCase() || "ol" !== r[o].childNodes[0].tagName.toLowerCase() && "ul" !== r[o].childNodes[0].tagName.toLowerCase() ? "<" + b("li") + ">" + C[0].innerHTML + "</" + b("li") + ">" : C[0].childNodes[0].innerHTML, B.unshift(C)
                                                }
                                            p = angular.element("<" + z + ">" + q + "</" + z + ">"), B.pop().replaceWith(p), angular.forEach(B, function(a) {
                                                a.remove()
                                            })
                                        }
                                        return void a.setSelectionToElementEnd(p[0])
                                    }
                                } else {
                                    if ("formatblock" === k.toLowerCase()) {
                                        for (t = m.toLowerCase().replace(/[<>]/gi, ""), "default" === t.trim() && (t = g, m = "<" + g + ">"), p = "li" === y ? x.parent() : x; !p[0].tagName || !p[0].tagName.match(d) && !p.parent().attr("contenteditable");) p = p.parent(), y = (p[0].tagName || "").toLowerCase();
                                        if (y === t) {
                                            r = p.children();
                                            var D = !1;
                                            for (o = 0; o < r.length; o++) D = D || r[o].tagName.match(d);
                                            D ? (p.after(r), s = p.next(), p.remove(), p = s) : (v.append(p[0].childNodes), p.after(v), p.remove(), p = v)
                                        } else if (p.parent()[0].tagName.toLowerCase() !== t || p.parent().hasClass("ta-bind"))
                                            if (y.match(f)) p.wrap(m);
                                            else {
                                                for (r = a.getOnlySelectedElements(), 0 === r.length && (r = [p[0]]), o = 0; o < r.length; o++)
                                                    if (3 === r[o].nodeType || !r[o].tagName.match(d))
                                                        for (; 3 === r[o].nodeType || !r[o].tagName || !r[o].tagName.match(d);) r[o] = r[o].parentNode;
                                                if (angular.element(r[0]).hasClass("ta-bind")) p = angular.element(m), p[0].innerHTML = r[0].innerHTML, r[0].innerHTML = p[0].outerHTML;
                                                else if ("blockquote" === t) {
                                                    for (q = "", o = 0; o < r.length; o++) q += r[o].outerHTML;
                                                    for (p = angular.element(m), p[0].innerHTML = q, r[0].parentNode.insertBefore(p[0], r[0]), o = r.length - 1; o >= 0; o--) r[o].parentNode && r[o].parentNode.removeChild(r[o])
                                                } else
                                                    for (o = 0; o < r.length; o++) p = angular.element(m), p[0].innerHTML = r[o].innerHTML, r[o].parentNode.insertBefore(p[0], r[o]), r[o].parentNode.removeChild(r[o])
                                            } else {
                                            var E = p.parent(),
                                                F = E.contents();
                                            for (o = 0; o < F.length; o++) E.parent().hasClass("ta-bind") && 3 === F[o].nodeType && (v = angular.element("<" + g + ">"), v[0].innerHTML = F[o].outerHTML, F[o] = v[0]), E.parent()[0].insertBefore(F[o], E[0]);
                                            E.remove()
                                        }
                                        return void a.setSelectionToElementEnd(p[0])
                                    }
                                    if ("createlink" === k.toLowerCase()) {
                                        var G = '<a href="' + m + '" target="' + (n.a.target ? n.a.target : "") + '">',
                                            H = "</a>",
                                            I = a.getSelection();
                                        if (I.collapsed) a.insertHtml(G + m + H, j);
                                        else if (rangy.getSelection().getRangeAt(0).canSurroundContents()) {
                                            var J = angular.element(G + H)[0];
                                            rangy.getSelection().getRangeAt(0).surroundContents(J)
                                        }
                                        return
                                    }
                                    if ("inserthtml" === k.toLowerCase()) return void a.insertHtml(m, j)
                                }
                            }
                            try {
                                c[0].execCommand(k, l, m)
                            } catch (w) {}
                        }
                }
            }]).service("taSelection", ["$window", "$document", "taDOM", function(a, b, c) {
                var e = b[0],
                    f = a.rangy,
                    h = function(a, b) {
                        return a.tagName && a.tagName.match(/^br$/i) && 0 === b && !a.previousSibling ? {
                            element: a.parentNode,
                            offset: 0
                        } : {
                            element: a,
                            offset: b
                        }
                    },
                    i = {
                        getSelection: function() {
                            var a = f.getSelection().getRangeAt(0),
                                b = a.commonAncestorContainer,
                                c = {
                                    start: h(a.startContainer, a.startOffset),
                                    end: h(a.endContainer, a.endOffset),
                                    collapsed: a.collapsed
                                };
                            return b = 3 === b.nodeType ? b.parentNode : b, b.parentNode === c.start.element || b.parentNode === c.end.element ? c.container = b.parentNode : c.container = b, c
                        },
                        getOnlySelectedElements: function() {
                            var a = f.getSelection().getRangeAt(0),
                                b = a.commonAncestorContainer;
                            return b = 3 === b.nodeType ? b.parentNode : b, a.getNodes([1], function(a) {
                                return a.parentNode === b
                            })
                        },
                        getSelectionElement: function() {
                            return i.getSelection().container
                        },
                        setSelection: function(a, b, c) {
                            var d = f.createRange();
                            d.setStart(a, b), d.setEnd(a, c), f.getSelection().setSingleRange(d)
                        },
                        setSelectionBeforeElement: function(a) {
                            var b = f.createRange();
                            b.selectNode(a), b.collapse(!0), f.getSelection().setSingleRange(b)
                        },
                        setSelectionAfterElement: function(a) {
                            var b = f.createRange();
                            b.selectNode(a), b.collapse(!1), f.getSelection().setSingleRange(b)
                        },
                        setSelectionToElementStart: function(a) {
                            var b = f.createRange();
                            b.selectNodeContents(a), b.collapse(!0), f.getSelection().setSingleRange(b)
                        },
                        setSelectionToElementEnd: function(a) {
                            var b = f.createRange();
                            b.selectNodeContents(a), b.collapse(!1), a.childNodes && a.childNodes[a.childNodes.length - 1] && "br" === a.childNodes[a.childNodes.length - 1].nodeName && (b.startOffset = b.endOffset = b.startOffset - 1), f.getSelection().setSingleRange(b)
                        },
                        insertHtml: function(a, b) {
                            var h, j, k, l, m, n, o, p = angular.element("<div>" + a + "</div>"),
                                q = f.getSelection().getRangeAt(0),
                                r = e.createDocumentFragment(),
                                s = p[0].childNodes,
                                t = !0;
                            if (s.length > 0) {
                                for (l = [], k = 0; k < s.length; k++) "p" === s[k].nodeName.toLowerCase() && "" === s[k].innerHTML.trim() || 3 === s[k].nodeType && "" === s[k].nodeValue.trim() || (t = t && !d.test(s[k].nodeName), l.push(s[k]));
                                for (var u = 0; u < l.length; u++) n = r.appendChild(l[u]);
                                !t && q.collapsed && /^(|<br(|\/)>)$/i.test(q.startContainer.innerHTML) && q.selectNode(q.startContainer)
                            } else t = !0, n = r = e.createTextNode(a);
                            if (t) q.deleteContents();
                            else if (q.collapsed && q.startContainer !== b)
                                if (q.startContainer.innerHTML && q.startContainer.innerHTML.match(/^<[^>]*>$/i)) h = q.startContainer, 1 === q.startOffset ? (q.setStartAfter(h), q.setEndAfter(h)) : (q.setStartBefore(h), q.setEndBefore(h));
                                else {
                                    if (3 === q.startContainer.nodeType && q.startContainer.parentNode !== b)
                                        for (h = q.startContainer.parentNode, j = h.cloneNode(), c.splitNodes(h.childNodes, h, j, q.startContainer, q.startOffset); !g.test(h.nodeName);) {
                                            angular.element(h).after(j), h = h.parentNode;
                                            var v = j;
                                            j = h.cloneNode(), c.splitNodes(h.childNodes, h, j, v)
                                        } else h = q.startContainer, j = h.cloneNode(), c.splitNodes(h.childNodes, h, j, void 0, void 0, q.startOffset);
                                    if (angular.element(h).after(j), q.setStartAfter(h), q.setEndAfter(h), /^(|<br(|\/)>)$/i.test(h.innerHTML.trim()) && (q.setStartBefore(h), q.setEndBefore(h), angular.element(h).remove()), /^(|<br(|\/)>)$/i.test(j.innerHTML.trim()) && angular.element(j).remove(), "li" === h.nodeName.toLowerCase()) {
                                        for (o = e.createDocumentFragment(), m = 0; m < r.childNodes.length; m++) p = angular.element("<li>"), c.transferChildNodes(r.childNodes[m], p[0]), c.transferNodeAttributes(r.childNodes[m], p[0]), o.appendChild(p[0]);
                                        r = o, n && (n = r.childNodes[r.childNodes.length - 1], n = n.childNodes[n.childNodes.length - 1])
                                    }
                                } else q.deleteContents();
                            q.insertNode(r), n && i.setSelectionToElementEnd(n)
                        }
                    };
                return i
            }]).service("taDOM", function() {
                var a = {
                    getByAttribute: function(b, c) {
                        var d = [],
                            e = b.children();
                        return e.length && angular.forEach(e, function(b) {
                            d = d.concat(a.getByAttribute(angular.element(b), c))
                        }), void 0 !== b.attr(c) && d.push(b), d
                    },
                    transferChildNodes: function(a, b) {
                        for (b.innerHTML = ""; a.childNodes.length > 0;) b.appendChild(a.childNodes[0]);
                        return b
                    },
                    splitNodes: function(b, c, d, e, f, g) {
                        if (!e && isNaN(g)) throw new Error("taDOM.splitNodes requires a splitNode or splitIndex");
                        for (var h = document.createDocumentFragment(), i = document.createDocumentFragment(), j = 0; b.length > 0 && (isNaN(g) || g !== j) && b[0] !== e;) h.appendChild(b[0]), j++;
                        for (!isNaN(f) && f >= 0 && b[0] && (h.appendChild(document.createTextNode(b[0].nodeValue.substring(0, f))), b[0].nodeValue = b[0].nodeValue.substring(f)); b.length > 0;) i.appendChild(b[0]);
                        a.transferChildNodes(h, c), a.transferChildNodes(i, d)
                    },
                    transferNodeAttributes: function(a, b) {
                        for (var c = 0; c < a.attributes.length; c++) b.setAttribute(a.attributes[c].name, a.attributes[c].value);
                        return b
                    }
                };
                return a
            }), angular.module("textAngular.validators", []).directive("taMaxText", function() {
                return {
                    restrict: "A",
                    require: "ngModel",
                    link: function(a, b, c, d) {
                        var e = parseInt(a.$eval(c.taMaxText));
                        if (isNaN(e)) throw "Max text must be an integer";
                        c.$observe("taMaxText", function(a) {
                            if (e = parseInt(a), isNaN(e)) throw "Max text must be an integer";
                            d.$dirty && d.$validate()
                        }), d.$validators.taMaxText = function(a) {
                            var b = angular.element("<div/>");
                            return b.html(a), b.text().length <= e
                        }
                    }
                }
            }).directive("taMinText", function() {
                return {
                    restrict: "A",
                    require: "ngModel",
                    link: function(a, b, c, d) {
                        var e = parseInt(a.$eval(c.taMinText));
                        if (isNaN(e)) throw "Min text must be an integer";
                        c.$observe("taMinText", function(a) {
                            if (e = parseInt(a), isNaN(e)) throw "Min text must be an integer";
                            d.$dirty && d.$validate()
                        }), d.$validators.taMinText = function(a) {
                            var b = angular.element("<div/>");
                            return b.html(a), !b.text().length || b.text().length >= e
                        }
                    }
                }
            }), angular.module("textAngular.taBind", ["textAngular.factories", "textAngular.DOM"]).service("_taBlankTest", [function() {
                var a = /<(a|abbr|acronym|bdi|bdo|big|cite|code|del|dfn|img|ins|kbd|label|map|mark|q|ruby|rp|rt|s|samp|time|tt|var)[^>]*(>|$)/i;
                return function(b) {
                    return function(c) {
                        if (!c) return !0;
                        var d, e = /(^[^<]|>)[^<]/i.exec(c);
                        return e ? d = e.index : (c = c.toString().replace(/="[^"]*"/i, "").replace(/="[^"]*"/i, "").replace(/="[^"]*"/i, "").replace(/="[^"]*"/i, ""), d = c.indexOf(">")), c = c.trim().substring(d, d + 100), /^[^<>]+$/i.test(c) ? !1 : 0 === c.length || c === b || /^>(\s|&nbsp;)*<\/[^>]+>$/gi.test(c) ? !0 : />\s*[^\s<]/i.test(c) || a.test(c) ? !1 : !0
                    }
                }
            }]).directive("taButton", [function() {
                return {
                    link: function(a, b, c) {
                        b.attr("unselectable", "on"), b.on("mousedown", function(a, b) {
                            return b && angular.extend(a, b), a.preventDefault(), !1
                        })
                    }
                }
            }]).directive("taBind", ["taSanitize", "$timeout", "$window", "$document", "taFixChrome", "taBrowserTag", "taSelection", "taSelectableElements", "taApplyCustomRenderers", "taOptions", "_taBlankTest", "$parse", "taDOM", "textAngularManager", function(a, e, f, h, k, l, m, n, o, q, r, s, t, u) {
                return {
                    priority: 2,
                    require: ["ngModel", "?ngModelOptions"],
                    link: function(l, v, w, x) {
                        function y(a) {
                            var b;
                            return R.forEach(function(c) {
                                if (c.keyCode === a.keyCode) {
                                    var d = (a.metaKey ? O : 0) + (a.ctrlKey ? N : 0) + (a.shiftKey ? Q : 0) + (a.altKey ? P : 0);
                                    if (c.forbiddenModifiers & d) return;
                                    c.mustHaveModifiers.every(function(a) {
                                        return d & a
                                    }) && (b = c.specialKey)
                                }
                            }), b
                        }
                        var z, A, B, C, D = x[0],
                            E = x[1] || {},
                            F = void 0 !== v.attr("contenteditable") && v.attr("contenteditable"),
                            G = F || "textarea" === v[0].tagName.toLowerCase() || "input" === v[0].tagName.toLowerCase(),
                            H = !1,
                            I = !1,
                            J = !1,
                            K = w.taUnsafeSanitizer || q.disableSanitizer,
                            L = /^(9|19|20|27|33|34|35|36|37|38|39|40|45|112|113|114|115|116|117|118|119|120|121|122|123|144|145)$/i,
                            M = /^(8|13|32|46|59|61|107|109|173|186|187|188|189|190|191|192|219|220|221|222)$/i,
                            N = 1,
                            O = 2,
                            P = 4,
                            Q = 8,
                            R = [{
                                specialKey: "UndoKey",
                                forbiddenModifiers: P + Q,
                                mustHaveModifiers: [O + N],
                                keyCode: 90
                            }, {
                                specialKey: "RedoKey",
                                forbiddenModifiers: P,
                                mustHaveModifiers: [O + N, Q],
                                keyCode: 90
                            }, {
                                specialKey: "RedoKey",
                                forbiddenModifiers: P + Q,
                                mustHaveModifiers: [O + N],
                                keyCode: 89
                            }, {
                                specialKey: "TabKey",
                                forbiddenModifiers: O + Q + P + N,
                                mustHaveModifiers: [],
                                keyCode: 9
                            }, {
                                specialKey: "ShiftTabKey",
                                forbiddenModifiers: O + P + N,
                                mustHaveModifiers: [Q],
                                keyCode: 9
                            }];
                        void 0 === w.taDefaultWrap && (w.taDefaultWrap = "p"), "" === w.taDefaultWrap ? (B = "", C = void 0 === b.ie ? "<div><br></div>" : b.ie >= 11 ? "<p><br></p>" : b.ie <= 8 ? "<P>&nbsp;</P>" : "<p>&nbsp;</p>") : (B = void 0 === b.ie || b.ie >= 11 ? "<" + w.taDefaultWrap + "><br></" + w.taDefaultWrap + ">" : b.ie <= 8 ? "<" + w.taDefaultWrap.toUpperCase() + "></" + w.taDefaultWrap.toUpperCase() + ">" : "<" + w.taDefaultWrap + "></" + w.taDefaultWrap + ">", C = void 0 === b.ie || b.ie >= 11 ? "<" + w.taDefaultWrap + "><br></" + w.taDefaultWrap + ">" : b.ie <= 8 ? "<" + w.taDefaultWrap.toUpperCase() + ">&nbsp;</" + w.taDefaultWrap.toUpperCase() + ">" : "<" + w.taDefaultWrap + ">&nbsp;</" + w.taDefaultWrap + ">"), E.$options || (E.$options = {});
                        var S = r(C),
                            T = function(a) {
                                if (S(a)) return a;
                                var b = angular.element("<div>" + a + "</div>");
                                if (0 === b.children().length) a = "<" + w.taDefaultWrap + ">" + a + "</" + w.taDefaultWrap + ">";
                                else {
                                    var c, e = b[0].childNodes,
                                        f = !1;
                                    for (c = 0; c < e.length && !(f = e[c].nodeName.toLowerCase().match(d)); c++);
                                    if (f)
                                        for (a = "", c = 0; c < e.length; c++) {
                                            var g = e[c],
                                                h = g.nodeName.toLowerCase();
                                            if ("#comment" === h) a += "<!--" + g.nodeValue + "-->";
                                            else if ("#text" === h) {
                                                var i = g.textContent;
                                                a += i.trim() ? "<" + w.taDefaultWrap + ">" + i + "</" + w.taDefaultWrap + ">" : i
                                            } else if (h.match(d)) a += g.outerHTML;
                                            else {
                                                var j = g.outerHTML || g.nodeValue;
                                                a += "" !== j.trim() ? "<" + w.taDefaultWrap + ">" + j + "</" + w.taDefaultWrap + ">" : j
                                            }
                                        } else a = "<" + w.taDefaultWrap + ">" + a + "</" + w.taDefaultWrap + ">"
                                }
                                return a
                            };
                        w.taPaste && (A = s(w.taPaste)), v.addClass("ta-bind");
                        var U;
                        l["$undoManager" + (w.id || "")] = D.$undoManager = {
                            _stack: [],
                            _index: 0,
                            _max: 1e3,
                            push: function(a) {
                                return "undefined" == typeof a || null === a || "undefined" != typeof this.current() && null !== this.current() && a === this.current() ? a : (this._index < this._stack.length - 1 && (this._stack = this._stack.slice(0, this._index + 1)), this._stack.push(a), U && e.cancel(U), this._stack.length > this._max && this._stack.shift(), this._index = this._stack.length - 1, a)
                            },
                            undo: function() {
                                return this.setToIndex(this._index - 1)
                            },
                            redo: function() {
                                return this.setToIndex(this._index + 1)
                            },
                            setToIndex: function(a) {
                                return 0 > a || a > this._stack.length - 1 ? void 0 : (this._index = a, this.current())
                            },
                            current: function() {
                                return this._stack[this._index]
                            }
                        };
                        var V, W = l["$undoTaBind" + (w.id || "")] = function() {
                                if (!H && F) {
                                    var a = D.$undoManager.undo();
                                    "undefined" != typeof a && null !== a && (ka(a), Z(a, !1), V && e.cancel(V), V = e(function() {
                                        v[0].focus(), m.setSelectionToElementEnd(v[0])
                                    }, 1))
                                }
                            },
                            X = l["$redoTaBind" + (w.id || "")] = function() {
                                if (!H && F) {
                                    var a = D.$undoManager.redo();
                                    "undefined" != typeof a && null !== a && (ka(a), Z(a, !1), V && e.cancel(V), V = e(function() {
                                        v[0].focus(), m.setSelectionToElementEnd(v[0])
                                    }, 1))
                                }
                            },
                            Y = function() {
                                if (F) return v[0].innerHTML;
                                if (G) return v.val();
                                throw "textAngular Error: attempting to update non-editable taBind"
                            },
                            Z = function(a, b, c) {
                                J = c || !1, ("undefined" == typeof b || null === b) && (b = F), ("undefined" == typeof a || null === a) && (a = Y()), S(a) ? ("" !== D.$viewValue && D.$setViewValue(""), b && "" !== D.$undoManager.current() && D.$undoManager.push("")) : (ja(), D.$viewValue !== a && (D.$setViewValue(a), b && D.$undoManager.push(a))), D.$render()
                            };
                        l["updateTaBind" + (w.id || "")] = function() {
                            H || Z(void 0, void 0, !0)
                        };
                        var $ = function(b) {
                            return D.$oldViewValue = a(k(b), D.$oldViewValue, K)
                        };
                        if (v.attr("required") && (D.$validators.required = function(a, b) {
                                return !S(a || b)
                            }), D.$parsers.push($), D.$parsers.unshift(T), D.$formatters.push($), D.$formatters.unshift(T), D.$formatters.unshift(function(a) {
                                return D.$undoManager.push(a || "")
                            }), G)
                            if (l.events = {}, F) {
                                var _ = !1,
                                    aa = function(b) {
                                        if (b && b.trim().length) {
                                            if (b.match(/class=["']*Mso(Normal|List)/i) || b.match(/content=["']*Word.Document/i)) {
                                                var c = b.match(/<!--StartFragment-->([\s\S]*?)<!--EndFragment-->/i);
                                                c = c ? c[1] : b, c = c.replace(/<o:p>[\s\S]*?<\/o:p>/gi, "").replace(/class=(["']|)MsoNormal(["']|)/gi, "");
                                                var d = angular.element("<div>" + c + "</div>"),
                                                    f = angular.element("<div></div>"),
                                                    g = {
                                                        element: null,
                                                        lastIndent: [],
                                                        lastLi: null,
                                                        isUl: !1
                                                    };
                                                g.lastIndent.peek = function() {
                                                    var a = this.length;
                                                    return a > 0 ? this[a - 1] : void 0
                                                };
                                                for (var h = function(a) {
                                                        g.isUl = a, g.element = angular.element(a ? "<ul>" : "<ol>"), g.lastIndent = [], g.lastIndent.peek = function() {
                                                            var a = this.length;
                                                            return a > 0 ? this[a - 1] : void 0
                                                        }, g.lastLevelMatch = null
                                                    }, i = 0; i <= d[0].childNodes.length; i++)
                                                    if (d[0].childNodes[i] && "#text" !== d[0].childNodes[i].nodeName) {
                                                        var j = d[0].childNodes[i].tagName.toLowerCase();
                                                        if ("p" === j || "h1" === j || "h2" === j || "h3" === j || "h4" === j || "h5" === j || "h6" === j) {
                                                            var k = angular.element(d[0].childNodes[i]),
                                                                n = (k.attr("class") || "").match(/MsoList(Bullet|Number|Paragraph)(CxSp(First|Middle|Last)|)/i);
                                                            if (n) {
                                                                if (k[0].childNodes.length < 2 || k[0].childNodes[1].childNodes.length < 1) continue;
                                                                var o = "bullet" === n[1].toLowerCase() || "number" !== n[1].toLowerCase() && !(/^[^0-9a-z<]*[0-9a-z]+[^0-9a-z<>]</i.test(k[0].childNodes[1].innerHTML) || /^[^0-9a-z<]*[0-9a-z]+[^0-9a-z<>]</i.test(k[0].childNodes[1].childNodes[0].innerHTML)),
                                                                    p = (k.attr("style") || "").match(/margin-left:([\-\.0-9]*)/i),
                                                                    q = parseFloat(p ? p[1] : 0),
                                                                    r = (k.attr("style") || "").match(/mso-list:l([0-9]+) level([0-9]+) lfo[0-9+]($|;)/i);
                                                                if (r && r[2] && (q = parseInt(r[2])), r && (!g.lastLevelMatch || r[1] !== g.lastLevelMatch[1]) || !n[3] || "first" === n[3].toLowerCase() || null === g.lastIndent.peek() || g.isUl !== o && g.lastIndent.peek() === q) h(o), f.append(g.element);
                                                                else if (null != g.lastIndent.peek() && g.lastIndent.peek() < q) g.element = angular.element(o ? "<ul>" : "<ol>"), g.lastLi.append(g.element);
                                                                else if (null != g.lastIndent.peek() && g.lastIndent.peek() > q) {
                                                                    for (; null != g.lastIndent.peek() && g.lastIndent.peek() > q;)
                                                                        if ("li" !== g.element.parent()[0].tagName.toLowerCase()) {
                                                                            if (!/[uo]l/i.test(g.element.parent()[0].tagName.toLowerCase())) break;
                                                                            g.element = g.element.parent(), g.lastIndent.pop()
                                                                        } else g.element = g.element.parent();
                                                                    g.isUl = "ul" === g.element[0].tagName.toLowerCase(), o !== g.isUl && (h(o), f.append(g.element))
                                                                }
                                                                g.lastLevelMatch = r, q !== g.lastIndent.peek() && g.lastIndent.push(q), g.lastLi = angular.element("<li>"), g.element.append(g.lastLi), g.lastLi.html(k.html().replace(/<!(--|)\[if !supportLists\](--|)>[\s\S]*?<!(--|)\[endif\](--|)>/gi, "")), k.remove()
                                                            } else h(!1), f.append(k)
                                                        }
                                                    }
                                                var s = function(a) {
                                                    a = angular.element(a);
                                                    for (var b = a[0].childNodes.length - 1; b >= 0; b--) a.after(a[0].childNodes[b]);
                                                    a.remove()
                                                };
                                                angular.forEach(f.find("span"), function(a) {
                                                    a.removeAttribute("lang"), a.attributes.length <= 0 && s(a)
                                                }), angular.forEach(f.find("font"), s), b = f.html()
                                            } else {
                                                if (b = b.replace(/<(|\/)meta[^>]*?>/gi, ""), b.match(/<[^>]*?(ta-bind)[^>]*?>/)) {
                                                    if (b.match(/<[^>]*?(text-angular)[^>]*?>/)) {
                                                        var u = angular.element("<div>" + b + "</div>");
                                                        u.find("textarea").remove();
                                                        for (var w = t.getByAttribute(u, "ta-bind"), x = 0; x < w.length; x++) {
                                                            for (var y = w[x][0].parentNode.parentNode, z = 0; z < w[x][0].childNodes.length; z++) y.parentNode.insertBefore(w[x][0].childNodes[z], y);
                                                            y.parentNode.removeChild(y)
                                                        }
                                                        b = u.html().replace('<br class="Apple-interchange-newline">', "")
                                                    }
                                                } else b.match(/^<span/) && (b.match(/<span class=(\"Apple-converted-space\"|\'Apple-converted-space\')>.<\/span>/gi) || (b = b.replace(/<(|\/)span[^>]*?>/gi, "")));
                                                b = b.replace(/<br class="Apple-interchange-newline"[^>]*?>/gi, "").replace(/<span class="Apple-converted-space">( |&nbsp;)<\/span>/gi, "&nbsp;")
                                            }
                                            /<li(\s.*)?>/i.test(b) && /(<ul(\s.*)?>|<ol(\s.*)?>).*<li(\s.*)?>/i.test(b) === !1 && (b = b.replace(/<li(\s.*)?>.*<\/li(\s.*)?>/i, "<ul>$&</ul>")), b = b.replace(/^[ |\u00A0]+/gm, function(a) {
                                                for (var b = "", c = 0; c < a.length; c++) b += "&nbsp;";
                                                return b
                                            }).replace(/\n|\r\n|\r/g, "<br />").replace(/\t/g, "&nbsp;&nbsp;&nbsp;&nbsp;"), A && (b = A(l, {
                                                $html: b
                                            }) || b), b = a(b, "", K), m.insertHtml(b, v[0]), e(function() {
                                                D.$setViewValue(Y()), _ = !1, v.removeClass("processing-paste")
                                            }, 0)
                                        } else _ = !1, v.removeClass("processing-paste")
                                    };
                                v.on("paste", l.events.paste = function(a, b) {
                                    if (b && angular.extend(a, b), H || _) return a.stopPropagation(), a.preventDefault(), !1;
                                    _ = !0, v.addClass("processing-paste");
                                    var c, d = (a.originalEvent || a).clipboardData;
                                    if (d && d.getData && d.types.length > 0) {
                                        for (var g = "", i = 0; i < d.types.length; i++) g += " " + d.types[i];
                                        return /text\/html/i.test(g) ? c = d.getData("text/html") : /text\/plain/i.test(g) && (c = d.getData("text/plain")), aa(c), a.stopPropagation(), a.preventDefault(), !1
                                    }
                                    var j = f.rangy.saveSelection(),
                                        k = angular.element('<div class="ta-hidden-input" contenteditable="true"></div>');
                                    h.find("body").append(k), k[0].focus(), e(function() {
                                        f.rangy.restoreSelection(j), aa(k[0].innerHTML), v[0].focus(), k.remove()
                                    }, 0)
                                }), v.on("cut", l.events.cut = function(a) {
                                    H ? a.preventDefault() : e(function() {
                                        D.$setViewValue(Y())
                                    }, 0)
                                }), v.on("keydown", l.events.keydown = function(a, b) {
                                    b && angular.extend(a, b), a.specialKey = y(a);
                                    var c;
                                    if (q.keyMappings.forEach(function(b) {
                                            a.specialKey === b.commandKeyCode && (a.specialKey = void 0), b.testForKey(a) && (c = b.commandKeyCode), ("UndoKey" === b.commandKeyCode || "RedoKey" === b.commandKeyCode) && (b.enablePropagation || a.preventDefault())
                                        }), "undefined" != typeof c && (a.specialKey = c), "undefined" == typeof a.specialKey || "UndoKey" === a.specialKey && "RedoKey" === a.specialKey || (a.preventDefault(), u.sendKeyCommand(l, a)), !H && ("UndoKey" === a.specialKey && (W(), a.preventDefault()), "RedoKey" === a.specialKey && (X(), a.preventDefault()), 13 === a.keyCode && !a.shiftKey)) {
                                        var d, e = function(a, b) {
                                                for (var c = 0; c < a.length; c++)
                                                    if (a[c] === b) return !0;
                                                return !1
                                            },
                                            f = m.getSelectionElement();
                                        if (!f.tagName.match(g)) return;
                                        var h = angular.element(B),
                                            i = ["blockquote", "ul", "ol"];
                                        if (e(i, f.parentNode.tagName.toLowerCase())) {
                                            if (/^<br(|\/)>$/i.test(f.innerHTML.trim()) && !f.nextSibling) {
                                                d = angular.element(f);
                                                var j = d.parent();
                                                j.after(h), d.remove(), 0 === j.children().length && j.remove(), m.setSelectionToElementStart(h[0]), a.preventDefault()
                                            }
                                            /^<[^>]+><br(|\/)><\/[^>]+>$/i.test(f.innerHTML.trim()) && (d = angular.element(f), d.after(h), d.remove(), m.setSelectionToElementStart(h[0]), a.preventDefault())
                                        }
                                    }
                                });
                                var ba;
                                if (v.on("keyup", l.events.keyup = function(a, b) {
                                        if (b && angular.extend(a, b), 9 === a.keyCode) {
                                            var c = m.getSelection();
                                            return void(c.start.element === v[0] && v.children().length && m.setSelectionToElementStart(v.children()[0]))
                                        }
                                        if (U && e.cancel(U), !H && !L.test(a.keyCode)) {
                                            if ("" !== B && 13 === a.keyCode && !a.shiftKey) {
                                                for (var d = m.getSelectionElement(); !d.tagName.match(g) && d !== v[0];) d = d.parentNode;
                                                if (d.tagName.toLowerCase() !== w.taDefaultWrap && "li" !== d.tagName.toLowerCase() && ("" === d.innerHTML.trim() || "<br>" === d.innerHTML.trim())) {
                                                    var f = angular.element(B);
                                                    angular.element(d).replaceWith(f), m.setSelectionToElementStart(f[0])
                                                }
                                            }
                                            var h = Y();
                                            "" !== B && "" === h.trim() ? (ka(B), m.setSelectionToElementStart(v.children()[0])) : "<" !== h.substring(0, 1) && "" !== w.taDefaultWrap;
                                            var i = z !== a.keyCode && M.test(a.keyCode);
                                            ba && e.cancel(ba), ba = e(function() {
                                                Z(h, i, !0)
                                            }, E.$options.debounce || 400), i || (U = e(function() {
                                                D.$undoManager.push(h)
                                            }, 250)), z = a.keyCode
                                        }
                                    }), v.on("blur", l.events.blur = function() {
                                        I = !1, H ? (J = !0, D.$render()) : Z(void 0, void 0, !0)
                                    }), w.placeholder && (b.ie > 8 || void 0 === b.ie)) {
                                    var ca;
                                    if (!w.id) throw "textAngular Error: An unique ID is required for placeholders to work";
                                    ca = i("#" + w.id + ".placeholder-text:before", 'content: "' + w.placeholder + '"'), l.$on("$destroy", function() {
                                        j(ca)
                                    })
                                }
                                v.on("focus", l.events.focus = function() {
                                    I = !0, v.removeClass("placeholder-text"), ja()
                                }), v.on("mouseup", l.events.mouseup = function() {
                                    var a = m.getSelection();
                                    a.start.element === v[0] && v.children().length && m.setSelectionToElementStart(v.children()[0])
                                }), v.on("mousedown", l.events.mousedown = function(a, b) {
                                    b && angular.extend(a, b), a.stopPropagation()
                                })
                            } else {
                                v.on("change blur", l.events.change = l.events.blur = function() {
                                    H || D.$setViewValue(Y())
                                }), v.on("keydown", l.events.keydown = function(a, b) {
                                    if (b && angular.extend(a, b), 9 === a.keyCode) {
                                        var c = this.selectionStart,
                                            d = this.selectionEnd,
                                            e = v.val();
                                        if (a.shiftKey) {
                                            var f = e.lastIndexOf("\n", c),
                                                g = e.lastIndexOf("	", c); - 1 !== g && g >= f && (v.val(e.substring(0, g) + e.substring(g + 1)), this.selectionStart = this.selectionEnd = c - 1)
                                        } else v.val(e.substring(0, c) + "	" + e.substring(d)), this.selectionStart = this.selectionEnd = c + 1;
                                        a.preventDefault()
                                    }
                                });
                                var da = function(a, b) {
                                        for (var c = "", d = 0; b > d; d++) c += a;
                                        return c
                                    },
                                    ea = function(a, b, c) {
                                        for (var d = 0; d < a.length; d++) b.call(c, d, a[d])
                                    },
                                    fa = function(a, b) {
                                        var c = "",
                                            d = a.childNodes;
                                        return b++, c += da("	", b - 1) + a.outerHTML.substring(0, 4), ea(d, function(a, d) {
                                            var e = d.nodeName.toLowerCase();
                                            return "#comment" === e ? void(c += "<!--" + d.nodeValue + "-->") : "#text" === e ? void(c += d.textContent) : void(d.outerHTML && (c += "ul" === e || "ol" === e ? "\n" + fa(d, b) : "\n" + da("	", b) + d.outerHTML))
                                        }), c += "\n" + da("	", b - 1) + a.outerHTML.substring(a.outerHTML.lastIndexOf("<"))
                                    };
                                D.$formatters.unshift(function(a) {
                                    var b = angular.element("<div>" + a + "</div>")[0].childNodes;
                                    return b.length > 0 && (a = "", ea(b, function(b, c) {
                                        var d = c.nodeName.toLowerCase();
                                        return "#comment" === d ? void(a += "<!--" + c.nodeValue + "-->") : "#text" === d ? void(a += c.textContent) : void(c.outerHTML && (a.length > 0 && (a += "\n"), a += "ul" === d || "ol" === d ? "" + fa(c, 0) : "" + c.outerHTML))
                                    })), a
                                })
                            }
                        var ga, ha = function(a) {
                                return l.$emit("ta-element-select", this), a.preventDefault(), !1
                            },
                            ia = function(a, b) {
                                if (b && angular.extend(a, b), !p && !H) {
                                    p = !0;
                                    var c;
                                    c = a.originalEvent ? a.originalEvent.dataTransfer : a.dataTransfer, l.$emit("ta-drop-event", this, a, c), e(function() {
                                        p = !1, Z(void 0, void 0, !0)
                                    }, 100)
                                }
                            },
                            ja = l["reApplyOnSelectorHandlers" + (w.id || "")] = function() {
                                H || angular.forEach(n, function(a) {
                                    v.find(a).off("click", ha).on("click", ha)
                                })
                            },
                            ka = function(a) {
                                v[0].innerHTML = a
                            },
                            la = !1;
                        D.$render = function() {
                            if (!la) {
                                la = !0;
                                var a = D.$viewValue || "";
                                J || (F && I && (v.removeClass("placeholder-text"), ga && e.cancel(ga), ga = e(function() {
                                    I || (v[0].focus(), m.setSelectionToElementEnd(v.children()[v.children().length - 1])), ga = void 0
                                }, 1)), F ? (ka(w.placeholder ? "" === a ? B : a : "" === a ? B : a), H ? v.off("drop", ia) : (ja(), v.on("drop", ia))) : "textarea" !== v[0].tagName.toLowerCase() && "input" !== v[0].tagName.toLowerCase() ? ka(o(a)) : v.val(a)), F && w.placeholder && ("" === a ? I ? v.removeClass("placeholder-text") : v.addClass("placeholder-text") : v.removeClass("placeholder-text")), la = J = !1
                            }
                        }, w.taReadonly && (H = l.$eval(w.taReadonly), H ? (v.addClass("ta-readonly"), ("textarea" === v[0].tagName.toLowerCase() || "input" === v[0].tagName.toLowerCase()) && v.attr("disabled", "disabled"), void 0 !== v.attr("contenteditable") && v.attr("contenteditable") && v.removeAttr("contenteditable")) : (v.removeClass("ta-readonly"), "textarea" === v[0].tagName.toLowerCase() || "input" === v[0].tagName.toLowerCase() ? v.removeAttr("disabled") : F && v.attr("contenteditable", "true")), l.$watch(w.taReadonly, function(a, b) {
                            b !== a && (a ? (v.addClass("ta-readonly"), ("textarea" === v[0].tagName.toLowerCase() || "input" === v[0].tagName.toLowerCase()) && v.attr("disabled", "disabled"),
                                void 0 !== v.attr("contenteditable") && v.attr("contenteditable") && v.removeAttr("contenteditable"), angular.forEach(n, function(a) {
                                    v.find(a).on("click", ha)
                                }), v.off("drop", ia)) : (v.removeClass("ta-readonly"), "textarea" === v[0].tagName.toLowerCase() || "input" === v[0].tagName.toLowerCase() ? v.removeAttr("disabled") : F && v.attr("contenteditable", "true"), angular.forEach(n, function(a) {
                                v.find(a).off("click", ha)
                            }), v.on("drop", ia)), H = a)
                        })), F && !H && (angular.forEach(n, function(a) {
                            v.find(a).on("click", ha)
                        }), v.on("drop", ia), v.on("blur", function() {
                            b.webkit && (c = !0)
                        }))
                    }
                }
            }]);
            var p = !1,
                q = angular.module("textAngular", ["ngSanitize", "textAngularSetup", "textAngular.factories", "textAngular.DOM", "textAngular.validators", "textAngular.taBind"]);
            q.config([function() {
                angular.forEach(e, function(a, b) {
                    delete e[b]
                })
            }]), q.run([function() {
                if ("function" == typeof define && define.amd) define(function(a) {
                    window.rangy = a("rangy"), window.rangy.saveSelection = a("rangy/lib/rangy-selectionsaverestore")
                });
                else if ("function" == typeof require && "undefined" != typeof module && "object" == typeof a) window.rangy = require("rangy"), window.rangy.saveSelection = require("rangy/lib/rangy-selectionsaverestore");
                else {
                    if (!window.rangy) throw "rangy-core.js and rangy-selectionsaverestore.js are required for textAngular to work correctly, rangy-core is not yet loaded.";
                    if (window.rangy.init(), !window.rangy.saveSelection) throw "rangy-selectionsaverestore.js is required for textAngular to work correctly."
                }
            }]), q.directive("textAngular", ["$compile", "$timeout", "taOptions", "taSelection", "taExecCommand", "textAngularManager", "$window", "$document", "$animate", "$log", "$q", "$parse", function(a, b, c, d, e, f, g, h, i, j, k, l) {
                return {
                    require: "?ngModel",
                    scope: {},
                    restrict: "EA",
                    priority: 2,
                    link: function(m, n, o, p) {
                        var q, r, s, t, u, v, w, x, y, z, A, B = o.serial ? o.serial : Math.floor(1e16 * Math.random());
                        m._name = o.name ? o.name : "textAngularEditor" + B;
                        var C = function(a, c, d) {
                            b(function() {
                                var b = function() {
                                    a.off(c, b), d.apply(this, arguments)
                                };
                                a.on(c, b)
                            }, 100)
                        };
                        if (y = e(o.taDefaultWrap), angular.extend(m, angular.copy(c), {
                                wrapSelection: function(a, b, c) {
                                    "undo" === a.toLowerCase() ? m["$undoTaBindtaTextElement" + B]() : "redo" === a.toLowerCase() ? m["$redoTaBindtaTextElement" + B]() : (y(a, !1, b, m.defaultTagAttributes), c && m["reApplyOnSelectorHandlerstaTextElement" + B](), m.displayElements.text[0].focus())
                                },
                                showHtml: m.$eval(o.taShowHtml) || !1
                            }), o.taFocussedClass && (m.classes.focussed = o.taFocussedClass), o.taTextEditorClass && (m.classes.textEditor = o.taTextEditorClass), o.taHtmlEditorClass && (m.classes.htmlEditor = o.taHtmlEditorClass), o.taDefaultTagAttributes) try {
                            angular.extend(m.defaultTagAttributes, angular.fromJson(o.taDefaultTagAttributes))
                        } catch (D) {
                            j.error(D)
                        }
                        o.taTextEditorSetup && (m.setup.textEditorSetup = m.$parent.$eval(o.taTextEditorSetup)), o.taHtmlEditorSetup && (m.setup.htmlEditorSetup = m.$parent.$eval(o.taHtmlEditorSetup)), o.taFileDrop ? m.fileDropHandler = m.$parent.$eval(o.taFileDrop) : m.fileDropHandler = m.defaultFileDropHandler, w = n[0].innerHTML, n[0].innerHTML = "", m.displayElements = {
                            forminput: angular.element("<input type='hidden' tabindex='-1' style='display: none;'>"),
                            html: angular.element("<textarea></textarea>"),
                            text: angular.element("<div></div>"),
                            scrollWindow: angular.element("<div class='ta-scroll-window'></div>"),
                            popover: angular.element('<div class="popover fade bottom" style="max-width: none; width: 305px;"></div>'),
                            popoverArrow: angular.element('<div class="arrow"></div>'),
                            popoverContainer: angular.element('<div class="popover-content"></div>'),
                            resize: {
                                overlay: angular.element('<div class="ta-resizer-handle-overlay"></div>'),
                                background: angular.element('<div class="ta-resizer-handle-background"></div>'),
                                anchors: [angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-tl"></div>'), angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-tr"></div>'), angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-bl"></div>'), angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-br"></div>')],
                                info: angular.element('<div class="ta-resizer-handle-info"></div>')
                            }
                        }, m.displayElements.popover.append(m.displayElements.popoverArrow), m.displayElements.popover.append(m.displayElements.popoverContainer), m.displayElements.scrollWindow.append(m.displayElements.popover), m.displayElements.popover.on("mousedown", function(a, b) {
                            return b && angular.extend(a, b), a.preventDefault(), !1
                        }), m.showPopover = function(a) {
                            m.displayElements.popover.css("display", "block"), m.reflowPopover(a), i.addClass(m.displayElements.popover, "in"), C(h.find("body"), "click keyup", function() {
                                m.hidePopover()
                            })
                        }, m.reflowPopover = function(a) {
                            m.displayElements.text[0].offsetHeight - 51 > a[0].offsetTop ? (m.displayElements.popover.css("top", a[0].offsetTop + a[0].offsetHeight + m.displayElements.scrollWindow[0].scrollTop + "px"), m.displayElements.popover.removeClass("top").addClass("bottom")) : (m.displayElements.popover.css("top", a[0].offsetTop - 54 + m.displayElements.scrollWindow[0].scrollTop + "px"), m.displayElements.popover.removeClass("bottom").addClass("top"));
                            var b = m.displayElements.text[0].offsetWidth - m.displayElements.popover[0].offsetWidth,
                                c = a[0].offsetLeft + a[0].offsetWidth / 2 - m.displayElements.popover[0].offsetWidth / 2;
                            m.displayElements.popover.css("left", Math.max(0, Math.min(b, c)) + "px"), m.displayElements.popoverArrow.css("margin-left", Math.min(c, Math.max(0, c - b)) - 11 + "px")
                        }, m.hidePopover = function() {
                            m.displayElements.popover.css("display", ""), m.displayElements.popoverContainer.attr("style", ""), m.displayElements.popoverContainer.attr("class", "popover-content"), m.displayElements.popover.removeClass("in")
                        }, m.displayElements.resize.overlay.append(m.displayElements.resize.background), angular.forEach(m.displayElements.resize.anchors, function(a) {
                            m.displayElements.resize.overlay.append(a)
                        }), m.displayElements.resize.overlay.append(m.displayElements.resize.info), m.displayElements.scrollWindow.append(m.displayElements.resize.overlay), m.reflowResizeOverlay = function(a) {
                            a = angular.element(a)[0], m.displayElements.resize.overlay.css({
                                display: "block",
                                left: a.offsetLeft - 5 + "px",
                                top: a.offsetTop - 5 + "px",
                                width: a.offsetWidth + 10 + "px",
                                height: a.offsetHeight + 10 + "px"
                            }), m.displayElements.resize.info.text(a.offsetWidth + " x " + a.offsetHeight)
                        }, m.showResizeOverlay = function(a) {
                            var b = h.find("body");
                            z = function(c) {
                                var d = {
                                    width: parseInt(a.attr("width")),
                                    height: parseInt(a.attr("height")),
                                    x: c.clientX,
                                    y: c.clientY
                                };
                                (void 0 === d.width || isNaN(d.width)) && (d.width = a[0].offsetWidth), (void 0 === d.height || isNaN(d.height)) && (d.height = a[0].offsetHeight), m.hidePopover();
                                var e = d.height / d.width,
                                    f = function(b) {
                                        function c(a) {
                                            return Math.round(Math.max(0, a))
                                        }
                                        var f = {
                                                x: Math.max(0, d.width + (b.clientX - d.x)),
                                                y: Math.max(0, d.height + (b.clientY - d.y))
                                            },
                                            g = void 0 !== o.taResizeForceAspectRatio,
                                            h = o.taResizeMaintainAspectRatio,
                                            i = g || h && !b.shiftKey;
                                        if (i) {
                                            var j = f.y / f.x;
                                            f.x = e > j ? f.x : f.y / e, f.y = e > j ? f.x * e : f.y
                                        }
                                        var k = angular.element(a);
                                        k.css("height", c(f.y) + "px"), k.css("width", c(f.x) + "px"), m.reflowResizeOverlay(a)
                                    };
                                b.on("mousemove", f), C(b, "mouseup", function(a) {
                                    a.preventDefault(), a.stopPropagation(), b.off("mousemove", f), m.$apply(function() {
                                        m.hidePopover(), m.updateTaBindtaTextElement()
                                    }, 100)
                                }), c.stopPropagation(), c.preventDefault()
                            }, m.displayElements.resize.anchors[3].off("mousedown"), m.displayElements.resize.anchors[3].on("mousedown", z), m.reflowResizeOverlay(a), C(b, "click", function() {
                                m.hideResizeOverlay()
                            })
                        }, m.hideResizeOverlay = function() {
                            m.displayElements.resize.anchors[3].off("mousedown", z), m.displayElements.resize.overlay.css("display", "")
                        }, m.setup.htmlEditorSetup(m.displayElements.html), m.setup.textEditorSetup(m.displayElements.text), m.displayElements.html.attr({
                            id: "taHtmlElement" + B,
                            "ng-show": "showHtml",
                            "ta-bind": "ta-bind",
                            "ng-model": "html",
                            "ng-model-options": n.attr("ng-model-options")
                        }), m.displayElements.text.attr({
                            id: "taTextElement" + B,
                            contentEditable: "true",
                            "ta-bind": "ta-bind",
                            "ng-model": "html",
                            "ng-model-options": n.attr("ng-model-options")
                        }), m.displayElements.scrollWindow.attr({
                            "ng-hide": "showHtml"
                        }), o.taDefaultWrap && m.displayElements.text.attr("ta-default-wrap", o.taDefaultWrap), o.taUnsafeSanitizer && (m.displayElements.text.attr("ta-unsafe-sanitizer", o.taUnsafeSanitizer), m.displayElements.html.attr("ta-unsafe-sanitizer", o.taUnsafeSanitizer)), m.displayElements.scrollWindow.append(m.displayElements.text), n.append(m.displayElements.scrollWindow), n.append(m.displayElements.html), m.displayElements.forminput.attr("name", m._name), n.append(m.displayElements.forminput), o.tabindex && (n.removeAttr("tabindex"), m.displayElements.text.attr("tabindex", o.tabindex), m.displayElements.html.attr("tabindex", o.tabindex)), o.placeholder && (m.displayElements.text.attr("placeholder", o.placeholder), m.displayElements.html.attr("placeholder", o.placeholder)), o.taDisabled && (m.displayElements.text.attr("ta-readonly", "disabled"), m.displayElements.html.attr("ta-readonly", "disabled"), m.disabled = m.$parent.$eval(o.taDisabled), m.$parent.$watch(o.taDisabled, function(a) {
                            m.disabled = a, m.disabled ? n.addClass(m.classes.disabled) : n.removeClass(m.classes.disabled)
                        })), o.taPaste && (m._pasteHandler = function(a) {
                            return l(o.taPaste)(m.$parent, {
                                $html: a
                            })
                        }, m.displayElements.text.attr("ta-paste", "_pasteHandler($html)")), a(m.displayElements.scrollWindow)(m), a(m.displayElements.html)(m), m.updateTaBindtaTextElement = m["updateTaBindtaTextElement" + B], m.updateTaBindtaHtmlElement = m["updateTaBindtaHtmlElement" + B], n.addClass("ta-root"), m.displayElements.scrollWindow.addClass("ta-text ta-editor " + m.classes.textEditor), m.displayElements.html.addClass("ta-html ta-editor " + m.classes.htmlEditor), m._actionRunning = !1;
                        var E = !1;
                        if (m.startAction = function() {
                                return m._actionRunning = !0, E = g.rangy.saveSelection(),
                                    function() {
                                        E && g.rangy.restoreSelection(E)
                                    }
                            }, m.endAction = function() {
                                m._actionRunning = !1, E && (m.showHtml ? m.displayElements.html[0].focus() : m.displayElements.text[0].focus(), g.rangy.removeMarkers(E)), E = !1, m.updateSelectedStyles(), m.showHtml || m["updateTaBindtaTextElement" + B]()
                            }, u = function() {
                                m.focussed = !0, n.addClass(m.classes.focussed), x.focus(), n.triggerHandler("focus")
                            }, m.displayElements.html.on("focus", u), m.displayElements.text.on("focus", u), v = function(a) {
                                return m._actionRunning || h[0].activeElement === m.displayElements.html[0] || h[0].activeElement === m.displayElements.text[0] || (n.removeClass(m.classes.focussed), x.unfocus(), b(function() {
                                    m._bUpdateSelectedStyles = !1, n.triggerHandler("blur"), m.focussed = !1
                                }, 0)), a.preventDefault(), !1
                            }, m.displayElements.html.on("blur", v), m.displayElements.text.on("blur", v), m.displayElements.text.on("paste", function(a) {
                                n.triggerHandler("paste", a)
                            }), m.queryFormatBlockState = function(a) {
                                return !m.showHtml && a.toLowerCase() === h[0].queryCommandValue("formatBlock").toLowerCase()
                            }, m.queryCommandState = function(a) {
                                return m.showHtml ? "" : h[0].queryCommandState(a)
                            }, m.switchView = function() {
                                m.showHtml = !m.showHtml, i.enabled(!1, m.displayElements.html), i.enabled(!1, m.displayElements.text), m.showHtml ? b(function() {
                                    return i.enabled(!0, m.displayElements.html), i.enabled(!0, m.displayElements.text), m.displayElements.html[0].focus()
                                }, 100) : b(function() {
                                    return i.enabled(!0, m.displayElements.html), i.enabled(!0, m.displayElements.text), m.displayElements.text[0].focus()
                                }, 100)
                            }, o.ngModel) {
                            var F = !0;
                            p.$render = function() {
                                if (F) {
                                    F = !1;
                                    var a = m.$parent.$eval(o.ngModel);
                                    void 0 !== a && null !== a || !w || "" === w || p.$setViewValue(w)
                                }
                                m.displayElements.forminput.val(p.$viewValue), m.html = p.$viewValue || ""
                            }, n.attr("required") && (p.$validators.required = function(a, b) {
                                var c = a || b;
                                return !(!c || "" === c.trim())
                            })
                        } else m.displayElements.forminput.val(w), m.html = w;
                        if (m.$watch("html", function(a, b) {
                                a !== b && (o.ngModel && p.$viewValue !== a && p.$setViewValue(a), m.displayElements.forminput.val(a))
                            }), o.taTargetToolbars) x = f.registerEditor(m._name, m, o.taTargetToolbars.split(","));
                        else {
                            var G = angular.element('<div text-angular-toolbar name="textAngularToolbar' + B + '">');
                            o.taToolbar && G.attr("ta-toolbar", o.taToolbar), o.taToolbarClass && G.attr("ta-toolbar-class", o.taToolbarClass), o.taToolbarGroupClass && G.attr("ta-toolbar-group-class", o.taToolbarGroupClass), o.taToolbarButtonClass && G.attr("ta-toolbar-button-class", o.taToolbarButtonClass), o.taToolbarActiveButtonClass && G.attr("ta-toolbar-active-button-class", o.taToolbarActiveButtonClass), o.taFocussedClass && G.attr("ta-focussed-class", o.taFocussedClass), n.prepend(G), a(G)(m.$parent), x = f.registerEditor(m._name, m, ["textAngularToolbar" + B])
                        }
                        m.$on("$destroy", function() {
                            f.unregisterEditor(m._name), angular.element(window).off("blur")
                        }), m.$on("ta-element-select", function(a, b) {
                            x.triggerElementSelect(a, b) && m["reApplyOnSelectorHandlerstaTextElement" + B]()
                        }), m.$on("ta-drop-event", function(a, c, d, e) {
                            m.displayElements.text[0].focus(), e && e.files && e.files.length > 0 ? (angular.forEach(e.files, function(a) {
                                try {
                                    k.when(m.fileDropHandler(a, m.wrapSelection) || m.fileDropHandler !== m.defaultFileDropHandler && k.when(m.defaultFileDropHandler(a, m.wrapSelection))).then(function() {
                                        m["updateTaBindtaTextElement" + B]()
                                    })
                                } catch (b) {
                                    j.error(b)
                                }
                            }), d.preventDefault(), d.stopPropagation()) : b(function() {
                                m["updateTaBindtaTextElement" + B]()
                            }, 0)
                        }), m._bUpdateSelectedStyles = !1, angular.element(window).on("blur", function() {
                            m._bUpdateSelectedStyles = !1, m.focussed = !1
                        }), m.updateSelectedStyles = function() {
                            var a;
                            A && b.cancel(A), void 0 !== (a = d.getSelectionElement()) && a.parentNode !== m.displayElements.text[0] ? x.updateSelectedStyles(angular.element(a)) : x.updateSelectedStyles(), m._bUpdateSelectedStyles && (A = b(m.updateSelectedStyles, 200))
                        }, q = function() {
                            return m.focussed ? void(m._bUpdateSelectedStyles || (m._bUpdateSelectedStyles = !0, m.$apply(function() {
                                m.updateSelectedStyles()
                            }))) : void(m._bUpdateSelectedStyles = !1)
                        }, m.displayElements.html.on("keydown", q), m.displayElements.text.on("keydown", q), r = function() {
                            m._bUpdateSelectedStyles = !1
                        }, m.displayElements.html.on("keyup", r), m.displayElements.text.on("keyup", r), s = function(a, b) {
                            b && angular.extend(a, b), m.$apply(function() {
                                return x.sendKeyCommand(a) ? (m._bUpdateSelectedStyles || m.updateSelectedStyles(), a.preventDefault(), !1) : void 0
                            })
                        }, m.displayElements.html.on("keypress", s), m.displayElements.text.on("keypress", s), t = function() {
                            m._bUpdateSelectedStyles = !1, m.$apply(function() {
                                m.updateSelectedStyles()
                            })
                        }, m.displayElements.html.on("mouseup", t), m.displayElements.text.on("mouseup", t)
                    }
                }
            }]), q.service("textAngularManager", ["taToolExecuteAction", "taTools", "taRegisterTool", function(a, b, c) {
                var d = {},
                    e = {};
                return {
                    registerEditor: function(c, f, g) {
                        if (!c || "" === c) throw "textAngular Error: An editor requires a name";
                        if (!f) throw "textAngular Error: An editor requires a scope";
                        if (e[c]) throw 'textAngular Error: An Editor with name "' + c + '" already exists';
                        var h = [];
                        return angular.forEach(g, function(a) {
                            d[a] && h.push(d[a])
                        }), e[c] = {
                            scope: f,
                            toolbars: g,
                            _registerToolbar: function(a) {
                                this.toolbars.indexOf(a.name) >= 0 && h.push(a)
                            },
                            editorFunctions: {
                                disable: function() {
                                    angular.forEach(h, function(a) {
                                        a.disabled = !0
                                    })
                                },
                                enable: function() {
                                    angular.forEach(h, function(a) {
                                        a.disabled = !1
                                    })
                                },
                                focus: function() {
                                    angular.forEach(h, function(a) {
                                        a._parent = f, a.disabled = !1, a.focussed = !0, f.focussed = !0
                                    })
                                },
                                unfocus: function() {
                                    angular.forEach(h, function(a) {
                                        a.disabled = !0, a.focussed = !1
                                    }), f.focussed = !1
                                },
                                updateSelectedStyles: function(a) {
                                    angular.forEach(h, function(b) {
                                        angular.forEach(b.tools, function(c) {
                                            c.activeState && (b._parent = f, c.active = c.activeState(a))
                                        })
                                    })
                                },
                                sendKeyCommand: function(c) {
                                    var d = !1;
                                    return (c.ctrlKey || c.metaKey || c.specialKey) && angular.forEach(b, function(b, e) {
                                        if (b.commandKeyCode && (b.commandKeyCode === c.which || b.commandKeyCode === c.specialKey))
                                            for (var g = 0; g < h.length; g++)
                                                if (void 0 !== h[g].tools[e]) {
                                                    a.call(h[g].tools[e], f), d = !0;
                                                    break
                                                }
                                    }), d
                                },
                                triggerElementSelect: function(a, c) {
                                    var d = function(a, b) {
                                            for (var c = !0, d = 0; d < b.length; d++) c = c && a.attr(b[d]);
                                            return c
                                        },
                                        e = [],
                                        g = {},
                                        i = !1;
                                    c = angular.element(c);
                                    var j = !1;
                                    if (angular.forEach(b, function(a, b) {
                                            a.onElementSelect && a.onElementSelect.element && a.onElementSelect.element.toLowerCase() === c[0].tagName.toLowerCase() && (!a.onElementSelect.filter || a.onElementSelect.filter(c)) && (j = j || angular.isArray(a.onElementSelect.onlyWithAttrs) && d(c, a.onElementSelect.onlyWithAttrs), (!a.onElementSelect.onlyWithAttrs || d(c, a.onElementSelect.onlyWithAttrs)) && (g[b] = a))
                                        }), j ? (angular.forEach(g, function(a, b) {
                                            a.onElementSelect.onlyWithAttrs && d(c, a.onElementSelect.onlyWithAttrs) && e.push({
                                                name: b,
                                                tool: a
                                            })
                                        }), e.sort(function(a, b) {
                                            return b.tool.onElementSelect.onlyWithAttrs.length - a.tool.onElementSelect.onlyWithAttrs.length
                                        })) : angular.forEach(g, function(a, b) {
                                            e.push({
                                                name: b,
                                                tool: a
                                            })
                                        }), e.length > 0)
                                        for (var k = 0; k < e.length; k++) {
                                            for (var l = e[k].tool, m = e[k].name, n = 0; n < h.length; n++)
                                                if (void 0 !== h[n].tools[m]) {
                                                    l.onElementSelect.action.call(h[n].tools[m], a, c, f), i = !0;
                                                    break
                                                }
                                            if (i) break
                                        }
                                    return i
                                }
                            }
                        }, e[c].editorFunctions
                    },
                    retrieveEditor: function(a) {
                        return e[a]
                    },
                    unregisterEditor: function(a) {
                        delete e[a]
                    },
                    registerToolbar: function(a) {
                        if (!a) throw "textAngular Error: A toolbar requires a scope";
                        if (!a.name || "" === a.name) throw "textAngular Error: A toolbar requires a name";
                        if (d[a.name]) throw 'textAngular Error: A toolbar with name "' + a.name + '" already exists';
                        d[a.name] = a, angular.forEach(e, function(b) {
                            b._registerToolbar(a)
                        })
                    },
                    retrieveToolbar: function(a) {
                        return d[a]
                    },
                    retrieveToolbarsViaEditor: function(a) {
                        var b = [],
                            c = this;
                        return angular.forEach(this.retrieveEditor(a).toolbars, function(a) {
                            b.push(c.retrieveToolbar(a))
                        }), b
                    },
                    unregisterToolbar: function(a) {
                        delete d[a]
                    },
                    updateToolsDisplay: function(a) {
                        var b = this;
                        angular.forEach(a, function(a, c) {
                            b.updateToolDisplay(c, a)
                        })
                    },
                    resetToolsDisplay: function() {
                        var a = this;
                        angular.forEach(b, function(b, c) {
                            a.resetToolDisplay(c)
                        })
                    },
                    updateToolDisplay: function(a, b) {
                        var c = this;
                        angular.forEach(d, function(d, e) {
                            c.updateToolbarToolDisplay(e, a, b)
                        })
                    },
                    resetToolDisplay: function(a) {
                        var b = this;
                        angular.forEach(d, function(c, d) {
                            b.resetToolbarToolDisplay(d, a)
                        })
                    },
                    updateToolbarToolDisplay: function(a, b, c) {
                        if (!d[a]) throw 'textAngular Error: No Toolbar with name "' + a + '" exists';
                        d[a].updateToolDisplay(b, c)
                    },
                    resetToolbarToolDisplay: function(a, c) {
                        if (!d[a]) throw 'textAngular Error: No Toolbar with name "' + a + '" exists';
                        d[a].updateToolDisplay(c, b[c], !0)
                    },
                    removeTool: function(a) {
                        delete b[a], angular.forEach(d, function(b) {
                            delete b.tools[a];
                            for (var c = 0; c < b.toolbar.length; c++) {
                                for (var d, e = 0; e < b.toolbar[c].length; e++) {
                                    if (b.toolbar[c][e] === a) {
                                        d = {
                                            group: c,
                                            index: e
                                        };
                                        break
                                    }
                                    if (void 0 !== d) break
                                }
                                void 0 !== d && (b.toolbar[d.group].slice(d.index, 1), b._$element.children().eq(d.group).children().eq(d.index).remove())
                            }
                        })
                    },
                    addTool: function(a, b, e, f) {
                        c(a, b), angular.forEach(d, function(c) {
                            c.addTool(a, b, e, f)
                        })
                    },
                    addToolToToolbar: function(a, b, e, f, g) {
                        c(a, b), d[e].addTool(a, b, f, g)
                    },
                    refreshEditor: function(a) {
                        if (!e[a]) throw 'textAngular Error: No Editor with name "' + a + '" exists';
                        e[a].scope.updateTaBindtaTextElement(), e[a].scope.$$phase || e[a].scope.$digest()
                    },
                    sendKeyCommand: function(a, b) {
                        var c = e[a._name];
                        return c && c.editorFunctions.sendKeyCommand(b) ? (a._bUpdateSelectedStyles || a.updateSelectedStyles(), b.preventDefault(), !1) : void 0
                    }
                }
            }]), q.directive("textAngularToolbar", ["$compile", "textAngularManager", "taOptions", "taTools", "taToolExecuteAction", "$window", function(a, b, c, d, e, f) {
                return {
                    scope: {
                        name: "@"
                    },
                    restrict: "EA",
                    link: function(g, h, i) {
                        if (!g.name || "" === g.name) throw "textAngular Error: A toolbar requires a name";
                        angular.extend(g, angular.copy(c)), i.taToolbar && (g.toolbar = g.$parent.$eval(i.taToolbar)), i.taToolbarClass && (g.classes.toolbar = i.taToolbarClass), i.taToolbarGroupClass && (g.classes.toolbarGroup = i.taToolbarGroupClass), i.taToolbarButtonClass && (g.classes.toolbarButton = i.taToolbarButtonClass), i.taToolbarActiveButtonClass && (g.classes.toolbarButtonActive = i.taToolbarActiveButtonClass), i.taFocussedClass && (g.classes.focussed = i.taFocussedClass), g.disabled = !0, g.focussed = !1, g._$element = h, h[0].innerHTML = "", h.addClass("ta-toolbar " + g.classes.toolbar), g.$watch("focussed", function() {
                            g.focussed ? h.addClass(g.classes.focussed) : h.removeClass(g.classes.focussed)
                        });
                        var j = function(b, c) {
                            var d;
                            if (d = b && b.display ? angular.element(b.display) : angular.element("<button type='button'>"), b && b["class"] ? d.addClass(b["class"]) : d.addClass(g.classes.toolbarButton), d.attr("name", c.name), d.attr("ta-button", "ta-button"), d.attr("ng-disabled", "isDisabled()"), d.attr("tabindex", "-1"), d.attr("ng-click", "executeAction()"), d.attr("ng-class", "displayActiveToolClass(active)"), b && b.tooltiptext && d.attr("title", b.tooltiptext), b && !b.display && !c._display && (d[0].innerHTML = "", b.buttontext && (d[0].innerHTML = b.buttontext), b.iconclass)) {
                                var e = angular.element("<i>"),
                                    f = d[0].innerHTML;
                                e.addClass(b.iconclass), d[0].innerHTML = "", d.append(e), f && "" !== f && d.append("&nbsp;" + f)
                            }
                            return c._lastToolDefinition = angular.copy(b), a(d)(c)
                        };
                        g.tools = {}, g._parent = {
                            disabled: !0,
                            showHtml: !1,
                            queryFormatBlockState: function() {
                                return !1
                            },
                            queryCommandState: function() {
                                return !1
                            }
                        };
                        var k = {
                            $window: f,
                            $editor: function() {
                                return g._parent
                            },
                            isDisabled: function() {
                                return "function" != typeof this.$eval("disabled") && this.$eval("disabled") || this.$eval("disabled()") || "html" !== this.name && this.$editor().showHtml || this.$parent.disabled || this.$editor().disabled
                            },
                            displayActiveToolClass: function(a) {
                                return a ? g.classes.toolbarButtonActive : ""
                            },
                            executeAction: e
                        };
                        angular.forEach(g.toolbar, function(a) {
                            var b = angular.element("<div>");
                            b.addClass(g.classes.toolbarGroup), angular.forEach(a, function(a) {
                                g.tools[a] = angular.extend(g.$new(!0), d[a], k, {
                                    name: a
                                }), g.tools[a].$element = j(d[a], g.tools[a]), b.append(g.tools[a].$element)
                            }), h.append(b)
                        }), g.updateToolDisplay = function(a, b, c) {
                            var d = g.tools[a];
                            if (d) {
                                if (d._lastToolDefinition && !c && (b = angular.extend({}, d._lastToolDefinition, b)), null === b.buttontext && null === b.iconclass && null === b.display) throw 'textAngular Error: Tool Definition for updating "' + a + '" does not have a valid display/iconclass/buttontext value';
                                null === b.buttontext && delete b.buttontext, null === b.iconclass && delete b.iconclass, null === b.display && delete b.display;
                                var e = j(b, d);
                                d.$element.replaceWith(e), d.$element = e
                            }
                        }, g.addTool = function(a, b, c, e) {
                            g.tools[a] = angular.extend(g.$new(!0), d[a], k, {
                                name: a
                            }), g.tools[a].$element = j(d[a], g.tools[a]);
                            var f;
                            void 0 === c && (c = g.toolbar.length - 1), f = angular.element(h.children()[c]), void 0 === e ? (f.append(g.tools[a].$element), g.toolbar[c][g.toolbar[c].length - 1] = a) : (f.children().eq(e).after(g.tools[a].$element), g.toolbar[c][e] = a)
                        }, b.registerToolbar(g), g.$on("$destroy", function() {
                            b.unregisterToolbar(g.name)
                        })
                    }
                }
            }])
        }()
}({}, function() {
    return this
}());
/*
PNotify 3.0.0 sciactive.com/pnotify/
(C) 2015 Hunter Perrin; Google, Inc.
license Apache-2.0
*/
(function(b, k) {
    "function" === typeof define && define.amd ? define("pnotify", ["jquery"], function(q) {
        return k(q, b)
    }) : "object" === typeof exports && "undefined" !== typeof module ? module.exports = k(require("jquery"), global || b) : b.PNotify = k(b.jQuery, b)
})(this, function(b, k) {
    var q = function(l) {
        var k = {
                dir1: "down",
                dir2: "left",
                push: "bottom",
                spacing1: 36,
                spacing2: 36,
                context: b("body"),
                modal: !1
            },
            g, h, n = b(l),
            r = function() {
                h = b("body");
                d.prototype.options.stack.context = h;
                n = b(l);
                n.bind("resize", function() {
                    g && clearTimeout(g);
                    g = setTimeout(function() {
                            d.positionAll(!0)
                        },
                        10)
                })
            },
            s = function(c) {
                var a = b("<div />", {
                    "class": "ui-pnotify-modal-overlay"
                });
                a.prependTo(c.context);
                c.overlay_close && a.click(function() {
                    d.removeStack(c)
                });
                return a
            },
            d = function(c) {
                this.parseOptions(c);
                this.init()
            };
        b.extend(d.prototype, {
            version: "3.0.0",
            options: {
                title: !1,
                title_escape: !1,
                text: !1,
                text_escape: !1,
                styling: "brighttheme",
                addclass: "",
                cornerclass: "",
                auto_display: !0,
                width: "300px",
                min_height: "16px",
                type: "notice",
                icon: !0,
                animation: "fade",
                animate_speed: "normal",
                shadow: !0,
                hide: !0,
                delay: 8E3,
                mouse_reset: !0,
                remove: !0,
                insert_brs: !0,
                destroy: !0,
                stack: k
            },
            modules: {},
            runModules: function(c, a) {
                var p, b;
                for (b in this.modules) p = "object" === typeof a && b in a ? a[b] : a, "function" === typeof this.modules[b][c] && (this.modules[b].notice = this, this.modules[b].options = "object" === typeof this.options[b] ? this.options[b] : {}, this.modules[b][c](this, "object" === typeof this.options[b] ? this.options[b] : {}, p))
            },
            state: "initializing",
            timer: null,
            animTimer: null,
            styles: null,
            elem: null,
            container: null,
            title_container: null,
            text_container: null,
            animating: !1,
            timerHide: !1,
            init: function() {
                var c = this;
                this.modules = {};
                b.extend(!0, this.modules, d.prototype.modules);
                this.styles = "object" === typeof this.options.styling ? this.options.styling : d.styling[this.options.styling];
                this.elem = b("<div />", {
                    "class": "ui-pnotify " + this.options.addclass,
                    css: {
                        display: "none"
                    },
                    "aria-live": "assertive",
                    "aria-role": "alertdialog",
                    mouseenter: function(a) {
                        if (c.options.mouse_reset && "out" === c.animating) {
                            if (!c.timerHide) return;
                            c.cancelRemove()
                        }
                        c.options.hide && c.options.mouse_reset && c.cancelRemove()
                    },
                    mouseleave: function(a) {
                        c.options.hide && c.options.mouse_reset && "out" !== c.animating && c.queueRemove();
                        d.positionAll()
                    }
                });
                "fade" === this.options.animation && this.elem.addClass("ui-pnotify-fade-" + this.options.animate_speed);
                this.container = b("<div />", {
                    "class": this.styles.container + " ui-pnotify-container " + ("error" === this.options.type ? this.styles.error : "info" === this.options.type ? this.styles.info : "success" === this.options.type ? this.styles.success : this.styles.notice),
                    role: "alert"
                }).appendTo(this.elem);
                "" !==
                this.options.cornerclass && this.container.removeClass("ui-corner-all").addClass(this.options.cornerclass);
                this.options.shadow && this.container.addClass("ui-pnotify-shadow");
                !1 !== this.options.icon && b("<div />", {
                    "class": "ui-pnotify-icon"
                }).append(b("<span />", {
                    "class": !0 === this.options.icon ? "error" === this.options.type ? this.styles.error_icon : "info" === this.options.type ? this.styles.info_icon : "success" === this.options.type ? this.styles.success_icon : this.styles.notice_icon : this.options.icon
                })).prependTo(this.container);
                this.title_container = b("<h4 />", {
                    "class": "ui-pnotify-title"
                }).appendTo(this.container);
                !1 === this.options.title ? this.title_container.hide() : this.options.title_escape ? this.title_container.text(this.options.title) : this.title_container.html(this.options.title);
                this.text_container = b("<div />", {
                    "class": "ui-pnotify-text",
                    "aria-role": "alert"
                }).appendTo(this.container);
                !1 === this.options.text ? this.text_container.hide() : this.options.text_escape ? this.text_container.text(this.options.text) : this.text_container.html(this.options.insert_brs ?
                    String(this.options.text).replace(/\n/g, "<br />") : this.options.text);
                "string" === typeof this.options.width && this.elem.css("width", this.options.width);
                "string" === typeof this.options.min_height && this.container.css("min-height", this.options.min_height);
                d.notices = "top" === this.options.stack.push ? b.merge([this], d.notices) : b.merge(d.notices, [this]);
                "top" === this.options.stack.push && this.queuePosition(!1, 1);
                this.options.stack.animation = !1;
                this.runModules("init");
                this.options.auto_display && this.open();
                return this
            },
            update: function(c) {
                var a = this.options;
                this.parseOptions(a, c);
                this.elem.removeClass("ui-pnotify-fade-slow ui-pnotify-fade-normal ui-pnotify-fade-fast");
                "fade" === this.options.animation && this.elem.addClass("ui-pnotify-fade-" + this.options.animate_speed);
                this.options.cornerclass !== a.cornerclass && this.container.removeClass("ui-corner-all " + a.cornerclass).addClass(this.options.cornerclass);
                this.options.shadow !== a.shadow && (this.options.shadow ? this.container.addClass("ui-pnotify-shadow") : this.container.removeClass("ui-pnotify-shadow"));
                !1 === this.options.addclass ? this.elem.removeClass(a.addclass) : this.options.addclass !== a.addclass && this.elem.removeClass(a.addclass).addClass(this.options.addclass);
                !1 === this.options.title ? this.title_container.slideUp("fast") : this.options.title !== a.title && (this.options.title_escape ? this.title_container.text(this.options.title) : this.title_container.html(this.options.title), !1 === a.title && this.title_container.slideDown(200));
                !1 === this.options.text ? this.text_container.slideUp("fast") : this.options.text !==
                    a.text && (this.options.text_escape ? this.text_container.text(this.options.text) : this.text_container.html(this.options.insert_brs ? String(this.options.text).replace(/\n/g, "<br />") : this.options.text), !1 === a.text && this.text_container.slideDown(200));
                this.options.type !== a.type && this.container.removeClass(this.styles.error + " " + this.styles.notice + " " + this.styles.success + " " + this.styles.info).addClass("error" === this.options.type ? this.styles.error : "info" === this.options.type ? this.styles.info : "success" === this.options.type ?
                    this.styles.success : this.styles.notice);
                if (this.options.icon !== a.icon || !0 === this.options.icon && this.options.type !== a.type) this.container.find("div.ui-pnotify-icon").remove(), !1 !== this.options.icon && b("<div />", {
                    "class": "ui-pnotify-icon"
                }).append(b("<span />", {
                    "class": !0 === this.options.icon ? "error" === this.options.type ? this.styles.error_icon : "info" === this.options.type ? this.styles.info_icon : "success" === this.options.type ? this.styles.success_icon : this.styles.notice_icon : this.options.icon
                })).prependTo(this.container);
                this.options.width !== a.width && this.elem.animate({
                    width: this.options.width
                });
                this.options.min_height !== a.min_height && this.container.animate({
                    minHeight: this.options.min_height
                });
                this.options.hide ? a.hide || this.queueRemove() : this.cancelRemove();
                this.queuePosition(!0);
                this.runModules("update", a);
                return this
            },
            open: function() {
                this.state = "opening";
                this.runModules("beforeOpen");
                var c = this;
                this.elem.parent().length || this.elem.appendTo(this.options.stack.context ? this.options.stack.context : h);
                "top" !== this.options.stack.push &&
                    this.position(!0);
                this.animateIn(function() {
                    c.queuePosition(!0);
                    c.options.hide && c.queueRemove();
                    c.state = "open";
                    c.runModules("afterOpen")
                });
                return this
            },
            remove: function(c) {
                this.state = "closing";
                this.timerHide = !!c;
                this.runModules("beforeClose");
                var a = this;
                this.timer && (l.clearTimeout(this.timer), this.timer = null);
                this.animateOut(function() {
                    a.state = "closed";
                    a.runModules("afterClose");
                    a.queuePosition(!0);
                    a.options.remove && a.elem.detach();
                    a.runModules("beforeDestroy");
                    if (a.options.destroy && null !== d.notices) {
                        var c =
                            b.inArray(a, d.notices); - 1 !== c && d.notices.splice(c, 1)
                    }
                    a.runModules("afterDestroy")
                });
                return this
            },
            get: function() {
                return this.elem
            },
            parseOptions: function(c, a) {
                this.options = b.extend(!0, {}, d.prototype.options);
                this.options.stack = d.prototype.options.stack;
                for (var p = [c, a], m, f = 0; f < p.length; f++) {
                    m = p[f];
                    if ("undefined" === typeof m) break;
                    if ("object" !== typeof m) this.options.text = m;
                    else
                        for (var e in m) this.modules[e] ? b.extend(!0, this.options[e], m[e]) : this.options[e] = m[e]
                }
            },
            animateIn: function(c) {
                this.animating =
                    "in";
                var a = this;
                c = function() {
                    a.animTimer && clearTimeout(a.animTimer);
                    "in" === a.animating && (a.elem.is(":visible") ? (this && this.call(), a.animating = !1) : a.animTimer = setTimeout(c, 40))
                }.bind(c);
                "fade" === this.options.animation ? (this.elem.one("webkitTransitionEnd mozTransitionEnd MSTransitionEnd oTransitionEnd transitionend", c).addClass("ui-pnotify-in"), this.elem.css("opacity"), this.elem.addClass("ui-pnotify-fade-in"), this.animTimer = setTimeout(c, 650)) : (this.elem.addClass("ui-pnotify-in"), c())
            },
            animateOut: function(c) {
                this.animating =
                    "out";
                var a = this;
                c = function() {
                    a.animTimer && clearTimeout(a.animTimer);
                    "out" === a.animating && ("0" != a.elem.css("opacity") && a.elem.is(":visible") ? a.animTimer = setTimeout(c, 40) : (a.elem.removeClass("ui-pnotify-in"), this && this.call(), a.animating = !1))
                }.bind(c);
                "fade" === this.options.animation ? (this.elem.one("webkitTransitionEnd mozTransitionEnd MSTransitionEnd oTransitionEnd transitionend", c).removeClass("ui-pnotify-fade-in"), this.animTimer = setTimeout(c, 650)) : (this.elem.removeClass("ui-pnotify-in"), c())
            },
            position: function(c) {
                var a =
                    this.options.stack,
                    b = this.elem;
                "undefined" === typeof a.context && (a.context = h);
                if (a) {
                    "number" !== typeof a.nextpos1 && (a.nextpos1 = a.firstpos1);
                    "number" !== typeof a.nextpos2 && (a.nextpos2 = a.firstpos2);
                    "number" !== typeof a.addpos2 && (a.addpos2 = 0);
                    var d = !b.hasClass("ui-pnotify-in");
                    if (!d || c) {
                        a.modal && (a.overlay ? a.overlay.show() : a.overlay = s(a));
                        b.addClass("ui-pnotify-move");
                        var f;
                        switch (a.dir1) {
                            case "down":
                                f = "top";
                                break;
                            case "up":
                                f = "bottom";
                                break;
                            case "left":
                                f = "right";
                                break;
                            case "right":
                                f = "left"
                        }
                        c = parseInt(b.css(f).replace(/(?:\..*|[^0-9.])/g,
                            ""));
                        isNaN(c) && (c = 0);
                        "undefined" !== typeof a.firstpos1 || d || (a.firstpos1 = c, a.nextpos1 = a.firstpos1);
                        var e;
                        switch (a.dir2) {
                            case "down":
                                e = "top";
                                break;
                            case "up":
                                e = "bottom";
                                break;
                            case "left":
                                e = "right";
                                break;
                            case "right":
                                e = "left"
                        }
                        c = parseInt(b.css(e).replace(/(?:\..*|[^0-9.])/g, ""));
                        isNaN(c) && (c = 0);
                        "undefined" !== typeof a.firstpos2 || d || (a.firstpos2 = c, a.nextpos2 = a.firstpos2);
                        if ("down" === a.dir1 && a.nextpos1 + b.height() > (a.context.is(h) ? n.height() : a.context.prop("scrollHeight")) || "up" === a.dir1 && a.nextpos1 + b.height() >
                            (a.context.is(h) ? n.height() : a.context.prop("scrollHeight")) || "left" === a.dir1 && a.nextpos1 + b.width() > (a.context.is(h) ? n.width() : a.context.prop("scrollWidth")) || "right" === a.dir1 && a.nextpos1 + b.width() > (a.context.is(h) ? n.width() : a.context.prop("scrollWidth"))) a.nextpos1 = a.firstpos1, a.nextpos2 += a.addpos2 + ("undefined" === typeof a.spacing2 ? 25 : a.spacing2), a.addpos2 = 0;
                        "number" === typeof a.nextpos2 && (a.animation ? b.css(e, a.nextpos2 + "px") : (b.removeClass("ui-pnotify-move"), b.css(e, a.nextpos2 + "px"), b.css(e), b.addClass("ui-pnotify-move")));
                        switch (a.dir2) {
                            case "down":
                            case "up":
                                b.outerHeight(!0) > a.addpos2 && (a.addpos2 = b.height());
                                break;
                            case "left":
                            case "right":
                                b.outerWidth(!0) > a.addpos2 && (a.addpos2 = b.width())
                        }
                        "number" === typeof a.nextpos1 && (a.animation ? b.css(f, a.nextpos1 + "px") : (b.removeClass("ui-pnotify-move"), b.css(f, a.nextpos1 + "px"), b.css(f), b.addClass("ui-pnotify-move")));
                        switch (a.dir1) {
                            case "down":
                            case "up":
                                a.nextpos1 += b.height() + ("undefined" === typeof a.spacing1 ? 25 : a.spacing1);
                                break;
                            case "left":
                            case "right":
                                a.nextpos1 += b.width() + ("undefined" ===
                                    typeof a.spacing1 ? 25 : a.spacing1)
                        }
                    }
                    return this
                }
            },
            queuePosition: function(b, a) {
                g && clearTimeout(g);
                a || (a = 10);
                g = setTimeout(function() {
                    d.positionAll(b)
                }, a);
                return this
            },
            cancelRemove: function() {
                this.timer && l.clearTimeout(this.timer);
                this.animTimer && l.clearTimeout(this.animTimer);
                "closing" === this.state && (this.state = "open", this.animating = !1, this.elem.addClass("ui-pnotify-in"), "fade" === this.options.animation && this.elem.addClass("ui-pnotify-fade-in"));
                return this
            },
            queueRemove: function() {
                var b = this;
                this.cancelRemove();
                this.timer = l.setTimeout(function() {
                    b.remove(!0)
                }, isNaN(this.options.delay) ? 0 : this.options.delay);
                return this
            }
        });
        b.extend(d, {
            notices: [],
            reload: q,
            removeAll: function() {
                b.each(d.notices, function() {
                    this.remove && this.remove(!1)
                })
            },
            removeStack: function(c) {
                b.each(d.notices, function() {
                    this.remove && this.options.stack === c && this.remove(!1)
                })
            },
            positionAll: function(c) {
                g && clearTimeout(g);
                g = null;
                if (d.notices && d.notices.length) b.each(d.notices, function() {
                    var a = this.options.stack;
                    a && (a.overlay && a.overlay.hide(), a.nextpos1 =
                        a.firstpos1, a.nextpos2 = a.firstpos2, a.addpos2 = 0, a.animation = c)
                }), b.each(d.notices, function() {
                    this.position()
                });
                else {
                    var a = d.prototype.options.stack;
                    a && (delete a.nextpos1, delete a.nextpos2)
                }
            },
            styling: {
                brighttheme: {
                    container: "brighttheme",
                    notice: "brighttheme-notice",
                    notice_icon: "brighttheme-icon-notice",
                    info: "brighttheme-info",
                    info_icon: "brighttheme-icon-info",
                    success: "brighttheme-success",
                    success_icon: "brighttheme-icon-success",
                    error: "brighttheme-error",
                    error_icon: "brighttheme-icon-error"
                },
                jqueryui: {
                    container: "ui-widget ui-widget-content ui-corner-all",
                    notice: "ui-state-highlight",
                    notice_icon: "ui-icon ui-icon-info",
                    info: "",
                    info_icon: "ui-icon ui-icon-info",
                    success: "ui-state-default",
                    success_icon: "ui-icon ui-icon-circle-check",
                    error: "ui-state-error",
                    error_icon: "ui-icon ui-icon-alert"
                },
                bootstrap3: {
                    container: "alert",
                    notice: "alert-warning",
                    notice_icon: "glyphicon glyphicon-exclamation-sign",
                    info: "alert-info",
                    info_icon: "glyphicon glyphicon-info-sign",
                    success: "alert-success",
                    success_icon: "glyphicon glyphicon-ok-sign",
                    error: "alert-danger",
                    error_icon: "glyphicon glyphicon-warning-sign"
                }
            }
        });
        d.styling.fontawesome = b.extend({}, d.styling.bootstrap3);
        b.extend(d.styling.fontawesome, {
            notice_icon: "fa fa-exclamation-circle",
            info_icon: "fa fa-info",
            success_icon: "fa fa-check",
            error_icon: "fa fa-warning"
        });
        l.document.body ? r() : b(r);
        return d
    };
    return q(k)
});

(function(e, d) {
    "function" === typeof define && define.amd ? define("pnotify.animate", ["jquery", "pnotify"], d) : "object" === typeof exports && "undefined" !== typeof module ? module.exports = d(require("jquery"), require("./pnotify")) : d(e.jQuery, e.PNotify)
})(this, function(e, d) {
    d.prototype.options.animate = {
        animate: !1,
        in_class: "",
        out_class: ""
    };
    d.prototype.modules.animate = {
        init: function(a, b) {
            this.setUpAnimations(a, b);
            a.attention = function(c, b) {
                a.elem.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",
                    function() {
                        a.elem.removeClass(c);
                        b && b.call(a)
                    }).addClass("animated " + c)
            }
        },
        update: function(a, b, c) {
            b.animate != c.animate && this.setUpAnimations(a, b)
        },
        setUpAnimations: function(a, b) {
            if (b.animate) {
                a.options.animation = "none";
                a.elem.removeClass("ui-pnotify-fade-slow ui-pnotify-fade-normal ui-pnotify-fade-fast");
                a._animateIn || (a._animateIn = a.animateIn);
                a._animateOut || (a._animateOut = a.animateOut);
                a.animateIn = this.animateIn.bind(this);
                a.animateOut = this.animateOut.bind(this);
                var c = 400;
                "slow" === a.options.animate_speed ?
                    c = 600 : "fast" === a.options.animate_speed ? c = 200 : 0 < a.options.animate_speed && (c = a.options.animate_speed);
                c /= 1E3;
                a.elem.addClass("animated").css({
                    "-webkit-animation-duration": c + "s",
                    "-moz-animation-duration": c + "s",
                    "animation-duration": c + "s"
                })
            } else a._animateIn && a._animateOut && (a.animateIn = a._animateIn, delete a._animateIn, a.animateOut = a._animateOut, delete a._animateOut, a.elem.addClass("animated"))
        },
        animateIn: function(a) {
            this.notice.animating = "in";
            var b = this;
            a = function() {
                this && this.call();
                b.notice.animating = !1
            }.bind(a);
            this.notice.elem.show().one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", a).removeClass(this.options.out_class).addClass("ui-pnotify-in").addClass(this.options.in_class)
        },
        animateOut: function(a) {
            this.notice.animating = "out";
            var b = this;
            a = function() {
                b.notice.elem.removeClass("ui-pnotify-in");
                this && this.call();
                b.notice.animating = !1
            }.bind(a);
            this.notice.elem.one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend", a).removeClass(this.options.in_class).addClass(this.options.out_class)
        }
    }
});

(function(d, e) {
    "function" === typeof define && define.amd ? define("pnotify.buttons", ["jquery", "pnotify"], e) : "object" === typeof exports && "undefined" !== typeof module ? module.exports = e(require("jquery"), require("./pnotify")) : e(d.jQuery, d.PNotify)
})(this, function(d, e) {
    e.prototype.options.buttons = {
        closer: !0,
        closer_hover: !0,
        sticker: !0,
        sticker_hover: !0,
        show_on_nonblock: !1,
        labels: {
            close: "Close",
            stick: "Stick",
            unstick: "Unstick"
        },
        classes: {
            closer: null,
            pin_up: null,
            pin_down: null
        }
    };
    e.prototype.modules.buttons = {
        closer: null,
        sticker: null,
        init: function(a, b) {
            var c = this;
            a.elem.on({
                mouseenter: function(b) {
                    !c.options.sticker || a.options.nonblock && a.options.nonblock.nonblock && !c.options.show_on_nonblock || c.sticker.trigger("pnotify:buttons:toggleStick").css("visibility", "visible");
                    !c.options.closer || a.options.nonblock && a.options.nonblock.nonblock && !c.options.show_on_nonblock || c.closer.css("visibility", "visible")
                },
                mouseleave: function(a) {
                    c.options.sticker_hover && c.sticker.css("visibility", "hidden");
                    c.options.closer_hover && c.closer.css("visibility",
                        "hidden")
                }
            });
            this.sticker = d("<div />", {
                "class": "ui-pnotify-sticker",
                "aria-role": "button",
                "aria-pressed": a.options.hide ? "false" : "true",
                tabindex: "0",
                title: a.options.hide ? b.labels.stick : b.labels.unstick,
                css: {
                    cursor: "pointer",
                    visibility: b.sticker_hover ? "hidden" : "visible"
                },
                click: function() {
                    a.options.hide = !a.options.hide;
                    a.options.hide ? a.queueRemove() : a.cancelRemove();
                    d(this).trigger("pnotify:buttons:toggleStick")
                }
            }).bind("pnotify:buttons:toggleStick", function() {
                var b = null === c.options.classes.pin_up ? a.styles.pin_up :
                    c.options.classes.pin_up,
                    e = null === c.options.classes.pin_down ? a.styles.pin_down : c.options.classes.pin_down;
                d(this).attr("title", a.options.hide ? c.options.labels.stick : c.options.labels.unstick).children().attr("class", "").addClass(a.options.hide ? b : e).attr("aria-pressed", a.options.hide ? "false" : "true")
            }).append("<span />").trigger("pnotify:buttons:toggleStick").prependTo(a.container);
            (!b.sticker || a.options.nonblock && a.options.nonblock.nonblock && !b.show_on_nonblock) && this.sticker.css("display", "none");
            this.closer = d("<div />", {
                "class": "ui-pnotify-closer",
                "aria-role": "button",
                tabindex: "0",
                title: b.labels.close,
                css: {
                    cursor: "pointer",
                    visibility: b.closer_hover ? "hidden" : "visible"
                },
                click: function() {
                    a.remove(!1);
                    c.sticker.css("visibility", "hidden");
                    c.closer.css("visibility", "hidden")
                }
            }).append(d("<span />", {
                "class": null === b.classes.closer ? a.styles.closer : b.classes.closer
            })).prependTo(a.container);
            (!b.closer || a.options.nonblock && a.options.nonblock.nonblock && !b.show_on_nonblock) && this.closer.css("display",
                "none")
        },
        update: function(a, b) {
            !b.closer || a.options.nonblock && a.options.nonblock.nonblock && !b.show_on_nonblock ? this.closer.css("display", "none") : b.closer && this.closer.css("display", "block");
            !b.sticker || a.options.nonblock && a.options.nonblock.nonblock && !b.show_on_nonblock ? this.sticker.css("display", "none") : b.sticker && this.sticker.css("display", "block");
            this.sticker.trigger("pnotify:buttons:toggleStick");
            this.closer.find("span").attr("class", "").addClass(null === b.classes.closer ? a.styles.closer : b.classes.closer);
            b.sticker_hover ? this.sticker.css("visibility", "hidden") : a.options.nonblock && a.options.nonblock.nonblock && !b.show_on_nonblock || this.sticker.css("visibility", "visible");
            b.closer_hover ? this.closer.css("visibility", "hidden") : a.options.nonblock && a.options.nonblock.nonblock && !b.show_on_nonblock || this.closer.css("visibility", "visible")
        }
    };
    d.extend(e.styling.brighttheme, {
        closer: "brighttheme-icon-closer",
        pin_up: "brighttheme-icon-sticker",
        pin_down: "brighttheme-icon-sticker brighttheme-icon-stuck"
    });
    d.extend(e.styling.jqueryui, {
        closer: "ui-icon ui-icon-close",
        pin_up: "ui-icon ui-icon-pin-w",
        pin_down: "ui-icon ui-icon-pin-s"
    });
    d.extend(e.styling.bootstrap2, {
        closer: "icon-remove",
        pin_up: "icon-pause",
        pin_down: "icon-play"
    });
    d.extend(e.styling.bootstrap3, {
        closer: "glyphicon glyphicon-remove",
        pin_up: "glyphicon glyphicon-pause",
        pin_down: "glyphicon glyphicon-play"
    });
    d.extend(e.styling.fontawesome, {
        closer: "fa fa-times",
        pin_up: "fa fa-pause",
        pin_down: "fa fa-play"
    })
});

(function(b, a) {
    "function" === typeof define && define.amd ? define("pnotify.callbacks", ["jquery", "pnotify"], a) : "object" === typeof exports && "undefined" !== typeof module ? module.exports = a(require("jquery"), require("./pnotify")) : a(b.jQuery, b.PNotify)
})(this, function(b, a) {
    var c = a.prototype.init,
        d = a.prototype.open,
        e = a.prototype.remove;
    a.prototype.init = function() {
        this.options.before_init && this.options.before_init(this.options);
        c.apply(this, arguments);
        this.options.after_init && this.options.after_init(this)
    };
    a.prototype.open =
        function() {
            var a;
            this.options.before_open && (a = this.options.before_open(this));
            !1 !== a && (d.apply(this, arguments), this.options.after_open && this.options.after_open(this))
        };
    a.prototype.remove = function(a) {
        var b;
        this.options.before_close && (b = this.options.before_close(this, a));
        !1 !== b && (e.apply(this, arguments), this.options.after_close && this.options.after_close(this, a))
    }
});

(function(e, c) {
    "function" === typeof define && define.amd ? define("pnotify.confirm", ["jquery", "pnotify"], c) : "object" === typeof exports && "undefined" !== typeof module ? module.exports = c(require("jquery"), require("./pnotify")) : c(e.jQuery, e.PNotify)
})(this, function(e, c) {
    c.prototype.options.confirm = {
        confirm: !1,
        prompt: !1,
        prompt_class: "",
        prompt_default: "",
        prompt_multi_line: !1,
        align: "right",
        buttons: [{
            text: "Ok",
            addClass: "",
            promptTrigger: !0,
            click: function(b, a) {
                b.remove();
                b.get().trigger("pnotify.confirm", [b, a])
            }
        }, {
            text: "Cancel",
            addClass: "",
            click: function(b) {
                b.remove();
                b.get().trigger("pnotify.cancel", b)
            }
        }]
    };
    c.prototype.modules.confirm = {
        container: null,
        prompt: null,
        init: function(b, a) {
            this.container = e('<div class="ui-pnotify-action-bar" style="margin-top:5px;clear:both;" />').css("text-align", a.align).appendTo(b.container);
            a.confirm || a.prompt ? this.makeDialog(b, a) : this.container.hide()
        },
        update: function(b, a) {
            a.confirm ? (this.makeDialog(b, a), this.container.show()) : this.container.hide().empty()
        },
        afterOpen: function(b, a) {
            a.prompt &&
                this.prompt.focus()
        },
        makeDialog: function(b, a) {
            var h = !1,
                l = this,
                g, d;
            this.container.empty();
            a.prompt && (this.prompt = e("<" + (a.prompt_multi_line ? 'textarea rows="5"' : 'input type="text"') + ' style="margin-bottom:5px;clear:both;" />').addClass(("undefined" === typeof b.styles.input ? "" : b.styles.input) + " " + ("undefined" === typeof a.prompt_class ? "" : a.prompt_class)).val(a.prompt_default).appendTo(this.container));
            for (var m = a.buttons[0] && a.buttons[0] !== c.prototype.options.confirm.buttons[0], f = 0; f < a.buttons.length; f++)
                if (!(null ===
                        a.buttons[f] || m && c.prototype.options.confirm.buttons[f] && c.prototype.options.confirm.buttons[f] === a.buttons[f])) {
                    g = a.buttons[f];
                    h ? this.container.append(" ") : h = !0;
                    d = e('<button type="button" class="ui-pnotify-action-button" />').addClass(("undefined" === typeof b.styles.btn ? "" : b.styles.btn) + " " + ("undefined" === typeof g.addClass ? "" : g.addClass)).text(g.text).appendTo(this.container).on("click", function(k) {
                        return function() {
                            "function" == typeof k.click && k.click(b, a.prompt ? l.prompt.val() : null)
                        }
                    }(g));
                    a.prompt &&
                        !a.prompt_multi_line && g.promptTrigger && this.prompt.keypress(function(b) {
                            return function(a) {
                                13 == a.keyCode && b.click()
                            }
                        }(d));
                    b.styles.text && d.wrapInner('<span class="' + b.styles.text + '"></span>');
                    b.styles.btnhover && d.hover(function(a) {
                        return function() {
                            a.addClass(b.styles.btnhover)
                        }
                    }(d), function(a) {
                        return function() {
                            a.removeClass(b.styles.btnhover)
                        }
                    }(d));
                    if (b.styles.btnactive) d.on("mousedown", function(a) {
                        return function() {
                            a.addClass(b.styles.btnactive)
                        }
                    }(d)).on("mouseup", function(a) {
                        return function() {
                            a.removeClass(b.styles.btnactive)
                        }
                    }(d));
                    if (b.styles.btnfocus) d.on("focus", function(a) {
                        return function() {
                            a.addClass(b.styles.btnfocus)
                        }
                    }(d)).on("blur", function(a) {
                        return function() {
                            a.removeClass(b.styles.btnfocus)
                        }
                    }(d))
                }
        }
    };
    e.extend(c.styling.jqueryui, {
        btn: "ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only",
        btnhover: "ui-state-hover",
        btnactive: "ui-state-active",
        btnfocus: "ui-state-focus",
        input: "",
        text: "ui-button-text"
    });
    e.extend(c.styling.bootstrap2, {
        btn: "btn",
        input: ""
    });
    e.extend(c.styling.bootstrap3, {
        btn: "btn btn-default",
        input: "form-control"
    });
    e.extend(c.styling.fontawesome, {
        btn: "btn btn-default",
        input: "form-control"
    })
});

(function(e, c) {
    "function" === typeof define && define.amd ? define("pnotify.desktop", ["jquery", "pnotify"], c) : "object" === typeof exports && "undefined" !== typeof module ? module.exports = c(require("jquery"), require("./pnotify")) : c(e.jQuery, e.PNotify)
})(this, function(e, c) {
    var d, f = function(a, b) {
        f = "Notification" in window ? function(a, b) {
                return new Notification(a, b)
            } : "mozNotification" in navigator ? function(a, b) {
                return navigator.mozNotification.createNotification(a, b.body, b.icon).show()
            } : "webkitNotifications" in window ?
            function(a, b) {
                return window.webkitNotifications.createNotification(b.icon, a, b.body)
            } : function(a, b) {
                return null
            };
        return f(a, b)
    };
    c.prototype.options.desktop = {
        desktop: !1,
        fallback: !0,
        icon: null,
        tag: null
    };
    c.prototype.modules.desktop = {
        tag: null,
        icon: null,
        genNotice: function(a, b) {
            this.icon = null === b.icon ? "http://sciactive.com/pnotify/includes/desktop/" + a.options.type + ".png" : !1 === b.icon ? null : b.icon;
            if (null === this.tag || null !== b.tag) this.tag = null === b.tag ? "PNotify-" + Math.round(1E6 * Math.random()) : b.tag;
            a.desktop =
                f(a.options.title, {
                    icon: this.icon,
                    body: b.text || a.options.text,
                    tag: this.tag
                });
            !("close" in a.desktop) && "cancel" in a.desktop && (a.desktop.close = function() {
                a.desktop.cancel()
            });
            a.desktop.onclick = function() {
                a.elem.trigger("click")
            };
            a.desktop.onclose = function() {
                "closing" !== a.state && "closed" !== a.state && a.remove()
            }
        },
        init: function(a, b) {
            b.desktop && (d = c.desktop.checkPermission(), 0 !== d ? b.fallback || (a.options.auto_display = !1) : this.genNotice(a, b))
        },
        update: function(a, b, c) {
            0 !== d && b.fallback || !b.desktop || this.genNotice(a,
                b)
        },
        beforeOpen: function(a, b) {
            0 !== d && b.fallback || !b.desktop || a.elem.css({
                left: "-10000px"
            }).removeClass("ui-pnotify-in")
        },
        afterOpen: function(a, b) {
            0 !== d && b.fallback || !b.desktop || (a.elem.css({
                left: "-10000px"
            }).removeClass("ui-pnotify-in"), "show" in a.desktop && a.desktop.show())
        },
        beforeClose: function(a, b) {
            0 !== d && b.fallback || !b.desktop || a.elem.css({
                left: "-10000px"
            }).removeClass("ui-pnotify-in")
        },
        afterClose: function(a, b) {
            0 !== d && b.fallback || !b.desktop || (a.elem.css({
                    left: "-10000px"
                }).removeClass("ui-pnotify-in"),
                "close" in a.desktop && a.desktop.close())
        }
    };
    c.desktop = {
        permission: function() {
            "undefined" !== typeof Notification && "requestPermission" in Notification ? Notification.requestPermission() : "webkitNotifications" in window && window.webkitNotifications.requestPermission()
        },
        checkPermission: function() {
            return "undefined" !== typeof Notification && "permission" in Notification ? "granted" === Notification.permission ? 0 : 1 : "webkitNotifications" in window ? 0 == window.webkitNotifications.checkPermission() ? 0 : 1 : 1
        }
    };
    d = c.desktop.checkPermission()
});

(function(b, a) {
    "function" === typeof define && define.amd ? define("pnotify.history", ["jquery", "pnotify"], a) : "object" === typeof exports && "undefined" !== typeof module ? module.exports = a(require("jquery"), require("./pnotify")) : a(b.jQuery, b.PNotify)
})(this, function(b, a) {
    var c, e;
    b(function() {
        b("body").on("pnotify.history-all", function() {
            b.each(a.notices, function() {
                this.modules.history.inHistory && (this.elem.is(":visible") ? this.options.hide && this.queueRemove() : this.open && this.open())
            })
        }).on("pnotify.history-last",
            function() {
                var b = "top" === a.prototype.options.stack.push,
                    d = b ? 0 : -1,
                    c;
                do {
                    c = -1 === d ? a.notices.slice(d) : a.notices.slice(d, d + 1);
                    if (!c[0]) return !1;
                    d = b ? d + 1 : d - 1
                } while (!c[0].modules.history.inHistory || c[0].elem.is(":visible"));
                c[0].open && c[0].open()
            })
    });
    a.prototype.options.history = {
        history: !0,
        menu: !1,
        fixed: !0,
        maxonscreen: Infinity,
        labels: {
            redisplay: "Redisplay",
            all: "All",
            last: "Last"
        }
    };
    a.prototype.modules.history = {
        inHistory: !1,
        init: function(a, d) {
            a.options.destroy = !1;
            this.inHistory = d.history;
            d.menu && "undefined" ===
                typeof c && (c = b("<div />", {
                    "class": "ui-pnotify-history-container " + a.styles.hi_menu,
                    mouseleave: function() {
                        c.animate({
                            top: "-" + e + "px"
                        }, {
                            duration: 100,
                            queue: !1
                        })
                    }
                }).append(b("<div />", {
                    "class": "ui-pnotify-history-header",
                    text: d.labels.redisplay
                })).append(b("<button />", {
                    "class": "ui-pnotify-history-all " + a.styles.hi_btn,
                    text: d.labels.all,
                    mouseenter: function() {
                        b(this).addClass(a.styles.hi_btnhov)
                    },
                    mouseleave: function() {
                        b(this).removeClass(a.styles.hi_btnhov)
                    },
                    click: function() {
                        b(this).trigger("pnotify.history-all");
                        return !1
                    }
                })).append(b("<button />", {
                    "class": "ui-pnotify-history-last " + a.styles.hi_btn,
                    text: d.labels.last,
                    mouseenter: function() {
                        b(this).addClass(a.styles.hi_btnhov)
                    },
                    mouseleave: function() {
                        b(this).removeClass(a.styles.hi_btnhov)
                    },
                    click: function() {
                        b(this).trigger("pnotify.history-last");
                        return !1
                    }
                })).appendTo("body"), e = b("<span />", {
                    "class": "ui-pnotify-history-pulldown " + a.styles.hi_hnd,
                    mouseenter: function() {
                        c.animate({
                            top: "0"
                        }, {
                            duration: 100,
                            queue: !1
                        })
                    }
                }).appendTo(c).offset().top + 2, c.css({
                    top: "-" + e +
                        "px"
                }), d.fixed && c.addClass("ui-pnotify-history-fixed"))
        },
        update: function(a, b) {
            this.inHistory = b.history;
            b.fixed && c ? c.addClass("ui-pnotify-history-fixed") : c && c.removeClass("ui-pnotify-history-fixed")
        },
        beforeOpen: function(c, d) {
            if (a.notices && a.notices.length > d.maxonscreen) {
                var e;
                e = "top" !== c.options.stack.push ? a.notices.slice(0, a.notices.length - d.maxonscreen) : a.notices.slice(d.maxonscreen, a.notices.length);
                b.each(e, function() {
                    this.remove && this.remove()
                })
            }
        }
    };
    b.extend(a.styling.jqueryui, {
        hi_menu: "ui-state-default ui-corner-bottom",
        hi_btn: "ui-state-default ui-corner-all",
        hi_btnhov: "ui-state-hover",
        hi_hnd: "ui-icon ui-icon-grip-dotted-horizontal"
    });
    b.extend(a.styling.bootstrap2, {
        hi_menu: "well",
        hi_btn: "btn",
        hi_btnhov: "",
        hi_hnd: "icon-chevron-down"
    });
    b.extend(a.styling.bootstrap3, {
        hi_menu: "well",
        hi_btn: "btn btn-default",
        hi_btnhov: "",
        hi_hnd: "glyphicon glyphicon-chevron-down"
    });
    b.extend(a.styling.fontawesome, {
        hi_menu: "well",
        hi_btn: "btn btn-default",
        hi_btnhov: "",
        hi_hnd: "fa fa-chevron-down"
    })
});

(function(g, c) {
    "function" === typeof define && define.amd ? define("pnotify.mobile", ["jquery", "pnotify"], c) : "object" === typeof exports && "undefined" !== typeof module ? module.exports = c(require("jquery"), require("./pnotify")) : c(g.jQuery, g.PNotify)
})(this, function(g, c) {
    c.prototype.options.mobile = {
        swipe_dismiss: !0,
        styling: !0
    };
    c.prototype.modules.mobile = {
        swipe_dismiss: !0,
        init: function(a, b) {
            var c = this,
                d = null,
                e = null,
                f = null;
            this.swipe_dismiss = b.swipe_dismiss;
            this.doMobileStyling(a, b);
            a.elem.on({
                touchstart: function(b) {
                    c.swipe_dismiss &&
                        (d = b.originalEvent.touches[0].screenX, f = a.elem.width(), a.container.css("left", "0"))
                },
                touchmove: function(b) {
                    d && c.swipe_dismiss && (e = b.originalEvent.touches[0].screenX - d, b = (1 - Math.abs(e) / f) * a.options.opacity, a.elem.css("opacity", b), a.container.css("left", e))
                },
                touchend: function() {
                    if (d && c.swipe_dismiss) {
                        if (40 < Math.abs(e)) {
                            var b = 0 > e ? -2 * f : 2 * f;
                            a.elem.animate({
                                opacity: 0
                            }, 100);
                            a.container.animate({
                                left: b
                            }, 100);
                            a.remove()
                        } else a.elem.animate({
                            opacity: a.options.opacity
                        }, 100), a.container.animate({
                            left: 0
                        }, 100);
                        f = e = d = null
                    }
                },
                touchcancel: function() {
                    d && c.swipe_dismiss && (a.elem.animate({
                        opacity: a.options.opacity
                    }, 100), a.container.animate({
                        left: 0
                    }, 100), f = e = d = null)
                }
            })
        },
        update: function(a, b) {
            this.swipe_dismiss = b.swipe_dismiss;
            this.doMobileStyling(a, b)
        },
        doMobileStyling: function(a, b) {
            if (b.styling)
                if (a.elem.addClass("ui-pnotify-mobile-able"), 480 >= g(window).width()) a.options.stack.mobileOrigSpacing1 || (a.options.stack.mobileOrigSpacing1 = a.options.stack.spacing1, a.options.stack.mobileOrigSpacing2 = a.options.stack.spacing2),
                    a.options.stack.spacing1 = 0, a.options.stack.spacing2 = 0;
                else {
                    if (a.options.stack.mobileOrigSpacing1 || a.options.stack.mobileOrigSpacing2) a.options.stack.spacing1 = a.options.stack.mobileOrigSpacing1, delete a.options.stack.mobileOrigSpacing1, a.options.stack.spacing2 = a.options.stack.mobileOrigSpacing2, delete a.options.stack.mobileOrigSpacing2
                } else a.elem.removeClass("ui-pnotify-mobile-able"), a.options.stack.mobileOrigSpacing1 && (a.options.stack.spacing1 = a.options.stack.mobileOrigSpacing1, delete a.options.stack.mobileOrigSpacing1),
                a.options.stack.mobileOrigSpacing2 && (a.options.stack.spacing2 = a.options.stack.mobileOrigSpacing2, delete a.options.stack.mobileOrigSpacing2)
        }
    }
});

(function(h, f) {
    "function" === typeof define && define.amd ? define("pnotify.nonblock", ["jquery", "pnotify"], f) : "object" === typeof exports && "undefined" !== typeof module ? module.exports = f(require("jquery"), require("./pnotify")) : f(h.jQuery, h.PNotify)
})(this, function(h, f) {
    var l = /^on/,
        m = /^(dbl)?click$|^mouse(move|down|up|over|out|enter|leave)$|^contextmenu$/,
        n = /^(focus|blur|select|change|reset)$|^key(press|down|up)$/,
        p = /^(scroll|resize|(un)?load|abort|error)$/,
        k = function(c, b) {
            var d;
            c = c.toLowerCase();
            document.createEvent &&
                this.dispatchEvent ? (c = c.replace(l, ""), c.match(m) ? (h(this).offset(), d = document.createEvent("MouseEvents"), d.initMouseEvent(c, b.bubbles, b.cancelable, b.view, b.detail, b.screenX, b.screenY, b.clientX, b.clientY, b.ctrlKey, b.altKey, b.shiftKey, b.metaKey, b.button, b.relatedTarget)) : c.match(n) ? (d = document.createEvent("UIEvents"), d.initUIEvent(c, b.bubbles, b.cancelable, b.view, b.detail)) : c.match(p) && (d = document.createEvent("HTMLEvents"), d.initEvent(c, b.bubbles, b.cancelable)), d && this.dispatchEvent(d)) : (c.match(l) ||
                    (c = "on" + c), d = document.createEventObject(b), this.fireEvent(c, d))
        },
        g, e = function(c, b, d) {
            c.elem.addClass("ui-pnotify-nonblock-hide");
            var a = document.elementFromPoint(b.clientX, b.clientY);
            c.elem.removeClass("ui-pnotify-nonblock-hide");
            var f = h(a),
                e = f.css("cursor");
            "auto" === e && "A" === a.tagName && (e = "pointer");
            c.elem.css("cursor", "auto" !== e ? e : "default");
            g && g.get(0) == a || (g && (k.call(g.get(0), "mouseleave", b.originalEvent), k.call(g.get(0), "mouseout", b.originalEvent)), k.call(a, "mouseenter", b.originalEvent), k.call(a,
                "mouseover", b.originalEvent));
            k.call(a, d, b.originalEvent);
            g = f
        };
    f.prototype.options.nonblock = {
        nonblock: !1
    };
    f.prototype.modules.nonblock = {
        init: function(c, b) {
            var d = this;
            c.elem.on({
                mouseenter: function(a) {
                    d.options.nonblock && a.stopPropagation();
                    d.options.nonblock && c.elem.addClass("ui-pnotify-nonblock-fade")
                },
                mouseleave: function(a) {
                    d.options.nonblock && a.stopPropagation();
                    g = null;
                    c.elem.css("cursor", "auto");
                    d.options.nonblock && "out" !== c.animating && c.elem.removeClass("ui-pnotify-nonblock-fade")
                },
                mouseover: function(a) {
                    d.options.nonblock &&
                        a.stopPropagation()
                },
                mouseout: function(a) {
                    d.options.nonblock && a.stopPropagation()
                },
                mousemove: function(a) {
                    d.options.nonblock && (a.stopPropagation(), e(c, a, "onmousemove"))
                },
                mousedown: function(a) {
                    d.options.nonblock && (a.stopPropagation(), a.preventDefault(), e(c, a, "onmousedown"))
                },
                mouseup: function(a) {
                    d.options.nonblock && (a.stopPropagation(), a.preventDefault(), e(c, a, "onmouseup"))
                },
                click: function(a) {
                    d.options.nonblock && (a.stopPropagation(), e(c, a, "onclick"))
                },
                dblclick: function(a) {
                    d.options.nonblock && (a.stopPropagation(),
                        e(c, a, "ondblclick"))
                }
            })
        }
    }
});

/**
 * angular-environment Plugin
 *
 * An useful plugin that allows you to set up different information
 * such as api endpoints, urls, variables, etc, based on the context of scripts execution:
 * development, stage, production or any other custom environment you want to create.
 *
 * For more information, issues, etc, check out:
 * http://github.com/juanpablob/angular-environment
 */

angular.module('environment', []).
provider('envService', function() {

    this.environment = 'development'; // default
    this.data = {}; // user defined environments data

    /**
     * config() allow pass as object the
     * desired environments with their domains
     * and variables
     *
     * @param {Object} config
     * @return {Void}
     */
    this.config = function(config) {
        this.data = config;
    };

    /**
     * set() set the desired environment
     * based on the passed string
     *
     * @param {String} environment
     * @return {Void}
     */
    this.set = function(environment) {
        this.environment = environment;
    };

    /**
     * get() returns the current environment
     *
     * @return {Void}
     */
    this.get = function() {
        return this.environment;
    };

    /**
     * read() returns the desired variable based
     * on passed argument
     *
     * @param {String} variable
     * @return {Void}
     */
    this.read = function(variable) {
        if (variable !== 'all') {
            return this.data.vars[this.get()][variable];
        }

        return this.data.vars[this.get()];
    };

    /**
     * is() checks if the passed environment
     * matches with the current environment
     *
     * @param {String} environment
     * @return {Boolean}
     */
    this.is = function(environment) {
        return (environment === this.environment);
    };

    /**
     * check() looks for a match between
     * the actual domain (where the script is running)
     * and any of the domains under env constant in
     * order to set the running environment
     *
     * @return {Void}
     */
    this.check = function() {
        var location = window.location.href,
            self = this;

        angular.forEach(this.data.domains, function(v, k) {
            angular.forEach(v, function(v) {
                if (location.match('//' + v)) {
                    self.environment = k;
                }
            });
        });
    };

    this.$get = function() {
        return this;
    };
});

/**
 * @license AngularJS v1.5.0
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {
    'use strict';

    /**
     * @ngdoc module
     * @name ngRoute
     * @description
     *
     * # ngRoute
     *
     * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.
     *
     * ## Example
     * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
     *
     *
     * <div doc-module-components="ngRoute"></div>
     */
    /* global -ngRouteModule */
    var ngRouteModule = angular.module('ngRoute', ['ng']).
    provider('$route', $RouteProvider),
        $routeMinErr = angular.$$minErr('ngRoute');

    /**
     * @ngdoc provider
     * @name $routeProvider
     *
     * @description
     *
     * Used for configuring routes.
     *
     * ## Example
     * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.
     *
     * ## Dependencies
     * Requires the {@link ngRoute `ngRoute`} module to be installed.
     */
    function $RouteProvider() {
        function inherit(parent, extra) {
            return angular.extend(Object.create(parent), extra);
        }

        var routes = {};

        /**
         * @ngdoc method
         * @name $routeProvider#when
         *
         * @param {string} path Route path (matched against `$location.path`). If `$location.path`
         *    contains redundant trailing slash or is missing one, the route will still match and the
         *    `$location.path` will be updated to add or drop the trailing slash to exactly match the
         *    route definition.
         *
         *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up
         *        to the next slash are matched and stored in `$routeParams` under the given `name`
         *        when the route matches.
         *    * `path` can contain named groups starting with a colon and ending with a star:
         *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`
         *        when the route matches.
         *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.
         *
         *    For example, routes like `/color/:color/largecode/:largecode*\/edit` will match
         *    `/color/brown/largecode/code/with/slashes/edit` and extract:
         *
         *    * `color: brown`
         *    * `largecode: code/with/slashes`.
         *
         *
         * @param {Object} route Mapping information to be assigned to `$route.current` on route
         *    match.
         *
         *    Object properties:
         *
         *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with
         *      newly created scope or the name of a {@link angular.Module#controller registered
         *      controller} if passed as a string.
         *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.
         *      If present, the controller will be published to scope under the `controllerAs` name.
         *    - `template` – `{string=|function()=}` – html template as a string or a function that
         *      returns an html template as a string which should be used by {@link
         *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.
         *      This property takes precedence over `templateUrl`.
         *
         *      If `template` is a function, it will be called with the following parameters:
         *
         *      - `{Array.<Object>}` - route parameters extracted from the current
         *        `$location.path()` by applying the current route
         *
         *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
         *      template that should be used by {@link ngRoute.directive:ngView ngView}.
         *
         *      If `templateUrl` is a function, it will be called with the following parameters:
         *
         *      - `{Array.<Object>}` - route parameters extracted from the current
         *        `$location.path()` by applying the current route
         *
         *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should
         *      be injected into the controller. If any of these dependencies are promises, the router
         *      will wait for them all to be resolved or one to be rejected before the controller is
         *      instantiated.
         *      If all the promises are resolved successfully, the values of the resolved promises are
         *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is
         *      fired. If any of the promises are rejected the
         *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired.
         *      For easier access to the resolved dependencies from the template, the `resolve` map will
         *      be available on the scope of the route, under `$resolve` (by default) or a custom name
         *      specified by the `resolveAs` property (see below). This can be particularly useful, when
         *      working with {@link angular.Module#component components} as route templates.<br />
         *      <div class="alert alert-warning">
         *        **Note:** If your scope already contains a property with this name, it will be hidden
         *        or overwritten. Make sure, you specify an appropriate name for this property, that
         *        does not collide with other properties on the scope.
         *      </div>
         *      The map object is:
         *
         *      - `key` – `{string}`: a name of a dependency to be injected into the controller.
         *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.
         *        Otherwise if function, then it is {@link auto.$injector#invoke injected}
         *        and the return value is treated as the dependency. If the result is a promise, it is
         *        resolved before its value is injected into the controller. Be aware that
         *        `ngRoute.$routeParams` will still refer to the previous route within these resolve
         *        functions.  Use `$route.current.params` to access the new route parameters, instead.
         *
         *    - `resolveAs` - `{string=}` - The name under which the `resolve` map will be available on
         *      the scope of the route. If omitted, defaults to `$resolve`.
         *
         *    - `redirectTo` – `{(string|function())=}` – value to update
         *      {@link ng.$location $location} path with and trigger route redirection.
         *
         *      If `redirectTo` is a function, it will be called with the following parameters:
         *
         *      - `{Object.<string>}` - route parameters extracted from the current
         *        `$location.path()` by applying the current route templateUrl.
         *      - `{string}` - current `$location.path()`
         *      - `{Object}` - current `$location.search()`
         *
         *      The custom `redirectTo` function is expected to return a string which will be used
         *      to update `$location.path()` and `$location.search()`.
         *
         *    - `[reloadOnSearch=true]` - `{boolean=}` - reload route when only `$location.search()`
         *      or `$location.hash()` changes.
         *
         *      If the option is set to `false` and url in the browser changes, then
         *      `$routeUpdate` event is broadcasted on the root scope.
         *
         *    - `[caseInsensitiveMatch=false]` - `{boolean=}` - match routes without being case sensitive
         *
         *      If the option is set to `true`, then the particular route can be matched without being
         *      case sensitive
         *
         * @returns {Object} self
         *
         * @description
         * Adds a new route definition to the `$route` service.
         */
        this.when = function(path, route) {
            //copy original route object to preserve params inherited from proto chain
            var routeCopy = angular.copy(route);
            if (angular.isUndefined(routeCopy.reloadOnSearch)) {
                routeCopy.reloadOnSearch = true;
            }
            if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {
                routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;
            }
            routes[path] = angular.extend(
                routeCopy,
                path && pathRegExp(path, routeCopy)
            );

            // create redirection for trailing slashes
            if (path) {
                var redirectPath = (path[path.length - 1] == '/') ? path.substr(0, path.length - 1) : path + '/';

                routes[redirectPath] = angular.extend({
                        redirectTo: path
                    },
                    pathRegExp(redirectPath, routeCopy)
                );
            }

            return this;
        };

        /**
         * @ngdoc property
         * @name $routeProvider#caseInsensitiveMatch
         * @description
         *
         * A boolean property indicating if routes defined
         * using this provider should be matched using a case insensitive
         * algorithm. Defaults to `false`.
         */
        this.caseInsensitiveMatch = false;

        /**
         * @param path {string} path
         * @param opts {Object} options
         * @return {?Object}
         *
         * @description
         * Normalizes the given path, returning a regular expression
         * and the original path.
         *
         * Inspired by pathRexp in visionmedia/express/lib/utils.js.
         */
        function pathRegExp(path, opts) {
            var insensitive = opts.caseInsensitiveMatch,
                ret = {
                    originalPath: path,
                    regexp: path
                },
                keys = ret.keys = [];

            path = path
                .replace(/([().])/g, '\\$1')
                .replace(/(\/)?:(\w+)([\?\*])?/g, function(_, slash, key, option) {
                    var optional = option === '?' ? option : null;
                    var star = option === '*' ? option : null;
                    keys.push({
                        name: key,
                        optional: !!optional
                    });
                    slash = slash || '';
                    return '' + (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (star && '(.+?)' || '([^/]+)') + (optional || '') + ')' + (optional || '');
                })
                .replace(/([\/$\*])/g, '\\$1');

            ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');
            return ret;
        }

        /**
         * @ngdoc method
         * @name $routeProvider#otherwise
         *
         * @description
         * Sets route definition that will be used on route change when no other route definition
         * is matched.
         *
         * @param {Object|string} params Mapping information to be assigned to `$route.current`.
         * If called with a string, the value maps to `redirectTo`.
         * @returns {Object} self
         */
        this.otherwise = function(params) {
            if (typeof params === 'string') {
                params = {
                    redirectTo: params
                };
            }
            this.when(null, params);
            return this;
        };


        this.$get = ['$rootScope',
            '$location',
            '$routeParams',
            '$q',
            '$injector',
            '$templateRequest',
            '$sce',
            function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce) {

                /**
                 * @ngdoc service
                 * @name $route
                 * @requires $location
                 * @requires $routeParams
                 *
                 * @property {Object} current Reference to the current route definition.
                 * The route definition contains:
                 *
                 *   - `controller`: The controller constructor as defined in the route definition.
                 *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for
                 *     controller instantiation. The `locals` contain
                 *     the resolved values of the `resolve` map. Additionally the `locals` also contain:
                 *
                 *     - `$scope` - The current route scope.
                 *     - `$template` - The current route template HTML.
                 *
                 *     The `locals` will be assigned to the route scope's `$resolve` property. You can override
                 *     the property name, using `resolveAs` in the route definition. See
                 *     {@link ngRoute.$routeProvider $routeProvider} for more info.
                 *
                 * @property {Object} routes Object with all route configuration Objects as its properties.
                 *
                 * @description
                 * `$route` is used for deep-linking URLs to controllers and views (HTML partials).
                 * It watches `$location.url()` and tries to map the path to an existing route definition.
                 *
                 * Requires the {@link ngRoute `ngRoute`} module to be installed.
                 *
                 * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.
                 *
                 * The `$route` service is typically used in conjunction with the
                 * {@link ngRoute.directive:ngView `ngView`} directive and the
                 * {@link ngRoute.$routeParams `$routeParams`} service.
                 *
                 * @example
                 * This example shows how changing the URL hash causes the `$route` to match a route against the
                 * URL, and the `ngView` pulls in the partial.
                 *
                 * <example name="$route-service" module="ngRouteExample"
                 *          deps="angular-route.js" fixBase="true">
                 *   <file name="index.html">
                 *     <div ng-controller="MainController">
                 *       Choose:
                 *       <a href="Book/Moby">Moby</a> |
                 *       <a href="Book/Moby/ch/1">Moby: Ch1</a> |
                 *       <a href="Book/Gatsby">Gatsby</a> |
                 *       <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
                 *       <a href="Book/Scarlet">Scarlet Letter</a><br/>
                 *
                 *       <div ng-view></div>
                 *
                 *       <hr />
                 *
                 *       <pre>$location.path() = {{$location.path()}}</pre>
                 *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>
                 *       <pre>$route.current.params = {{$route.current.params}}</pre>
                 *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>
                 *       <pre>$routeParams = {{$routeParams}}</pre>
                 *     </div>
                 *   </file>
                 *
                 *   <file name="book.html">
                 *     controller: {{name}}<br />
                 *     Book Id: {{params.bookId}}<br />
                 *   </file>
                 *
                 *   <file name="chapter.html">
                 *     controller: {{name}}<br />
                 *     Book Id: {{params.bookId}}<br />
                 *     Chapter Id: {{params.chapterId}}
                 *   </file>
                 *
                 *   <file name="script.js">
                 *     angular.module('ngRouteExample', ['ngRoute'])
                 *
                 *      .controller('MainController', function($scope, $route, $routeParams, $location) {
                 *          $scope.$route = $route;
                 *          $scope.$location = $location;
                 *          $scope.$routeParams = $routeParams;
                 *      })
                 *
                 *      .controller('BookController', function($scope, $routeParams) {
                 *          $scope.name = "BookController";
                 *          $scope.params = $routeParams;
                 *      })
                 *
                 *      .controller('ChapterController', function($scope, $routeParams) {
                 *          $scope.name = "ChapterController";
                 *          $scope.params = $routeParams;
                 *      })
                 *
                 *     .config(function($routeProvider, $locationProvider) {
                 *       $routeProvider
                 *        .when('/Book/:bookId', {
                 *         templateUrl: 'book.html',
                 *         controller: 'BookController',
                 *         resolve: {
                 *           // I will cause a 1 second delay
                 *           delay: function($q, $timeout) {
                 *             var delay = $q.defer();
                 *             $timeout(delay.resolve, 1000);
                 *             return delay.promise;
                 *           }
                 *         }
                 *       })
                 *       .when('/Book/:bookId/ch/:chapterId', {
                 *         templateUrl: 'chapter.html',
                 *         controller: 'ChapterController'
                 *       });
                 *
                 *       // configure html5 to get links working on jsfiddle
                 *       $locationProvider.html5Mode(true);
                 *     });
                 *
                 *   </file>
                 *
                 *   <file name="protractor.js" type="protractor">
                 *     it('should load and compile correct template', function() {
                 *       element(by.linkText('Moby: Ch1')).click();
                 *       var content = element(by.css('[ng-view]')).getText();
                 *       expect(content).toMatch(/controller\: ChapterController/);
                 *       expect(content).toMatch(/Book Id\: Moby/);
                 *       expect(content).toMatch(/Chapter Id\: 1/);
                 *
                 *       element(by.partialLinkText('Scarlet')).click();
                 *
                 *       content = element(by.css('[ng-view]')).getText();
                 *       expect(content).toMatch(/controller\: BookController/);
                 *       expect(content).toMatch(/Book Id\: Scarlet/);
                 *     });
                 *   </file>
                 * </example>
                 */

                /**
                 * @ngdoc event
                 * @name $route#$routeChangeStart
                 * @eventType broadcast on root scope
                 * @description
                 * Broadcasted before a route change. At this  point the route services starts
                 * resolving all of the dependencies needed for the route change to occur.
                 * Typically this involves fetching the view template as well as any dependencies
                 * defined in `resolve` route property. Once  all of the dependencies are resolved
                 * `$routeChangeSuccess` is fired.
                 *
                 * The route change (and the `$location` change that triggered it) can be prevented
                 * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}
                 * for more details about event object.
                 *
                 * @param {Object} angularEvent Synthetic event object.
                 * @param {Route} next Future route information.
                 * @param {Route} current Current route information.
                 */

                /**
                 * @ngdoc event
                 * @name $route#$routeChangeSuccess
                 * @eventType broadcast on root scope
                 * @description
                 * Broadcasted after a route change has happened successfully.
                 * The `resolve` dependencies are now available in the `current.locals` property.
                 *
                 * {@link ngRoute.directive:ngView ngView} listens for the directive
                 * to instantiate the controller and render the view.
                 *
                 * @param {Object} angularEvent Synthetic event object.
                 * @param {Route} current Current route information.
                 * @param {Route|Undefined} previous Previous route information, or undefined if current is
                 * first route entered.
                 */

                /**
                 * @ngdoc event
                 * @name $route#$routeChangeError
                 * @eventType broadcast on root scope
                 * @description
                 * Broadcasted if any of the resolve promises are rejected.
                 *
                 * @param {Object} angularEvent Synthetic event object
                 * @param {Route} current Current route information.
                 * @param {Route} previous Previous route information.
                 * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.
                 */

                /**
                 * @ngdoc event
                 * @name $route#$routeUpdate
                 * @eventType broadcast on root scope
                 * @description
                 * The `reloadOnSearch` property has been set to false, and we are reusing the same
                 * instance of the Controller.
                 *
                 * @param {Object} angularEvent Synthetic event object
                 * @param {Route} current Current/previous route information.
                 */

                var forceReload = false,
                    preparedRoute,
                    preparedRouteIsUpdateOnly,
                    $route = {
                        routes: routes,

                        /**
                         * @ngdoc method
                         * @name $route#reload
                         *
                         * @description
                         * Causes `$route` service to reload the current route even if
                         * {@link ng.$location $location} hasn't changed.
                         *
                         * As a result of that, {@link ngRoute.directive:ngView ngView}
                         * creates new scope and reinstantiates the controller.
                         */
                        reload: function() {
                            forceReload = true;

                            var fakeLocationEvent = {
                                defaultPrevented: false,
                                preventDefault: function fakePreventDefault() {
                                    this.defaultPrevented = true;
                                    forceReload = false;
                                }
                            };

                            $rootScope.$evalAsync(function() {
                                prepareRoute(fakeLocationEvent);
                                if (!fakeLocationEvent.defaultPrevented) commitRoute();
                            });
                        },

                        /**
                         * @ngdoc method
                         * @name $route#updateParams
                         *
                         * @description
                         * Causes `$route` service to update the current URL, replacing
                         * current route parameters with those specified in `newParams`.
                         * Provided property names that match the route's path segment
                         * definitions will be interpolated into the location's path, while
                         * remaining properties will be treated as query params.
                         *
                         * @param {!Object<string, string>} newParams mapping of URL parameter names to values
                         */
                        updateParams: function(newParams) {
                            if (this.current && this.current.$$route) {
                                newParams = angular.extend({}, this.current.params, newParams);
                                $location.path(interpolate(this.current.$$route.originalPath, newParams));
                                // interpolate modifies newParams, only query params are left
                                $location.search(newParams);
                            } else {
                                throw $routeMinErr('norout', 'Tried updating route when with no current route');
                            }
                        }
                    };

                $rootScope.$on('$locationChangeStart', prepareRoute);
                $rootScope.$on('$locationChangeSuccess', commitRoute);

                return $route;

                /////////////////////////////////////////////////////

                /**
                 * @param on {string} current url
                 * @param route {Object} route regexp to match the url against
                 * @return {?Object}
                 *
                 * @description
                 * Check if the route matches the current url.
                 *
                 * Inspired by match in
                 * visionmedia/express/lib/router/router.js.
                 */
                function switchRouteMatcher(on, route) {
                    var keys = route.keys,
                        params = {};

                    if (!route.regexp) return null;

                    var m = route.regexp.exec(on);
                    if (!m) return null;

                    for (var i = 1, len = m.length; i < len; ++i) {
                        var key = keys[i - 1];

                        var val = m[i];

                        if (key && val) {
                            params[key.name] = val;
                        }
                    }
                    return params;
                }

                function prepareRoute($locationEvent) {
                    var lastRoute = $route.current;

                    preparedRoute = parseRoute();
                    preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route && angular.equals(preparedRoute.pathParams, lastRoute.pathParams) && !preparedRoute.reloadOnSearch && !forceReload;

                    if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {
                        if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {
                            if ($locationEvent) {
                                $locationEvent.preventDefault();
                            }
                        }
                    }
                }

                function commitRoute() {
                    var lastRoute = $route.current;
                    var nextRoute = preparedRoute;

                    if (preparedRouteIsUpdateOnly) {
                        lastRoute.params = nextRoute.params;
                        angular.copy(lastRoute.params, $routeParams);
                        $rootScope.$broadcast('$routeUpdate', lastRoute);
                    } else if (nextRoute || lastRoute) {
                        forceReload = false;
                        $route.current = nextRoute;
                        if (nextRoute) {
                            if (nextRoute.redirectTo) {
                                if (angular.isString(nextRoute.redirectTo)) {
                                    $location.path(interpolate(nextRoute.redirectTo, nextRoute.params)).search(nextRoute.params)
                                        .replace();
                                } else {
                                    $location.url(nextRoute.redirectTo(nextRoute.pathParams, $location.path(), $location.search()))
                                        .replace();
                                }
                            }
                        }

                        $q.when(nextRoute).
                        then(function() {
                            if (nextRoute) {
                                var locals = angular.extend({}, nextRoute.resolve),
                                    template, templateUrl;

                                angular.forEach(locals, function(value, key) {
                                    locals[key] = angular.isString(value) ?
                                        $injector.get(value) : $injector.invoke(value, null, null, key);
                                });

                                if (angular.isDefined(template = nextRoute.template)) {
                                    if (angular.isFunction(template)) {
                                        template = template(nextRoute.params);
                                    }
                                } else if (angular.isDefined(templateUrl = nextRoute.templateUrl)) {
                                    if (angular.isFunction(templateUrl)) {
                                        templateUrl = templateUrl(nextRoute.params);
                                    }
                                    if (angular.isDefined(templateUrl)) {
                                        nextRoute.loadedTemplateUrl = $sce.valueOf(templateUrl);
                                        template = $templateRequest(templateUrl);
                                    }
                                }
                                if (angular.isDefined(template)) {
                                    locals['$template'] = template;
                                }
                                return $q.all(locals);
                            }
                        }).
                        then(function(locals) {
                            // after route change
                            if (nextRoute == $route.current) {
                                if (nextRoute) {
                                    nextRoute.locals = locals;
                                    angular.copy(nextRoute.params, $routeParams);
                                }
                                $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);
                            }
                        }, function(error) {
                            if (nextRoute == $route.current) {
                                $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);
                            }
                        });
                    }
                }


                /**
                 * @returns {Object} the current active route, by matching it against the URL
                 */
                function parseRoute() {
                    // Match a route
                    var params, match;
                    angular.forEach(routes, function(route, path) {
                        if (!match && (params = switchRouteMatcher($location.path(), route))) {
                            match = inherit(route, {
                                params: angular.extend({}, $location.search(), params),
                                pathParams: params
                            });
                            match.$$route = route;
                        }
                    });
                    // No route matched; fallback to "otherwise" route
                    return match || routes[null] && inherit(routes[null], {
                        params: {},
                        pathParams: {}
                    });
                }

                /**
                 * @returns {string} interpolation of the redirect path with the parameters
                 */
                function interpolate(string, params) {
                    var result = [];
                    angular.forEach((string || '').split(':'), function(segment, i) {
                        if (i === 0) {
                            result.push(segment);
                        } else {
                            var segmentMatch = segment.match(/(\w+)(?:[?*])?(.*)/);
                            var key = segmentMatch[1];
                            result.push(params[key]);
                            result.push(segmentMatch[2] || '');
                            delete params[key];
                        }
                    });
                    return result.join('');
                }
            }
        ];
    }

    ngRouteModule.provider('$routeParams', $RouteParamsProvider);


    /**
     * @ngdoc service
     * @name $routeParams
     * @requires $route
     *
     * @description
     * The `$routeParams` service allows you to retrieve the current set of route parameters.
     *
     * Requires the {@link ngRoute `ngRoute`} module to be installed.
     *
     * The route parameters are a combination of {@link ng.$location `$location`}'s
     * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.
     * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.
     *
     * In case of parameter name collision, `path` params take precedence over `search` params.
     *
     * The service guarantees that the identity of the `$routeParams` object will remain unchanged
     * (but its properties will likely change) even when a route change occurs.
     *
     * Note that the `$routeParams` are only updated *after* a route change completes successfully.
     * This means that you cannot rely on `$routeParams` being correct in route resolve functions.
     * Instead you can use `$route.current.params` to access the new route's parameters.
     *
     * @example
     * ```js
     *  // Given:
     *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby
     *  // Route: /Chapter/:chapterId/Section/:sectionId
     *  //
     *  // Then
     *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}
     * ```
     */
    function $RouteParamsProvider() {
        this.$get = function() {
            return {};
        };
    }

    ngRouteModule.directive('ngView', ngViewFactory);
    ngRouteModule.directive('ngView', ngViewFillContentFactory);


    /**
     * @ngdoc directive
     * @name ngView
     * @restrict ECA
     *
     * @description
     * # Overview
     * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by
     * including the rendered template of the current route into the main layout (`index.html`) file.
     * Every time the current route changes, the included view changes with it according to the
     * configuration of the `$route` service.
     *
     * Requires the {@link ngRoute `ngRoute`} module to be installed.
     *
     * @animations
     * enter - animation is used to bring new content into the browser.
     * leave - animation is used to animate existing content away.
     *
     * The enter and leave animation occur concurrently.
     *
     * @scope
     * @priority 400
     * @param {string=} onload Expression to evaluate whenever the view updates.
     *
     * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll
     *                  $anchorScroll} to scroll the viewport after the view is updated.
     *
     *                  - If the attribute is not set, disable scrolling.
     *                  - If the attribute is set without value, enable scrolling.
     *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated
     *                    as an expression yields a truthy value.
     * @example
        <example name="ngView-directive" module="ngViewExample"
                 deps="angular-route.js;angular-animate.js"
                 animations="true" fixBase="true">
          <file name="index.html">
            <div ng-controller="MainCtrl as main">
              Choose:
              <a href="Book/Moby">Moby</a> |
              <a href="Book/Moby/ch/1">Moby: Ch1</a> |
              <a href="Book/Gatsby">Gatsby</a> |
              <a href="Book/Gatsby/ch/4?key=value">Gatsby: Ch4</a> |
              <a href="Book/Scarlet">Scarlet Letter</a><br/>

              <div class="view-animate-container">
                <div ng-view class="view-animate"></div>
              </div>
              <hr />

              <pre>$location.path() = {{main.$location.path()}}</pre>
              <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>
              <pre>$route.current.params = {{main.$route.current.params}}</pre>
              <pre>$routeParams = {{main.$routeParams}}</pre>
            </div>
          </file>

          <file name="book.html">
            <div>
              controller: {{book.name}}<br />
              Book Id: {{book.params.bookId}}<br />
            </div>
          </file>

          <file name="chapter.html">
            <div>
              controller: {{chapter.name}}<br />
              Book Id: {{chapter.params.bookId}}<br />
              Chapter Id: {{chapter.params.chapterId}}
            </div>
          </file>

          <file name="animations.css">
            .view-animate-container {
              position:relative;
              height:100px!important;
              background:white;
              border:1px solid black;
              height:40px;
              overflow:hidden;
            }

            .view-animate {
              padding:10px;
            }

            .view-animate.ng-enter, .view-animate.ng-leave {
              transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;

              display:block;
              width:100%;
              border-left:1px solid black;

              position:absolute;
              top:0;
              left:0;
              right:0;
              bottom:0;
              padding:10px;
            }

            .view-animate.ng-enter {
              left:100%;
            }
            .view-animate.ng-enter.ng-enter-active {
              left:0;
            }
            .view-animate.ng-leave.ng-leave-active {
              left:-100%;
            }
          </file>

          <file name="script.js">
            angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])
              .config(['$routeProvider', '$locationProvider',
                function($routeProvider, $locationProvider) {
                  $routeProvider
                    .when('/Book/:bookId', {
                      templateUrl: 'book.html',
                      controller: 'BookCtrl',
                      controllerAs: 'book'
                    })
                    .when('/Book/:bookId/ch/:chapterId', {
                      templateUrl: 'chapter.html',
                      controller: 'ChapterCtrl',
                      controllerAs: 'chapter'
                    });

                  $locationProvider.html5Mode(true);
              }])
              .controller('MainCtrl', ['$route', '$routeParams', '$location',
                function($route, $routeParams, $location) {
                  this.$route = $route;
                  this.$location = $location;
                  this.$routeParams = $routeParams;
              }])
              .controller('BookCtrl', ['$routeParams', function($routeParams) {
                this.name = "BookCtrl";
                this.params = $routeParams;
              }])
              .controller('ChapterCtrl', ['$routeParams', function($routeParams) {
                this.name = "ChapterCtrl";
                this.params = $routeParams;
              }]);

          </file>

          <file name="protractor.js" type="protractor">
            it('should load and compile correct template', function() {
              element(by.linkText('Moby: Ch1')).click();
              var content = element(by.css('[ng-view]')).getText();
              expect(content).toMatch(/controller\: ChapterCtrl/);
              expect(content).toMatch(/Book Id\: Moby/);
              expect(content).toMatch(/Chapter Id\: 1/);

              element(by.partialLinkText('Scarlet')).click();

              content = element(by.css('[ng-view]')).getText();
              expect(content).toMatch(/controller\: BookCtrl/);
              expect(content).toMatch(/Book Id\: Scarlet/);
            });
          </file>
        </example>
     */


    /**
     * @ngdoc event
     * @name ngView#$viewContentLoaded
     * @eventType emit on the current ngView scope
     * @description
     * Emitted every time the ngView content is reloaded.
     */
    ngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];

    function ngViewFactory($route, $anchorScroll, $animate) {
        return {
            restrict: 'ECA',
            terminal: true,
            priority: 400,
            transclude: 'element',
            link: function(scope, $element, attr, ctrl, $transclude) {
                var currentScope,
                    currentElement,
                    previousLeaveAnimation,
                    autoScrollExp = attr.autoscroll,
                    onloadExp = attr.onload || '';

                scope.$on('$routeChangeSuccess', update);
                update();

                function cleanupLastView() {
                    if (previousLeaveAnimation) {
                        $animate.cancel(previousLeaveAnimation);
                        previousLeaveAnimation = null;
                    }

                    if (currentScope) {
                        currentScope.$destroy();
                        currentScope = null;
                    }
                    if (currentElement) {
                        previousLeaveAnimation = $animate.leave(currentElement);
                        previousLeaveAnimation.then(function() {
                            previousLeaveAnimation = null;
                        });
                        currentElement = null;
                    }
                }

                function update() {
                    var locals = $route.current && $route.current.locals,
                        template = locals && locals.$template;

                    if (angular.isDefined(template)) {
                        var newScope = scope.$new();
                        var current = $route.current;

                        // Note: This will also link all children of ng-view that were contained in the original
                        // html. If that content contains controllers, ... they could pollute/change the scope.
                        // However, using ng-view on an element with additional content does not make sense...
                        // Note: We can't remove them in the cloneAttchFn of $transclude as that
                        // function is called before linking the content, which would apply child
                        // directives to non existing elements.
                        var clone = $transclude(newScope, function(clone) {
                            $animate.enter(clone, null, currentElement || $element).then(function onNgViewEnter() {
                                if (angular.isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                                    $anchorScroll();
                                }
                            });
                            cleanupLastView();
                        });

                        currentElement = clone;
                        currentScope = current.scope = newScope;
                        currentScope.$emit('$viewContentLoaded');
                        currentScope.$eval(onloadExp);
                    } else {
                        cleanupLastView();
                    }
                }
            }
        };
    }

    // This directive is called during the $transclude call of the first `ngView` directive.
    // It will replace and compile the content of the element with the loaded template.
    // We need this directive so that the element content is already filled when
    // the link function of another directive on the same element as ngView
    // is called.
    ngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];

    function ngViewFillContentFactory($compile, $controller, $route) {
        return {
            restrict: 'ECA',
            priority: -400,
            link: function(scope, $element) {
                var current = $route.current,
                    locals = current.locals;

                $element.html(locals.$template);

                var link = $compile($element.contents());

                if (current.controller) {
                    locals.$scope = scope;
                    var controller = $controller(current.controller, locals);
                    if (current.controllerAs) {
                        scope[current.controllerAs] = controller;
                    }
                    $element.data('$ngControllerController', controller);
                    $element.children().data('$ngControllerController', controller);
                }
                scope[current.resolveAs || '$resolve'] = locals;

                link(scope);
            }
        };
    }


})(window, window.angular);

/**
 * @license AngularJS v1.5.0
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {
    'use strict';

    var $resourceMinErr = angular.$$minErr('$resource');

    // Helper functions and regex to lookup a dotted path on an object
    // stopping at undefined/null.  The path must be composed of ASCII
    // identifiers (just like $parse)
    var MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;

    function isValidDottedPath(path) {
        return (path != null && path !== '' && path !== 'hasOwnProperty' &&
            MEMBER_NAME_REGEX.test('.' + path));
    }

    function lookupDottedPath(obj, path) {
        if (!isValidDottedPath(path)) {
            throw $resourceMinErr('badmember', 'Dotted member path "@{0}" is invalid.', path);
        }
        var keys = path.split('.');
        for (var i = 0, ii = keys.length; i < ii && angular.isDefined(obj); i++) {
            var key = keys[i];
            obj = (obj !== null) ? obj[key] : undefined;
        }
        return obj;
    }

    /**
     * Create a shallow copy of an object and clear other fields from the destination
     */
    function shallowClearAndCopy(src, dst) {
        dst = dst || {};

        angular.forEach(dst, function(value, key) {
            delete dst[key];
        });

        for (var key in src) {
            if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
                dst[key] = src[key];
            }
        }

        return dst;
    }

    /**
     * @ngdoc module
     * @name ngResource
     * @description
     *
     * # ngResource
     *
     * The `ngResource` module provides interaction support with RESTful services
     * via the $resource service.
     *
     *
     * <div doc-module-components="ngResource"></div>
     *
     * See {@link ngResource.$resource `$resource`} for usage.
     */

    /**
     * @ngdoc service
     * @name $resource
     * @requires $http
     * @requires ng.$log
     * @requires $q
     * @requires ng.$timeout
     *
     * @description
     * A factory which creates a resource object that lets you interact with
     * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.
     *
     * The returned resource object has action methods which provide high-level behaviors without
     * the need to interact with the low level {@link ng.$http $http} service.
     *
     * Requires the {@link ngResource `ngResource`} module to be installed.
     *
     * By default, trailing slashes will be stripped from the calculated URLs,
     * which can pose problems with server backends that do not expect that
     * behavior.  This can be disabled by configuring the `$resourceProvider` like
     * this:
     *
     * ```js
         app.config(['$resourceProvider', function($resourceProvider) {
           // Don't strip trailing slashes from calculated URLs
           $resourceProvider.defaults.stripTrailingSlashes = false;
         }]);
     * ```
     *
     * @param {string} url A parameterized URL template with parameters prefixed by `:` as in
     *   `/user/:username`. If you are using a URL with a port number (e.g.
     *   `http://example.com:8080/api`), it will be respected.
     *
     *   If you are using a url with a suffix, just add the suffix, like this:
     *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`
     *   or even `$resource('http://example.com/resource/:resource_id.:format')`
     *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be
     *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you
     *   can escape it with `/\.`.
     *
     * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in
     *   `actions` methods. If a parameter value is a function, it will be executed every time
     *   when a param value needs to be obtained for a request (unless the param was overridden).
     *
     *   Each key value in the parameter object is first bound to url template if present and then any
     *   excess keys are appended to the url search query after the `?`.
     *
     *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in
     *   URL `/path/greet?salutation=Hello`.
     *
     *   If the parameter value is prefixed with `@` then the value for that parameter will be extracted
     *   from the corresponding property on the `data` object (provided when calling an action method).
     *   For example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of
     *   `someParam` will be `data.someProp`.
     *
     * @param {Object.<Object>=} actions Hash with declaration of custom actions that should extend
     *   the default set of resource actions. The declaration should be created in the format of {@link
     *   ng.$http#usage $http.config}:
     *
     *       {action1: {method:?, params:?, isArray:?, headers:?, ...},
     *        action2: {method:?, params:?, isArray:?, headers:?, ...},
     *        ...}
     *
     *   Where:
     *
     *   - **`action`** – {string} – The name of action. This name becomes the name of the method on
     *     your resource object.
     *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,
     *     `DELETE`, `JSONP`, etc).
     *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of
     *     the parameter value is a function, it will be executed every time when a param value needs to
     *     be obtained for a request (unless the param was overridden).
     *   - **`url`** – {string} – action specific `url` override. The url templating is supported just
     *     like for the resource-level urls.
     *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,
     *     see `returns` section.
     *   - **`transformRequest`** –
     *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *     transform function or an array of such functions. The transform function takes the http
     *     request body and headers and returns its transformed (typically serialized) version.
     *     By default, transformRequest will contain one function that checks if the request data is
     *     an object and serializes to using `angular.toJson`. To prevent this behavior, set
     *     `transformRequest` to an empty array: `transformRequest: []`
     *   - **`transformResponse`** –
     *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *     transform function or an array of such functions. The transform function takes the http
     *     response body and headers and returns its transformed (typically deserialized) version.
     *     By default, transformResponse will contain one function that checks if the response looks
     *     like a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior,
     *     set `transformResponse` to an empty array: `transformResponse: []`
     *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
     *     GET request, otherwise if a cache instance built with
     *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *     caching.
     *   - **`timeout`** – `{number}` – timeout in milliseconds.<br />
     *     **Note:** In contrast to {@link ng.$http#usage $http.config}, {@link ng.$q promises} are
     *     **not** supported in $resource, because the same value would be used for multiple requests.
     *     If you are looking for a way to cancel requests, you should use the `cancellable` option.
     *   - **`cancellable`** – `{boolean}` – if set to true, the request made by a "non-instance" call
     *     will be cancelled (if not already completed) by calling `$cancelRequest()` on the call's
     *     return value. Calling `$cancelRequest()` for a non-cancellable or an already
     *     completed/cancelled request will have no effect.<br />
     *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the
     *     XHR object. See
     *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)
     *     for more information.
     *   - **`responseType`** - `{string}` - see
     *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
     *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -
     *     `response` and `responseError`. Both `response` and `responseError` interceptors get called
     *     with `http response` object. See {@link ng.$http $http interceptors}.
     *
     * @param {Object} options Hash with custom settings that should extend the
     *   default `$resourceProvider` behavior.  The supported options are:
     *
     *   - **`stripTrailingSlashes`** – {boolean} – If true then the trailing
     *   slashes from any calculated URL will be stripped. (Defaults to true.)
     *   - **`cancellable`** – {boolean} – If true, the request made by a "non-instance" call will be
     *   cancelled (if not already completed) by calling `$cancelRequest()` on the call's return value.
     *   This can be overwritten per action. (Defaults to false.)
     *
     * @returns {Object} A resource "class" object with methods for the default set of resource actions
     *   optionally extended with custom `actions`. The default set contains these actions:
     *   ```js
     *   { 'get':    {method:'GET'},
     *     'save':   {method:'POST'},
     *     'query':  {method:'GET', isArray:true},
     *     'remove': {method:'DELETE'},
     *     'delete': {method:'DELETE'} };
     *   ```
     *
     *   Calling these methods invoke an {@link ng.$http} with the specified http method,
     *   destination and parameters. When the data is returned from the server then the object is an
     *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it
     *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,
     *   read, update, delete) on server-side data like this:
     *   ```js
     *   var User = $resource('/user/:userId', {userId:'@id'});
     *   var user = User.get({userId:123}, function() {
     *     user.abc = true;
     *     user.$save();
     *   });
     *   ```
     *
     *   It is important to realize that invoking a $resource object method immediately returns an
     *   empty reference (object or array depending on `isArray`). Once the data is returned from the
     *   server the existing reference is populated with the actual data. This is a useful trick since
     *   usually the resource is assigned to a model which is then rendered by the view. Having an empty
     *   object results in no rendering, once the data arrives from the server then the object is
     *   populated with the data and the view automatically re-renders itself showing the new data. This
     *   means that in most cases one never has to write a callback function for the action methods.
     *
     *   The action methods on the class object or instance object can be invoked with the following
     *   parameters:
     *
     *   - HTTP GET "class" actions: `Resource.action([parameters], [success], [error])`
     *   - non-GET "class" actions: `Resource.action([parameters], postData, [success], [error])`
     *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`
     *
     *
     *   Success callback is called with (value, responseHeaders) arguments, where the value is
     *   the populated resource instance or collection object. The error callback is called
     *   with (httpResponse) argument.
     *
     *   Class actions return empty instance (with additional properties below).
     *   Instance actions return promise of the action.
     *
     *   The Resource instances and collections have these additional properties:
     *
     *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this
     *     instance or collection.
     *
     *     On success, the promise is resolved with the same resource instance or collection object,
     *     updated with data from server. This makes it easy to use in
     *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view
     *     rendering until the resource(s) are loaded.
     *
     *     On failure, the promise is rejected with the {@link ng.$http http response} object, without
     *     the `resource` property.
     *
     *     If an interceptor object was provided, the promise will instead be resolved with the value
     *     returned by the interceptor.
     *
     *   - `$resolved`: `true` after first server interaction is completed (either with success or
     *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in
     *      data-binding.
     *
     *   The Resource instances and collections have these additional methods:
     *
     *   - `$cancelRequest`: If there is a cancellable, pending request related to the instance or
     *      collection, calling this method will abort the request.
     *
     * @example
     *
     * # Credit card resource
     *
     * ```js
         // Define CreditCard class
         var CreditCard = $resource('/user/:userId/card/:cardId',
          {userId:123, cardId:'@id'}, {
           charge: {method:'POST', params:{charge:true}}
          });

         // We can retrieve a collection from the server
         var cards = CreditCard.query(function() {
           // GET: /user/123/card
           // server returns: [ {id:456, number:'1234', name:'Smith'} ];

           var card = cards[0];
           // each item is an instance of CreditCard
           expect(card instanceof CreditCard).toEqual(true);
           card.name = "J. Smith";
           // non GET methods are mapped onto the instances
           card.$save();
           // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}
           // server returns: {id:456, number:'1234', name: 'J. Smith'};

           // our custom method is mapped as well.
           card.$charge({amount:9.99});
           // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}
         });

         // we can create an instance as well
         var newCard = new CreditCard({number:'0123'});
         newCard.name = "Mike Smith";
         newCard.$save();
         // POST: /user/123/card {number:'0123', name:'Mike Smith'}
         // server returns: {id:789, number:'0123', name: 'Mike Smith'};
         expect(newCard.id).toEqual(789);
     * ```
     *
     * The object returned from this function execution is a resource "class" which has "static" method
     * for each action in the definition.
     *
     * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and
     * `headers`.
     *
     * @example
     *
     * # User resource
     *
     * When the data is returned from the server then the object is an instance of the resource type and
     * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD
     * operations (create, read, update, delete) on server-side data.

       ```js
         var User = $resource('/user/:userId', {userId:'@id'});
         User.get({userId:123}, function(user) {
           user.abc = true;
           user.$save();
         });
       ```
     *
     * It's worth noting that the success callback for `get`, `query` and other methods gets passed
     * in the response that came from the server as well as $http header getter function, so one
     * could rewrite the above example and get access to http headers as:
     *
       ```js
         var User = $resource('/user/:userId', {userId:'@id'});
         User.get({userId:123}, function(user, getResponseHeaders){
           user.abc = true;
           user.$save(function(user, putResponseHeaders) {
             //user => saved user object
             //putResponseHeaders => $http header getter
           });
         });
       ```
     *
     * You can also access the raw `$http` promise via the `$promise` property on the object returned
     *
       ```
         var User = $resource('/user/:userId', {userId:'@id'});
         User.get({userId:123})
             .$promise.then(function(user) {
               $scope.user = user;
             });
       ```
     *
     * @example
     *
     * # Creating a custom 'PUT' request
     *
     * In this example we create a custom method on our resource to make a PUT request
     * ```js
     *    var app = angular.module('app', ['ngResource', 'ngRoute']);
     *
     *    // Some APIs expect a PUT request in the format URL/object/ID
     *    // Here we are creating an 'update' method
     *    app.factory('Notes', ['$resource', function($resource) {
     *    return $resource('/notes/:id', null,
     *        {
     *            'update': { method:'PUT' }
     *        });
     *    }]);
     *
     *    // In our controller we get the ID from the URL using ngRoute and $routeParams
     *    // We pass in $routeParams and our Notes factory along with $scope
     *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',
                                          function($scope, $routeParams, Notes) {
     *    // First get a note object from the factory
     *    var note = Notes.get({ id:$routeParams.id });
     *    $id = note.id;
     *
     *    // Now call update passing in the ID first then the object you are updating
     *    Notes.update({ id:$id }, note);
     *
     *    // This will PUT /notes/ID with the note object in the request payload
     *    }]);
     * ```
     *
     * @example
     *
     * # Cancelling requests
     *
     * If an action's configuration specifies that it is cancellable, you can cancel the request related
     * to an instance or collection (as long as it is a result of a "non-instance" call):
     *
       ```js
         // ...defining the `Hotel` resource...
         var Hotel = $resource('/api/hotel/:id', {id: '@id'}, {
           // Let's make the `query()` method cancellable
           query: {method: 'get', isArray: true, cancellable: true}
         });

         // ...somewhere in the PlanVacationController...
         ...
         this.onDestinationChanged = function onDestinationChanged(destination) {
           // We don't care about any pending request for hotels
           // in a different destination any more
           this.availableHotels.$cancelRequest();

           // Let's query for hotels in '<destination>'
           // (calls: /api/hotel?location=<destination>)
           this.availableHotels = Hotel.query({location: destination});
         };
       ```
     *
     */
    angular.module('ngResource', ['ng']).
    provider('$resource', function() {
        var PROTOCOL_AND_DOMAIN_REGEX = /^https?:\/\/[^\/]*/;
        var provider = this;

        this.defaults = {
            // Strip slashes by default
            stripTrailingSlashes: true,

            // Default actions configuration
            actions: {
                'get': {
                    method: 'GET'
                },
                'save': {
                    method: 'POST'
                },
                'query': {
                    method: 'GET',
                    isArray: true
                },
                'remove': {
                    method: 'DELETE'
                },
                'delete': {
                    method: 'DELETE'
                }
            }
        };

        this.$get = ['$http', '$log', '$q', '$timeout', function($http, $log, $q, $timeout) {

            var noop = angular.noop,
                forEach = angular.forEach,
                extend = angular.extend,
                copy = angular.copy,
                isFunction = angular.isFunction;

            /**
             * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
             * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set
             * (pchar) allowed in path segments:
             *    segment       = *pchar
             *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
             *    pct-encoded   = "%" HEXDIG HEXDIG
             *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
             *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
             *                     / "*" / "+" / "," / ";" / "="
             */
            function encodeUriSegment(val) {
                return encodeUriQuery(val, true).
                replace(/%26/gi, '&').
                replace(/%3D/gi, '=').
                replace(/%2B/gi, '+');
            }


            /**
             * This method is intended for encoding *key* or *value* parts of query component. We need a
             * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't
             * have to be encoded per http://tools.ietf.org/html/rfc3986:
             *    query       = *( pchar / "/" / "?" )
             *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
             *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
             *    pct-encoded   = "%" HEXDIG HEXDIG
             *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
             *                     / "*" / "+" / "," / ";" / "="
             */
            function encodeUriQuery(val, pctEncodeSpaces) {
                return encodeURIComponent(val).
                replace(/%40/gi, '@').
                replace(/%3A/gi, ':').
                replace(/%24/g, '$').
                replace(/%2C/gi, ',').
                replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
            }

            function Route(template, defaults) {
                this.template = template;
                this.defaults = extend({}, provider.defaults, defaults);
                this.urlParams = {};
            }

            Route.prototype = {
                setUrlParams: function(config, params, actionUrl) {
                    var self = this,
                        url = actionUrl || self.template,
                        val,
                        encodedVal,
                        protocolAndDomain = '';

                    var urlParams = self.urlParams = {};
                    forEach(url.split(/\W/), function(param) {
                        if (param === 'hasOwnProperty') {
                            throw $resourceMinErr('badname', "hasOwnProperty is not a valid parameter name.");
                        }
                        if (!(new RegExp("^\\d+$").test(param)) && param &&
                            (new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url))) {
                            urlParams[param] = {
                                isQueryParamValue: (new RegExp("\\?.*=:" + param + "(?:\\W|$)")).test(url)
                            };
                        }
                    });
                    url = url.replace(/\\:/g, ':');
                    url = url.replace(PROTOCOL_AND_DOMAIN_REGEX, function(match) {
                        protocolAndDomain = match;
                        return '';
                    });

                    params = params || {};
                    forEach(self.urlParams, function(paramInfo, urlParam) {
                        val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
                        if (angular.isDefined(val) && val !== null) {
                            if (paramInfo.isQueryParamValue) {
                                encodedVal = encodeUriQuery(val, true);
                            } else {
                                encodedVal = encodeUriSegment(val);
                            }
                            url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function(match, p1) {
                                return encodedVal + p1;
                            });
                        } else {
                            url = url.replace(new RegExp("(\/?):" + urlParam + "(\\W|$)", "g"), function(match,
                                leadingSlashes, tail) {
                                if (tail.charAt(0) == '/') {
                                    return tail;
                                } else {
                                    return leadingSlashes + tail;
                                }
                            });
                        }
                    });

                    // strip trailing slashes and set the url (unless this behavior is specifically disabled)
                    if (self.defaults.stripTrailingSlashes) {
                        url = url.replace(/\/+$/, '') || '/';
                    }

                    // then replace collapse `/.` if found in the last URL path segment before the query
                    // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`
                    url = url.replace(/\/\.(?=\w+($|\?))/, '.');
                    // replace escaped `/\.` with `/.`
                    config.url = protocolAndDomain + url.replace(/\/\\\./, '/.');


                    // set params - delegate param encoding to $http
                    forEach(params, function(value, key) {
                        if (!self.urlParams[key]) {
                            config.params = config.params || {};
                            config.params[key] = value;
                        }
                    });
                }
            };


            function resourceFactory(url, paramDefaults, actions, options) {
                var route = new Route(url, options);

                actions = extend({}, provider.defaults.actions, actions);

                function extractParams(data, actionParams) {
                    var ids = {};
                    actionParams = extend({}, paramDefaults, actionParams);
                    forEach(actionParams, function(value, key) {
                        if (isFunction(value)) {
                            value = value();
                        }
                        ids[key] = value && value.charAt && value.charAt(0) == '@' ?
                            lookupDottedPath(data, value.substr(1)) : value;
                    });
                    return ids;
                }

                function defaultResponseInterceptor(response) {
                    return response.resource;
                }

                function Resource(value) {
                    shallowClearAndCopy(value || {}, this);
                }

                Resource.prototype.toJSON = function() {
                    var data = extend({}, this);
                    delete data.$promise;
                    delete data.$resolved;
                    return data;
                };

                forEach(actions, function(action, name) {
                    var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);
                    var numericTimeout = action.timeout;
                    var cancellable = angular.isDefined(action.cancellable) ? action.cancellable :
                        (options && angular.isDefined(options.cancellable)) ? options.cancellable :
                        provider.defaults.cancellable;

                    if (numericTimeout && !angular.isNumber(numericTimeout)) {
                        $log.debug('ngResource:\n' +
                            '  Only numeric values are allowed as `timeout`.\n' +
                            '  Promises are not supported in $resource, because the same value would ' +
                            'be used for multiple requests. If you are looking for a way to cancel ' +
                            'requests, you should use the `cancellable` option.');
                        delete action.timeout;
                        numericTimeout = null;
                    }

                    Resource[name] = function(a1, a2, a3, a4) {
                        var params = {},
                            data, success, error;

                        /* jshint -W086 */
                        /* (purposefully fall through case statements) */
                        switch (arguments.length) {
                            case 4:
                                error = a4;
                                success = a3;
                                //fallthrough
                            case 3:
                            case 2:
                                if (isFunction(a2)) {
                                    if (isFunction(a1)) {
                                        success = a1;
                                        error = a2;
                                        break;
                                    }

                                    success = a2;
                                    error = a3;
                                    //fallthrough
                                } else {
                                    params = a1;
                                    data = a2;
                                    success = a3;
                                    break;
                                }
                            case 1:
                                if (isFunction(a1)) success = a1;
                                else if (hasBody) data = a1;
                                else params = a1;
                                break;
                            case 0:
                                break;
                            default:
                                throw $resourceMinErr('badargs',
                                    "Expected up to 4 arguments [params, data, success, error], got {0} arguments",
                                    arguments.length);
                        }
                        /* jshint +W086 */
                        /* (purposefully fall through case statements) */

                        var isInstanceCall = this instanceof Resource;
                        var value = isInstanceCall ? data : (action.isArray ? [] : new Resource(data));
                        var httpConfig = {};
                        var responseInterceptor = action.interceptor && action.interceptor.response ||
                            defaultResponseInterceptor;
                        var responseErrorInterceptor = action.interceptor && action.interceptor.responseError ||
                            undefined;
                        var timeoutDeferred;
                        var numericTimeoutPromise;

                        forEach(action, function(value, key) {
                            switch (key) {
                                default: httpConfig[key] = copy(value);
                                break;
                                case 'params':
                                        case 'isArray':
                                        case 'interceptor':
                                        case 'cancellable':
                                        break;
                            }
                        });

                        if (!isInstanceCall && cancellable) {
                            timeoutDeferred = $q.defer();
                            httpConfig.timeout = timeoutDeferred.promise;

                            if (numericTimeout) {
                                numericTimeoutPromise = $timeout(timeoutDeferred.resolve, numericTimeout);
                            }
                        }

                        if (hasBody) httpConfig.data = data;
                        route.setUrlParams(httpConfig,
                            extend({}, extractParams(data, action.params || {}), params),
                            action.url);

                        var promise = $http(httpConfig).then(function(response) {
                            var data = response.data;

                            if (data) {
                                // Need to convert action.isArray to boolean in case it is undefined
                                // jshint -W018
                                if (angular.isArray(data) !== (!!action.isArray)) {
                                    throw $resourceMinErr('badcfg',
                                        'Error in resource configuration for action `{0}`. Expected response to ' +
                                        'contain an {1} but got an {2} (Request: {3} {4})', name, action.isArray ? 'array' : 'object',
                                        angular.isArray(data) ? 'array' : 'object', httpConfig.method, httpConfig.url);
                                }
                                // jshint +W018
                                if (action.isArray) {
                                    value.length = 0;
                                    forEach(data, function(item) {
                                        if (typeof item === "object") {
                                            value.push(new Resource(item));
                                        } else {
                                            // Valid JSON values may be string literals, and these should not be converted
                                            // into objects. These items will not have access to the Resource prototype
                                            // methods, but unfortunately there
                                            value.push(item);
                                        }
                                    });
                                } else {
                                    var promise = value.$promise; // Save the promise
                                    shallowClearAndCopy(data, value);
                                    value.$promise = promise; // Restore the promise
                                }
                            }
                            response.resource = value;

                            return response;
                        }, function(response) {
                            (error || noop)(response);
                            return $q.reject(response);
                        });

                        promise.finally(function() {
                            value.$resolved = true;
                            if (!isInstanceCall && cancellable) {
                                value.$cancelRequest = angular.noop;
                                $timeout.cancel(numericTimeoutPromise);
                                timeoutDeferred = numericTimeoutPromise = httpConfig.timeout = null;
                            }
                        });

                        promise = promise.then(
                            function(response) {
                                var value = responseInterceptor(response);
                                (success || noop)(value, response.headers);
                                return value;
                            },
                            responseErrorInterceptor);

                        if (!isInstanceCall) {
                            // we are creating instance / collection
                            // - set the initial promise
                            // - return the instance / collection
                            value.$promise = promise;
                            value.$resolved = false;
                            if (cancellable) value.$cancelRequest = timeoutDeferred.resolve;

                            return value;
                        }

                        // instance call
                        return promise;
                    };


                    Resource.prototype['$' + name] = function(params, success, error) {
                        if (isFunction(params)) {
                            error = success;
                            success = params;
                            params = {};
                        }
                        var result = Resource[name].call(this, params, this, success, error);
                        return result.$promise || result;
                    };
                });

                Resource.bind = function(additionalParamDefaults) {
                    return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);
                };

                return Resource;
            }

            return resourceFactory;
        }];
    });


})(window, window.angular);

/**
 * @license AngularJS v1.4.8
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {
    'use strict';

    /* jshint ignore:start */
    var noop = angular.noop;
    var extend = angular.extend;
    var jqLite = angular.element;
    var forEach = angular.forEach;
    var isArray = angular.isArray;
    var isString = angular.isString;
    var isObject = angular.isObject;
    var isUndefined = angular.isUndefined;
    var isDefined = angular.isDefined;
    var isFunction = angular.isFunction;
    var isElement = angular.isElement;

    var ELEMENT_NODE = 1;
    var COMMENT_NODE = 8;

    var ADD_CLASS_SUFFIX = '-add';
    var REMOVE_CLASS_SUFFIX = '-remove';
    var EVENT_CLASS_PREFIX = 'ng-';
    var ACTIVE_CLASS_SUFFIX = '-active';

    var NG_ANIMATE_CLASSNAME = 'ng-animate';
    var NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';

    // Detect proper transitionend/animationend event names.
    var CSS_PREFIX = '',
        TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

    // If unprefixed events are not supported but webkit-prefixed are, use the latter.
    // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
    // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
    // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
    // Register both events in case `window.onanimationend` is not supported because of that,
    // do the same for `transitionend` as Safari is likely to exhibit similar behavior.
    // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
    // therefore there is no reason to test anymore for other vendor prefixes:
    // http://caniuse.com/#search=transition
    if (isUndefined(window.ontransitionend) && isDefined(window.onwebkittransitionend)) {
        CSS_PREFIX = '-webkit-';
        TRANSITION_PROP = 'WebkitTransition';
        TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
    } else {
        TRANSITION_PROP = 'transition';
        TRANSITIONEND_EVENT = 'transitionend';
    }

    if (isUndefined(window.onanimationend) && isDefined(window.onwebkitanimationend)) {
        CSS_PREFIX = '-webkit-';
        ANIMATION_PROP = 'WebkitAnimation';
        ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
    } else {
        ANIMATION_PROP = 'animation';
        ANIMATIONEND_EVENT = 'animationend';
    }

    var DURATION_KEY = 'Duration';
    var PROPERTY_KEY = 'Property';
    var DELAY_KEY = 'Delay';
    var TIMING_KEY = 'TimingFunction';
    var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
    var ANIMATION_PLAYSTATE_KEY = 'PlayState';
    var SAFE_FAST_FORWARD_DURATION_VALUE = 9999;

    var ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;
    var ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;
    var TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;
    var TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;

    var isPromiseLike = function(p) {
        return p && p.then ? true : false;
    };

    function assertArg(arg, name, reason) {
        if (!arg) {
            throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
        }
        return arg;
    }

    function mergeClasses(a, b) {
        if (!a && !b) return '';
        if (!a) return b;
        if (!b) return a;
        if (isArray(a)) a = a.join(' ');
        if (isArray(b)) b = b.join(' ');
        return a + ' ' + b;
    }

    function packageStyles(options) {
        var styles = {};
        if (options && (options.to || options.from)) {
            styles.to = options.to;
            styles.from = options.from;
        }
        return styles;
    }

    function pendClasses(classes, fix, isPrefix) {
        var className = '';
        classes = isArray(classes) ? classes : classes && isString(classes) && classes.length ? classes.split(/\s+/) : [];
        forEach(classes, function(klass, i) {
            if (klass && klass.length > 0) {
                className += (i > 0) ? ' ' : '';
                className += isPrefix ? fix + klass : klass + fix;
            }
        });
        return className;
    }

    function removeFromArray(arr, val) {
        var index = arr.indexOf(val);
        if (val >= 0) {
            arr.splice(index, 1);
        }
    }

    function stripCommentsFromElement(element) {
        if (element instanceof jqLite) {
            switch (element.length) {
                case 0:
                    return [];
                    break;

                case 1:
                    // there is no point of stripping anything if the element
                    // is the only element within the jqLite wrapper.
                    // (it's important that we retain the element instance.)
                    if (element[0].nodeType === ELEMENT_NODE) {
                        return element;
                    }
                    break;

                default:
                    return jqLite(extractElementNode(element));
                    break;
            }
        }

        if (element.nodeType === ELEMENT_NODE) {
            return jqLite(element);
        }
    }

    function extractElementNode(element) {
        if (!element[0]) return element;
        for (var i = 0; i < element.length; i++) {
            var elm = element[i];
            if (elm.nodeType == ELEMENT_NODE) {
                return elm;
            }
        }
    }

    function $$addClass($$jqLite, element, className) {
        forEach(element, function(elm) {
            $$jqLite.addClass(elm, className);
        });
    }

    function $$removeClass($$jqLite, element, className) {
        forEach(element, function(elm) {
            $$jqLite.removeClass(elm, className);
        });
    }

    function applyAnimationClassesFactory($$jqLite) {
        return function(element, options) {
            if (options.addClass) {
                $$addClass($$jqLite, element, options.addClass);
                options.addClass = null;
            }
            if (options.removeClass) {
                $$removeClass($$jqLite, element, options.removeClass);
                options.removeClass = null;
            }
        }
    }

    function prepareAnimationOptions(options) {
        options = options || {};
        if (!options.$$prepared) {
            var domOperation = options.domOperation || noop;
            options.domOperation = function() {
                options.$$domOperationFired = true;
                domOperation();
                domOperation = noop;
            };
            options.$$prepared = true;
        }
        return options;
    }

    function applyAnimationStyles(element, options) {
        applyAnimationFromStyles(element, options);
        applyAnimationToStyles(element, options);
    }

    function applyAnimationFromStyles(element, options) {
        if (options.from) {
            element.css(options.from);
            options.from = null;
        }
    }

    function applyAnimationToStyles(element, options) {
        if (options.to) {
            element.css(options.to);
            options.to = null;
        }
    }

    function mergeAnimationOptions(element, target, newOptions) {
        var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');
        var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');
        var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);

        if (newOptions.preparationClasses) {
            target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);
            delete newOptions.preparationClasses;
        }

        // noop is basically when there is no callback; otherwise something has been set
        var realDomOperation = target.domOperation !== noop ? target.domOperation : null;

        extend(target, newOptions);

        // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.
        if (realDomOperation) {
            target.domOperation = realDomOperation;
        }

        if (classes.addClass) {
            target.addClass = classes.addClass;
        } else {
            target.addClass = null;
        }

        if (classes.removeClass) {
            target.removeClass = classes.removeClass;
        } else {
            target.removeClass = null;
        }

        return target;
    }

    function resolveElementClasses(existing, toAdd, toRemove) {
        var ADD_CLASS = 1;
        var REMOVE_CLASS = -1;

        var flags = {};
        existing = splitClassesToLookup(existing);

        toAdd = splitClassesToLookup(toAdd);
        forEach(toAdd, function(value, key) {
            flags[key] = ADD_CLASS;
        });

        toRemove = splitClassesToLookup(toRemove);
        forEach(toRemove, function(value, key) {
            flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;
        });

        var classes = {
            addClass: '',
            removeClass: ''
        };

        forEach(flags, function(val, klass) {
            var prop, allow;
            if (val === ADD_CLASS) {
                prop = 'addClass';
                allow = !existing[klass];
            } else if (val === REMOVE_CLASS) {
                prop = 'removeClass';
                allow = existing[klass];
            }
            if (allow) {
                if (classes[prop].length) {
                    classes[prop] += ' ';
                }
                classes[prop] += klass;
            }
        });

        function splitClassesToLookup(classes) {
            if (isString(classes)) {
                classes = classes.split(' ');
            }

            var obj = {};
            forEach(classes, function(klass) {
                // sometimes the split leaves empty string values
                // incase extra spaces were applied to the options
                if (klass.length) {
                    obj[klass] = true;
                }
            });
            return obj;
        }

        return classes;
    }

    function getDomNode(element) {
        return (element instanceof angular.element) ? element[0] : element;
    }

    function applyGeneratedPreparationClasses(element, event, options) {
        var classes = '';
        if (event) {
            classes = pendClasses(event, EVENT_CLASS_PREFIX, true);
        }
        if (options.addClass) {
            classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));
        }
        if (options.removeClass) {
            classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));
        }
        if (classes.length) {
            options.preparationClasses = classes;
            element.addClass(classes);
        }
    }

    function clearGeneratedClasses(element, options) {
        if (options.preparationClasses) {
            element.removeClass(options.preparationClasses);
            options.preparationClasses = null;
        }
        if (options.activeClasses) {
            element.removeClass(options.activeClasses);
            options.activeClasses = null;
        }
    }

    function blockTransitions(node, duration) {
        // we use a negative delay value since it performs blocking
        // yet it doesn't kill any existing transitions running on the
        // same element which makes this safe for class-based animations
        var value = duration ? '-' + duration + 's' : '';
        applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);
        return [TRANSITION_DELAY_PROP, value];
    }

    function blockKeyframeAnimations(node, applyBlock) {
        var value = applyBlock ? 'paused' : '';
        var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;
        applyInlineStyle(node, [key, value]);
        return [key, value];
    }

    function applyInlineStyle(node, styleTuple) {
        var prop = styleTuple[0];
        var value = styleTuple[1];
        node.style[prop] = value;
    }

    function concatWithSpace(a, b) {
        if (!a) return b;
        if (!b) return a;
        return a + ' ' + b;
    }

    var $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {
        var queue, cancelFn;

        function scheduler(tasks) {
            // we make a copy since RAFScheduler mutates the state
            // of the passed in array variable and this would be difficult
            // to track down on the outside code
            queue = queue.concat(tasks);
            nextTick();
        }

        queue = scheduler.queue = [];

        /* waitUntilQuiet does two things:
         * 1. It will run the FINAL `fn` value only when an uncancelled RAF has passed through
         * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.
         *
         * The motivation here is that animation code can request more time from the scheduler
         * before the next wave runs. This allows for certain DOM properties such as classes to
         * be resolved in time for the next animation to run.
         */
        scheduler.waitUntilQuiet = function(fn) {
            if (cancelFn) cancelFn();

            cancelFn = $$rAF(function() {
                cancelFn = null;
                fn();
                nextTick();
            });
        };

        return scheduler;

        function nextTick() {
            if (!queue.length) return;

            var items = queue.shift();
            for (var i = 0; i < items.length; i++) {
                items[i]();
            }

            if (!cancelFn) {
                $$rAF(function() {
                    if (!cancelFn) nextTick();
                });
            }
        }
    }];

    var $$AnimateChildrenDirective = [function() {
        return function(scope, element, attrs) {
            var val = attrs.ngAnimateChildren;
            if (angular.isString(val) && val.length === 0) { //empty attribute
                element.data(NG_ANIMATE_CHILDREN_DATA, true);
            } else {
                attrs.$observe('ngAnimateChildren', function(value) {
                    value = value === 'on' || value === 'true';
                    element.data(NG_ANIMATE_CHILDREN_DATA, value);
                });
            }
        };
    }];

    var ANIMATE_TIMER_KEY = '$$animateCss';

    /**
     * @ngdoc service
     * @name $animateCss
     * @kind object
     *
     * @description
     * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes
     * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT
     * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or
     * directives to create more complex animations that can be purely driven using CSS code.
     *
     * Note that only browsers that support CSS transitions and/or keyframe animations are capable of
     * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).
     *
     * ## Usage
     * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that
     * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,
     * any automatic control over cancelling animations and/or preventing animations from being run on
     * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to
     * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger
     * the CSS animation.
     *
     * The example below shows how we can create a folding animation on an element using `ng-if`:
     *
     * ```html
     * <!-- notice the `fold-animation` CSS class -->
     * <div ng-if="onOff" class="fold-animation">
     *   This element will go BOOM
     * </div>
     * <button ng-click="onOff=true">Fold In</button>
     * ```
     *
     * Now we create the **JavaScript animation** that will trigger the CSS transition:
     *
     * ```js
     * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
     *   return {
     *     enter: function(element, doneFn) {
     *       var height = element[0].offsetHeight;
     *       return $animateCss(element, {
     *         from: { height:'0px' },
     *         to: { height:height + 'px' },
     *         duration: 1 // one second
     *       });
     *     }
     *   }
     * }]);
     * ```
     *
     * ## More Advanced Uses
     *
     * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks
     * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.
     *
     * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,
     * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with
     * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order
     * to provide a working animation that will run in CSS.
     *
     * The example below showcases a more advanced version of the `.fold-animation` from the example above:
     *
     * ```js
     * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {
     *   return {
     *     enter: function(element, doneFn) {
     *       var height = element[0].offsetHeight;
     *       return $animateCss(element, {
     *         addClass: 'red large-text pulse-twice',
     *         easing: 'ease-out',
     *         from: { height:'0px' },
     *         to: { height:height + 'px' },
     *         duration: 1 // one second
     *       });
     *     }
     *   }
     * }]);
     * ```
     *
     * Since we're adding/removing CSS classes then the CSS transition will also pick those up:
     *
     * ```css
     * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,
     * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/
     * .red { background:red; }
     * .large-text { font-size:20px; }
     *
     * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/
     * .pulse-twice {
     *   animation: 0.5s pulse linear 2;
     *   -webkit-animation: 0.5s pulse linear 2;
     * }
     *
     * @keyframes pulse {
     *   from { transform: scale(0.5); }
     *   to { transform: scale(1.5); }
     * }
     *
     * @-webkit-keyframes pulse {
     *   from { -webkit-transform: scale(0.5); }
     *   to { -webkit-transform: scale(1.5); }
     * }
     * ```
     *
     * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.
     *
     * ## How the Options are handled
     *
     * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation
     * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline
     * styles using the `from` and `to` properties.
     *
     * ```js
     * var animator = $animateCss(element, {
     *   from: { background:'red' },
     *   to: { background:'blue' }
     * });
     * animator.start();
     * ```
     *
     * ```css
     * .rotating-animation {
     *   animation:0.5s rotate linear;
     *   -webkit-animation:0.5s rotate linear;
     * }
     *
     * @keyframes rotate {
     *   from { transform: rotate(0deg); }
     *   to { transform: rotate(360deg); }
     * }
     *
     * @-webkit-keyframes rotate {
     *   from { -webkit-transform: rotate(0deg); }
     *   to { -webkit-transform: rotate(360deg); }
     * }
     * ```
     *
     * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is
     * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition
     * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition
     * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied
     * and spread across the transition and keyframe animation.
     *
     * ## What is returned
     *
     * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually
     * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are
     * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:
     *
     * ```js
     * var animator = $animateCss(element, { ... });
     * ```
     *
     * Now what do the contents of our `animator` variable look like:
     *
     * ```js
     * {
     *   // starts the animation
     *   start: Function,
     *
     *   // ends (aborts) the animation
     *   end: Function
     * }
     * ```
     *
     * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.
     * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and stlyes may have been
     * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties
     * and that changing them will not reconfigure the parameters of the animation.
     *
     * ### runner.done() vs runner.then()
     * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the
     * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.
     * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`
     * unless you really need a digest to kick off afterwards.
     *
     * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss
     * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).
     * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.
     *
     * @param {DOMElement} element the element that will be animated
     * @param {object} options the animation-related options that will be applied during the animation
     *
     * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied
     * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)
     * * `structural` - Indicates that the `ng-` prefix will be added to the event class. Setting to `false` or omitting will turn `ng-EVENT` and
     * `ng-EVENT-active` in `EVENT` and `EVENT-active`. Unused if `event` is omitted.
     * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).
     * * `transitionStyle` - The raw CSS transition style that will be used (e.g. `1s linear all`).
     * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).
     * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.
     * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.
     * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.
     * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.
     * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`
     * is provided then the animation will be skipped entirely.
     * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is
     * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value
     * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same
     * CSS delay value.
     * * `stagger` - A numeric time value representing the delay between successively animated elements
     * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})
     * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a
     * * `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)
     * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occuring on the classes being added and removed.)
     * * `cleanupStyles` - Whether or not the provided `from` and `to` styles will be removed once
     *    the animation is closed. This is useful for when the styles are used purely for the sake of
     *    the animation and do not have a lasting visual effect on the element (e.g. a colapse and open animation).
     *    By default this value is set to `false`.
     *
     * @return {object} an object with start and end methods and details about the animation.
     *
     * * `start` - The method to start the animation. This will return a `Promise` when called.
     * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.
     */
    var ONE_SECOND = 1000;
    var BASE_TEN = 10;

    var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
    var CLOSING_TIME_BUFFER = 1.5;

    var DETECT_CSS_PROPERTIES = {
        transitionDuration: TRANSITION_DURATION_PROP,
        transitionDelay: TRANSITION_DELAY_PROP,
        transitionProperty: TRANSITION_PROP + PROPERTY_KEY,
        animationDuration: ANIMATION_DURATION_PROP,
        animationDelay: ANIMATION_DELAY_PROP,
        animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY
    };

    var DETECT_STAGGER_CSS_PROPERTIES = {
        transitionDuration: TRANSITION_DURATION_PROP,
        transitionDelay: TRANSITION_DELAY_PROP,
        animationDuration: ANIMATION_DURATION_PROP,
        animationDelay: ANIMATION_DELAY_PROP
    };

    function getCssKeyframeDurationStyle(duration) {
        return [ANIMATION_DURATION_PROP, duration + 's'];
    }

    function getCssDelayStyle(delay, isKeyframeAnimation) {
        var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;
        return [prop, delay + 's'];
    }

    function computeCssStyles($window, element, properties) {
        var styles = Object.create(null);
        var detectedStyles = $window.getComputedStyle(element) || {};
        forEach(properties, function(formalStyleName, actualStyleName) {
            var val = detectedStyles[formalStyleName];
            if (val) {
                var c = val.charAt(0);

                // only numerical-based values have a negative sign or digit as the first value
                if (c === '-' || c === '+' || c >= 0) {
                    val = parseMaxTime(val);
                }

                // by setting this to null in the event that the delay is not set or is set directly as 0
                // then we can still allow for zegative values to be used later on and not mistake this
                // value for being greater than any other negative value.
                if (val === 0) {
                    val = null;
                }
                styles[actualStyleName] = val;
            }
        });

        return styles;
    }

    function parseMaxTime(str) {
        var maxValue = 0;
        var values = str.split(/\s*,\s*/);
        forEach(values, function(value) {
            // it's always safe to consider only second values and omit `ms` values since
            // getComputedStyle will always handle the conversion for us
            if (value.charAt(value.length - 1) == 's') {
                value = value.substring(0, value.length - 1);
            }
            value = parseFloat(value) || 0;
            maxValue = maxValue ? Math.max(value, maxValue) : value;
        });
        return maxValue;
    }

    function truthyTimingValue(val) {
        return val === 0 || val != null;
    }

    function getCssTransitionDurationStyle(duration, applyOnlyDuration) {
        var style = TRANSITION_PROP;
        var value = duration + 's';
        if (applyOnlyDuration) {
            style += DURATION_KEY;
        } else {
            value += ' linear all';
        }
        return [style, value];
    }

    function createLocalCacheLookup() {
        var cache = Object.create(null);
        return {
            flush: function() {
                cache = Object.create(null);
            },

            count: function(key) {
                var entry = cache[key];
                return entry ? entry.total : 0;
            },

            get: function(key) {
                var entry = cache[key];
                return entry && entry.value;
            },

            put: function(key, value) {
                if (!cache[key]) {
                    cache[key] = {
                        total: 1,
                        value: value
                    };
                } else {
                    cache[key].total++;
                }
            }
        };
    }

    // we do not reassign an already present style value since
    // if we detect the style property value again we may be
    // detecting styles that were added via the `from` styles.
    // We make use of `isDefined` here since an empty string
    // or null value (which is what getPropertyValue will return
    // for a non-existing style) will still be marked as a valid
    // value for the style (a falsy value implies that the style
    // is to be removed at the end of the animation). If we had a simple
    // "OR" statement then it would not be enough to catch that.
    function registerRestorableStyles(backup, node, properties) {
        forEach(properties, function(prop) {
            backup[prop] = isDefined(backup[prop]) ? backup[prop] : node.style.getPropertyValue(prop);
        });
    }

    var $AnimateCssProvider = ['$animateProvider', function($animateProvider) {
        var gcsLookup = createLocalCacheLookup();
        var gcsStaggerLookup = createLocalCacheLookup();

        this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',
            '$$forceReflow', '$sniffer', '$$rAFScheduler', '$animate',
            function($window, $$jqLite, $$AnimateRunner, $timeout,
                $$forceReflow, $sniffer, $$rAFScheduler, $animate) {

                var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

                var parentCounter = 0;

                function gcsHashFn(node, extraClasses) {
                    var KEY = "$$ngAnimateParentKey";
                    var parentNode = node.parentNode;
                    var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);
                    return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;
                }

                function computeCachedCssStyles(node, className, cacheKey, properties) {
                    var timings = gcsLookup.get(cacheKey);

                    if (!timings) {
                        timings = computeCssStyles($window, node, properties);
                        if (timings.animationIterationCount === 'infinite') {
                            timings.animationIterationCount = 1;
                        }
                    }

                    // we keep putting this in multiple times even though the value and the cacheKey are the same
                    // because we're keeping an interal tally of how many duplicate animations are detected.
                    gcsLookup.put(cacheKey, timings);
                    return timings;
                }

                function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {
                    var stagger;

                    // if we have one or more existing matches of matching elements
                    // containing the same parent + CSS styles (which is how cacheKey works)
                    // then staggering is possible
                    if (gcsLookup.count(cacheKey) > 0) {
                        stagger = gcsStaggerLookup.get(cacheKey);

                        if (!stagger) {
                            var staggerClassName = pendClasses(className, '-stagger');

                            $$jqLite.addClass(node, staggerClassName);

                            stagger = computeCssStyles($window, node, properties);

                            // force the conversion of a null value to zero incase not set
                            stagger.animationDuration = Math.max(stagger.animationDuration, 0);
                            stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);

                            $$jqLite.removeClass(node, staggerClassName);

                            gcsStaggerLookup.put(cacheKey, stagger);
                        }
                    }

                    return stagger || {};
                }

                var cancelLastRAFRequest;
                var rafWaitQueue = [];

                function waitUntilQuiet(callback) {
                    rafWaitQueue.push(callback);
                    $$rAFScheduler.waitUntilQuiet(function() {
                        gcsLookup.flush();
                        gcsStaggerLookup.flush();

                        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.
                        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.
                        var pageWidth = $$forceReflow();

                        // we use a for loop to ensure that if the queue is changed
                        // during this looping then it will consider new requests
                        for (var i = 0; i < rafWaitQueue.length; i++) {
                            rafWaitQueue[i](pageWidth);
                        }
                        rafWaitQueue.length = 0;
                    });
                }

                function computeTimings(node, className, cacheKey) {
                    var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);
                    var aD = timings.animationDelay;
                    var tD = timings.transitionDelay;
                    timings.maxDelay = aD && tD ? Math.max(aD, tD) : (aD || tD);
                    timings.maxDuration = Math.max(
                        timings.animationDuration * timings.animationIterationCount,
                        timings.transitionDuration);

                    return timings;
                }

                return function init(element, options) {
                    var restoreStyles = {};
                    var node = getDomNode(element);
                    if (!node || !node.parentNode || !$animate.enabled()) {
                        return closeAndReturnNoopAnimator();
                    }

                    options = prepareAnimationOptions(options);

                    var temporaryStyles = [];
                    var classes = element.attr('class');
                    var styles = packageStyles(options);
                    var animationClosed;
                    var animationPaused;
                    var animationCompleted;
                    var runner;
                    var runnerHost;
                    var maxDelay;
                    var maxDelayTime;
                    var maxDuration;
                    var maxDurationTime;

                    if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {
                        return closeAndReturnNoopAnimator();
                    }

                    var method = options.event && isArray(options.event) ? options.event.join(' ') : options.event;

                    var isStructural = method && options.structural;
                    var structuralClassName = '';
                    var addRemoveClassName = '';

                    if (isStructural) {
                        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);
                    } else if (method) {
                        structuralClassName = method;
                    }

                    if (options.addClass) {
                        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);
                    }

                    if (options.removeClass) {
                        if (addRemoveClassName.length) {
                            addRemoveClassName += ' ';
                        }
                        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);
                    }

                    // there may be a situation where a structural animation is combined together
                    // with CSS classes that need to resolve before the animation is computed.
                    // However this means that there is no explicit CSS code to block the animation
                    // from happening (by setting 0s none in the class name). If this is the case
                    // we need to apply the classes before the first rAF so we know to continue if
                    // there actually is a detected transition or keyframe animation
                    if (options.applyClassesEarly && addRemoveClassName.length) {
                        applyAnimationClasses(element, options);
                    }

                    var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();
                    var fullClassName = classes + ' ' + preparationClasses;
                    var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);
                    var hasToStyles = styles.to && Object.keys(styles.to).length > 0;
                    var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;

                    // there is no way we can trigger an animation if no styles and
                    // no classes are being applied which would then trigger a transition,
                    // unless there a is raw keyframe value that is applied to the element.
                    if (!containsKeyframeAnimation && !hasToStyles && !preparationClasses) {
                        return closeAndReturnNoopAnimator();
                    }

                    var cacheKey, stagger;
                    if (options.stagger > 0) {
                        var staggerVal = parseFloat(options.stagger);
                        stagger = {
                            transitionDelay: staggerVal,
                            animationDelay: staggerVal,
                            transitionDuration: 0,
                            animationDuration: 0
                        };
                    } else {
                        cacheKey = gcsHashFn(node, fullClassName);
                        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);
                    }

                    if (!options.$$skipPreparationClasses) {
                        $$jqLite.addClass(element, preparationClasses);
                    }

                    var applyOnlyDuration;

                    if (options.transitionStyle) {
                        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];
                        applyInlineStyle(node, transitionStyle);
                        temporaryStyles.push(transitionStyle);
                    }

                    if (options.duration >= 0) {
                        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;
                        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);

                        // we set the duration so that it will be picked up by getComputedStyle later
                        applyInlineStyle(node, durationStyle);
                        temporaryStyles.push(durationStyle);
                    }

                    if (options.keyframeStyle) {
                        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];
                        applyInlineStyle(node, keyframeStyle);
                        temporaryStyles.push(keyframeStyle);
                    }

                    var itemIndex = stagger ? options.staggerIndex >= 0 ? options.staggerIndex : gcsLookup.count(cacheKey) : 0;

                    var isFirst = itemIndex === 0;

                    // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY
                    // without causing any combination of transitions to kick in. By adding a negative delay value
                    // it forces the setup class' transition to end immediately. We later then remove the negative
                    // transition delay to allow for the transition to naturally do it's thing. The beauty here is
                    // that if there is no transition defined then nothing will happen and this will also allow
                    // other transitions to be stacked on top of each other without any chopping them out.
                    if (isFirst && !options.skipBlocking) {
                        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);
                    }

                    var timings = computeTimings(node, fullClassName, cacheKey);
                    var relativeDelay = timings.maxDelay;
                    maxDelay = Math.max(relativeDelay, 0);
                    maxDuration = timings.maxDuration;

                    var flags = {};
                    flags.hasTransitions = timings.transitionDuration > 0;
                    flags.hasAnimations = timings.animationDuration > 0;
                    flags.hasTransitionAll = flags.hasTransitions && timings.transitionProperty == 'all';
                    flags.applyTransitionDuration = hasToStyles && (
                        (flags.hasTransitions && !flags.hasTransitionAll) || (flags.hasAnimations && !flags.hasTransitions));
                    flags.applyAnimationDuration = options.duration && flags.hasAnimations;
                    flags.applyTransitionDelay = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);
                    flags.applyAnimationDelay = truthyTimingValue(options.delay) && flags.hasAnimations;
                    flags.recalculateTimingStyles = addRemoveClassName.length > 0;

                    if (flags.applyTransitionDuration || flags.applyAnimationDuration) {
                        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;

                        if (flags.applyTransitionDuration) {
                            flags.hasTransitions = true;
                            timings.transitionDuration = maxDuration;
                            applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;
                            temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));
                        }

                        if (flags.applyAnimationDuration) {
                            flags.hasAnimations = true;
                            timings.animationDuration = maxDuration;
                            temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));
                        }
                    }

                    if (maxDuration === 0 && !flags.recalculateTimingStyles) {
                        return closeAndReturnNoopAnimator();
                    }

                    if (options.delay != null) {
                        var delayStyle = parseFloat(options.delay);

                        if (flags.applyTransitionDelay) {
                            temporaryStyles.push(getCssDelayStyle(delayStyle));
                        }

                        if (flags.applyAnimationDelay) {
                            temporaryStyles.push(getCssDelayStyle(delayStyle, true));
                        }
                    }

                    // we need to recalculate the delay value since we used a pre-emptive negative
                    // delay value and the delay value is required for the final event checking. This
                    // property will ensure that this will happen after the RAF phase has passed.
                    if (options.duration == null && timings.transitionDuration > 0) {
                        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;
                    }

                    maxDelayTime = maxDelay * ONE_SECOND;
                    maxDurationTime = maxDuration * ONE_SECOND;
                    if (!options.skipBlocking) {
                        flags.blockTransition = timings.transitionDuration > 0;
                        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&
                            stagger.animationDelay > 0 &&
                            stagger.animationDuration === 0;
                    }

                    if (options.from) {
                        if (options.cleanupStyles) {
                            registerRestorableStyles(restoreStyles, node, Object.keys(options.from));
                        }
                        applyAnimationFromStyles(element, options);
                    }

                    if (flags.blockTransition || flags.blockKeyframeAnimation) {
                        applyBlocking(maxDuration);
                    } else if (!options.skipBlocking) {
                        blockTransitions(node, false);
                    }

                    // TODO(matsko): for 1.5 change this code to have an animator object for better debugging
                    return {
                        $$willAnimate: true,
                        end: endFn,
                        start: function() {
                            if (animationClosed) return;

                            runnerHost = {
                                end: endFn,
                                cancel: cancelFn,
                                resume: null, //this will be set during the start() phase
                                pause: null
                            };

                            runner = new $$AnimateRunner(runnerHost);

                            waitUntilQuiet(start);

                            // we don't have access to pause/resume the animation
                            // since it hasn't run yet. AnimateRunner will therefore
                            // set noop functions for resume and pause and they will
                            // later be overridden once the animation is triggered
                            return runner;
                        }
                    };

                    function endFn() {
                        close();
                    }

                    function cancelFn() {
                        close(true);
                    }

                    function close(rejected) { // jshint ignore:line
                        // if the promise has been called already then we shouldn't close
                        // the animation again
                        if (animationClosed || (animationCompleted && animationPaused)) return;
                        animationClosed = true;
                        animationPaused = false;

                        if (!options.$$skipPreparationClasses) {
                            $$jqLite.removeClass(element, preparationClasses);
                        }
                        $$jqLite.removeClass(element, activeClasses);

                        blockKeyframeAnimations(node, false);
                        blockTransitions(node, false);

                        forEach(temporaryStyles, function(entry) {
                            // There is only one way to remove inline style properties entirely from elements.
                            // By using `removeProperty` this works, but we need to convert camel-cased CSS
                            // styles down to hyphenated values.
                            node.style[entry[0]] = '';
                        });

                        applyAnimationClasses(element, options);
                        applyAnimationStyles(element, options);

                        if (Object.keys(restoreStyles).length) {
                            forEach(restoreStyles, function(value, prop) {
                                value ? node.style.setProperty(prop, value) : node.style.removeProperty(prop);
                            });
                        }

                        // the reason why we have this option is to allow a synchronous closing callback
                        // that is fired as SOON as the animation ends (when the CSS is removed) or if
                        // the animation never takes off at all. A good example is a leave animation since
                        // the element must be removed just after the animation is over or else the element
                        // will appear on screen for one animation frame causing an overbearing flicker.
                        if (options.onDone) {
                            options.onDone();
                        }

                        // if the preparation function fails then the promise is not setup
                        if (runner) {
                            runner.complete(!rejected);
                        }
                    }

                    function applyBlocking(duration) {
                        if (flags.blockTransition) {
                            blockTransitions(node, duration);
                        }

                        if (flags.blockKeyframeAnimation) {
                            blockKeyframeAnimations(node, !!duration);
                        }
                    }

                    function closeAndReturnNoopAnimator() {
                        runner = new $$AnimateRunner({
                            end: endFn,
                            cancel: cancelFn
                        });

                        // should flush the cache animation
                        waitUntilQuiet(noop);
                        close();

                        return {
                            $$willAnimate: false,
                            start: function() {
                                return runner;
                            },
                            end: endFn
                        };
                    }

                    function start() {
                        if (animationClosed) return;
                        if (!node.parentNode) {
                            close();
                            return;
                        }

                        var startTime, events = [];

                        // even though we only pause keyframe animations here the pause flag
                        // will still happen when transitions are used. Only the transition will
                        // not be paused since that is not possible. If the animation ends when
                        // paused then it will not complete until unpaused or cancelled.
                        var playPause = function(playAnimation) {
                            if (!animationCompleted) {
                                animationPaused = !playAnimation;
                                if (timings.animationDuration) {
                                    var value = blockKeyframeAnimations(node, animationPaused);
                                    animationPaused
                                        ? temporaryStyles.push(value) : removeFromArray(temporaryStyles, value);
                                }
                            } else if (animationPaused && playAnimation) {
                                animationPaused = false;
                                close();
                            }
                        };

                        // checking the stagger duration prevents an accidently cascade of the CSS delay style
                        // being inherited from the parent. If the transition duration is zero then we can safely
                        // rely that the delay value is an intential stagger delay style.
                        var maxStagger = itemIndex > 0 && ((timings.transitionDuration && stagger.transitionDuration === 0) ||
                            (timings.animationDuration && stagger.animationDuration === 0)) && Math.max(stagger.animationDelay, stagger.transitionDelay);
                        if (maxStagger) {
                            $timeout(triggerAnimationStart,
                                Math.floor(maxStagger * itemIndex * ONE_SECOND),
                                false);
                        } else {
                            triggerAnimationStart();
                        }

                        // this will decorate the existing promise runner with pause/resume methods
                        runnerHost.resume = function() {
                            playPause(true);
                        };

                        runnerHost.pause = function() {
                            playPause(false);
                        };

                        function triggerAnimationStart() {
                            // just incase a stagger animation kicks in when the animation
                            // itself was cancelled entirely
                            if (animationClosed) return;

                            applyBlocking(false);

                            forEach(temporaryStyles, function(entry) {
                                var key = entry[0];
                                var value = entry[1];
                                node.style[key] = value;
                            });

                            applyAnimationClasses(element, options);
                            $$jqLite.addClass(element, activeClasses);

                            if (flags.recalculateTimingStyles) {
                                fullClassName = node.className + ' ' + preparationClasses;
                                cacheKey = gcsHashFn(node, fullClassName);

                                timings = computeTimings(node, fullClassName, cacheKey);
                                relativeDelay = timings.maxDelay;
                                maxDelay = Math.max(relativeDelay, 0);
                                maxDuration = timings.maxDuration;

                                if (maxDuration === 0) {
                                    close();
                                    return;
                                }

                                flags.hasTransitions = timings.transitionDuration > 0;
                                flags.hasAnimations = timings.animationDuration > 0;
                            }

                            if (flags.applyAnimationDelay) {
                                relativeDelay = typeof options.delay !== "boolean" && truthyTimingValue(options.delay) ? parseFloat(options.delay) : relativeDelay;

                                maxDelay = Math.max(relativeDelay, 0);
                                timings.animationDelay = relativeDelay;
                                delayStyle = getCssDelayStyle(relativeDelay, true);
                                temporaryStyles.push(delayStyle);
                                node.style[delayStyle[0]] = delayStyle[1];
                            }

                            maxDelayTime = maxDelay * ONE_SECOND;
                            maxDurationTime = maxDuration * ONE_SECOND;

                            if (options.easing) {
                                var easeProp, easeVal = options.easing;
                                if (flags.hasTransitions) {
                                    easeProp = TRANSITION_PROP + TIMING_KEY;
                                    temporaryStyles.push([easeProp, easeVal]);
                                    node.style[easeProp] = easeVal;
                                }
                                if (flags.hasAnimations) {
                                    easeProp = ANIMATION_PROP + TIMING_KEY;
                                    temporaryStyles.push([easeProp, easeVal]);
                                    node.style[easeProp] = easeVal;
                                }
                            }

                            if (timings.transitionDuration) {
                                events.push(TRANSITIONEND_EVENT);
                            }

                            if (timings.animationDuration) {
                                events.push(ANIMATIONEND_EVENT);
                            }

                            startTime = Date.now();
                            var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;
                            var endTime = startTime + timerTime;

                            var animationsData = element.data(ANIMATE_TIMER_KEY) || [];
                            var setupFallbackTimer = true;
                            if (animationsData.length) {
                                var currentTimerData = animationsData[0];
                                setupFallbackTimer = endTime > currentTimerData.expectedEndTime;
                                if (setupFallbackTimer) {
                                    $timeout.cancel(currentTimerData.timer);
                                } else {
                                    animationsData.push(close);
                                }
                            }

                            if (setupFallbackTimer) {
                                var timer = $timeout(onAnimationExpired, timerTime, false);
                                animationsData[0] = {
                                    timer: timer,
                                    expectedEndTime: endTime
                                };
                                animationsData.push(close);
                                element.data(ANIMATE_TIMER_KEY, animationsData);
                            }

                            element.on(events.join(' '), onAnimationProgress);
                            if (options.to) {
                                if (options.cleanupStyles) {
                                    registerRestorableStyles(restoreStyles, node, Object.keys(options.to));
                                }
                                applyAnimationToStyles(element, options);
                            }
                        }

                        function onAnimationExpired() {
                            var animationsData = element.data(ANIMATE_TIMER_KEY);

                            // this will be false in the event that the element was
                            // removed from the DOM (via a leave animation or something
                            // similar)
                            if (animationsData) {
                                for (var i = 1; i < animationsData.length; i++) {
                                    animationsData[i]();
                                }
                                element.removeData(ANIMATE_TIMER_KEY);
                            }
                        }

                        function onAnimationProgress(event) {
                            event.stopPropagation();
                            var ev = event.originalEvent || event;
                            var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();

                            /* Firefox (or possibly just Gecko) likes to not round values up
                             * when a ms measurement is used for the animation */
                            var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

                            /* $manualTimeStamp is a mocked timeStamp value which is set
                             * within browserTrigger(). This is only here so that tests can
                             * mock animations properly. Real events fallback to event.timeStamp,
                             * or, if they don't, then a timeStamp is automatically created for them.
                             * We're checking to see if the timeStamp surpasses the expected delay,
                             * but we're using elapsedTime instead of the timeStamp on the 2nd
                             * pre-condition since animations sometimes close off early */
                            if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
                                // we set this flag to ensure that if the transition is paused then, when resumed,
                                // the animation will automatically close itself since transitions cannot be paused.
                                animationCompleted = true;
                                close();
                            }
                        }
                    }
                };
            }
        ];
    }];

    var $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {
        $$animationProvider.drivers.push('$$animateCssDriver');

        var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';
        var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';

        var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';
        var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';

        function isDocumentFragment(node) {
            return node.parentNode && node.parentNode.nodeType === 11;
        }

        this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$sniffer', '$$jqLite', '$document',
            function($animateCss, $rootScope, $$AnimateRunner, $rootElement, $sniffer, $$jqLite, $document) {

                // only browsers that support these properties can render animations
                if (!$sniffer.animations && !$sniffer.transitions) return noop;

                var bodyNode = $document[0].body;
                var rootNode = getDomNode($rootElement);

                var rootBodyElement = jqLite(
                    // this is to avoid using something that exists outside of the body
                    // we also special case the doc fragement case because our unit test code
                    // appends the $rootElement to the body after the app has been bootstrapped
                    isDocumentFragment(rootNode) || bodyNode.contains(rootNode) ? rootNode : bodyNode
                );

                var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

                return function initDriverFn(animationDetails) {
                    return animationDetails.from && animationDetails.to ? prepareFromToAnchorAnimation(animationDetails.from,
                        animationDetails.to,
                        animationDetails.classes,
                        animationDetails.anchors) : prepareRegularAnimation(animationDetails);
                };

                function filterCssClasses(classes) {
                    //remove all the `ng-` stuff
                    return classes.replace(/\bng-\S+\b/g, '');
                }

                function getUniqueValues(a, b) {
                    if (isString(a)) a = a.split(' ');
                    if (isString(b)) b = b.split(' ');
                    return a.filter(function(val) {
                        return b.indexOf(val) === -1;
                    }).join(' ');
                }

                function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {
                    var clone = jqLite(getDomNode(outAnchor).cloneNode(true));
                    var startingClasses = filterCssClasses(getClassVal(clone));

                    outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);
                    inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);

                    clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);

                    rootBodyElement.append(clone);

                    var animatorIn, animatorOut = prepareOutAnimation();

                    // the user may not end up using the `out` animation and
                    // only making use of the `in` animation or vice-versa.
                    // In either case we should allow this and not assume the
                    // animation is over unless both animations are not used.
                    if (!animatorOut) {
                        animatorIn = prepareInAnimation();
                        if (!animatorIn) {
                            return end();
                        }
                    }

                    var startingAnimator = animatorOut || animatorIn;

                    return {
                        start: function() {
                            var runner;

                            var currentAnimation = startingAnimator.start();
                            currentAnimation.done(function() {
                                currentAnimation = null;
                                if (!animatorIn) {
                                    animatorIn = prepareInAnimation();
                                    if (animatorIn) {
                                        currentAnimation = animatorIn.start();
                                        currentAnimation.done(function() {
                                            currentAnimation = null;
                                            end();
                                            runner.complete();
                                        });
                                        return currentAnimation;
                                    }
                                }
                                // in the event that there is no `in` animation
                                end();
                                runner.complete();
                            });

                            runner = new $$AnimateRunner({
                                end: endFn,
                                cancel: endFn
                            });

                            return runner;

                            function endFn() {
                                if (currentAnimation) {
                                    currentAnimation.end();
                                }
                            }
                        }
                    };

                    function calculateAnchorStyles(anchor) {
                        var styles = {};

                        var coords = getDomNode(anchor).getBoundingClientRect();

                        // we iterate directly since safari messes up and doesn't return
                        // all the keys for the coods object when iterated
                        forEach(['width', 'height', 'top', 'left'], function(key) {
                            var value = coords[key];
                            switch (key) {
                                case 'top':
                                    value += bodyNode.scrollTop;
                                    break;
                                case 'left':
                                    value += bodyNode.scrollLeft;
                                    break;
                            }
                            styles[key] = Math.floor(value) + 'px';
                        });
                        return styles;
                    }

                    function prepareOutAnimation() {
                        var animator = $animateCss(clone, {
                            addClass: NG_OUT_ANCHOR_CLASS_NAME,
                            delay: true,
                            from: calculateAnchorStyles(outAnchor)
                        });

                        // read the comment within `prepareRegularAnimation` to understand
                        // why this check is necessary
                        return animator.$$willAnimate ? animator : null;
                    }

                    function getClassVal(element) {
                        return element.attr('class') || '';
                    }

                    function prepareInAnimation() {
                        var endingClasses = filterCssClasses(getClassVal(inAnchor));
                        var toAdd = getUniqueValues(endingClasses, startingClasses);
                        var toRemove = getUniqueValues(startingClasses, endingClasses);

                        var animator = $animateCss(clone, {
                            to: calculateAnchorStyles(inAnchor),
                            addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,
                            removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,
                            delay: true
                        });

                        // read the comment within `prepareRegularAnimation` to understand
                        // why this check is necessary
                        return animator.$$willAnimate ? animator : null;
                    }

                    function end() {
                        clone.remove();
                        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
                        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);
                    }
                }

                function prepareFromToAnchorAnimation(from, to, classes, anchors) {
                    var fromAnimation = prepareRegularAnimation(from, noop);
                    var toAnimation = prepareRegularAnimation(to, noop);

                    var anchorAnimations = [];
                    forEach(anchors, function(anchor) {
                        var outElement = anchor['out'];
                        var inElement = anchor['in'];
                        var animator = prepareAnchoredAnimation(classes, outElement, inElement);
                        if (animator) {
                            anchorAnimations.push(animator);
                        }
                    });

                    // no point in doing anything when there are no elements to animate
                    if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;

                    return {
                        start: function() {
                            var animationRunners = [];

                            if (fromAnimation) {
                                animationRunners.push(fromAnimation.start());
                            }

                            if (toAnimation) {
                                animationRunners.push(toAnimation.start());
                            }

                            forEach(anchorAnimations, function(animation) {
                                animationRunners.push(animation.start());
                            });

                            var runner = new $$AnimateRunner({
                                end: endFn,
                                cancel: endFn // CSS-driven animations cannot be cancelled, only ended
                            });

                            $$AnimateRunner.all(animationRunners, function(status) {
                                runner.complete(status);
                            });

                            return runner;

                            function endFn() {
                                forEach(animationRunners, function(runner) {
                                    runner.end();
                                });
                            }
                        }
                    };
                }

                function prepareRegularAnimation(animationDetails) {
                    var element = animationDetails.element;
                    var options = animationDetails.options || {};

                    if (animationDetails.structural) {
                        options.event = animationDetails.event;
                        options.structural = true;
                        options.applyClassesEarly = true;

                        // we special case the leave animation since we want to ensure that
                        // the element is removed as soon as the animation is over. Otherwise
                        // a flicker might appear or the element may not be removed at all
                        if (animationDetails.event === 'leave') {
                            options.onDone = options.domOperation;
                        }
                    }

                    // We assign the preparationClasses as the actual animation event since
                    // the internals of $animateCss will just suffix the event token values
                    // with `-active` to trigger the animation.
                    if (options.preparationClasses) {
                        options.event = concatWithSpace(options.event, options.preparationClasses);
                    }

                    var animator = $animateCss(element, options);

                    // the driver lookup code inside of $$animation attempts to spawn a
                    // driver one by one until a driver returns a.$$willAnimate animator object.
                    // $animateCss will always return an object, however, it will pass in
                    // a flag as a hint as to whether an animation was detected or not
                    return animator.$$willAnimate ? animator : null;
                }
            }
        ];
    }];

    // TODO(matsko): use caching here to speed things up for detection
    // TODO(matsko): add documentation
    //  by the time...

    var $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {
        this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',
            function($injector, $$AnimateRunner, $$jqLite) {

                var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);
                // $animateJs(element, 'enter');
                return function(element, event, classes, options) {
                    // the `classes` argument is optional and if it is not used
                    // then the classes will be resolved from the element's className
                    // property as well as options.addClass/options.removeClass.
                    if (arguments.length === 3 && isObject(classes)) {
                        options = classes;
                        classes = null;
                    }

                    options = prepareAnimationOptions(options);
                    if (!classes) {
                        classes = element.attr('class') || '';
                        if (options.addClass) {
                            classes += ' ' + options.addClass;
                        }
                        if (options.removeClass) {
                            classes += ' ' + options.removeClass;
                        }
                    }

                    var classesToAdd = options.addClass;
                    var classesToRemove = options.removeClass;

                    // the lookupAnimations function returns a series of animation objects that are
                    // matched up with one or more of the CSS classes. These animation objects are
                    // defined via the module.animation factory function. If nothing is detected then
                    // we don't return anything which then makes $animation query the next driver.
                    var animations = lookupAnimations(classes);
                    var before, after;
                    if (animations.length) {
                        var afterFn, beforeFn;
                        if (event == 'leave') {
                            beforeFn = 'leave';
                            afterFn = 'afterLeave'; // TODO(matsko): get rid of this
                        } else {
                            beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);
                            afterFn = event;
                        }

                        if (event !== 'enter' && event !== 'move') {
                            before = packageAnimations(element, event, options, animations, beforeFn);
                        }
                        after = packageAnimations(element, event, options, animations, afterFn);
                    }

                    // no matching animations
                    if (!before && !after) return;

                    function applyOptions() {
                        options.domOperation();
                        applyAnimationClasses(element, options);
                    }

                    return {
                        start: function() {
                            var closeActiveAnimations;
                            var chain = [];

                            if (before) {
                                chain.push(function(fn) {
                                    closeActiveAnimations = before(fn);
                                });
                            }

                            if (chain.length) {
                                chain.push(function(fn) {
                                    applyOptions();
                                    fn(true);
                                });
                            } else {
                                applyOptions();
                            }

                            if (after) {
                                chain.push(function(fn) {
                                    closeActiveAnimations = after(fn);
                                });
                            }

                            var animationClosed = false;
                            var runner = new $$AnimateRunner({
                                end: function() {
                                    endAnimations();
                                },
                                cancel: function() {
                                    endAnimations(true);
                                }
                            });

                            $$AnimateRunner.chain(chain, onComplete);
                            return runner;

                            function onComplete(success) {
                                animationClosed = true;
                                applyOptions();
                                applyAnimationStyles(element, options);
                                runner.complete(success);
                            }

                            function endAnimations(cancelled) {
                                if (!animationClosed) {
                                    (closeActiveAnimations || noop)(cancelled);
                                    onComplete(cancelled);
                                }
                            }
                        }
                    };

                    function executeAnimationFn(fn, element, event, options, onDone) {
                        var args;
                        switch (event) {
                            case 'animate':
                                args = [element, options.from, options.to, onDone];
                                break;

                            case 'setClass':
                                args = [element, classesToAdd, classesToRemove, onDone];
                                break;

                            case 'addClass':
                                args = [element, classesToAdd, onDone];
                                break;

                            case 'removeClass':
                                args = [element, classesToRemove, onDone];
                                break;

                            default:
                                args = [element, onDone];
                                break;
                        }

                        args.push(options);

                        var value = fn.apply(fn, args);
                        if (value) {
                            if (isFunction(value.start)) {
                                value = value.start();
                            }

                            if (value instanceof $$AnimateRunner) {
                                value.done(onDone);
                            } else if (isFunction(value)) {
                                // optional onEnd / onCancel callback
                                return value;
                            }
                        }

                        return noop;
                    }

                    function groupEventedAnimations(element, event, options, animations, fnName) {
                        var operations = [];
                        forEach(animations, function(ani) {
                            var animation = ani[fnName];
                            if (!animation) return;

                            // note that all of these animations will run in parallel
                            operations.push(function() {
                                var runner;
                                var endProgressCb;

                                var resolved = false;
                                var onAnimationComplete = function(rejected) {
                                    if (!resolved) {
                                        resolved = true;
                                        (endProgressCb || noop)(rejected);
                                        runner.complete(!rejected);
                                    }
                                };

                                runner = new $$AnimateRunner({
                                    end: function() {
                                        onAnimationComplete();
                                    },
                                    cancel: function() {
                                        onAnimationComplete(true);
                                    }
                                });

                                endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {
                                    var cancelled = result === false;
                                    onAnimationComplete(cancelled);
                                });

                                return runner;
                            });
                        });

                        return operations;
                    }

                    function packageAnimations(element, event, options, animations, fnName) {
                        var operations = groupEventedAnimations(element, event, options, animations, fnName);
                        if (operations.length === 0) {
                            var a, b;
                            if (fnName === 'beforeSetClass') {
                                a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');
                                b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');
                            } else if (fnName === 'setClass') {
                                a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');
                                b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');
                            }

                            if (a) {
                                operations = operations.concat(a);
                            }
                            if (b) {
                                operations = operations.concat(b);
                            }
                        }

                        if (operations.length === 0) return;

                        // TODO(matsko): add documentation
                        return function startAnimation(callback) {
                            var runners = [];
                            if (operations.length) {
                                forEach(operations, function(animateFn) {
                                    runners.push(animateFn());
                                });
                            }

                            runners.length ? $$AnimateRunner.all(runners, callback) : callback();

                            return function endFn(reject) {
                                forEach(runners, function(runner) {
                                    reject ? runner.cancel() : runner.end();
                                });
                            };
                        };
                    }
                };

                function lookupAnimations(classes) {
                    classes = isArray(classes) ? classes : classes.split(' ');
                    var matches = [],
                        flagMap = {};
                    for (var i = 0; i < classes.length; i++) {
                        var klass = classes[i],
                            animationFactory = $animateProvider.$$registeredAnimations[klass];
                        if (animationFactory && !flagMap[klass]) {
                            matches.push($injector.get(animationFactory));
                            flagMap[klass] = true;
                        }
                    }
                    return matches;
                }
            }
        ];
    }];

    var $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {
        $$animationProvider.drivers.push('$$animateJsDriver');
        this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {
            return function initDriverFn(animationDetails) {
                if (animationDetails.from && animationDetails.to) {
                    var fromAnimation = prepareAnimation(animationDetails.from);
                    var toAnimation = prepareAnimation(animationDetails.to);
                    if (!fromAnimation && !toAnimation) return;

                    return {
                        start: function() {
                            var animationRunners = [];

                            if (fromAnimation) {
                                animationRunners.push(fromAnimation.start());
                            }

                            if (toAnimation) {
                                animationRunners.push(toAnimation.start());
                            }

                            $$AnimateRunner.all(animationRunners, done);

                            var runner = new $$AnimateRunner({
                                end: endFnFactory(),
                                cancel: endFnFactory()
                            });

                            return runner;

                            function endFnFactory() {
                                return function() {
                                    forEach(animationRunners, function(runner) {
                                        // at this point we cannot cancel animations for groups just yet. 1.5+
                                        runner.end();
                                    });
                                };
                            }

                            function done(status) {
                                runner.complete(status);
                            }
                        }
                    };
                } else {
                    return prepareAnimation(animationDetails);
                }
            };

            function prepareAnimation(animationDetails) {
                // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations
                var element = animationDetails.element;
                var event = animationDetails.event;
                var options = animationDetails.options;
                var classes = animationDetails.classes;
                return $$animateJs(element, event, classes, options);
            }
        }];
    }];

    var NG_ANIMATE_ATTR_NAME = 'data-ng-animate';
    var NG_ANIMATE_PIN_DATA = '$ngAnimatePin';
    var $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {
        var PRE_DIGEST_STATE = 1;
        var RUNNING_STATE = 2;

        var rules = this.rules = {
            skip: [],
            cancel: [],
            join: []
        };

        function isAllowed(ruleType, element, currentAnimation, previousAnimation) {
            return rules[ruleType].some(function(fn) {
                return fn(element, currentAnimation, previousAnimation);
            });
        }

        function hasAnimationClasses(options, and) {
            options = options || {};
            var a = (options.addClass || '').length > 0;
            var b = (options.removeClass || '').length > 0;
            return and ? a && b : a || b;
        }

        rules.join.push(function(element, newAnimation, currentAnimation) {
            // if the new animation is class-based then we can just tack that on
            return !newAnimation.structural && hasAnimationClasses(newAnimation.options);
        });

        rules.skip.push(function(element, newAnimation, currentAnimation) {
            // there is no need to animate anything if no classes are being added and
            // there is no structural animation that will be triggered
            return !newAnimation.structural && !hasAnimationClasses(newAnimation.options);
        });

        rules.skip.push(function(element, newAnimation, currentAnimation) {
            // why should we trigger a new structural animation if the element will
            // be removed from the DOM anyway?
            return currentAnimation.event == 'leave' && newAnimation.structural;
        });

        rules.skip.push(function(element, newAnimation, currentAnimation) {
            // if there is an ongoing current animation then don't even bother running the class-based animation
            return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;
        });

        rules.cancel.push(function(element, newAnimation, currentAnimation) {
            // there can never be two structural animations running at the same time
            return currentAnimation.structural && newAnimation.structural;
        });

        rules.cancel.push(function(element, newAnimation, currentAnimation) {
            // if the previous animation is already running, but the new animation will
            // be triggered, but the new animation is structural
            return currentAnimation.state === RUNNING_STATE && newAnimation.structural;
        });

        rules.cancel.push(function(element, newAnimation, currentAnimation) {
            var nO = newAnimation.options;
            var cO = currentAnimation.options;

            // if the exact same CSS class is added/removed then it's safe to cancel it
            return (nO.addClass && nO.addClass === cO.removeClass) || (nO.removeClass && nO.removeClass === cO.addClass);
        });

        this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$HashMap',
            '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',
            function($$rAF, $rootScope, $rootElement, $document, $$HashMap,
                $$animation, $$AnimateRunner, $templateRequest, $$jqLite, $$forceReflow) {

                var activeAnimationsLookup = new $$HashMap();
                var disabledElementsLookup = new $$HashMap();
                var animationsEnabled = null;

                function postDigestTaskFactory() {
                    var postDigestCalled = false;
                    return function(fn) {
                        // we only issue a call to postDigest before
                        // it has first passed. This prevents any callbacks
                        // from not firing once the animation has completed
                        // since it will be out of the digest cycle.
                        if (postDigestCalled) {
                            fn();
                        } else {
                            $rootScope.$$postDigest(function() {
                                postDigestCalled = true;
                                fn();
                            });
                        }
                    };
                }

                // Wait until all directive and route-related templates are downloaded and
                // compiled. The $templateRequest.totalPendingRequests variable keeps track of
                // all of the remote templates being currently downloaded. If there are no
                // templates currently downloading then the watcher will still fire anyway.
                var deregisterWatch = $rootScope.$watch(
                    function() {
                        return $templateRequest.totalPendingRequests === 0;
                    },
                    function(isEmpty) {
                        if (!isEmpty) return;
                        deregisterWatch();

                        // Now that all templates have been downloaded, $animate will wait until
                        // the post digest queue is empty before enabling animations. By having two
                        // calls to $postDigest calls we can ensure that the flag is enabled at the
                        // very end of the post digest queue. Since all of the animations in $animate
                        // use $postDigest, it's important that the code below executes at the end.
                        // This basically means that the page is fully downloaded and compiled before
                        // any animations are triggered.
                        $rootScope.$$postDigest(function() {
                            $rootScope.$$postDigest(function() {
                                // we check for null directly in the event that the application already called
                                // .enabled() with whatever arguments that it provided it with
                                if (animationsEnabled === null) {
                                    animationsEnabled = true;
                                }
                            });
                        });
                    }
                );

                var callbackRegistry = {};

                // remember that the classNameFilter is set during the provider/config
                // stage therefore we can optimize here and setup a helper function
                var classNameFilter = $animateProvider.classNameFilter();
                var isAnimatableClassName = !classNameFilter ? function() {
                    return true;
                } : function(className) {
                    return classNameFilter.test(className);
                };

                var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

                function normalizeAnimationOptions(element, options) {
                    return mergeAnimationOptions(element, options, {});
                }

                function findCallbacks(parent, element, event) {
                    var targetNode = getDomNode(element);
                    var targetParentNode = getDomNode(parent);

                    var matches = [];
                    var entries = callbackRegistry[event];
                    if (entries) {
                        forEach(entries, function(entry) {
                            if (entry.node.contains(targetNode)) {
                                matches.push(entry.callback);
                            } else if (event === 'leave' && entry.node.contains(targetParentNode)) {
                                matches.push(entry.callback);
                            }
                        });
                    }

                    return matches;
                }

                return {
                    on: function(event, container, callback) {
                        var node = extractElementNode(container);
                        callbackRegistry[event] = callbackRegistry[event] || [];
                        callbackRegistry[event].push({
                            node: node,
                            callback: callback
                        });
                    },

                    off: function(event, container, callback) {
                        var entries = callbackRegistry[event];
                        if (!entries) return;

                        callbackRegistry[event] = arguments.length === 1 ? null : filterFromRegistry(entries, container, callback);

                        function filterFromRegistry(list, matchContainer, matchCallback) {
                            var containerNode = extractElementNode(matchContainer);
                            return list.filter(function(entry) {
                                var isMatch = entry.node === containerNode &&
                                    (!matchCallback || entry.callback === matchCallback);
                                return !isMatch;
                            });
                        }
                    },

                    pin: function(element, parentElement) {
                        assertArg(isElement(element), 'element', 'not an element');
                        assertArg(isElement(parentElement), 'parentElement', 'not an element');
                        element.data(NG_ANIMATE_PIN_DATA, parentElement);
                    },

                    push: function(element, event, options, domOperation) {
                        options = options || {};
                        options.domOperation = domOperation;
                        return queueAnimation(element, event, options);
                    },

                    // this method has four signatures:
                    //  () - global getter
                    //  (bool) - global setter
                    //  (element) - element getter
                    //  (element, bool) - element setter<F37>
                    enabled: function(element, bool) {
                        var argCount = arguments.length;

                        if (argCount === 0) {
                            // () - Global getter
                            bool = !!animationsEnabled;
                        } else {
                            var hasElement = isElement(element);

                            if (!hasElement) {
                                // (bool) - Global setter
                                bool = animationsEnabled = !!element;
                            } else {
                                var node = getDomNode(element);
                                var recordExists = disabledElementsLookup.get(node);

                                if (argCount === 1) {
                                    // (element) - Element getter
                                    bool = !recordExists;
                                } else {
                                    // (element, bool) - Element setter
                                    bool = !!bool;
                                    if (!bool) {
                                        disabledElementsLookup.put(node, true);
                                    } else if (recordExists) {
                                        disabledElementsLookup.remove(node);
                                    }
                                }
                            }
                        }

                        return bool;
                    }
                };

                function queueAnimation(element, event, options) {
                    var node, parent;
                    element = stripCommentsFromElement(element);
                    if (element) {
                        node = getDomNode(element);
                        parent = element.parent();
                    }

                    options = prepareAnimationOptions(options);

                    // we create a fake runner with a working promise.
                    // These methods will become available after the digest has passed
                    var runner = new $$AnimateRunner();

                    // this is used to trigger callbacks in postDigest mode
                    var runInNextPostDigestOrNow = postDigestTaskFactory();

                    if (isArray(options.addClass)) {
                        options.addClass = options.addClass.join(' ');
                    }

                    if (options.addClass && !isString(options.addClass)) {
                        options.addClass = null;
                    }

                    if (isArray(options.removeClass)) {
                        options.removeClass = options.removeClass.join(' ');
                    }

                    if (options.removeClass && !isString(options.removeClass)) {
                        options.removeClass = null;
                    }

                    if (options.from && !isObject(options.from)) {
                        options.from = null;
                    }

                    if (options.to && !isObject(options.to)) {
                        options.to = null;
                    }

                    // there are situations where a directive issues an animation for
                    // a jqLite wrapper that contains only comment nodes... If this
                    // happens then there is no way we can perform an animation
                    if (!node) {
                        close();
                        return runner;
                    }

                    var className = [node.className, options.addClass, options.removeClass].join(' ');
                    if (!isAnimatableClassName(className)) {
                        close();
                        return runner;
                    }

                    var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

                    // this is a hard disable of all animations for the application or on
                    // the element itself, therefore  there is no need to continue further
                    // past this point if not enabled
                    var skipAnimations = !animationsEnabled || disabledElementsLookup.get(node);
                    var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};
                    var hasExistingAnimation = !!existingAnimation.state;

                    // there is no point in traversing the same collection of parent ancestors if a followup
                    // animation will be run on the same element that already did all that checking work
                    if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {
                        skipAnimations = !areAnimationsAllowed(element, parent, event);
                    }

                    if (skipAnimations) {
                        close();
                        return runner;
                    }

                    if (isStructural) {
                        closeChildAnimations(element);
                    }

                    var newAnimation = {
                        structural: isStructural,
                        element: element,
                        event: event,
                        close: close,
                        options: options,
                        runner: runner
                    };

                    if (hasExistingAnimation) {
                        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);
                        if (skipAnimationFlag) {
                            if (existingAnimation.state === RUNNING_STATE) {
                                close();
                                return runner;
                            } else {
                                mergeAnimationOptions(element, existingAnimation.options, options);
                                return existingAnimation.runner;
                            }
                        }

                        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);
                        if (cancelAnimationFlag) {
                            if (existingAnimation.state === RUNNING_STATE) {
                                // this will end the animation right away and it is safe
                                // to do so since the animation is already running and the
                                // runner callback code will run in async
                                existingAnimation.runner.end();
                            } else if (existingAnimation.structural) {
                                // this means that the animation is queued into a digest, but
                                // hasn't started yet. Therefore it is safe to run the close
                                // method which will call the runner methods in async.
                                existingAnimation.close();
                            } else {
                                // this will merge the new animation options into existing animation options
                                mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);
                                return existingAnimation.runner;
                            }
                        } else {
                            // a joined animation means that this animation will take over the existing one
                            // so an example would involve a leave animation taking over an enter. Then when
                            // the postDigest kicks in the enter will be ignored.
                            var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);
                            if (joinAnimationFlag) {
                                if (existingAnimation.state === RUNNING_STATE) {
                                    normalizeAnimationOptions(element, options);
                                } else {
                                    applyGeneratedPreparationClasses(element, isStructural ? event : null, options);

                                    event = newAnimation.event = existingAnimation.event;
                                    options = mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);

                                    //we return the same runner since only the option values of this animation will
                                    //be fed into the `existingAnimation`.
                                    return existingAnimation.runner;
                                }
                            }
                        }
                    } else {
                        // normalization in this case means that it removes redundant CSS classes that
                        // already exist (addClass) or do not exist (removeClass) on the element
                        normalizeAnimationOptions(element, options);
                    }

                    // when the options are merged and cleaned up we may end up not having to do
                    // an animation at all, therefore we should check this before issuing a post
                    // digest callback. Structural animations will always run no matter what.
                    var isValidAnimation = newAnimation.structural;
                    if (!isValidAnimation) {
                        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present
                        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0) || hasAnimationClasses(newAnimation.options);
                    }

                    if (!isValidAnimation) {
                        close();
                        clearElementAnimationState(element);
                        return runner;
                    }

                    // the counter keeps track of cancelled animations
                    var counter = (existingAnimation.counter || 0) + 1;
                    newAnimation.counter = counter;

                    markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);

                    $rootScope.$$postDigest(function() {
                        var animationDetails = activeAnimationsLookup.get(node);
                        var animationCancelled = !animationDetails;
                        animationDetails = animationDetails || {};

                        // if addClass/removeClass is called before something like enter then the
                        // registered parent element may not be present. The code below will ensure
                        // that a final value for parent element is obtained
                        var parentElement = element.parent() || [];

                        // animate/structural/class-based animations all have requirements. Otherwise there
                        // is no point in performing an animation. The parent node must also be set.
                        var isValidAnimation = parentElement.length > 0 && (animationDetails.event === 'animate' || animationDetails.structural || hasAnimationClasses(animationDetails.options));

                        // this means that the previous animation was cancelled
                        // even if the follow-up animation is the same event
                        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {
                            // if another animation did not take over then we need
                            // to make sure that the domOperation and options are
                            // handled accordingly
                            if (animationCancelled) {
                                applyAnimationClasses(element, options);
                                applyAnimationStyles(element, options);
                            }

                            // if the event changed from something like enter to leave then we do
                            // it, otherwise if it's the same then the end result will be the same too
                            if (animationCancelled || (isStructural && animationDetails.event !== event)) {
                                options.domOperation();
                                runner.end();
                            }

                            // in the event that the element animation was not cancelled or a follow-up animation
                            // isn't allowed to animate from here then we need to clear the state of the element
                            // so that any future animations won't read the expired animation data.
                            if (!isValidAnimation) {
                                clearElementAnimationState(element);
                            }

                            return;
                        }

                        // this combined multiple class to addClass / removeClass into a setClass event
                        // so long as a structural event did not take over the animation
                        event = !animationDetails.structural && hasAnimationClasses(animationDetails.options, true) ? 'setClass' : animationDetails.event;

                        markElementAnimationState(element, RUNNING_STATE);
                        var realRunner = $$animation(element, event, animationDetails.options);

                        realRunner.done(function(status) {
                            close(!status);
                            var animationDetails = activeAnimationsLookup.get(node);
                            if (animationDetails && animationDetails.counter === counter) {
                                clearElementAnimationState(getDomNode(element));
                            }
                            notifyProgress(runner, event, 'close', {});
                        });

                        // this will update the runner's flow-control events based on
                        // the `realRunner` object.
                        runner.setHost(realRunner);
                        notifyProgress(runner, event, 'start', {});
                    });

                    return runner;

                    function notifyProgress(runner, event, phase, data) {
                        runInNextPostDigestOrNow(function() {
                            var callbacks = findCallbacks(parent, element, event);
                            if (callbacks.length) {
                                // do not optimize this call here to RAF because
                                // we don't know how heavy the callback code here will
                                // be and if this code is buffered then this can
                                // lead to a performance regression.
                                $$rAF(function() {
                                    forEach(callbacks, function(callback) {
                                        callback(element, phase, data);
                                    });
                                });
                            }
                        });
                        runner.progress(event, phase, data);
                    }

                    function close(reject) { // jshint ignore:line
                        clearGeneratedClasses(element, options);
                        applyAnimationClasses(element, options);
                        applyAnimationStyles(element, options);
                        options.domOperation();
                        runner.complete(!reject);
                    }
                }

                function closeChildAnimations(element) {
                    var node = getDomNode(element);
                    var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');
                    forEach(children, function(child) {
                        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));
                        var animationDetails = activeAnimationsLookup.get(child);
                        switch (state) {
                            case RUNNING_STATE:
                                animationDetails.runner.end();
                                /* falls through */
                            case PRE_DIGEST_STATE:
                                if (animationDetails) {
                                    activeAnimationsLookup.remove(child);
                                }
                                break;
                        }
                    });
                }

                function clearElementAnimationState(element) {
                    var node = getDomNode(element);
                    node.removeAttribute(NG_ANIMATE_ATTR_NAME);
                    activeAnimationsLookup.remove(node);
                }

                function isMatchingElement(nodeOrElmA, nodeOrElmB) {
                    return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);
                }

                function areAnimationsAllowed(element, parentElement, event) {
                    var bodyElement = jqLite($document[0].body);
                    var bodyElementDetected = isMatchingElement(element, bodyElement) || element[0].nodeName === 'HTML';
                    var rootElementDetected = isMatchingElement(element, $rootElement);
                    var parentAnimationDetected = false;
                    var animateChildren;

                    var parentHost = element.data(NG_ANIMATE_PIN_DATA);
                    if (parentHost) {
                        parentElement = parentHost;
                    }

                    while (parentElement && parentElement.length) {
                        if (!rootElementDetected) {
                            // angular doesn't want to attempt to animate elements outside of the application
                            // therefore we need to ensure that the rootElement is an ancestor of the current element
                            rootElementDetected = isMatchingElement(parentElement, $rootElement);
                        }

                        var parentNode = parentElement[0];
                        if (parentNode.nodeType !== ELEMENT_NODE) {
                            // no point in inspecting the #document element
                            break;
                        }

                        var details = activeAnimationsLookup.get(parentNode) || {};
                        // either an enter, leave or move animation will commence
                        // therefore we can't allow any animations to take place
                        // but if a parent animation is class-based then that's ok
                        if (!parentAnimationDetected) {
                            parentAnimationDetected = details.structural || disabledElementsLookup.get(parentNode);
                        }

                        if (isUndefined(animateChildren) || animateChildren === true) {
                            var value = parentElement.data(NG_ANIMATE_CHILDREN_DATA);
                            if (isDefined(value)) {
                                animateChildren = value;
                            }
                        }

                        // there is no need to continue traversing at this point
                        if (parentAnimationDetected && animateChildren === false) break;

                        if (!rootElementDetected) {
                            // angular doesn't want to attempt to animate elements outside of the application
                            // therefore we need to ensure that the rootElement is an ancestor of the current element
                            rootElementDetected = isMatchingElement(parentElement, $rootElement);
                            if (!rootElementDetected) {
                                parentHost = parentElement.data(NG_ANIMATE_PIN_DATA);
                                if (parentHost) {
                                    parentElement = parentHost;
                                }
                            }
                        }

                        if (!bodyElementDetected) {
                            // we also need to ensure that the element is or will be apart of the body element
                            // otherwise it is pointless to even issue an animation to be rendered
                            bodyElementDetected = isMatchingElement(parentElement, bodyElement);
                        }

                        parentElement = parentElement.parent();
                    }

                    var allowAnimation = !parentAnimationDetected || animateChildren;
                    return allowAnimation && rootElementDetected && bodyElementDetected;
                }

                function markElementAnimationState(element, state, details) {
                    details = details || {};
                    details.state = state;

                    var node = getDomNode(element);
                    node.setAttribute(NG_ANIMATE_ATTR_NAME, state);

                    var oldValue = activeAnimationsLookup.get(node);
                    var newValue = oldValue ? extend(oldValue, details) : details;
                    activeAnimationsLookup.put(node, newValue);
                }
            }
        ];
    }];

    var $$AnimateAsyncRunFactory = ['$$rAF', function($$rAF) {
        var waitQueue = [];

        function waitForTick(fn) {
            waitQueue.push(fn);
            if (waitQueue.length > 1) return;
            $$rAF(function() {
                for (var i = 0; i < waitQueue.length; i++) {
                    waitQueue[i]();
                }
                waitQueue = [];
            });
        }

        return function() {
            var passed = false;
            waitForTick(function() {
                passed = true;
            });
            return function(callback) {
                passed ? callback() : waitForTick(callback);
            };
        };
    }];

    var $$AnimateRunnerFactory = ['$q', '$sniffer', '$$animateAsyncRun',
        function($q, $sniffer, $$animateAsyncRun) {

            var INITIAL_STATE = 0;
            var DONE_PENDING_STATE = 1;
            var DONE_COMPLETE_STATE = 2;

            AnimateRunner.chain = function(chain, callback) {
                var index = 0;

                next();

                function next() {
                    if (index === chain.length) {
                        callback(true);
                        return;
                    }

                    chain[index](function(response) {
                        if (response === false) {
                            callback(false);
                            return;
                        }
                        index++;
                        next();
                    });
                }
            };

            AnimateRunner.all = function(runners, callback) {
                var count = 0;
                var status = true;
                forEach(runners, function(runner) {
                    runner.done(onProgress);
                });

                function onProgress(response) {
                    status = status && response;
                    if (++count === runners.length) {
                        callback(status);
                    }
                }
            };

            function AnimateRunner(host) {
                this.setHost(host);

                this._doneCallbacks = [];
                this._runInAnimationFrame = $$animateAsyncRun();
                this._state = 0;
            }

            AnimateRunner.prototype = {
                setHost: function(host) {
                    this.host = host || {};
                },

                done: function(fn) {
                    if (this._state === DONE_COMPLETE_STATE) {
                        fn();
                    } else {
                        this._doneCallbacks.push(fn);
                    }
                },

                progress: noop,

                getPromise: function() {
                    if (!this.promise) {
                        var self = this;
                        this.promise = $q(function(resolve, reject) {
                            self.done(function(status) {
                                status === false ? reject() : resolve();
                            });
                        });
                    }
                    return this.promise;
                },

                then: function(resolveHandler, rejectHandler) {
                    return this.getPromise().then(resolveHandler, rejectHandler);
                },

                'catch': function(handler) {
                    return this.getPromise()['catch'](handler);
                },

                'finally': function(handler) {
                    return this.getPromise()['finally'](handler);
                },

                pause: function() {
                    if (this.host.pause) {
                        this.host.pause();
                    }
                },

                resume: function() {
                    if (this.host.resume) {
                        this.host.resume();
                    }
                },

                end: function() {
                    if (this.host.end) {
                        this.host.end();
                    }
                    this._resolve(true);
                },

                cancel: function() {
                    if (this.host.cancel) {
                        this.host.cancel();
                    }
                    this._resolve(false);
                },

                complete: function(response) {
                    var self = this;
                    if (self._state === INITIAL_STATE) {
                        self._state = DONE_PENDING_STATE;
                        self._runInAnimationFrame(function() {
                            self._resolve(response);
                        });
                    }
                },

                _resolve: function(response) {
                    if (this._state !== DONE_COMPLETE_STATE) {
                        forEach(this._doneCallbacks, function(fn) {
                            fn(response);
                        });
                        this._doneCallbacks.length = 0;
                        this._state = DONE_COMPLETE_STATE;
                    }
                }
            };

            return AnimateRunner;
        }
    ];

    var $$AnimationProvider = ['$animateProvider', function($animateProvider) {
        var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';

        var drivers = this.drivers = [];

        var RUNNER_STORAGE_KEY = '$$animationRunner';

        function setRunner(element, runner) {
            element.data(RUNNER_STORAGE_KEY, runner);
        }

        function removeRunner(element) {
            element.removeData(RUNNER_STORAGE_KEY);
        }

        function getRunner(element) {
            return element.data(RUNNER_STORAGE_KEY);
        }

        this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',
            function($$jqLite, $rootScope, $injector, $$AnimateRunner, $$HashMap, $$rAFScheduler) {

                var animationQueue = [];
                var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);

                function sortAnimations(animations) {
                    var tree = {
                        children: []
                    };
                    var i, lookup = new $$HashMap();

                    // this is done first beforehand so that the hashmap
                    // is filled with a list of the elements that will be animated
                    for (i = 0; i < animations.length; i++) {
                        var animation = animations[i];
                        lookup.put(animation.domNode, animations[i] = {
                            domNode: animation.domNode,
                            fn: animation.fn,
                            children: []
                        });
                    }

                    for (i = 0; i < animations.length; i++) {
                        processNode(animations[i]);
                    }

                    return flatten(tree);

                    function processNode(entry) {
                        if (entry.processed) return entry;
                        entry.processed = true;

                        var elementNode = entry.domNode;
                        var parentNode = elementNode.parentNode;
                        lookup.put(elementNode, entry);

                        var parentEntry;
                        while (parentNode) {
                            parentEntry = lookup.get(parentNode);
                            if (parentEntry) {
                                if (!parentEntry.processed) {
                                    parentEntry = processNode(parentEntry);
                                }
                                break;
                            }
                            parentNode = parentNode.parentNode;
                        }

                        (parentEntry || tree).children.push(entry);
                        return entry;
                    }

                    function flatten(tree) {
                        var result = [];
                        var queue = [];
                        var i;

                        for (i = 0; i < tree.children.length; i++) {
                            queue.push(tree.children[i]);
                        }

                        var remainingLevelEntries = queue.length;
                        var nextLevelEntries = 0;
                        var row = [];

                        for (i = 0; i < queue.length; i++) {
                            var entry = queue[i];
                            if (remainingLevelEntries <= 0) {
                                remainingLevelEntries = nextLevelEntries;
                                nextLevelEntries = 0;
                                result.push(row);
                                row = [];
                            }
                            row.push(entry.fn);
                            entry.children.forEach(function(childEntry) {
                                nextLevelEntries++;
                                queue.push(childEntry);
                            });
                            remainingLevelEntries--;
                        }

                        if (row.length) {
                            result.push(row);
                        }

                        return result;
                    }
                }

                // TODO(matsko): document the signature in a better way
                return function(element, event, options) {
                    options = prepareAnimationOptions(options);
                    var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;

                    // there is no animation at the current moment, however
                    // these runner methods will get later updated with the
                    // methods leading into the driver's end/cancel methods
                    // for now they just stop the animation from starting
                    var runner = new $$AnimateRunner({
                        end: function() {
                            close();
                        },
                        cancel: function() {
                            close(true);
                        }
                    });

                    if (!drivers.length) {
                        close();
                        return runner;
                    }

                    setRunner(element, runner);

                    var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));
                    var tempClasses = options.tempClasses;
                    if (tempClasses) {
                        classes += ' ' + tempClasses;
                        options.tempClasses = null;
                    }

                    animationQueue.push({
                        // this data is used by the postDigest code and passed into
                        // the driver step function
                        element: element,
                        classes: classes,
                        event: event,
                        structural: isStructural,
                        options: options,
                        beforeStart: beforeStart,
                        close: close
                    });

                    element.on('$destroy', handleDestroyedElement);

                    // we only want there to be one function called within the post digest
                    // block. This way we can group animations for all the animations that
                    // were apart of the same postDigest flush call.
                    if (animationQueue.length > 1) return runner;

                    $rootScope.$$postDigest(function() {
                        var animations = [];
                        forEach(animationQueue, function(entry) {
                            // the element was destroyed early on which removed the runner
                            // form its storage. This means we can't animate this element
                            // at all and it already has been closed due to destruction.
                            if (getRunner(entry.element)) {
                                animations.push(entry);
                            } else {
                                entry.close();
                            }
                        });

                        // now any future animations will be in another postDigest
                        animationQueue.length = 0;

                        var groupedAnimations = groupAnimations(animations);
                        var toBeSortedAnimations = [];

                        forEach(groupedAnimations, function(animationEntry) {
                            toBeSortedAnimations.push({
                                domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),
                                fn: function triggerAnimationStart() {
                                    // it's important that we apply the `ng-animate` CSS class and the
                                    // temporary classes before we do any driver invoking since these
                                    // CSS classes may be required for proper CSS detection.
                                    animationEntry.beforeStart();

                                    var startAnimationFn, closeFn = animationEntry.close;

                                    // in the event that the element was removed before the digest runs or
                                    // during the RAF sequencing then we should not trigger the animation.
                                    var targetElement = animationEntry.anchors ? (animationEntry.from.element || animationEntry.to.element) : animationEntry.element;

                                    if (getRunner(targetElement)) {
                                        var operation = invokeFirstDriver(animationEntry);
                                        if (operation) {
                                            startAnimationFn = operation.start;
                                        }
                                    }

                                    if (!startAnimationFn) {
                                        closeFn();
                                    } else {
                                        var animationRunner = startAnimationFn();
                                        animationRunner.done(function(status) {
                                            closeFn(!status);
                                        });
                                        updateAnimationRunners(animationEntry, animationRunner);
                                    }
                                }
                            });
                        });

                        // we need to sort each of the animations in order of parent to child
                        // relationships. This ensures that the child classes are applied at the
                        // right time.
                        $$rAFScheduler(sortAnimations(toBeSortedAnimations));
                    });

                    return runner;

                    // TODO(matsko): change to reference nodes
                    function getAnchorNodes(node) {
                        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';
                        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR) ? [node] : node.querySelectorAll(SELECTOR);
                        var anchors = [];
                        forEach(items, function(node) {
                            var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);
                            if (attr && attr.length) {
                                anchors.push(node);
                            }
                        });
                        return anchors;
                    }

                    function groupAnimations(animations) {
                        var preparedAnimations = [];
                        var refLookup = {};
                        forEach(animations, function(animation, index) {
                            var element = animation.element;
                            var node = getDomNode(element);
                            var event = animation.event;
                            var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;
                            var anchorNodes = animation.structural ? getAnchorNodes(node) : [];

                            if (anchorNodes.length) {
                                var direction = enterOrMove ? 'to' : 'from';

                                forEach(anchorNodes, function(anchor) {
                                    var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);
                                    refLookup[key] = refLookup[key] || {};
                                    refLookup[key][direction] = {
                                        animationID: index,
                                        element: jqLite(anchor)
                                    };
                                });
                            } else {
                                preparedAnimations.push(animation);
                            }
                        });

                        var usedIndicesLookup = {};
                        var anchorGroups = {};
                        forEach(refLookup, function(operations, key) {
                            var from = operations.from;
                            var to = operations.to;

                            if (!from || !to) {
                                // only one of these is set therefore we can't have an
                                // anchor animation since all three pieces are required
                                var index = from ? from.animationID : to.animationID;
                                var indexKey = index.toString();
                                if (!usedIndicesLookup[indexKey]) {
                                    usedIndicesLookup[indexKey] = true;
                                    preparedAnimations.push(animations[index]);
                                }
                                return;
                            }

                            var fromAnimation = animations[from.animationID];
                            var toAnimation = animations[to.animationID];
                            var lookupKey = from.animationID.toString();
                            if (!anchorGroups[lookupKey]) {
                                var group = anchorGroups[lookupKey] = {
                                    structural: true,
                                    beforeStart: function() {
                                        fromAnimation.beforeStart();
                                        toAnimation.beforeStart();
                                    },
                                    close: function() {
                                        fromAnimation.close();
                                        toAnimation.close();
                                    },
                                    classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),
                                    from: fromAnimation,
                                    to: toAnimation,
                                    anchors: [] // TODO(matsko): change to reference nodes
                                };

                                // the anchor animations require that the from and to elements both have at least
                                // one shared CSS class which effictively marries the two elements together to use
                                // the same animation driver and to properly sequence the anchor animation.
                                if (group.classes.length) {
                                    preparedAnimations.push(group);
                                } else {
                                    preparedAnimations.push(fromAnimation);
                                    preparedAnimations.push(toAnimation);
                                }
                            }

                            anchorGroups[lookupKey].anchors.push({
                                'out': from.element,
                                'in': to.element
                            });
                        });

                        return preparedAnimations;
                    }

                    function cssClassesIntersection(a, b) {
                        a = a.split(' ');
                        b = b.split(' ');
                        var matches = [];

                        for (var i = 0; i < a.length; i++) {
                            var aa = a[i];
                            if (aa.substring(0, 3) === 'ng-') continue;

                            for (var j = 0; j < b.length; j++) {
                                if (aa === b[j]) {
                                    matches.push(aa);
                                    break;
                                }
                            }
                        }

                        return matches.join(' ');
                    }

                    function invokeFirstDriver(animationDetails) {
                        // we loop in reverse order since the more general drivers (like CSS and JS)
                        // may attempt more elements, but custom drivers are more particular
                        for (var i = drivers.length - 1; i >= 0; i--) {
                            var driverName = drivers[i];
                            if (!$injector.has(driverName)) continue; // TODO(matsko): remove this check

                            var factory = $injector.get(driverName);
                            var driver = factory(animationDetails);
                            if (driver) {
                                return driver;
                            }
                        }
                    }

                    function beforeStart() {
                        element.addClass(NG_ANIMATE_CLASSNAME);
                        if (tempClasses) {
                            $$jqLite.addClass(element, tempClasses);
                        }
                    }

                    function updateAnimationRunners(animation, newRunner) {
                        if (animation.from && animation.to) {
                            update(animation.from.element);
                            update(animation.to.element);
                        } else {
                            update(animation.element);
                        }

                        function update(element) {
                            getRunner(element).setHost(newRunner);
                        }
                    }

                    function handleDestroyedElement() {
                        var runner = getRunner(element);
                        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {
                            runner.end();
                        }
                    }

                    function close(rejected) { // jshint ignore:line
                        element.off('$destroy', handleDestroyedElement);
                        removeRunner(element);

                        applyAnimationClasses(element, options);
                        applyAnimationStyles(element, options);
                        options.domOperation();

                        if (tempClasses) {
                            $$jqLite.removeClass(element, tempClasses);
                        }

                        element.removeClass(NG_ANIMATE_CLASSNAME);
                        runner.complete(!rejected);
                    }
                };
            }
        ];
    }];

    /* global angularAnimateModule: true,

       $$AnimateAsyncRunFactory,
       $$rAFSchedulerFactory,
       $$AnimateChildrenDirective,
       $$AnimateRunnerFactory,
       $$AnimateQueueProvider,
       $$AnimationProvider,
       $AnimateCssProvider,
       $$AnimateCssDriverProvider,
       $$AnimateJsProvider,
       $$AnimateJsDriverProvider,
    */

    /**
     * @ngdoc module
     * @name ngAnimate
     * @description
     *
     * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via
     * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.
     *
     * <div doc-module-components="ngAnimate"></div>
     *
     * # Usage
     * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based
     * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For
     * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within
     * the HTML element that the animation will be triggered on.
     *
     * ## Directive Support
     * The following directives are "animation aware":
     *
     * | Directive                                                                                                | Supported Animations                                                     |
     * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
     * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
     * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
     * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
     * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
     * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
     * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
     * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
     * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
     * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
     * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
     *
     * (More information can be found by visiting each the documentation associated with each directive.)
     *
     * ## CSS-based Animations
     *
     * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML
     * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.
     *
     * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:
     *
     * ```html
     * <div ng-if="bool" class="fade">
     *    Fade me in out
     * </div>
     * <button ng-click="bool=true">Fade In!</button>
     * <button ng-click="bool=false">Fade Out!</button>
     * ```
     *
     * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:
     *
     * ```css
     * /&#42; The starting CSS styles for the enter animation &#42;/
     * .fade.ng-enter {
     *   transition:0.5s linear all;
     *   opacity:0;
     * }
     *
     * /&#42; The finishing CSS styles for the enter animation &#42;/
     * .fade.ng-enter.ng-enter-active {
     *   opacity:1;
     * }
     * ```
     *
     * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two
     * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition
     * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.
     *
     * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:
     *
     * ```css
     * /&#42; now the element will fade out before it is removed from the DOM &#42;/
     * .fade.ng-leave {
     *   transition:0.5s linear all;
     *   opacity:1;
     * }
     * .fade.ng-leave.ng-leave-active {
     *   opacity:0;
     * }
     * ```
     *
     * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:
     *
     * ```css
     * /&#42; there is no need to define anything inside of the destination
     * CSS class since the keyframe will take charge of the animation &#42;/
     * .fade.ng-leave {
     *   animation: my_fade_animation 0.5s linear;
     *   -webkit-animation: my_fade_animation 0.5s linear;
     * }
     *
     * @keyframes my_fade_animation {
     *   from { opacity:1; }
     *   to { opacity:0; }
     * }
     *
     * @-webkit-keyframes my_fade_animation {
     *   from { opacity:1; }
     *   to { opacity:0; }
     * }
     * ```
     *
     * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.
     *
     * ### CSS Class-based Animations
     *
     * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different
     * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added
     * and removed.
     *
     * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:
     *
     * ```html
     * <div ng-show="bool" class="fade">
     *   Show and hide me
     * </div>
     * <button ng-click="bool=true">Toggle</button>
     *
     * <style>
     * .fade.ng-hide {
     *   transition:0.5s linear all;
     *   opacity:0;
     * }
     * </style>
     * ```
     *
     * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since
     * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.
     *
     * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation
     * with CSS styles.
     *
     * ```html
     * <div ng-class="{on:onOff}" class="highlight">
     *   Highlight this box
     * </div>
     * <button ng-click="onOff=!onOff">Toggle</button>
     *
     * <style>
     * .highlight {
     *   transition:0.5s linear all;
     * }
     * .highlight.on-add {
     *   background:white;
     * }
     * .highlight.on {
     *   background:yellow;
     * }
     * .highlight.on-remove {
     *   background:black;
     * }
     * </style>
     * ```
     *
     * We can also make use of CSS keyframes by placing them within the CSS classes.
     *
     *
     * ### CSS Staggering Animations
     * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
     * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
     * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
     * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
     * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
     *
     * ```css
     * .my-animation.ng-enter {
     *   /&#42; standard transition code &#42;/
     *   transition: 1s linear all;
     *   opacity:0;
     * }
     * .my-animation.ng-enter-stagger {
     *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
     *   transition-delay: 0.1s;
     *
     *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate
     *     to not accidentally inherit a delay property from another CSS class &#42;/
     *   transition-duration: 0s;
     * }
     * .my-animation.ng-enter.ng-enter-active {
     *   /&#42; standard transition styles &#42;/
     *   opacity:1;
     * }
     * ```
     *
     * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
     * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
     * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
     * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.
     *
     * The following code will issue the **ng-leave-stagger** event on the element provided:
     *
     * ```js
     * var kids = parent.children();
     *
     * $animate.leave(kids[0]); //stagger index=0
     * $animate.leave(kids[1]); //stagger index=1
     * $animate.leave(kids[2]); //stagger index=2
     * $animate.leave(kids[3]); //stagger index=3
     * $animate.leave(kids[4]); //stagger index=4
     *
     * window.requestAnimationFrame(function() {
     *   //stagger has reset itself
     *   $animate.leave(kids[5]); //stagger index=0
     *   $animate.leave(kids[6]); //stagger index=1
     *
     *   $scope.$digest();
     * });
     * ```
     *
     * Stagger animations are currently only supported within CSS-defined animations.
     *
     * ### The `ng-animate` CSS class
     *
     * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.
     * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).
     *
     * Therefore, animations can be applied to an element using this temporary class directly via CSS.
     *
     * ```css
     * .zipper.ng-animate {
     *   transition:0.5s linear all;
     * }
     * .zipper.ng-enter {
     *   opacity:0;
     * }
     * .zipper.ng-enter.ng-enter-active {
     *   opacity:1;
     * }
     * .zipper.ng-leave {
     *   opacity:1;
     * }
     * .zipper.ng-leave.ng-leave-active {
     *   opacity:0;
     * }
     * ```
     *
     * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove
     * the CSS class once an animation has completed.)
     *
     *
     * ## JavaScript-based Animations
     *
     * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared
     * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the
     * `module.animation()` module function we can register the ainmation.
     *
     * Let's see an example of a enter/leave animation using `ngRepeat`:
     *
     * ```html
     * <div ng-repeat="item in items" class="slide">
     *   {{ item }}
     * </div>
     * ```
     *
     * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:
     *
     * ```js
     * myModule.animation('.slide', [function() {
     *   return {
     *     // make note that other events (like addClass/removeClass)
     *     // have different function input parameters
     *     enter: function(element, doneFn) {
     *       jQuery(element).fadeIn(1000, doneFn);
     *
     *       // remember to call doneFn so that angular
     *       // knows that the animation has concluded
     *     },
     *
     *     move: function(element, doneFn) {
     *       jQuery(element).fadeIn(1000, doneFn);
     *     },
     *
     *     leave: function(element, doneFn) {
     *       jQuery(element).fadeOut(1000, doneFn);
     *     }
     *   }
     * }]);
     * ```
     *
     * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as
     * greensock.js and velocity.js.
     *
     * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define
     * our animations inside of the same registered animation, however, the function input arguments are a bit different:
     *
     * ```html
     * <div ng-class="color" class="colorful">
     *   this box is moody
     * </div>
     * <button ng-click="color='red'">Change to red</button>
     * <button ng-click="color='blue'">Change to blue</button>
     * <button ng-click="color='green'">Change to green</button>
     * ```
     *
     * ```js
     * myModule.animation('.colorful', [function() {
     *   return {
     *     addClass: function(element, className, doneFn) {
     *       // do some cool animation and call the doneFn
     *     },
     *     removeClass: function(element, className, doneFn) {
     *       // do some cool animation and call the doneFn
     *     },
     *     setClass: function(element, addedClass, removedClass, doneFn) {
     *       // do some cool animation and call the doneFn
     *     }
     *   }
     * }]);
     * ```
     *
     * ## CSS + JS Animations Together
     *
     * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,
     * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking
     * charge of the animation**:
     *
     * ```html
     * <div ng-if="bool" class="slide">
     *   Slide in and out
     * </div>
     * ```
     *
     * ```js
     * myModule.animation('.slide', [function() {
     *   return {
     *     enter: function(element, doneFn) {
     *       jQuery(element).slideIn(1000, doneFn);
     *     }
     *   }
     * }]);
     * ```
     *
     * ```css
     * .slide.ng-enter {
     *   transition:0.5s linear all;
     *   transform:translateY(-100px);
     * }
     * .slide.ng-enter.ng-enter-active {
     *   transform:translateY(0);
     * }
     * ```
     *
     * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the
     * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from
     * our own JS-based animation code:
     *
     * ```js
     * myModule.animation('.slide', ['$animateCss', function($animateCss) {
     *   return {
     *     enter: function(element) {
    *        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.
     *       return $animateCss(element, {
     *         event: 'enter',
     *         structural: true
     *       });
     *     }
     *   }
     * }]);
     * ```
     *
     * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.
     *
     * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or
     * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that
     * data into `$animateCss` directly:
     *
     * ```js
     * myModule.animation('.slide', ['$animateCss', function($animateCss) {
     *   return {
     *     enter: function(element) {
     *       return $animateCss(element, {
     *         event: 'enter',
     *         structural: true,
     *         addClass: 'maroon-setting',
     *         from: { height:0 },
     *         to: { height: 200 }
     *       });
     *     }
     *   }
     * }]);
     * ```
     *
     * Now we can fill in the rest via our transition CSS code:
     *
     * ```css
     * /&#42; the transition tells ngAnimate to make the animation happen &#42;/
     * .slide.ng-enter { transition:0.5s linear all; }
     *
     * /&#42; this extra CSS class will be absorbed into the transition
     * since the $animateCss code is adding the class &#42;/
     * .maroon-setting { background:red; }
     * ```
     *
     * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.
     *
     * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.
     *
     * ## Animation Anchoring (via `ng-animate-ref`)
     *
     * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between
     * structural areas of an application (like views) by pairing up elements using an attribute
     * called `ng-animate-ref`.
     *
     * Let's say for example we have two views that are managed by `ng-view` and we want to show
     * that there is a relationship between two components situated in within these views. By using the
     * `ng-animate-ref` attribute we can identify that the two components are paired together and we
     * can then attach an animation, which is triggered when the view changes.
     *
     * Say for example we have the following template code:
     *
     * ```html
     * <!-- index.html -->
     * <div ng-view class="view-animation">
     * </div>
     *
     * <!-- home.html -->
     * <a href="#/banner-page">
     *   <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
     * </a>
     *
     * <!-- banner-page.html -->
     * <img src="./banner.jpg" class="banner" ng-animate-ref="banner">
     * ```
     *
     * Now, when the view changes (once the link is clicked), ngAnimate will examine the
     * HTML contents to see if there is a match reference between any components in the view
     * that is leaving and the view that is entering. It will scan both the view which is being
     * removed (leave) and inserted (enter) to see if there are any paired DOM elements that
     * contain a matching ref value.
     *
     * The two images match since they share the same ref value. ngAnimate will now create a
     * transport element (which is a clone of the first image element) and it will then attempt
     * to animate to the position of the second image element in the next view. For the animation to
     * work a special CSS class called `ng-anchor` will be added to the transported element.
     *
     * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then
     * ngAnimate will handle the entire transition for us as well as the addition and removal of
     * any changes of CSS classes between the elements:
     *
     * ```css
     * .banner.ng-anchor {
     *   /&#42; this animation will last for 1 second since there are
     *          two phases to the animation (an `in` and an `out` phase) &#42;/
     *   transition:0.5s linear all;
     * }
     * ```
     *
     * We also **must** include animations for the views that are being entered and removed
     * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).
     *
     * ```css
     * .view-animation.ng-enter, .view-animation.ng-leave {
     *   transition:0.5s linear all;
     *   position:fixed;
     *   left:0;
     *   top:0;
     *   width:100%;
     * }
     * .view-animation.ng-enter {
     *   transform:translateX(100%);
     * }
     * .view-animation.ng-leave,
     * .view-animation.ng-enter.ng-enter-active {
     *   transform:translateX(0%);
     * }
     * .view-animation.ng-leave.ng-leave-active {
     *   transform:translateX(-100%);
     * }
     * ```
     *
     * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:
     * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away
     * from its origin. Once that animation is over then the `in` stage occurs which animates the
     * element to its destination. The reason why there are two animations is to give enough time
     * for the enter animation on the new element to be ready.
     *
     * The example above sets up a transition for both the in and out phases, but we can also target the out or
     * in phases directly via `ng-anchor-out` and `ng-anchor-in`.
     *
     * ```css
     * .banner.ng-anchor-out {
     *   transition: 0.5s linear all;
     *
     *   /&#42; the scale will be applied during the out animation,
     *          but will be animated away when the in animation runs &#42;/
     *   transform: scale(1.2);
     * }
     *
     * .banner.ng-anchor-in {
     *   transition: 1s linear all;
     * }
     * ```
     *
     *
     *
     *
     * ### Anchoring Demo
     *
      <example module="anchoringExample"
               name="anchoringExample"
               id="anchoringExample"
               deps="angular-animate.js;angular-route.js"
               animations="true">
        <file name="index.html">
          <a href="#/">Home</a>
          <hr />
          <div class="view-container">
            <div ng-view class="view"></div>
          </div>
        </file>
        <file name="script.js">
          angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])
            .config(['$routeProvider', function($routeProvider) {
              $routeProvider.when('/', {
                templateUrl: 'home.html',
                controller: 'HomeController as home'
              });
              $routeProvider.when('/profile/:id', {
                templateUrl: 'profile.html',
                controller: 'ProfileController as profile'
              });
            }])
            .run(['$rootScope', function($rootScope) {
              $rootScope.records = [
                { id:1, title: "Miss Beulah Roob" },
                { id:2, title: "Trent Morissette" },
                { id:3, title: "Miss Ava Pouros" },
                { id:4, title: "Rod Pouros" },
                { id:5, title: "Abdul Rice" },
                { id:6, title: "Laurie Rutherford Sr." },
                { id:7, title: "Nakia McLaughlin" },
                { id:8, title: "Jordon Blanda DVM" },
                { id:9, title: "Rhoda Hand" },
                { id:10, title: "Alexandrea Sauer" }
              ];
            }])
            .controller('HomeController', [function() {
              //empty
            }])
            .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {
              var index = parseInt($routeParams.id, 10);
              var record = $rootScope.records[index - 1];

              this.title = record.title;
              this.id = record.id;
            }]);
        </file>
        <file name="home.html">
          <h2>Welcome to the home page</h1>
          <p>Please click on an element</p>
          <a class="record"
             ng-href="#/profile/{{ record.id }}"
             ng-animate-ref="{{ record.id }}"
             ng-repeat="record in records">
            {{ record.title }}
          </a>
        </file>
        <file name="profile.html">
          <div class="profile record" ng-animate-ref="{{ profile.id }}">
            {{ profile.title }}
          </div>
        </file>
        <file name="animations.css">
          .record {
            display:block;
            font-size:20px;
          }
          .profile {
            background:black;
            color:white;
            font-size:100px;
          }
          .view-container {
            position:relative;
          }
          .view-container > .view.ng-animate {
            position:absolute;
            top:0;
            left:0;
            width:100%;
            min-height:500px;
          }
          .view.ng-enter, .view.ng-leave,
          .record.ng-anchor {
            transition:0.5s linear all;
          }
          .view.ng-enter {
            transform:translateX(100%);
          }
          .view.ng-enter.ng-enter-active, .view.ng-leave {
            transform:translateX(0%);
          }
          .view.ng-leave.ng-leave-active {
            transform:translateX(-100%);
          }
          .record.ng-anchor-out {
            background:red;
          }
        </file>
      </example>
     *
     * ### How is the element transported?
     *
     * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting
     * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element
     * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The
     * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match
     * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied
     * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class
     * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element
     * will become visible since the shim class will be removed.
     *
     * ### How is the morphing handled?
     *
     * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out
     * what CSS classes differ between the starting element and the destination element. These different CSS classes
     * will be added/removed on the anchor element and a transition will be applied (the transition that is provided
     * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will
     * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that
     * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since
     * the cloned element is placed inside of root element which is likely close to the body element).
     *
     * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.
     *
     *
     * ## Using $animate in your directive code
     *
     * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?
     * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's
     * imagine we have a greeting box that shows and hides itself when the data changes
     *
     * ```html
     * <greeting-box active="onOrOff">Hi there</greeting-box>
     * ```
     *
     * ```js
     * ngModule.directive('greetingBox', ['$animate', function($animate) {
     *   return function(scope, element, attrs) {
     *     attrs.$observe('active', function(value) {
     *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');
     *     });
     *   });
     * }]);
     * ```
     *
     * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element
     * in our HTML code then we can trigger a CSS or JS animation to happen.
     *
     * ```css
     * /&#42; normally we would create a CSS class to reference on the element &#42;/
     * greeting-box.on { transition:0.5s linear all; background:green; color:white; }
     * ```
     *
     * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's
     * possible be sure to visit the {@link ng.$animate $animate service API page}.
     *
     *
     * ### Preventing Collisions With Third Party Libraries
     *
     * Some third-party frameworks place animation duration defaults across many element or className
     * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which
     * is expecting actual animations on these elements and has to wait for their completion.
     *
     * You can prevent this unwanted behavior by using a prefix on all your animation classes:
     *
     * ```css
     * /&#42; prefixed with animate- &#42;/
     * .animate-fade-add.animate-fade-add-active {
     *   transition:1s linear all;
     *   opacity:0;
     * }
     * ```
     *
     * You then configure `$animate` to enforce this prefix:
     *
     * ```js
     * $animateProvider.classNameFilter(/animate-/);
     * ```
     *
     * This also may provide your application with a speed boost since only specific elements containing CSS class prefix
     * will be evaluated for animation when any DOM changes occur in the application.
     *
     * ## Callbacks and Promises
     *
     * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger
     * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has
     * ended by chaining onto the returned promise that animation method returns.
     *
     * ```js
     * // somewhere within the depths of the directive
     * $animate.enter(element, parent).then(function() {
     *   //the animation has completed
     * });
     * ```
     *
     * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case
     * anymore.)
     *
     * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering
     * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view
     * routing controller to hook into that:
     *
     * ```js
     * ngModule.controller('HomePageController', ['$animate', function($animate) {
     *   $animate.on('enter', ngViewElement, function(element) {
     *     // the animation for this route has completed
     *   }]);
     * }])
     * ```
     *
     * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)
     */

    /**
     * @ngdoc service
     * @name $animate
     * @kind object
     *
     * @description
     * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.
     *
     * Click here {@link ng.$animate to learn more about animations with `$animate`}.
     */
    angular.module('ngAnimate', [])
        .directive('ngAnimateChildren', $$AnimateChildrenDirective)
        .factory('$$rAFScheduler', $$rAFSchedulerFactory)

    .factory('$$AnimateRunner', $$AnimateRunnerFactory)
        .factory('$$animateAsyncRun', $$AnimateAsyncRunFactory)

    .provider('$$animateQueue', $$AnimateQueueProvider)
        .provider('$$animation', $$AnimationProvider)

    .provider('$animateCss', $AnimateCssProvider)
        .provider('$$animateCssDriver', $$AnimateCssDriverProvider)

    .provider('$$animateJs', $$AnimateJsProvider)
        .provider('$$animateJsDriver', $$AnimateJsDriverProvider);


})(window, window.angular);

/**
 * @license AngularJS v1.4.8
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {
    'use strict';

    /**
     * @ngdoc module
     * @name ngAria
     * @description
     *
     * The `ngAria` module provides support for common
     * [<abbr title="Accessible Rich Internet Applications">ARIA</abbr>](http://www.w3.org/TR/wai-aria/)
     * attributes that convey state or semantic information about the application for users
     * of assistive technologies, such as screen readers.
     *
     * <div doc-module-components="ngAria"></div>
     *
     * ## Usage
     *
     * For ngAria to do its magic, simply include the module `ngAria` as a dependency. The following
     * directives are supported:
     * `ngModel`, `ngDisabled`, `ngShow`, `ngHide`, `ngClick`, `ngDblClick`, and `ngMessages`.
     *
     * Below is a more detailed breakdown of the attributes handled by ngAria:
     *
     * | Directive                                   | Supported Attributes                                                                   |
     * |---------------------------------------------|----------------------------------------------------------------------------------------|
     * | {@link ng.directive:ngDisabled ngDisabled}  | aria-disabled                                                                          |
     * | {@link ng.directive:ngShow ngShow}          | aria-hidden                                                                            |
     * | {@link ng.directive:ngHide ngHide}          | aria-hidden                                                                            |
     * | {@link ng.directive:ngDblclick ngDblclick}  | tabindex                                                                               |
     * | {@link module:ngMessages ngMessages}        | aria-live                                                                              |
     * | {@link ng.directive:ngModel ngModel}        | aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles |
     * | {@link ng.directive:ngClick ngClick}        | tabindex, keypress event, button role                                                               |
     *
     * Find out more information about each directive by reading the
     * {@link guide/accessibility ngAria Developer Guide}.
     *
     * ##Example
     * Using ngDisabled with ngAria:
     * ```html
     * <md-checkbox ng-disabled="disabled">
     * ```
     * Becomes:
     * ```html
     * <md-checkbox ng-disabled="disabled" aria-disabled="true">
     * ```
     *
     * ##Disabling Attributes
     * It's possible to disable individual attributes added by ngAria with the
     * {@link ngAria.$ariaProvider#config config} method. For more details, see the
     * {@link guide/accessibility Developer Guide}.
     */
    /* global -ngAriaModule */
    var ngAriaModule = angular.module('ngAria', ['ng']).
    provider('$aria', $AriaProvider);

    /**
     * Internal Utilities
     */
    var nodeBlackList = ['BUTTON', 'A', 'INPUT', 'TEXTAREA', 'SELECT', 'DETAILS', 'SUMMARY'];

    var isNodeOneOf = function(elem, nodeTypeArray) {
        if (nodeTypeArray.indexOf(elem[0].nodeName) !== -1) {
            return true;
        }
    };
    /**
     * @ngdoc provider
     * @name $ariaProvider
     *
     * @description
     *
     * Used for configuring the ARIA attributes injected and managed by ngAria.
     *
     * ```js
     * angular.module('myApp', ['ngAria'], function config($ariaProvider) {
     *   $ariaProvider.config({
     *     ariaValue: true,
     *     tabindex: false
     *   });
     * });
     *```
     *
     * ## Dependencies
     * Requires the {@link ngAria} module to be installed.
     *
     */
    function $AriaProvider() {
        var config = {
            ariaHidden: true,
            ariaChecked: true,
            ariaDisabled: true,
            ariaRequired: true,
            ariaInvalid: true,
            ariaMultiline: true,
            ariaValue: true,
            tabindex: true,
            bindKeypress: true,
            bindRoleForClick: true
        };

        /**
         * @ngdoc method
         * @name $ariaProvider#config
         *
         * @param {object} config object to enable/disable specific ARIA attributes
         *
         *  - **ariaHidden** – `{boolean}` – Enables/disables aria-hidden tags
         *  - **ariaChecked** – `{boolean}` – Enables/disables aria-checked tags
         *  - **ariaDisabled** – `{boolean}` – Enables/disables aria-disabled tags
         *  - **ariaRequired** – `{boolean}` – Enables/disables aria-required tags
         *  - **ariaInvalid** – `{boolean}` – Enables/disables aria-invalid tags
         *  - **ariaMultiline** – `{boolean}` – Enables/disables aria-multiline tags
         *  - **ariaValue** – `{boolean}` – Enables/disables aria-valuemin, aria-valuemax and aria-valuenow tags
         *  - **tabindex** – `{boolean}` – Enables/disables tabindex tags
         *  - **bindKeypress** – `{boolean}` – Enables/disables keypress event binding on `&lt;div&gt;` and
         *    `&lt;li&gt;` elements with ng-click
         *  - **bindRoleForClick** – `{boolean}` – Adds role=button to non-interactive elements like `div`
         *    using ng-click, making them more accessible to users of assistive technologies
         *
         * @description
         * Enables/disables various ARIA attributes
         */
        this.config = function(newConfig) {
            config = angular.extend(config, newConfig);
        };

        function watchExpr(attrName, ariaAttr, nodeBlackList, negate) {
            return function(scope, elem, attr) {
                var ariaCamelName = attr.$normalize(ariaAttr);
                if (config[ariaCamelName] && !isNodeOneOf(elem, nodeBlackList) && !attr[ariaCamelName]) {
                    scope.$watch(attr[attrName], function(boolVal) {
                        // ensure boolean value
                        boolVal = negate ? !boolVal : !!boolVal;
                        elem.attr(ariaAttr, boolVal);
                    });
                }
            };
        }
        /**
         * @ngdoc service
         * @name $aria
         *
         * @description
         * @priority 200
         *
         * The $aria service contains helper methods for applying common
         * [ARIA](http://www.w3.org/TR/wai-aria/) attributes to HTML directives.
         *
         * ngAria injects common accessibility attributes that tell assistive technologies when HTML
         * elements are enabled, selected, hidden, and more. To see how this is performed with ngAria,
         * let's review a code snippet from ngAria itself:
         *
         *```js
         * ngAriaModule.directive('ngDisabled', ['$aria', function($aria) {
         *   return $aria.$$watchExpr('ngDisabled', 'aria-disabled');
         * }])
         *```
         * Shown above, the ngAria module creates a directive with the same signature as the
         * traditional `ng-disabled` directive. But this ngAria version is dedicated to
         * solely managing accessibility attributes. The internal `$aria` service is used to watch the
         * boolean attribute `ngDisabled`. If it has not been explicitly set by the developer,
         * `aria-disabled` is injected as an attribute with its value synchronized to the value in
         * `ngDisabled`.
         *
         * Because ngAria hooks into the `ng-disabled` directive, developers do not have to do
         * anything to enable this feature. The `aria-disabled` attribute is automatically managed
         * simply as a silent side-effect of using `ng-disabled` with the ngAria module.
         *
         * The full list of directives that interface with ngAria:
         * * **ngModel**
         * * **ngShow**
         * * **ngHide**
         * * **ngClick**
         * * **ngDblclick**
         * * **ngMessages**
         * * **ngDisabled**
         *
         * Read the {@link guide/accessibility ngAria Developer Guide} for a thorough explanation of each
         * directive.
         *
         *
         * ## Dependencies
         * Requires the {@link ngAria} module to be installed.
         */
        this.$get = function() {
            return {
                config: function(key) {
                    return config[key];
                },
                $$watchExpr: watchExpr
            };
        };
    }


    ngAriaModule.directive('ngShow', ['$aria', function($aria) {
            return $aria.$$watchExpr('ngShow', 'aria-hidden', [], true);
        }])
        .directive('ngHide', ['$aria', function($aria) {
            return $aria.$$watchExpr('ngHide', 'aria-hidden', [], false);
        }])
        .directive('ngModel', ['$aria', function($aria) {

            function shouldAttachAttr(attr, normalizedAttr, elem) {
                return $aria.config(normalizedAttr) && !elem.attr(attr);
            }

            function shouldAttachRole(role, elem) {
                return !elem.attr('role') && (elem.attr('type') === role) && (elem[0].nodeName !== 'INPUT');
            }

            function getShape(attr, elem) {
                var type = attr.type,
                    role = attr.role;

                return ((type || role) === 'checkbox' || role === 'menuitemcheckbox') ? 'checkbox' :
                    ((type || role) === 'radio' || role === 'menuitemradio') ? 'radio' :
                    (type === 'range' || role === 'progressbar' || role === 'slider') ? 'range' :
                    (type || role) === 'textbox' || elem[0].nodeName === 'TEXTAREA' ? 'multiline' : '';
            }

            return {
                restrict: 'A',
                require: '?ngModel',
                priority: 200, //Make sure watches are fired after any other directives that affect the ngModel value
                compile: function(elem, attr) {
                    var shape = getShape(attr, elem);

                    return {
                        pre: function(scope, elem, attr, ngModel) {
                            if (shape === 'checkbox' && attr.type !== 'checkbox') {
                                //Use the input[checkbox] $isEmpty implementation for elements with checkbox roles
                                ngModel.$isEmpty = function(value) {
                                    return value === false;
                                };
                            }
                        },
                        post: function(scope, elem, attr, ngModel) {
                            var needsTabIndex = shouldAttachAttr('tabindex', 'tabindex', elem) && !isNodeOneOf(elem, nodeBlackList);

                            function ngAriaWatchModelValue() {
                                return ngModel.$modelValue;
                            }

                            function getRadioReaction() {
                                if (needsTabIndex) {
                                    needsTabIndex = false;
                                    return function ngAriaRadioReaction(newVal) {
                                        var boolVal = (attr.value == ngModel.$viewValue);
                                        elem.attr('aria-checked', boolVal);
                                        elem.attr('tabindex', 0 - !boolVal);
                                    };
                                } else {
                                    return function ngAriaRadioReaction(newVal) {
                                        elem.attr('aria-checked', (attr.value == ngModel.$viewValue));
                                    };
                                }
                            }

                            function ngAriaCheckboxReaction() {
                                elem.attr('aria-checked', !ngModel.$isEmpty(ngModel.$viewValue));
                            }

                            switch (shape) {
                                case 'radio':
                                case 'checkbox':
                                    if (shouldAttachRole(shape, elem)) {
                                        elem.attr('role', shape);
                                    }
                                    if (shouldAttachAttr('aria-checked', 'ariaChecked', elem)) {
                                        scope.$watch(ngAriaWatchModelValue, shape === 'radio' ?
                                            getRadioReaction() : ngAriaCheckboxReaction);
                                    }
                                    if (needsTabIndex) {
                                        elem.attr('tabindex', 0);
                                    }
                                    break;
                                case 'range':
                                    if (shouldAttachRole(shape, elem)) {
                                        elem.attr('role', 'slider');
                                    }
                                    if ($aria.config('ariaValue')) {
                                        var needsAriaValuemin = !elem.attr('aria-valuemin') &&
                                            (attr.hasOwnProperty('min') || attr.hasOwnProperty('ngMin'));
                                        var needsAriaValuemax = !elem.attr('aria-valuemax') &&
                                            (attr.hasOwnProperty('max') || attr.hasOwnProperty('ngMax'));
                                        var needsAriaValuenow = !elem.attr('aria-valuenow');

                                        if (needsAriaValuemin) {
                                            attr.$observe('min', function ngAriaValueMinReaction(newVal) {
                                                elem.attr('aria-valuemin', newVal);
                                            });
                                        }
                                        if (needsAriaValuemax) {
                                            attr.$observe('max', function ngAriaValueMinReaction(newVal) {
                                                elem.attr('aria-valuemax', newVal);
                                            });
                                        }
                                        if (needsAriaValuenow) {
                                            scope.$watch(ngAriaWatchModelValue, function ngAriaValueNowReaction(newVal) {
                                                elem.attr('aria-valuenow', newVal);
                                            });
                                        }
                                    }
                                    if (needsTabIndex) {
                                        elem.attr('tabindex', 0);
                                    }
                                    break;
                                case 'multiline':
                                    if (shouldAttachAttr('aria-multiline', 'ariaMultiline', elem)) {
                                        elem.attr('aria-multiline', true);
                                    }
                                    break;
                            }

                            if (ngModel.$validators.required && shouldAttachAttr('aria-required', 'ariaRequired', elem)) {
                                scope.$watch(function ngAriaRequiredWatch() {
                                    return ngModel.$error.required;
                                }, function ngAriaRequiredReaction(newVal) {
                                    elem.attr('aria-required', !!newVal);
                                });
                            }

                            if (shouldAttachAttr('aria-invalid', 'ariaInvalid', elem)) {
                                scope.$watch(function ngAriaInvalidWatch() {
                                    return ngModel.$invalid;
                                }, function ngAriaInvalidReaction(newVal) {
                                    elem.attr('aria-invalid', !!newVal);
                                });
                            }
                        }
                    };
                }
            };
        }])
        .directive('ngDisabled', ['$aria', function($aria) {
            return $aria.$$watchExpr('ngDisabled', 'aria-disabled', []);
        }])
        .directive('ngMessages', function() {
            return {
                restrict: 'A',
                require: '?ngMessages',
                link: function(scope, elem, attr, ngMessages) {
                    if (!elem.attr('aria-live')) {
                        elem.attr('aria-live', 'assertive');
                    }
                }
            };
        })
        .directive('ngClick', ['$aria', '$parse', function($aria, $parse) {
            return {
                restrict: 'A',
                compile: function(elem, attr) {
                    var fn = $parse(attr.ngClick, /* interceptorFn */ null, /* expensiveChecks */ true);
                    return function(scope, elem, attr) {

                        if (!isNodeOneOf(elem, nodeBlackList)) {

                            if ($aria.config('bindRoleForClick') && !elem.attr('role')) {
                                elem.attr('role', 'button');
                            }

                            if ($aria.config('tabindex') && !elem.attr('tabindex')) {
                                elem.attr('tabindex', 0);
                            }

                            if ($aria.config('bindKeypress') && !attr.ngKeypress) {
                                elem.on('keypress', function(event) {
                                    var keyCode = event.which || event.keyCode;
                                    if (keyCode === 32 || keyCode === 13) {
                                        scope.$apply(callback);
                                    }

                                    function callback() {
                                        fn(scope, {
                                            $event: event
                                        });
                                    }
                                });
                            }
                        }
                    };
                }
            };
        }])
        .directive('ngDblclick', ['$aria', function($aria) {
            return function(scope, elem, attr) {
                if ($aria.config('tabindex') && !elem.attr('tabindex') && !isNodeOneOf(elem, nodeBlackList)) {
                    elem.attr('tabindex', 0);
                }
            };
        }]);


})(window, window.angular);

/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v1.0.1
 */
(function(window, angular, undefined) {
    "use strict";

    (function() {
        "use strict";

        angular.module('ngMaterial', ["ng", "ngAnimate", "ngAria", "material.core", "material.core.gestures", "material.core.layout", "material.core.theming.palette", "material.core.theming", "material.core.animate", "material.components.autocomplete", "material.components.backdrop", "material.components.bottomSheet", "material.components.button", "material.components.card", "material.components.checkbox", "material.components.chips", "material.components.content", "material.components.datepicker", "material.components.dialog", "material.components.divider", "material.components.fabActions", "material.components.fabShared", "material.components.fabSpeedDial", "material.components.fabToolbar", "material.components.fabTrigger", "material.components.gridList", "material.components.icon", "material.components.input", "material.components.list", "material.components.menu", "material.components.menuBar", "material.components.progressCircular", "material.components.progressLinear", "material.components.radioButton", "material.components.select", "material.components.showHide", "material.components.sidenav", "material.components.slider", "material.components.sticky", "material.components.subheader", "material.components.swipe", "material.components.switch", "material.components.tabs", "material.components.toast", "material.components.toolbar", "material.components.tooltip", "material.components.virtualRepeat", "material.components.whiteframe"]);
    })();
    (function() {
        "use strict";

        /**
         * Initialization function that validates environment
         * requirements.
         */
        angular
            .module('material.core', [
                'ngAnimate',
                'material.core.animate',
                'material.core.layout',
                'material.core.gestures',
                'material.core.theming'
            ])
            .config(MdCoreConfigure)
            .run(DetectNgTouch);


        /**
         * Detect if the ng-Touch module is also being used.
         * Warn if detected.
         */
        function DetectNgTouch($log, $injector) {
            if ($injector.has('$swipe')) {
                var msg = "" +
                    "You are using the ngTouch module. \n" +
                    "Angular Material already has mobile click, tap, and swipe support... \n" +
                    "ngTouch is not supported with Angular Material!";
                $log.warn(msg);
            }
        }
        DetectNgTouch.$inject = ["$log", "$injector"];


        function MdCoreConfigure($provide, $mdThemingProvider) {

            $provide.decorator('$$rAF', ["$delegate", rAFDecorator]);

            $mdThemingProvider.theme('default')
                .primaryPalette('indigo')
                .accentPalette('pink')
                .warnPalette('deep-orange')
                .backgroundPalette('grey');
        }
        MdCoreConfigure.$inject = ["$provide", "$mdThemingProvider"];

        function rAFDecorator($delegate) {
            /**
             * Use this to throttle events that come in often.
             * The throttled function will always use the *last* invocation before the
             * coming frame.
             *
             * For example, window resize events that fire many times a second:
             * If we set to use an raf-throttled callback on window resize, then
             * our callback will only be fired once per frame, with the last resize
             * event that happened before that frame.
             *
             * @param {function} callback function to debounce
             */
            $delegate.throttle = function(cb) {
                var queuedArgs, alreadyQueued, queueCb, context;
                return function debounced() {
                    queuedArgs = arguments;
                    context = this;
                    queueCb = cb;
                    if (!alreadyQueued) {
                        alreadyQueued = true;
                        $delegate(function() {
                            queueCb.apply(context, Array.prototype.slice.call(queuedArgs));
                            alreadyQueued = false;
                        });
                    }
                };
            };
            return $delegate;
        }

    })();
    (function() {
        "use strict";

        angular.module('material.core')
            .factory('$mdConstant', MdConstantFactory);

        /**
         * Factory function that creates the grab-bag $mdConstant service.
         * @ngInject
         */
        function MdConstantFactory($sniffer) {

            var webkit = /webkit/i.test($sniffer.vendorPrefix);

            function vendorProperty(name) {
                return webkit ? ('webkit' + name.charAt(0).toUpperCase() + name.substring(1)) : name;
            }

            return {
                KEY_CODE: {
                    COMMA: 188,
                    ENTER: 13,
                    ESCAPE: 27,
                    SPACE: 32,
                    PAGE_UP: 33,
                    PAGE_DOWN: 34,
                    END: 35,
                    HOME: 36,
                    LEFT_ARROW: 37,
                    UP_ARROW: 38,
                    RIGHT_ARROW: 39,
                    DOWN_ARROW: 40,
                    TAB: 9,
                    BACKSPACE: 8,
                    DELETE: 46
                },
                CSS: {
                    /* Constants */
                    TRANSITIONEND: 'transitionend' + (webkit ? ' webkitTransitionEnd' : ''),
                    ANIMATIONEND: 'animationend' + (webkit ? ' webkitAnimationEnd' : ''),

                    TRANSFORM: vendorProperty('transform'),
                    TRANSFORM_ORIGIN: vendorProperty('transformOrigin'),
                    TRANSITION: vendorProperty('transition'),
                    TRANSITION_DURATION: vendorProperty('transitionDuration'),
                    ANIMATION_PLAY_STATE: vendorProperty('animationPlayState'),
                    ANIMATION_DURATION: vendorProperty('animationDuration'),
                    ANIMATION_NAME: vendorProperty('animationName'),
                    ANIMATION_TIMING: vendorProperty('animationTimingFunction'),
                    ANIMATION_DIRECTION: vendorProperty('animationDirection')
                },
                /**
                 * As defined in core/style/variables.scss
                 *
                 * $layout-breakpoint-xs:     600px !default;
                 * $layout-breakpoint-sm:     960px !default;
                 * $layout-breakpoint-md:     1280px !default;
                 * $layout-breakpoint-lg:     1920px !default;
                 *
                 */
                MEDIA: {
                    'xs': '(max-width: 599px)',
                    'gt-xs': '(min-width: 600px)',
                    'sm': '(min-width: 600px) and (max-width: 959px)',
                    'gt-sm': '(min-width: 960px)',
                    'md': '(min-width: 960px) and (max-width: 1279px)',
                    'gt-md': '(min-width: 1280px)',
                    'lg': '(min-width: 1280px) and (max-width: 1919px)',
                    'gt-lg': '(min-width: 1920px)',
                    'xl': '(min-width: 1920px)'
                },
                MEDIA_PRIORITY: [
                    'xl',
                    'gt-lg',
                    'lg',
                    'gt-md',
                    'md',
                    'gt-sm',
                    'sm',
                    'gt-xs',
                    'xs'
                ]
            };
        }
        MdConstantFactory.$inject = ["$sniffer"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.core')
            .config(["$provide", function($provide) {
                $provide.decorator('$mdUtil', ['$delegate', function($delegate) {
                    /**
                     * Inject the iterator facade to easily support iteration and accessors
                     * @see iterator below
                     */
                    $delegate.iterator = MdIterator;

                    return $delegate;
                }]);
            }]);

        /**
         * iterator is a list facade to easily support iteration and accessors
         *
         * @param items Array list which this iterator will enumerate
         * @param reloop Boolean enables iterator to consider the list as an endless reloop
         */
        function MdIterator(items, reloop) {
            var trueFn = function() {
                return true;
            };

            if (items && !angular.isArray(items)) {
                items = Array.prototype.slice.call(items);
            }

            reloop = !!reloop;
            var _items = items || [];

            // Published API
            return {
                items: getItems,
                count: count,

                inRange: inRange,
                contains: contains,
                indexOf: indexOf,
                itemAt: itemAt,

                findBy: findBy,

                add: add,
                remove: remove,

                first: first,
                last: last,
                next: angular.bind(null, findSubsequentItem, false),
                previous: angular.bind(null, findSubsequentItem, true),

                hasPrevious: hasPrevious,
                hasNext: hasNext

            };

            /**
             * Publish copy of the enumerable set
             * @returns {Array|*}
             */
            function getItems() {
                return [].concat(_items);
            }

            /**
             * Determine length of the list
             * @returns {Array.length|*|number}
             */
            function count() {
                return _items.length;
            }

            /**
             * Is the index specified valid
             * @param index
             * @returns {Array.length|*|number|boolean}
             */
            function inRange(index) {
                return _items.length && (index > -1) && (index < _items.length);
            }

            /**
             * Can the iterator proceed to the next item in the list; relative to
             * the specified item.
             *
             * @param item
             * @returns {Array.length|*|number|boolean}
             */
            function hasNext(item) {
                return item ? inRange(indexOf(item) + 1) : false;
            }

            /**
             * Can the iterator proceed to the previous item in the list; relative to
             * the specified item.
             *
             * @param item
             * @returns {Array.length|*|number|boolean}
             */
            function hasPrevious(item) {
                return item ? inRange(indexOf(item) - 1) : false;
            }

            /**
             * Get item at specified index/position
             * @param index
             * @returns {*}
             */
            function itemAt(index) {
                return inRange(index) ? _items[index] : null;
            }

            /**
             * Find all elements matching the key/value pair
             * otherwise return null
             *
             * @param val
             * @param key
             *
             * @return array
             */
            function findBy(key, val) {
                return _items.filter(function(item) {
                    return item[key] === val;
                });
            }

            /**
             * Add item to list
             * @param item
             * @param index
             * @returns {*}
             */
            function add(item, index) {
                if (!item) return -1;

                if (!angular.isNumber(index)) {
                    index = _items.length;
                }

                _items.splice(index, 0, item);

                return indexOf(item);
            }

            /**
             * Remove item from list...
             * @param item
             */
            function remove(item) {
                if (contains(item)) {
                    _items.splice(indexOf(item), 1);
                }
            }

            /**
             * Get the zero-based index of the target item
             * @param item
             * @returns {*}
             */
            function indexOf(item) {
                return _items.indexOf(item);
            }

            /**
             * Boolean existence check
             * @param item
             * @returns {boolean}
             */
            function contains(item) {
                return item && (indexOf(item) > -1);
            }

            /**
             * Return first item in the list
             * @returns {*}
             */
            function first() {
                return _items.length ? _items[0] : null;
            }

            /**
             * Return last item in the list...
             * @returns {*}
             */
            function last() {
                return _items.length ? _items[_items.length - 1] : null;
            }

            /**
             * Find the next item. If reloop is true and at the end of the list, it will go back to the
             * first item. If given, the `validate` callback will be used to determine whether the next item
             * is valid. If not valid, it will try to find the next item again.
             *
             * @param {boolean} backwards Specifies the direction of searching (forwards/backwards)
             * @param {*} item The item whose subsequent item we are looking for
             * @param {Function=} validate The `validate` function
             * @param {integer=} limit The recursion limit
             *
             * @returns {*} The subsequent item or null
             */
            function findSubsequentItem(backwards, item, validate, limit) {
                validate = validate || trueFn;

                var curIndex = indexOf(item);
                while (true) {
                    if (!inRange(curIndex)) return null;

                    var nextIndex = curIndex + (backwards ? -1 : 1);
                    var foundItem = null;
                    if (inRange(nextIndex)) {
                        foundItem = _items[nextIndex];
                    } else if (reloop) {
                        foundItem = backwards ? last() : first();
                        nextIndex = indexOf(foundItem);
                    }

                    if ((foundItem === null) || (nextIndex === limit)) return null;
                    if (validate(foundItem)) return foundItem;

                    if (angular.isUndefined(limit)) limit = nextIndex;

                    curIndex = nextIndex;
                }
            }
        }


    })();
    (function() {
        "use strict";

        angular.module('material.core')
            .factory('$mdMedia', mdMediaFactory);

        /**
         * @ngdoc service
         * @name $mdMedia
         * @module material.core
         *
         * @description
         * `$mdMedia` is used to evaluate whether a given media query is true or false given the
         * current device's screen / window size. The media query will be re-evaluated on resize, allowing
         * you to register a watch.
         *
         * `$mdMedia` also has pre-programmed support for media queries that match the layout breakpoints:
         *
         *  <table class="md-api-table">
         *    <thead>
         *    <tr>
         *      <th>Breakpoint</th>
         *      <th>mediaQuery</th>
         *    </tr>
         *    </thead>
         *    <tbody>
         *    <tr>
         *      <td>xs</td>
         *      <td>(max-width: 599px)</td>
         *    </tr>
         *    <tr>
         *      <td>gt-xs</td>
         *      <td>(min-width: 600px)</td>
         *    </tr>
         *    <tr>
         *      <td>sm</td>
         *      <td>(min-width: 600px) and (max-width: 959px)</td>
         *    </tr>
         *    <tr>
         *      <td>gt-sm</td>
         *      <td>(min-width: 960px)</td>
         *    </tr>
         *    <tr>
         *      <td>md</td>
         *      <td>(min-width: 960px) and (max-width: 1279px)</td>
         *    </tr>
         *    <tr>
         *      <td>gt-md</td>
         *      <td>(min-width: 1280px)</td>
         *    </tr>
         *    <tr>
         *      <td>lg</td>
         *      <td>(min-width: 1280px) and (max-width: 1919px)</td>
         *    </tr>
         *    <tr>
         *      <td>gt-lg</td>
         *      <td>(min-width: 1920px)</td>
         *    </tr>
         *    <tr>
         *      <td>xl</td>
         *      <td>(min-width: 1920px)</td>
         *    </tr>
         *    </tbody>
         *  </table>
         *
         *  See Material Design's <a href="https://www.google.com/design/spec/layout/adaptive-ui.html">Layout - Adaptive UI</a> for more details.
         *
         *  <a href="https://www.google.com/design/spec/layout/adaptive-ui.html">
         *  <img src="https://material-design.storage.googleapis.com/publish/material_v_4/material_ext_publish/0B8olV15J7abPSGFxemFiQVRtb1k/layout_adaptive_breakpoints_01.png" width="100%" height="100%"></img>
         *  </a>
         *
         * @returns {boolean} a boolean representing whether or not the given media query is true or false.
         *
         * @usage
         * <hljs lang="js">
         * app.controller('MyController', function($mdMedia, $scope) {
         *   $scope.$watch(function() { return $mdMedia('lg'); }, function(big) {
         *     $scope.bigScreen = big;
         *   });
         *
         *   $scope.screenIsSmall = $mdMedia('sm');
         *   $scope.customQuery = $mdMedia('(min-width: 1234px)');
         *   $scope.anotherCustom = $mdMedia('max-width: 300px');
         * });
         * </hljs>
         */

        function mdMediaFactory($mdConstant, $rootScope, $window) {
            var queries = {};
            var mqls = {};
            var results = {};
            var normalizeCache = {};

            $mdMedia.getResponsiveAttribute = getResponsiveAttribute;
            $mdMedia.getQuery = getQuery;
            $mdMedia.watchResponsiveAttributes = watchResponsiveAttributes;

            return $mdMedia;

            function $mdMedia(query) {
                var validated = queries[query];
                if (angular.isUndefined(validated)) {
                    validated = queries[query] = validate(query);
                }

                var result = results[validated];
                if (angular.isUndefined(result)) {
                    result = add(validated);
                }

                return result;
            }

            function validate(query) {
                return $mdConstant.MEDIA[query] ||
                    ((query.charAt(0) !== '(') ? ('(' + query + ')') : query);
            }

            function add(query) {
                var result = mqls[query];
                if (!result) {
                    result = mqls[query] = $window.matchMedia(query);
                }

                result.addListener(onQueryChange);
                return (results[result.media] = !!result.matches);
            }

            function onQueryChange(query) {
                $rootScope.$evalAsync(function() {
                    results[query.media] = !!query.matches;
                });
            }

            function getQuery(name) {
                return mqls[name];
            }

            function getResponsiveAttribute(attrs, attrName) {
                for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {
                    var mediaName = $mdConstant.MEDIA_PRIORITY[i];
                    if (!mqls[queries[mediaName]].matches) {
                        continue;
                    }

                    var normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);
                    if (attrs[normalizedName]) {
                        return attrs[normalizedName];
                    }
                }

                // fallback on unprefixed
                return attrs[getNormalizedName(attrs, attrName)];
            }

            function watchResponsiveAttributes(attrNames, attrs, watchFn) {
                var unwatchFns = [];
                attrNames.forEach(function(attrName) {
                    var normalizedName = getNormalizedName(attrs, attrName);
                    if (angular.isDefined(attrs[normalizedName])) {
                        unwatchFns.push(
                            attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));
                    }

                    for (var mediaName in $mdConstant.MEDIA) {
                        normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);
                        if (angular.isDefined(attrs[normalizedName])) {
                            unwatchFns.push(
                                attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));
                        }
                    }
                });

                return function unwatch() {
                    unwatchFns.forEach(function(fn) {
                        fn();
                    })
                };
            }

            // Improves performance dramatically
            function getNormalizedName(attrs, attrName) {
                return normalizeCache[attrName] ||
                    (normalizeCache[attrName] = attrs.$normalize(attrName));
            }
        }
        mdMediaFactory.$inject = ["$mdConstant", "$rootScope", "$window"];

    })();
    (function() {
        "use strict";

        /*
         * This var has to be outside the angular factory, otherwise when
         * there are multiple material apps on the same page, each app
         * will create its own instance of this array and the app's IDs
         * will not be unique.
         */
        var nextUniqueId = 0;

        /**
         * @ngdoc module
         * @name material.core.util
         * @description
         * Util
         */
        angular
            .module('material.core')
            .factory('$mdUtil', UtilFactory);

        function UtilFactory($document, $timeout, $compile, $rootScope, $$mdAnimate, $interpolate, $log, $rootElement, $window) {
            // Setup some core variables for the processTemplate method
            var startSymbol = $interpolate.startSymbol(),
                endSymbol = $interpolate.endSymbol(),
                usesStandardSymbols = ((startSymbol === '{{') && (endSymbol === '}}'));

            /**
             * Checks if the target element has the requested style by key
             * @param {DOMElement|JQLite} target Target element
             * @param {string} key Style key
             * @param {string=} expectedVal Optional expected value
             * @returns {boolean} Whether the target element has the style or not
             */
            var hasComputedStyle = function(target, key, expectedVal) {
                var hasValue = false;

                if (target && target.length) {
                    var computedStyles = $window.getComputedStyle(target[0]);
                    hasValue = angular.isDefined(computedStyles[key]) && (expectedVal ? computedStyles[key] == expectedVal : true);
                }

                return hasValue;
            };

            var $mdUtil = {
                dom: {},
                now: window.performance ?
                    angular.bind(window.performance, window.performance.now) : Date.now || function() {
                        return new Date().getTime();
                    },

                clientRect: function(element, offsetParent, isOffsetRect) {
                    var node = getNode(element);
                    offsetParent = getNode(offsetParent || node.offsetParent || document.body);
                    var nodeRect = node.getBoundingClientRect();

                    // The user can ask for an offsetRect: a rect relative to the offsetParent,
                    // or a clientRect: a rect relative to the page
                    var offsetRect = isOffsetRect ?
                        offsetParent.getBoundingClientRect() : {
                            left: 0,
                            top: 0,
                            width: 0,
                            height: 0
                        };
                    return {
                        left: nodeRect.left - offsetRect.left,
                        top: nodeRect.top - offsetRect.top,
                        width: nodeRect.width,
                        height: nodeRect.height
                    };
                },
                offsetRect: function(element, offsetParent) {
                    return $mdUtil.clientRect(element, offsetParent, true);
                },

                // Annoying method to copy nodes to an array, thanks to IE
                nodesToArray: function(nodes) {
                    nodes = nodes || [];

                    var results = [];
                    for (var i = 0; i < nodes.length; ++i) {
                        results.push(nodes.item(i));
                    }
                    return results;
                },

                /**
                 * Calculate the positive scroll offset
                 * TODO: Check with pinch-zoom in IE/Chrome;
                 *       https://code.google.com/p/chromium/issues/detail?id=496285
                 */
                scrollTop: function(element) {
                    element = angular.element(element || $document[0].body);

                    var body = (element[0] == $document[0].body) ? $document[0].body : undefined;
                    var scrollTop = body ? body.scrollTop + body.parentElement.scrollTop : 0;

                    // Calculate the positive scroll offset
                    return scrollTop || Math.abs(element[0].getBoundingClientRect().top);
                },

                /**
                 * @ngdoc directive
                 * @name mdAutofocus
                 * @module material.core.util
                 *

                 *
                 * @description
                 * `$mdUtil.findFocusTarget()` provides an optional way to identify the focused element when a dialog, bottomsheet, sideNav
                 * or other element opens. This is optional attribute finds a nested element with the mdAutoFocus attribute and optional
                 * expression. An expression may be specified as the directive value; to enable conditional activation of the autoFocus.
                 *
                 * @usage
                 * ### Dialog
                 * <hljs lang="html">
                 * <md-dialog>
                 *   <form>
                 *     <md-input-container>
                 *       <label for="testInput">Label</label>
                 *       <input id="testInput" type="text" md-autofocus>
                 *     </md-input-container>
                 *   </form>
                 * </md-dialog>
                 * </hljs>
                 *
                 * ### Bottomsheet
                 * <hljs lang="html">
                 * <md-bottom-sheet class="md-list md-has-header">
                 *  <md-subheader>Comment Actions</md-subheader>
                 *  <md-list>
                 *    <md-list-item ng-repeat="item in items">
                 *
                 *      <md-button md-autofocus="$index == 2">
                 *        <md-icon md-svg-src="{{item.icon}}"></md-icon>
                 *        <span class="md-inline-list-icon-label">{{ item.name }}</span>
                 *      </md-button>
                 *
                 *    </md-list-item>
                 *  </md-list>
                 * </md-bottom-sheet>
                 * </hljs>
                 *
                 * ### Autocomplete
                 * <hljs lang="html">
                 *   <md-autocomplete
                 *       md-autofocus
                 *       md-selected-item="selectedItem"
                 *       md-search-text="searchText"
                 *       md-items="item in getMatches(searchText)"
                 *       md-item-text="item.display">
                 *     <span md-highlight-text="searchText">{{item.display}}</span>
                 *   </md-autocomplete>
                 * </hljs>
                 *
                 * ### Sidenav
                 * <hljs lang="html">
                 * <div layout="row" ng-controller="MyController">
                 *   <md-sidenav md-component-id="left" class="md-sidenav-left">
                 *     Left Nav!
                 *   </md-sidenav>
                 *
                 *   <md-content>
                 *     Center Content
                 *     <md-button ng-click="openLeftMenu()">
                 *       Open Left Menu
                 *     </md-button>
                 *   </md-content>
                 *
                 *   <md-sidenav md-component-id="right"
                 *     md-is-locked-open="$mdMedia('min-width: 333px')"
                 *     class="md-sidenav-right">
                 *     <form>
                 *       <md-input-container>
                 *         <label for="testInput">Test input</label>
                 *         <input id="testInput" type="text"
                 *                ng-model="data" md-autofocus>
                 *       </md-input-container>
                 *     </form>
                 *   </md-sidenav>
                 * </div>
                 * </hljs>
                 **/
                findFocusTarget: function(containerEl, attributeVal) {
                    var AUTO_FOCUS = '[md-autofocus]';
                    var elToFocus;

                    elToFocus = scanForFocusable(containerEl, attributeVal || AUTO_FOCUS);

                    if (!elToFocus && attributeVal != AUTO_FOCUS) {
                        // Scan for deprecated attribute
                        elToFocus = scanForFocusable(containerEl, '[md-auto-focus]');

                        if (!elToFocus) {
                            // Scan for fallback to 'universal' API
                            elToFocus = scanForFocusable(containerEl, AUTO_FOCUS);
                        }
                    }

                    return elToFocus;

                    /**
                     * Can target and nested children for specified Selector (attribute)
                     * whose value may be an expression that evaluates to True/False.
                     */
                    function scanForFocusable(target, selector) {
                        var elFound, items = target[0].querySelectorAll(selector);

                        // Find the last child element with the focus attribute
                        if (items && items.length) {
                            var EXP_ATTR = /\s*\[?([\-a-z]*)\]?\s*/i;
                            var matches = EXP_ATTR.exec(selector);
                            var attribute = matches ? matches[1] : null;

                            items.length && angular.forEach(items, function(it) {
                                it = angular.element(it);

                                // If the expression evaluates to FALSE, then it is not focusable target
                                var focusExpression = it[0].getAttribute(attribute);
                                var isFocusable = !focusExpression || !$mdUtil.validateScope(it) ? true :
                                    (it.scope().$eval(focusExpression) !== false);

                                if (isFocusable) elFound = it;
                            });
                        }
                        return elFound;
                    }
                },

                // Disables scroll around the passed element.
                disableScrollAround: function(element, parent) {
                    $mdUtil.disableScrollAround._count = $mdUtil.disableScrollAround._count || 0;
                    ++$mdUtil.disableScrollAround._count;
                    if ($mdUtil.disableScrollAround._enableScrolling) return $mdUtil.disableScrollAround._enableScrolling;
                    element = angular.element(element);
                    var body = $document[0].body,
                        restoreBody = disableBodyScroll(),
                        restoreElement = disableElementScroll(parent);

                    return $mdUtil.disableScrollAround._enableScrolling = function() {
                        if (!--$mdUtil.disableScrollAround._count) {
                            restoreBody();
                            restoreElement();
                            delete $mdUtil.disableScrollAround._enableScrolling;
                        }
                    };

                    // Creates a virtual scrolling mask to absorb touchmove, keyboard, scrollbar clicking, and wheel events
                    function disableElementScroll(element) {
                        element = angular.element(element || body)[0];
                        var zIndex = 50;
                        var scrollMask = angular.element(
                            '<div class="md-scroll-mask" style="z-index: ' + zIndex + '">' +
                            '  <div class="md-scroll-mask-bar"></div>' +
                            '</div>');
                        element.appendChild(scrollMask[0]);

                        scrollMask.on('wheel', preventDefault);
                        scrollMask.on('touchmove', preventDefault);
                        $document.on('keydown', disableKeyNav);

                        return function restoreScroll() {
                            scrollMask.off('wheel');
                            scrollMask.off('touchmove');
                            scrollMask[0].parentNode.removeChild(scrollMask[0]);
                            $document.off('keydown', disableKeyNav);
                            delete $mdUtil.disableScrollAround._enableScrolling;
                        };

                        // Prevent keypresses from elements inside the body
                        // used to stop the keypresses that could cause the page to scroll
                        // (arrow keys, spacebar, tab, etc).
                        function disableKeyNav(e) {
                            //-- temporarily removed this logic, will possibly re-add at a later date
                            //if (!element[0].contains(e.target)) {
                            //  e.preventDefault();
                            //  e.stopImmediatePropagation();
                            //}
                        }

                        function preventDefault(e) {
                            e.preventDefault();
                        }
                    }

                    // Converts the body to a position fixed block and translate it to the proper scroll
                    // position
                    function disableBodyScroll() {
                        var htmlNode = body.parentNode;
                        var restoreHtmlStyle = htmlNode.getAttribute('style') || '';
                        var restoreBodyStyle = body.getAttribute('style') || '';
                        var scrollOffset = $mdUtil.scrollTop(body);
                        var clientWidth = body.clientWidth;

                        if (body.scrollHeight > body.clientHeight + 1) {
                            applyStyles(body, {
                                position: 'fixed',
                                width: '100%',
                                top: -scrollOffset + 'px'
                            });

                            applyStyles(htmlNode, {
                                overflowY: 'scroll'
                            });
                        }

                        if (body.clientWidth < clientWidth) applyStyles(body, {
                            overflow: 'hidden'
                        });

                        return function restoreScroll() {
                            body.setAttribute('style', restoreBodyStyle);
                            htmlNode.setAttribute('style', restoreHtmlStyle);
                            body.scrollTop = scrollOffset;
                            htmlNode.scrollTop = scrollOffset;
                        };
                    }

                    function applyStyles(el, styles) {
                        for (var key in styles) {
                            el.style[key] = styles[key];
                        }
                    }
                },
                enableScrolling: function() {
                    var method = this.disableScrollAround._enableScrolling;
                    method && method();
                },
                floatingScrollbars: function() {
                    if (this.floatingScrollbars.cached === undefined) {
                        var tempNode = angular.element('<div style="width: 100%; z-index: -1; position: absolute; height: 35px; overflow-y: scroll"><div style="height: 60px;"></div></div>');
                        $document[0].body.appendChild(tempNode[0]);
                        this.floatingScrollbars.cached = (tempNode[0].offsetWidth == tempNode[0].childNodes[0].offsetWidth);
                        tempNode.remove();
                    }
                    return this.floatingScrollbars.cached;
                },

                // Mobile safari only allows you to set focus in click event listeners...
                forceFocus: function(element) {
                    var node = element[0] || element;

                    document.addEventListener('click', function focusOnClick(ev) {
                        if (ev.target === node && ev.$focus) {
                            node.focus();
                            ev.stopImmediatePropagation();
                            ev.preventDefault();
                            node.removeEventListener('click', focusOnClick);
                        }
                    }, true);

                    var newEvent = document.createEvent('MouseEvents');
                    newEvent.initMouseEvent('click', false, true, window, {}, 0, 0, 0, 0,
                        false, false, false, false, 0, null);
                    newEvent.$material = true;
                    newEvent.$focus = true;
                    node.dispatchEvent(newEvent);
                },

                /**
                 * facade to build md-backdrop element with desired styles
                 * NOTE: Use $compile to trigger backdrop postLink function
                 */
                createBackdrop: function(scope, addClass) {
                    return $compile($mdUtil.supplant('<md-backdrop class="{0}">', [addClass]))(scope);
                },

                /**
                 * supplant() method from Crockford's `Remedial Javascript`
                 * Equivalent to use of $interpolate; without dependency on
                 * interpolation symbols and scope. Note: the '{<token>}' can
                 * be property names, property chains, or array indices.
                 */
                supplant: function(template, values, pattern) {
                    pattern = pattern || /\{([^\{\}]*)\}/g;
                    return template.replace(pattern, function(a, b) {
                        var p = b.split('.'),
                            r = values;
                        try {
                            for (var s in p) {
                                if (p.hasOwnProperty(s)) {
                                    r = r[p[s]];
                                }
                            }
                        } catch (e) {
                            r = a;
                        }
                        return (typeof r === 'string' || typeof r === 'number') ? r : a;
                    });
                },

                fakeNgModel: function() {
                    return {
                        $fake: true,
                        $setTouched: angular.noop,
                        $setViewValue: function(value) {
                            this.$viewValue = value;
                            this.$render(value);
                            this.$viewChangeListeners.forEach(function(cb) {
                                cb();
                            });
                        },
                        $isEmpty: function(value) {
                            return ('' + value).length === 0;
                        },
                        $parsers: [],
                        $formatters: [],
                        $viewChangeListeners: [],
                        $render: angular.noop
                    };
                },

                // Returns a function, that, as long as it continues to be invoked, will not
                // be triggered. The function will be called after it stops being called for
                // N milliseconds.
                // @param wait Integer value of msecs to delay (since last debounce reset); default value 10 msecs
                // @param invokeApply should the $timeout trigger $digest() dirty checking
                debounce: function(func, wait, scope, invokeApply) {
                    var timer;

                    return function debounced() {
                        var context = scope,
                            args = Array.prototype.slice.call(arguments);

                        $timeout.cancel(timer);
                        timer = $timeout(function() {

                            timer = undefined;
                            func.apply(context, args);

                        }, wait || 10, invokeApply);
                    };
                },

                // Returns a function that can only be triggered every `delay` milliseconds.
                // In other words, the function will not be called unless it has been more
                // than `delay` milliseconds since the last call.
                throttle: function throttle(func, delay) {
                    var recent;
                    return function throttled() {
                        var context = this;
                        var args = arguments;
                        var now = $mdUtil.now();

                        if (!recent || (now - recent > delay)) {
                            func.apply(context, args);
                            recent = now;
                        }
                    };
                },

                /**
                 * Measures the number of milliseconds taken to run the provided callback
                 * function. Uses a high-precision timer if available.
                 */
                time: function time(cb) {
                    var start = $mdUtil.now();
                    cb();
                    return $mdUtil.now() - start;
                },

                /**
                 * Create an implicit getter that caches its `getter()`
                 * lookup value
                 */
                valueOnUse: function(scope, key, getter) {
                    var value = null,
                        args = Array.prototype.slice.call(arguments);
                    var params = (args.length > 3) ? args.slice(3) : [];

                    Object.defineProperty(scope, key, {
                        get: function() {
                            if (value === null) value = getter.apply(scope, params);
                            return value;
                        }
                    });
                },

                /**
                 * Get a unique ID.
                 *
                 * @returns {string} an unique numeric string
                 */
                nextUid: function() {
                    return '' + nextUniqueId++;
                },

                /**
                 * By default AngularJS attaches information about binding and scopes to DOM nodes,
                 * and adds CSS classes to data-bound elements. But this information is NOT available
                 * when `$compileProvider.debugInfoEnabled(false);`
                 *
                 * @see https://docs.angularjs.org/guide/production
                 */
                validateScope: function(element) {
                    var hasScope = element && angular.isDefined(element.scope());
                    if (!hasScope) {
                        $log.warn("element.scope() is not available when 'debug mode' == false. @see https://docs.angularjs.org/guide/production!");
                    }

                    return hasScope;
                },

                // Stop watchers and events from firing on a scope without destroying it,
                // by disconnecting it from its parent and its siblings' linked lists.
                disconnectScope: function disconnectScope(scope) {
                    if (!scope) return;

                    // we can't destroy the root scope or a scope that has been already destroyed
                    if (scope.$root === scope) return;
                    if (scope.$$destroyed) return;

                    var parent = scope.$parent;
                    scope.$$disconnected = true;

                    // See Scope.$destroy
                    if (parent.$$childHead === scope) parent.$$childHead = scope.$$nextSibling;
                    if (parent.$$childTail === scope) parent.$$childTail = scope.$$prevSibling;
                    if (scope.$$prevSibling) scope.$$prevSibling.$$nextSibling = scope.$$nextSibling;
                    if (scope.$$nextSibling) scope.$$nextSibling.$$prevSibling = scope.$$prevSibling;

                    scope.$$nextSibling = scope.$$prevSibling = null;

                },

                // Undo the effects of disconnectScope above.
                reconnectScope: function reconnectScope(scope) {
                    if (!scope) return;

                    // we can't disconnect the root node or scope already disconnected
                    if (scope.$root === scope) return;
                    if (!scope.$$disconnected) return;

                    var child = scope;

                    var parent = child.$parent;
                    child.$$disconnected = false;
                    // See Scope.$new for this logic...
                    child.$$prevSibling = parent.$$childTail;
                    if (parent.$$childHead) {
                        parent.$$childTail.$$nextSibling = child;
                        parent.$$childTail = child;
                    } else {
                        parent.$$childHead = parent.$$childTail = child;
                    }
                },

                /*
                 * getClosest replicates jQuery.closest() to walk up the DOM tree until it finds a matching nodeName
                 *
                 * @param el Element to start walking the DOM from
                 * @param tagName Tag name to find closest to el, such as 'form'
                 * @param onlyParent Only start checking from the parent element, not `el`.
                 */
                getClosest: function getClosest(el, tagName, onlyParent) {
                    if (el instanceof angular.element) el = el[0];
                    tagName = tagName.toUpperCase();
                    if (onlyParent) el = el.parentNode;
                    if (!el) return null;
                    do {
                        if (el.nodeName === tagName) {
                            return el;
                        }
                    } while (el = el.parentNode);
                    return null;
                },

                /**
                 * Build polyfill for the Node.contains feature (if needed)
                 */
                elementContains: function(node, child) {
                    var hasContains = (window.Node && window.Node.prototype && Node.prototype.contains);
                    var findFn = hasContains ? angular.bind(node, node.contains) : angular.bind(node, function(arg) {
                        // compares the positions of two nodes and returns a bitmask
                        return (node === child) || !!(this.compareDocumentPosition(arg) & 16)
                    });

                    return findFn(child);
                },

                /**
                 * Functional equivalent for $element.filter(‘md-bottom-sheet’)
                 * useful with interimElements where the element and its container are important...
                 *
                 * @param {[]} elements to scan
                 * @param {string} name of node to find (e.g. 'md-dialog')
                 * @param {boolean=} optional flag to allow deep scans; defaults to 'false'.
                 * @param {boolean=} optional flag to enable log warnings; defaults to false
                 */
                extractElementByName: function(element, nodeName, scanDeep, warnNotFound) {
                    var found = scanTree(element);
                    if (!found && !!warnNotFound) {
                        $log.warn($mdUtil.supplant("Unable to find node '{0}' in element '{1}'.", [nodeName, element[0].outerHTML]));
                    }

                    return angular.element(found || element);

                    /**
                     * Breadth-First tree scan for element with matching `nodeName`
                     */
                    function scanTree(element) {
                        return scanLevel(element) || (!!scanDeep ? scanChildren(element) : null);
                    }

                    /**
                     * Case-insensitive scan of current elements only (do not descend).
                     */
                    function scanLevel(element) {
                        if (element) {
                            for (var i = 0, len = element.length; i < len; i++) {
                                if (element[i].nodeName.toLowerCase() === nodeName) {
                                    return element[i];
                                }
                            }
                        }
                        return null;
                    }

                    /**
                     * Scan children of specified node
                     */
                    function scanChildren(element) {
                        var found;
                        if (element) {
                            for (var i = 0, len = element.length; i < len; i++) {
                                var target = element[i];
                                if (!found) {
                                    for (var j = 0, numChild = target.childNodes.length; j < numChild; j++) {
                                        found = found || scanTree([target.childNodes[j]]);
                                    }
                                }
                            }
                        }
                        return found;
                    }

                },

                /**
                 * Give optional properties with no value a boolean true if attr provided or false otherwise
                 */
                initOptionalProperties: function(scope, attr, defaults) {
                    defaults = defaults || {};
                    angular.forEach(scope.$$isolateBindings, function(binding, key) {
                        if (binding.optional && angular.isUndefined(scope[key])) {
                            var attrIsDefined = angular.isDefined(attr[binding.attrName]);
                            scope[key] = angular.isDefined(defaults[key]) ? defaults[key] : attrIsDefined;
                        }
                    });
                },

                /**
                 * Alternative to $timeout calls with 0 delay.
                 * nextTick() coalesces all calls within a single frame
                 * to minimize $digest thrashing
                 *
                 * @param callback
                 * @param digest
                 * @returns {*}
                 */
                nextTick: function(callback, digest, scope) {
                    //-- grab function reference for storing state details
                    var nextTick = $mdUtil.nextTick;
                    var timeout = nextTick.timeout;
                    var queue = nextTick.queue || [];

                    //-- add callback to the queue
                    queue.push(callback);

                    //-- set default value for digest
                    if (digest == null) digest = true;

                    //-- store updated digest/queue values
                    nextTick.digest = nextTick.digest || digest;
                    nextTick.queue = queue;

                    //-- either return existing timeout or create a new one
                    return timeout || (nextTick.timeout = $timeout(processQueue, 0, false));

                    /**
                     * Grab a copy of the current queue
                     * Clear the queue for future use
                     * Process the existing queue
                     * Trigger digest if necessary
                     */
                    function processQueue() {
                        var skip = scope && scope.$$destroyed;
                        var queue = !skip ? nextTick.queue : [];
                        var digest = !skip ? nextTick.digest : null;

                        nextTick.queue = [];
                        nextTick.timeout = null;
                        nextTick.digest = false;

                        queue.forEach(function(callback) {
                            callback();
                        });

                        if (digest) $rootScope.$digest();
                    }
                },

                /**
                 * Processes a template and replaces the start/end symbols if the application has
                 * overriden them.
                 *
                 * @param template The template to process whose start/end tags may be replaced.
                 * @returns {*}
                 */
                processTemplate: function(template) {
                    if (usesStandardSymbols) {
                        return template;
                    } else {
                        if (!template || !angular.isString(template)) return template;
                        return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
                    }
                },

                /**
                 * Scan up dom hierarchy for enabled parent;
                 */
                getParentWithPointerEvents: function(element) {
                    var parent = element.parent();

                    // jqLite might return a non-null, but still empty, parent; so check for parent and length
                    while (hasComputedStyle(parent, 'pointer-events', 'none')) {
                        parent = parent.parent();
                    }

                    return parent;
                },

                getNearestContentElement: function(element) {
                    var current = element.parent()[0];
                    // Look for the nearest parent md-content, stopping at the rootElement.
                    while (current && current !== $rootElement[0] && current !== document.body && current.nodeName.toUpperCase() !== 'MD-CONTENT') {
                        current = current.parentNode;
                    }
                    return current;
                },

                hasComputedStyle: hasComputedStyle
            };

            // Instantiate other namespace utility methods

            $mdUtil.dom.animator = $$mdAnimate($mdUtil);

            return $mdUtil;

            function getNode(el) {
                return el[0] || el;
            }

        }
        UtilFactory.$inject = ["$document", "$timeout", "$compile", "$rootScope", "$$mdAnimate", "$interpolate", "$log", "$rootElement", "$window"];

        /*
         * Since removing jQuery from the demos, some code that uses `element.focus()` is broken.
         * We need to add `element.focus()`, because it's testable unlike `element[0].focus`.
         */

        angular.element.prototype.focus = angular.element.prototype.focus || function() {
            if (this.length) {
                this[0].focus();
            }
            return this;
        };
        angular.element.prototype.blur = angular.element.prototype.blur || function() {
            if (this.length) {
                this[0].blur();
            }
            return this;
        };


    })();
    (function() {
        "use strict";


        angular.module('material.core')
            .service('$mdAria', AriaService);

        /*
         * @ngInject
         */
        function AriaService($$rAF, $log, $window) {

            return {
                expect: expect,
                expectAsync: expectAsync,
                expectWithText: expectWithText
            };

            /**
             * Check if expected attribute has been specified on the target element or child
             * @param element
             * @param attrName
             * @param {optional} defaultValue What to set the attr to if no value is found
             */
            function expect(element, attrName, defaultValue) {

                var node = angular.element(element)[0] || element;

                // if node exists and neither it nor its children have the attribute
                if (node &&
                    ((!node.hasAttribute(attrName) ||
                            node.getAttribute(attrName).length === 0) &&
                        !childHasAttribute(node, attrName))) {

                    defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : '';
                    if (defaultValue.length) {
                        element.attr(attrName, defaultValue);
                    } else {
                        $log.warn('ARIA: Attribute "', attrName, '", required for accessibility, is missing on node:', node);
                    }

                }
            }

            function expectAsync(element, attrName, defaultValueGetter) {
                // Problem: when retrieving the element's contents synchronously to find the label,
                // the text may not be defined yet in the case of a binding.
                // There is a higher chance that a binding will be defined if we wait one frame.
                $$rAF(function() {
                    expect(element, attrName, defaultValueGetter());
                });
            }

            function expectWithText(element, attrName) {
                expectAsync(element, attrName, function() {
                    return getText(element);
                });
            }

            function getText(element) {
                return element.text().trim();
            }

            function childHasAttribute(node, attrName) {
                var hasChildren = node.hasChildNodes(),
                    hasAttr = false;

                function isHidden(el) {
                    var style = el.currentStyle ? el.currentStyle : $window.getComputedStyle(el);
                    return (style.display === 'none');
                }

                if (hasChildren) {
                    var children = node.childNodes;
                    for (var i = 0; i < children.length; i++) {
                        var child = children[i];
                        if (child.nodeType === 1 && child.hasAttribute(attrName)) {
                            if (!isHidden(child)) {
                                hasAttr = true;
                            }
                        }
                    }
                }
                return hasAttr;
            }
        }
        AriaService.$inject = ["$$rAF", "$log", "$window"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.core')
            .service('$mdCompiler', mdCompilerService);

        function mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {
            /* jshint validthis: true */

            /*
             * @ngdoc service
             * @name $mdCompiler
             * @module material.core
             * @description
             * The $mdCompiler service is an abstraction of angular's compiler, that allows the developer
             * to easily compile an element with a templateUrl, controller, and locals.
             *
             * @usage
             * <hljs lang="js">
             * $mdCompiler.compile({
             *   templateUrl: 'modal.html',
             *   controller: 'ModalCtrl',
             *   locals: {
             *     modal: myModalInstance;
             *   }
             * }).then(function(compileData) {
             *   compileData.element; // modal.html's template in an element
             *   compileData.link(myScope); //attach controller & scope to element
             * });
             * </hljs>
             */

            /*
             * @ngdoc method
             * @name $mdCompiler#compile
             * @description A helper to compile an HTML template/templateUrl with a given controller,
             * locals, and scope.
             * @param {object} options An options object, with the following properties:
             *
             *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with
             *      newly created scope or the name of a registered controller if passed as a string.
             *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be
             *      published to scope under the `controllerAs` name.
             *    - `template` - `{string=}` An html template as a string.
             *    - `templateUrl` - `{string=}` A path to an html template.
             *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after
             *      it is loaded. It will be given the template string as a parameter, and should
             *      return a a new string representing the transformed template.
             *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should
             *      be injected into the controller. If any of these dependencies are promises, the compiler
             *      will wait for them all to be resolved, or if one is rejected before the controller is
             *      instantiated `compile()` will fail..
             *      * `key` - `{string}`: a name of a dependency to be injected into the controller.
             *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.
             *        Otherwise if function, then it is injected and the return value is treated as the
             *        dependency. If the result is a promise, it is resolved before its value is
             *        injected into the controller.
             *
             * @returns {object=} promise A promise, which will be resolved with a `compileData` object.
             * `compileData` has the following properties:
             *
             *   - `element` - `{element}`: an uncompiled element matching the provided template.
             *   - `link` - `{function(scope)}`: A link function, which, when called, will compile
             *     the element and instantiate the provided controller (if given).
             *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is
             *     called. If `bindToController` is true, they will be coppied to the ctrl instead
             *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.
             */
            this.compile = function(options) {
                var templateUrl = options.templateUrl;
                var template = options.template || '';
                var controller = options.controller;
                var controllerAs = options.controllerAs;
                var resolve = angular.extend({}, options.resolve || {});
                var locals = angular.extend({}, options.locals || {});
                var transformTemplate = options.transformTemplate || angular.identity;
                var bindToController = options.bindToController;

                // Take resolve values and invoke them.
                // Resolves can either be a string (value: 'MyRegisteredAngularConst'),
                // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})
                angular.forEach(resolve, function(value, key) {
                    if (angular.isString(value)) {
                        resolve[key] = $injector.get(value);
                    } else {
                        resolve[key] = $injector.invoke(value);
                    }
                });
                //Add the locals, which are just straight values to inject
                //eg locals: { three: 3 }, will inject three into the controller
                angular.extend(resolve, locals);

                if (templateUrl) {
                    resolve.$template = $http.get(templateUrl, {
                            cache: $templateCache
                        })
                        .then(function(response) {
                            return response.data;
                        });
                } else {
                    resolve.$template = $q.when(template);
                }

                // Wait for all the resolves to finish if they are promises
                return $q.all(resolve).then(function(locals) {

                    var compiledData;
                    var template = transformTemplate(locals.$template, options);
                    var element = options.element || angular.element('<div>').html(template.trim()).contents();
                    var linkFn = $compile(element);

                    // Return a linking function that can be used later when the element is ready
                    return compiledData = {
                        locals: locals,
                        element: element,
                        link: function link(scope) {
                            locals.$scope = scope;

                            //Instantiate controller if it exists, because we have scope
                            if (controller) {
                                var invokeCtrl = $controller(controller, locals, true);
                                if (bindToController) {
                                    angular.extend(invokeCtrl.instance, locals);
                                }
                                var ctrl = invokeCtrl();
                                //See angular-route source for this logic
                                element.data('$ngControllerController', ctrl);
                                element.children().data('$ngControllerController', ctrl);

                                if (controllerAs) {
                                    scope[controllerAs] = ctrl;
                                }

                                // Publish reference to this controller
                                compiledData.controller = ctrl;
                            }
                            return linkFn(scope);
                        }
                    };
                });

            };
        }
        mdCompilerService.$inject = ["$q", "$http", "$injector", "$compile", "$controller", "$templateCache"];

    })();
    (function() {
        "use strict";

        var HANDLERS = {};

        /* The state of the current 'pointer'
         * The pointer represents the state of the current touch.
         * It contains normalized x and y coordinates from DOM events,
         * as well as other information abstracted from the DOM.
         */

        var pointer, lastPointer, forceSkipClickHijack = false;

        /**
         * The position of the most recent click if that click was on a label element.
         * @type {{x: number, y: number}?}
         */
        var lastLabelClickPos = null;

        // Used to attach event listeners once when multiple ng-apps are running.
        var isInitialized = false;

        angular
            .module('material.core.gestures', [])
            .provider('$mdGesture', MdGestureProvider)
            .factory('$$MdGestureHandler', MdGestureHandler)
            .run(attachToDocument);

        /**
         * @ngdoc service
         * @name $mdGestureProvider
         * @module material.core.gestures
         *
         * @description
         * In some scenarios on Mobile devices (without jQuery), the click events should NOT be hijacked.
         * `$mdGestureProvider` is used to configure the Gesture module to ignore or skip click hijacking on mobile
         * devices.
         *
         * <hljs lang="js">
         *   app.config(function($mdGestureProvider) {
         *
         *     // For mobile devices without jQuery loaded, do not
         *     // intercept click events during the capture phase.
         *     $mdGestureProvider.skipClickHijack();
         *
         *   });
         * </hljs>
         *
         */
        function MdGestureProvider() {}

        MdGestureProvider.prototype = {

            // Publish access to setter to configure a variable  BEFORE the
            // $mdGesture service is instantiated...
            skipClickHijack: function() {
                return forceSkipClickHijack = true;
            },

            /**
             * $get is used to build an instance of $mdGesture
             * @ngInject
             */
            $get: ["$$MdGestureHandler", "$$rAF", "$timeout", function($$MdGestureHandler, $$rAF, $timeout) {
                return new MdGesture($$MdGestureHandler, $$rAF, $timeout);
            }]
        };



        /**
         * MdGesture factory construction function
         * @ngInject
         */
        function MdGesture($$MdGestureHandler, $$rAF, $timeout) {
            var userAgent = navigator.userAgent || navigator.vendor || window.opera;
            var isIos = userAgent.match(/ipad|iphone|ipod/i);
            var isAndroid = userAgent.match(/android/i);
            var hasJQuery = (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);

            var self = {
                handler: addHandler,
                register: register,
                // On mobile w/out jQuery, we normally intercept clicks. Should we skip that?
                isHijackingClicks: (isIos || isAndroid) && !hasJQuery && !forceSkipClickHijack
            };

            if (self.isHijackingClicks) {
                var maxClickDistance = 6;
                self.handler('click', {
                    options: {
                        maxDistance: maxClickDistance
                    },
                    onEnd: checkDistanceAndEmit('click')
                });

                self.handler('focus', {
                    options: {
                        maxDistance: maxClickDistance
                    },
                    onEnd: function(ev, pointer) {
                        if (pointer.distance < this.state.options.maxDistance) {
                            if (canFocus(ev.target)) {
                                this.dispatchEvent(ev, 'focus', pointer);
                                ev.target.focus();
                            }
                        }

                        function canFocus(element) {
                            var focusableElements = ['INPUT', 'SELECT', 'BUTTON', 'TEXTAREA', 'VIDEO', 'AUDIO'];

                            return (element.getAttribute('tabindex') != '-1') &&
                                !element.hasAttribute('DISABLED') &&
                                (element.hasAttribute('tabindex') || element.hasAttribute('href') ||
                                    (focusableElements.indexOf(element.nodeName) != -1));
                        }
                    }
                });

                self.handler('mouseup', {
                    options: {
                        maxDistance: maxClickDistance
                    },
                    onEnd: checkDistanceAndEmit('mouseup')
                });

                self.handler('mousedown', {
                    onStart: function(ev) {
                        this.dispatchEvent(ev, 'mousedown');
                    }
                });
            }

            function checkDistanceAndEmit(eventName) {
                return function(ev, pointer) {
                    if (pointer.distance < this.state.options.maxDistance) {
                        this.dispatchEvent(ev, eventName, pointer);
                    }
                };
            }

            /*
             * Register an element to listen for a handler.
             * This allows an element to override the default options for a handler.
             * Additionally, some handlers like drag and hold only dispatch events if
             * the domEvent happens inside an element that's registered to listen for these events.
             *
             * @see GestureHandler for how overriding of default options works.
             * @example $mdGesture.register(myElement, 'drag', { minDistance: 20, horziontal: false })
             */
            function register(element, handlerName, options) {
                var handler = HANDLERS[handlerName.replace(/^\$md./, '')];
                if (!handler) {
                    throw new Error('Failed to register element with handler ' + handlerName + '. ' +
                        'Available handlers: ' + Object.keys(HANDLERS).join(', '));
                }
                return handler.registerElement(element, options);
            }

            /*
             * add a handler to $mdGesture. see below.
             */
            function addHandler(name, definition) {
                var handler = new $$MdGestureHandler(name);
                angular.extend(handler, definition);
                HANDLERS[name] = handler;

                return self;
            }

            /*
             * Register handlers. These listen to touch/start/move events, interpret them,
             * and dispatch gesture events depending on options & conditions. These are all
             * instances of GestureHandler.
             * @see GestureHandler 
             */
            return self
                /*
                 * The press handler dispatches an event on touchdown/touchend.
                 * It's a simple abstraction of touch/mouse/pointer start and end.
                 */
                .handler('press', {
                    onStart: function(ev, pointer) {
                        this.dispatchEvent(ev, '$md.pressdown');
                    },
                    onEnd: function(ev, pointer) {
                        this.dispatchEvent(ev, '$md.pressup');
                    }
                })

            /*
             * The hold handler dispatches an event if the user keeps their finger within
             * the same <maxDistance> area for <delay> ms.
             * The hold handler will only run if a parent of the touch target is registered
             * to listen for hold events through $mdGesture.register()
             */
            .handler('hold', {
                options: {
                    maxDistance: 6,
                    delay: 500
                },
                onCancel: function() {
                    $timeout.cancel(this.state.timeout);
                },
                onStart: function(ev, pointer) {
                    // For hold, require a parent to be registered with $mdGesture.register()
                    // Because we prevent scroll events, this is necessary.
                    if (!this.state.registeredParent) return this.cancel();

                    this.state.pos = {
                        x: pointer.x,
                        y: pointer.y
                    };
                    this.state.timeout = $timeout(angular.bind(this, function holdDelayFn() {
                        this.dispatchEvent(ev, '$md.hold');
                        this.cancel(); //we're done!
                    }), this.state.options.delay, false);
                },
                onMove: function(ev, pointer) {
                    // Don't scroll while waiting for hold.
                    // If we don't preventDefault touchmove events here, Android will assume we don't
                    // want to listen to anymore touch events. It will start scrolling and stop sending
                    // touchmove events.
                    ev.preventDefault();

                    // If the user moves greater than <maxDistance> pixels, stop the hold timer
                    // set in onStart
                    var dx = this.state.pos.x - pointer.x;
                    var dy = this.state.pos.y - pointer.y;
                    if (Math.sqrt(dx * dx + dy * dy) > this.options.maxDistance) {
                        this.cancel();
                    }
                },
                onEnd: function() {
                    this.onCancel();
                }
            })

            /*
             * The drag handler dispatches a drag event if the user holds and moves his finger greater than
             * <minDistance> px in the x or y direction, depending on options.horizontal.
             * The drag will be cancelled if the user moves his finger greater than <minDistance>*<cancelMultiplier> in
             * the perpindicular direction. Eg if the drag is horizontal and the user moves his finger <minDistance>*<cancelMultiplier>
             * pixels vertically, this handler won't consider the move part of a drag.
             */
            .handler('drag', {
                options: {
                    minDistance: 6,
                    horizontal: true,
                    cancelMultiplier: 1.5
                },
                onStart: function(ev) {
                    // For drag, require a parent to be registered with $mdGesture.register()
                    if (!this.state.registeredParent) this.cancel();
                },
                onMove: function(ev, pointer) {
                    var shouldStartDrag, shouldCancel;
                    // Don't scroll while deciding if this touchmove qualifies as a drag event.
                    // If we don't preventDefault touchmove events here, Android will assume we don't
                    // want to listen to anymore touch events. It will start scrolling and stop sending
                    // touchmove events.
                    ev.preventDefault();

                    if (!this.state.dragPointer) {
                        if (this.state.options.horizontal) {
                            shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;
                            shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * this.state.options.cancelMultiplier;
                        } else {
                            shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;
                            shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * this.state.options.cancelMultiplier;
                        }

                        if (shouldStartDrag) {
                            // Create a new pointer representing this drag, starting at this point where the drag started.
                            this.state.dragPointer = makeStartPointer(ev);
                            updatePointerState(ev, this.state.dragPointer);
                            this.dispatchEvent(ev, '$md.dragstart', this.state.dragPointer);

                        } else if (shouldCancel) {
                            this.cancel();
                        }
                    } else {
                        this.dispatchDragMove(ev);
                    }
                },
                // Only dispatch dragmove events every frame; any more is unnecessray
                dispatchDragMove: $$rAF.throttle(function(ev) {
                    // Make sure the drag didn't stop while waiting for the next frame
                    if (this.state.isRunning) {
                        updatePointerState(ev, this.state.dragPointer);
                        this.dispatchEvent(ev, '$md.drag', this.state.dragPointer);
                    }
                }),
                onEnd: function(ev, pointer) {
                    if (this.state.dragPointer) {
                        updatePointerState(ev, this.state.dragPointer);
                        this.dispatchEvent(ev, '$md.dragend', this.state.dragPointer);
                    }
                }
            })

            /*
             * The swipe handler will dispatch a swipe event if, on the end of a touch,
             * the velocity and distance were high enough.
             */
            .handler('swipe', {
                options: {
                    minVelocity: 0.65,
                    minDistance: 10
                },
                onEnd: function(ev, pointer) {
                    var eventType;

                    if (Math.abs(pointer.velocityX) > this.state.options.minVelocity &&
                        Math.abs(pointer.distanceX) > this.state.options.minDistance) {
                        eventType = pointer.directionX == 'left' ? '$md.swipeleft' : '$md.swiperight';
                        this.dispatchEvent(ev, eventType);
                    } else if (Math.abs(pointer.velocityY) > this.state.options.minVelocity &&
                        Math.abs(pointer.distanceY) > this.state.options.minDistance) {
                        eventType = pointer.directionY == 'up' ? '$md.swipeup' : '$md.swipedown';
                        this.dispatchEvent(ev, eventType);
                    }
                }
            });

        }
        MdGesture.$inject = ["$$MdGestureHandler", "$$rAF", "$timeout"];

        /**
         * MdGestureHandler
         * A GestureHandler is an object which is able to dispatch custom dom events
         * based on native dom {touch,pointer,mouse}{start,move,end} events.
         *
         * A gesture will manage its lifecycle through the start,move,end, and cancel
         * functions, which are called by native dom events.
         *
         * A gesture has the concept of 'options' (eg a swipe's required velocity), which can be
         * overridden by elements registering through $mdGesture.register()
         */
        function GestureHandler(name) {
            this.name = name;
            this.state = {};
        }

        function MdGestureHandler() {
            var hasJQuery = (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);

            GestureHandler.prototype = {
                options: {},
                // jQuery listeners don't work with custom DOMEvents, so we have to dispatch events
                // differently when jQuery is loaded
                dispatchEvent: hasJQuery ? jQueryDispatchEvent : nativeDispatchEvent,

                // These are overridden by the registered handler
                onStart: angular.noop,
                onMove: angular.noop,
                onEnd: angular.noop,
                onCancel: angular.noop,

                // onStart sets up a new state for the handler, which includes options from the
                // nearest registered parent element of ev.target.
                start: function(ev, pointer) {
                    if (this.state.isRunning) return;
                    var parentTarget = this.getNearestParent(ev.target);
                    // Get the options from the nearest registered parent
                    var parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};

                    this.state = {
                        isRunning: true,
                        // Override the default options with the nearest registered parent's options
                        options: angular.extend({}, this.options, parentTargetOptions),
                        // Pass in the registered parent node to the state so the onStart listener can use
                        registeredParent: parentTarget
                    };
                    this.onStart(ev, pointer);
                },
                move: function(ev, pointer) {
                    if (!this.state.isRunning) return;
                    this.onMove(ev, pointer);
                },
                end: function(ev, pointer) {
                    if (!this.state.isRunning) return;
                    this.onEnd(ev, pointer);
                    this.state.isRunning = false;
                },
                cancel: function(ev, pointer) {
                    this.onCancel(ev, pointer);
                    this.state = {};
                },

                // Find and return the nearest parent element that has been registered to
                // listen for this handler via $mdGesture.register(element, 'handlerName').
                getNearestParent: function(node) {
                    var current = node;
                    while (current) {
                        if ((current.$mdGesture || {})[this.name]) {
                            return current;
                        }
                        current = current.parentNode;
                    }
                    return null;
                },

                // Called from $mdGesture.register when an element reigsters itself with a handler.
                // Store the options the user gave on the DOMElement itself. These options will
                // be retrieved with getNearestParent when the handler starts.
                registerElement: function(element, options) {
                    var self = this;
                    element[0].$mdGesture = element[0].$mdGesture || {};
                    element[0].$mdGesture[this.name] = options || {};
                    element.on('$destroy', onDestroy);

                    return onDestroy;

                    function onDestroy() {
                        delete element[0].$mdGesture[self.name];
                        element.off('$destroy', onDestroy);
                    }
                }
            };

            return GestureHandler;

            /*
             * Dispatch an event with jQuery
             * TODO: Make sure this sends bubbling events
             *
             * @param srcEvent the original DOM touch event that started this.
             * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')
             * @param eventPointer the pointer object that matches this event.
             */
            function jQueryDispatchEvent(srcEvent, eventType, eventPointer) {
                eventPointer = eventPointer || pointer;
                var eventObj = new angular.element.Event(eventType);

                eventObj.$material = true;
                eventObj.pointer = eventPointer;
                eventObj.srcEvent = srcEvent;

                angular.extend(eventObj, {
                    clientX: eventPointer.x,
                    clientY: eventPointer.y,
                    screenX: eventPointer.x,
                    screenY: eventPointer.y,
                    pageX: eventPointer.x,
                    pageY: eventPointer.y,
                    ctrlKey: srcEvent.ctrlKey,
                    altKey: srcEvent.altKey,
                    shiftKey: srcEvent.shiftKey,
                    metaKey: srcEvent.metaKey
                });
                angular.element(eventPointer.target).trigger(eventObj);
            }

            /*
             * NOTE: nativeDispatchEvent is very performance sensitive.
             * @param srcEvent the original DOM touch event that started this.
             * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')
             * @param eventPointer the pointer object that matches this event.
             */
            function nativeDispatchEvent(srcEvent, eventType, eventPointer) {
                eventPointer = eventPointer || pointer;
                var eventObj;

                if (eventType === 'click' || eventType == 'mouseup' || eventType == 'mousedown') {
                    eventObj = document.createEvent('MouseEvents');
                    eventObj.initMouseEvent(
                        eventType, true, true, window, srcEvent.detail,
                        eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y,
                        srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey,
                        srcEvent.button, srcEvent.relatedTarget || null
                    );

                } else {
                    eventObj = document.createEvent('CustomEvent');
                    eventObj.initCustomEvent(eventType, true, true, {});
                }
                eventObj.$material = true;
                eventObj.pointer = eventPointer;
                eventObj.srcEvent = srcEvent;
                eventPointer.target.dispatchEvent(eventObj);
            }

        }

        /**
         * Attach Gestures: hook document and check shouldHijack clicks
         * @ngInject
         */
        function attachToDocument($mdGesture, $$MdGestureHandler) {

            // Polyfill document.contains for IE11.
            // TODO: move to util
            document.contains || (document.contains = function(node) {
                return document.body.contains(node);
            });

            if (!isInitialized && $mdGesture.isHijackingClicks) {
                /*
                 * If hijack clicks is true, we preventDefault any click that wasn't
                 * sent by ngMaterial. This is because on older Android & iOS, a false, or 'ghost',
                 * click event will be sent ~400ms after a touchend event happens.
                 * The only way to know if this click is real is to prevent any normal
                 * click events, and add a flag to events sent by material so we know not to prevent those.
                 * 
                 * Two exceptions to click events that should be prevented are:
                 *  - click events sent by the keyboard (eg form submit)
                 *  - events that originate from an Ionic app
                 */
                document.addEventListener('click', clickHijacker, true);
                document.addEventListener('mouseup', mouseInputHijacker, true);
                document.addEventListener('mousedown', mouseInputHijacker, true);
                document.addEventListener('focus', mouseInputHijacker, true);

                isInitialized = true;
            }

            function mouseInputHijacker(ev) {
                var isKeyClick = !ev.clientX && !ev.clientY;
                if (!isKeyClick && !ev.$material && !ev.isIonicTap && !isInputEventFromLabelClick(ev)) {
                    ev.preventDefault();
                    ev.stopPropagation();
                }
            }

            function clickHijacker(ev) {
                var isKeyClick = ev.clientX === 0 && ev.clientY === 0;
                if (!isKeyClick && !ev.$material && !ev.isIonicTap && !isInputEventFromLabelClick(ev)) {
                    ev.preventDefault();
                    ev.stopPropagation();
                    lastLabelClickPos = null;
                } else {
                    lastLabelClickPos = null;
                    if (ev.target.tagName.toLowerCase() == 'label') {
                        lastLabelClickPos = {
                            x: ev.x,
                            y: ev.y
                        };
                    }
                }
            }


            // Listen to all events to cover all platforms.
            var START_EVENTS = 'mousedown touchstart pointerdown';
            var MOVE_EVENTS = 'mousemove touchmove pointermove';
            var END_EVENTS = 'mouseup mouseleave touchend touchcancel pointerup pointercancel';

            angular.element(document)
                .on(START_EVENTS, gestureStart)
                .on(MOVE_EVENTS, gestureMove)
                .on(END_EVENTS, gestureEnd)
                // For testing
                .on('$$mdGestureReset', function gestureClearCache() {
                    lastPointer = pointer = null;
                });

            /*
             * When a DOM event happens, run all registered gesture handlers' lifecycle
             * methods which match the DOM event.
             * Eg when a 'touchstart' event happens, runHandlers('start') will call and
             * run `handler.cancel()` and `handler.start()` on all registered handlers.
             */
            function runHandlers(handlerEvent, event) {
                var handler;
                for (var name in HANDLERS) {
                    handler = HANDLERS[name];
                    if (handler instanceof $$MdGestureHandler) {

                        if (handlerEvent === 'start') {
                            // Run cancel to reset any handlers' state
                            handler.cancel();
                        }
                        handler[handlerEvent](event, pointer);

                    }
                }
            }

            /*
             * gestureStart vets if a start event is legitimate (and not part of a 'ghost click' from iOS/Android)
             * If it is legitimate, we initiate the pointer state and mark the current pointer's type
             * For example, for a touchstart event, mark the current pointer as a 'touch' pointer, so mouse events
             * won't effect it.
             */
            function gestureStart(ev) {
                // If we're already touched down, abort
                if (pointer) return;

                var now = +Date.now();

                // iOS & old android bug: after a touch event, a click event is sent 350 ms later.
                // If <400ms have passed, don't allow an event of a different type than the previous event
                if (lastPointer && !typesMatch(ev, lastPointer) && (now - lastPointer.endTime < 1500)) {
                    return;
                }

                pointer = makeStartPointer(ev);

                runHandlers('start', ev);
            }
            /*
             * If a move event happens of the right type, update the pointer and run all the move handlers.
             * "of the right type": if a mousemove happens but our pointer started with a touch event, do nothing.
             */
            function gestureMove(ev) {
                if (!pointer || !typesMatch(ev, pointer)) return;

                updatePointerState(ev, pointer);
                runHandlers('move', ev);
            }
            /*
             * If an end event happens of the right type, update the pointer, run endHandlers, and save the pointer as 'lastPointer'
             */
            function gestureEnd(ev) {
                if (!pointer || !typesMatch(ev, pointer)) return;

                updatePointerState(ev, pointer);
                pointer.endTime = +Date.now();

                runHandlers('end', ev);

                lastPointer = pointer;
                pointer = null;
            }

        }
        attachToDocument.$inject = ["$mdGesture", "$$MdGestureHandler"];

        // ********************
        // Module Functions
        // ********************

        /*
         * Initiate the pointer. x, y, and the pointer's type.
         */
        function makeStartPointer(ev) {
            var point = getEventPoint(ev);
            var startPointer = {
                startTime: +Date.now(),
                target: ev.target,
                // 'p' for pointer events, 'm' for mouse, 't' for touch
                type: ev.type.charAt(0)
            };
            startPointer.startX = startPointer.x = point.pageX;
            startPointer.startY = startPointer.y = point.pageY;
            return startPointer;
        }

        /*
         * return whether the pointer's type matches the event's type.
         * Eg if a touch event happens but the pointer has a mouse type, return false.
         */
        function typesMatch(ev, pointer) {
            return ev && pointer && ev.type.charAt(0) === pointer.type;
        }

        /**
         * Gets whether the given event is an input event that was caused by clicking on an
         * associated label element.
         *
         * This is necessary because the browser will, upon clicking on a label element, fire an
         * *extra* click event on its associated input (if any). mdGesture is able to flag the label
         * click as with `$material` correctly, but not the second input click.
         *
         * In order to determine whether an input event is from a label click, we compare the (x, y) for
         * the event to the (x, y) for the most recent label click (which is cleared whenever a non-label
         * click occurs). Unfortunately, there are no event properties that tie the input and the label
         * together (such as relatedTarget).
         *
         * @param {MouseEvent} event
         * @returns {boolean}
         */
        function isInputEventFromLabelClick(event) {
            return lastLabelClickPos && lastLabelClickPos.x == event.x && lastLabelClickPos.y == event.y;
        }

        /*
         * Update the given pointer based upon the given DOMEvent.
         * Distance, velocity, direction, duration, etc
         */
        function updatePointerState(ev, pointer) {
            var point = getEventPoint(ev);
            var x = pointer.x = point.pageX;
            var y = pointer.y = point.pageY;

            pointer.distanceX = x - pointer.startX;
            pointer.distanceY = y - pointer.startY;
            pointer.distance = Math.sqrt(
                pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY
            );

            pointer.directionX = pointer.distanceX > 0 ? 'right' : pointer.distanceX < 0 ? 'left' : '';
            pointer.directionY = pointer.distanceY > 0 ? 'down' : pointer.distanceY < 0 ? 'up' : '';

            pointer.duration = +Date.now() - pointer.startTime;
            pointer.velocityX = pointer.distanceX / pointer.duration;
            pointer.velocityY = pointer.distanceY / pointer.duration;
        }

        /*
         * Normalize the point where the DOM event happened whether it's touch or mouse.
         * @returns point event obj with pageX and pageY on it.
         */
        function getEventPoint(ev) {
            ev = ev.originalEvent || ev; // support jQuery events
            return (ev.touches && ev.touches[0]) ||
                (ev.changedTouches && ev.changedTouches[0]) ||
                ev;
        }

    })();
    (function() {
        "use strict";

        angular.module('material.core')
            .provider('$$interimElement', InterimElementProvider);

        /*
         * @ngdoc service
         * @name $$interimElement
         * @module material.core
         *
         * @description
         *
         * Factory that contructs `$$interimElement.$service` services.
         * Used internally in material design for elements that appear on screen temporarily.
         * The service provides a promise-like API for interacting with the temporary
         * elements.
         *
         * ```js
         * app.service('$mdToast', function($$interimElement) {
         *   var $mdToast = $$interimElement(toastDefaultOptions);
         *   return $mdToast;
         * });
         * ```
         * @param {object=} defaultOptions Options used by default for the `show` method on the service.
         *
         * @returns {$$interimElement.$service}
         *
         */

        function InterimElementProvider() {
            createInterimElementProvider.$get = InterimElementFactory;
            InterimElementFactory.$inject = ["$document", "$q", "$$q", "$rootScope", "$timeout", "$rootElement", "$animate", "$mdUtil", "$mdCompiler", "$mdTheming", "$injector"];
            return createInterimElementProvider;

            /**
             * Returns a new provider which allows configuration of a new interimElement
             * service. Allows configuration of default options & methods for options,
             * as well as configuration of 'preset' methods (eg dialog.basic(): basic is a preset method)
             */
            function createInterimElementProvider(interimFactoryName) {
                var EXPOSED_METHODS = ['onHide', 'onShow', 'onRemove'];

                var customMethods = {};
                var providerConfig = {
                    presets: {}
                };

                var provider = {
                    setDefaults: setDefaults,
                    addPreset: addPreset,
                    addMethod: addMethod,
                    $get: factory
                };

                /**
                 * all interim elements will come with the 'build' preset
                 */
                provider.addPreset('build', {
                    methods: ['controller', 'controllerAs', 'resolve',
                        'template', 'templateUrl', 'themable', 'transformTemplate', 'parent'
                    ]
                });

                factory.$inject = ["$$interimElement", "$injector"];
                return provider;

                /**
                 * Save the configured defaults to be used when the factory is instantiated
                 */
                function setDefaults(definition) {
                    providerConfig.optionsFactory = definition.options;
                    providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);
                    return provider;
                }

                /**
                 * Add a method to the factory that isn't specific to any interim element operations
                 */

                function addMethod(name, fn) {
                    customMethods[name] = fn;
                    return provider;
                }

                /**
                 * Save the configured preset to be used when the factory is instantiated
                 */
                function addPreset(name, definition) {
                    definition = definition || {};
                    definition.methods = definition.methods || [];
                    definition.options = definition.options || function() {
                        return {};
                    };

                    if (/^cancel|hide|show$/.test(name)) {
                        throw new Error("Preset '" + name + "' in " + interimFactoryName + " is reserved!");
                    }
                    if (definition.methods.indexOf('_options') > -1) {
                        throw new Error("Method '_options' in " + interimFactoryName + " is reserved!");
                    }
                    providerConfig.presets[name] = {
                        methods: definition.methods.concat(EXPOSED_METHODS),
                        optionsFactory: definition.options,
                        argOption: definition.argOption
                    };
                    return provider;
                }

                function addPresetMethod(presetName, methodName, method) {
                    providerConfig.presets[presetName][methodName] = method;
                }

                /**
                 * Create a factory that has the given methods & defaults implementing interimElement
                 */
                /* @ngInject */
                function factory($$interimElement, $injector) {
                    var defaultMethods;
                    var defaultOptions;
                    var interimElementService = $$interimElement();

                    /*
                     * publicService is what the developer will be using.
                     * It has methods hide(), cancel(), show(), build(), and any other
                     * presets which were set during the config phase.
                     */
                    var publicService = {
                        hide: interimElementService.hide,
                        cancel: interimElementService.cancel,
                        show: showInterimElement,

                        // Special internal method to destroy an interim element without animations
                        // used when navigation changes causes a $scope.$destroy() action
                        destroy: destroyInterimElement
                    };


                    defaultMethods = providerConfig.methods || [];
                    // This must be invoked after the publicService is initialized
                    defaultOptions = invokeFactory(providerConfig.optionsFactory, {});

                    // Copy over the simple custom methods
                    angular.forEach(customMethods, function(fn, name) {
                        publicService[name] = fn;
                    });

                    angular.forEach(providerConfig.presets, function(definition, name) {
                        var presetDefaults = invokeFactory(definition.optionsFactory, {});
                        var presetMethods = (definition.methods || []).concat(defaultMethods);

                        // Every interimElement built with a preset has a field called `$type`,
                        // which matches the name of the preset.
                        // Eg in preset 'confirm', options.$type === 'confirm'
                        angular.extend(presetDefaults, {
                            $type: name
                        });

                        // This creates a preset class which has setter methods for every
                        // method given in the `.addPreset()` function, as well as every
                        // method given in the `.setDefaults()` function.
                        //
                        // @example
                        // .setDefaults({
                        //   methods: ['hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent'],
                        //   options: dialogDefaultOptions
                        // })
                        // .addPreset('alert', {
                        //   methods: ['title', 'ok'],
                        //   options: alertDialogOptions
                        // })
                        //
                        // Set values will be passed to the options when interimElement.show() is called.
                        function Preset(opts) {
                            this._options = angular.extend({}, presetDefaults, opts);
                        }
                        angular.forEach(presetMethods, function(name) {
                            Preset.prototype[name] = function(value) {
                                this._options[name] = value;
                                return this;
                            };
                        });

                        // Create shortcut method for one-linear methods
                        if (definition.argOption) {
                            var methodName = 'show' + name.charAt(0).toUpperCase() + name.slice(1);
                            publicService[methodName] = function(arg) {
                                var config = publicService[name](arg);
                                return publicService.show(config);
                            };
                        }

                        // eg $mdDialog.alert() will return a new alert preset
                        publicService[name] = function(arg) {
                            // If argOption is supplied, eg `argOption: 'content'`, then we assume
                            // if the argument is not an options object then it is the `argOption` option.
                            //
                            // @example `$mdToast.simple('hello')` // sets options.content to hello
                            //                                     // because argOption === 'content'
                            if (arguments.length && definition.argOption &&
                                !angular.isObject(arg) && !angular.isArray(arg)) {

                                return (new Preset())[definition.argOption](arg);

                            } else {
                                return new Preset(arg);
                            }

                        };
                    });

                    return publicService;

                    /**
                     *
                     */
                    function showInterimElement(opts) {
                        // opts is either a preset which stores its options on an _options field,
                        // or just an object made up of options
                        opts = opts || {};
                        if (opts._options) opts = opts._options;

                        return interimElementService.show(
                            angular.extend({}, defaultOptions, opts)
                        );
                    }

                    /**
                     *  Special method to hide and destroy an interimElement WITHOUT
                     *  any 'leave` or hide animations ( an immediate force hide/remove )
                     *
                     *  NOTE: This calls the onRemove() subclass method for each component...
                     *  which must have code to respond to `options.$destroy == true`
                     */
                    function destroyInterimElement(opts) {
                        return interimElementService.destroy(opts);
                    }

                    /**
                     * Helper to call $injector.invoke with a local of the factory name for
                     * this provider.
                     * If an $mdDialog is providing options for a dialog and tries to inject
                     * $mdDialog, a circular dependency error will happen.
                     * We get around that by manually injecting $mdDialog as a local.
                     */
                    function invokeFactory(factory, defaultVal) {
                        var locals = {};
                        locals[interimFactoryName] = publicService;
                        return $injector.invoke(factory || function() {
                            return defaultVal;
                        }, {}, locals);
                    }

                }

            }

            /* @ngInject */
            function InterimElementFactory($document, $q, $$q, $rootScope, $timeout, $rootElement, $animate,
                $mdUtil, $mdCompiler, $mdTheming, $injector) {
                return function createInterimElementService() {
                    var SHOW_CANCELLED = false;

                    /*
                     * @ngdoc service
                     * @name $$interimElement.$service
                     *
                     * @description
                     * A service used to control inserting and removing an element into the DOM.
                     *
                     */
                    var service, stack = [];

                    // Publish instance $$interimElement service;
                    // ... used as $mdDialog, $mdToast, $mdMenu, and $mdSelect

                    return service = {
                        show: show,
                        hide: hide,
                        cancel: cancel,
                        destroy: destroy,
                        $injector_: $injector
                    };

                    /*
                     * @ngdoc method
                     * @name $$interimElement.$service#show
                     * @kind function
                     *
                     * @description
                     * Adds the `$interimElement` to the DOM and returns a special promise that will be resolved or rejected
                     * with hide or cancel, respectively. To external cancel/hide, developers should use the
                     *
                     * @param {*} options is hashMap of settings
                     * @returns a Promise
                     *
                     */
                    function show(options) {
                        options = options || {};
                        var interimElement = new InterimElement(options || {});
                        var hideExisting = !options.skipHide && stack.length ? service.hide() : $q.when(true);

                        // This hide()s only the current interim element before showing the next, new one
                        // NOTE: this is not reversible (e.g. interim elements are not stackable)

                        hideExisting.finally(function() {

                            stack.push(interimElement);
                            interimElement
                                .show()
                                .catch(function(reason) {
                                    //$log.error("InterimElement.show() error: " + reason );
                                    return reason;
                                });

                        });

                        // Return a promise that will be resolved when the interim
                        // element is hidden or cancelled...

                        return interimElement.deferred.promise;
                    }

                    /*
                     * @ngdoc method
                     * @name $$interimElement.$service#hide
                     * @kind function
                     *
                     * @description
                     * Removes the `$interimElement` from the DOM and resolves the promise returned from `show`
                     *
                     * @param {*} resolveParam Data to resolve the promise with
                     * @returns a Promise that will be resolved after the element has been removed.
                     *
                     */
                    function hide(reason, options) {
                        if (!stack.length) return $q.when(reason);
                        options = options || {};

                        if (options.closeAll) {
                            var promise = $q.all(stack.reverse().map(closeElement));
                            stack = [];
                            return promise;
                        } else if (options.closeTo !== undefined) {
                            return $q.all(stack.splice(options.closeTo).map(closeElement));
                        } else {
                            var interim = stack.pop();
                            return closeElement(interim);
                        }

                        function closeElement(interim) {
                            interim
                                .remove(reason, false, options || {})
                                .catch(function(reason) {
                                    //$log.error("InterimElement.hide() error: " + reason );
                                    return reason;
                                });
                            return interim.deferred.promise;
                        }
                    }

                    /*
                     * @ngdoc method
                     * @name $$interimElement.$service#cancel
                     * @kind function
                     *
                     * @description
                     * Removes the `$interimElement` from the DOM and rejects the promise returned from `show`
                     *
                     * @param {*} reason Data to reject the promise with
                     * @returns Promise that will be resolved after the element has been removed.
                     *
                     */
                    function cancel(reason, options) {
                        var interim = stack.shift();
                        if (!interim) return $q.when(reason);

                        interim
                            .remove(reason, true, options || {})
                            .catch(function(reason) {
                                //$log.error("InterimElement.cancel() error: " + reason );
                                return reason;
                            });

                        return interim.deferred.promise;
                    }

                    /*
                     * Special method to quick-remove the interim element without animations
                     * Note: interim elements are in "interim containers"
                     */
                    function destroy(target) {
                        var interim = !target ? stack.shift() : null;
                        var cntr = angular.element(target).length ? angular.element(target)[0].parentNode : null;

                        if (cntr) {
                            // Try to find the interim element in the stack which corresponds to the supplied DOM element.
                            var filtered = stack.filter(function(entry) {
                                var currNode = entry.options.element[0];
                                return (currNode === cntr);
                            });

                            // Note: this function might be called when the element already has been removed, in which
                            //       case we won't find any matches. That's ok.
                            if (filtered.length > 0) {
                                interim = filtered[0];
                                stack.splice(stack.indexOf(interim), 1);
                            }
                        }

                        return interim ? interim.remove(SHOW_CANCELLED, false, {
                            '$destroy': true
                        }) : $q.when(SHOW_CANCELLED);
                    }

                    /*
                     * Internal Interim Element Object
                     * Used internally to manage the DOM element and related data
                     */
                    function InterimElement(options) {
                        var self, element, showAction = $q.when(true);

                        options = configureScopeAndTransitions(options);

                        return self = {
                            options: options,
                            deferred: $q.defer(),
                            show: createAndTransitionIn,
                            remove: transitionOutAndRemove
                        };

                        /**
                         * Compile, link, and show this interim element
                         * Use optional autoHided and transition-in effects
                         */
                        function createAndTransitionIn() {
                            return $q(function(resolve, reject) {

                                compileElement(options)
                                    .then(function(compiledData) {
                                        element = linkElement(compiledData, options);

                                        showAction = showElement(element, options, compiledData.controller)
                                            .then(resolve, rejectAll);

                                    }, rejectAll);

                                function rejectAll(fault) {
                                    // Force the '$md<xxx>.show()' promise to reject
                                    self.deferred.reject(fault);

                                    // Continue rejection propagation
                                    reject(fault);
                                }
                            });
                        }

                        /**
                         * After the show process has finished/rejected:
                         * - announce 'removing',
                         * - perform the transition-out, and
                         * - perform optional clean up scope.
                         */
                        function transitionOutAndRemove(response, isCancelled, opts) {

                            // abort if the show() and compile failed
                            if (!element) return $q.when(false);

                            options = angular.extend(options || {}, opts || {});
                            options.cancelAutoHide && options.cancelAutoHide();
                            options.element.triggerHandler('$mdInterimElementRemove');

                            if (options.$destroy === true) {

                                return hideElement(options.element, options).then(function() {
                                    (isCancelled && rejectAll(response)) || resolveAll(response);
                                });

                            } else {

                                $q.when(showAction)
                                    .finally(function() {
                                        hideElement(options.element, options).then(function() {

                                            (isCancelled && rejectAll(response)) || resolveAll(response);

                                        }, rejectAll);
                                    });

                                return self.deferred.promise;
                            }


                            /**
                             * The `show()` returns a promise that will be resolved when the interim
                             * element is hidden or cancelled...
                             */
                            function resolveAll(response) {
                                self.deferred.resolve(response);
                            }

                            /**
                             * Force the '$md<xxx>.show()' promise to reject
                             */
                            function rejectAll(fault) {
                                self.deferred.reject(fault);
                            }
                        }

                        /**
                         * Prepare optional isolated scope and prepare $animate with default enter and leave
                         * transitions for the new element instance.
                         */
                        function configureScopeAndTransitions(options) {
                            options = options || {};
                            if (options.template) {
                                options.template = $mdUtil.processTemplate(options.template);
                            }

                            return angular.extend({
                                preserveScope: false,
                                cancelAutoHide: angular.noop,
                                scope: options.scope || $rootScope.$new(options.isolateScope),

                                /**
                                 * Default usage to enable $animate to transition-in; can be easily overridden via 'options'
                                 */
                                onShow: function transitionIn(scope, element, options) {
                                    return $animate.enter(element, options.parent);
                                },

                                /**
                                 * Default usage to enable $animate to transition-out; can be easily overridden via 'options'
                                 */
                                onRemove: function transitionOut(scope, element) {
                                    // Element could be undefined if a new element is shown before
                                    // the old one finishes compiling.
                                    return element && $animate.leave(element) || $q.when();
                                }
                            }, options);

                        }

                        /**
                         * Compile an element with a templateUrl, controller, and locals
                         */
                        function compileElement(options) {

                            var compiled = !options.skipCompile ? $mdCompiler.compile(options) : null;

                            return compiled || $q(function(resolve) {
                                resolve({
                                    locals: {},
                                    link: function() {
                                        return options.element;
                                    }
                                });
                            });
                        }

                        /**
                         *  Link an element with compiled configuration
                         */
                        function linkElement(compileData, options) {
                            angular.extend(compileData.locals, options);

                            var element = compileData.link(options.scope);

                            // Search for parent at insertion time, if not specified
                            options.element = element;
                            options.parent = findParent(element, options);
                            if (options.themable) $mdTheming(element);

                            return element;
                        }

                        /**
                         * Search for parent at insertion time, if not specified
                         */
                        function findParent(element, options) {
                            var parent = options.parent;

                            // Search for parent at insertion time, if not specified
                            if (angular.isFunction(parent)) {
                                parent = parent(options.scope, element, options);
                            } else if (angular.isString(parent)) {
                                parent = angular.element($document[0].querySelector(parent));
                            } else {
                                parent = angular.element(parent);
                            }

                            // If parent querySelector/getter function fails, or it's just null,
                            // find a default.
                            if (!(parent || {}).length) {
                                var el;
                                if ($rootElement[0] && $rootElement[0].querySelector) {
                                    el = $rootElement[0].querySelector(':not(svg) > body');
                                }
                                if (!el) el = $rootElement[0];
                                if (el.nodeName == '#comment') {
                                    el = $document[0].body;
                                }
                                return angular.element(el);
                            }

                            return parent;
                        }

                        /**
                         * If auto-hide is enabled, start timer and prepare cancel function
                         */
                        function startAutoHide() {
                            var autoHideTimer, cancelAutoHide = angular.noop;

                            if (options.hideDelay) {
                                autoHideTimer = $timeout(service.hide, options.hideDelay);
                                cancelAutoHide = function() {
                                    $timeout.cancel(autoHideTimer);
                                }
                            }

                            // Cache for subsequent use
                            options.cancelAutoHide = function() {
                                cancelAutoHide();
                                options.cancelAutoHide = undefined;
                            }
                        }

                        /**
                         * Show the element ( with transitions), notify complete and start
                         * optional auto-Hide
                         */
                        function showElement(element, options, controller) {
                            // Trigger onShowing callback before the `show()` starts
                            var notifyShowing = options.onShowing || angular.noop;
                            // Trigger onComplete callback when the `show()` finishes
                            var notifyComplete = options.onComplete || angular.noop;

                            notifyShowing(options.scope, element, options, controller);

                            return $q(function(resolve, reject) {
                                try {
                                    // Start transitionIn
                                    $q.when(options.onShow(options.scope, element, options, controller))
                                        .then(function() {
                                            notifyComplete(options.scope, element, options);
                                            startAutoHide();

                                            resolve(element);

                                        }, reject);

                                } catch (e) {
                                    reject(e.message);
                                }
                            });
                        }

                        function hideElement(element, options) {
                            var announceRemoving = options.onRemoving || angular.noop;

                            return $$q(function(resolve, reject) {
                                try {
                                    // Start transitionIn
                                    var action = $$q.when(options.onRemove(options.scope, element, options) || true);

                                    // Trigger callback *before* the remove operation starts
                                    announceRemoving(element, action);

                                    if (options.$destroy == true) {

                                        // For $destroy, onRemove should be synchronous
                                        resolve(element);

                                    } else {

                                        // Wait until transition-out is done
                                        action.then(function() {

                                            if (!options.preserveScope && options.scope) {
                                                options.scope.$destroy();
                                            }

                                            resolve(element);

                                        }, reject);
                                    }

                                } catch (e) {
                                    reject(e.message);
                                }
                            });
                        }

                    }
                };

            }

        }

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            var $mdUtil, $interpolate, $log;

            var SUFFIXES = /(-gt)?-(sm|md|lg)/g;
            var WHITESPACE = /\s+/g;

            var FLEX_OPTIONS = ['grow', 'initial', 'auto', 'none', 'noshrink', 'nogrow'];
            var LAYOUT_OPTIONS = ['row', 'column'];
            var ALIGNMENT_MAIN_AXIS = ["", "start", "center", "end", "stretch", "space-around", "space-between"];
            var ALIGNMENT_CROSS_AXIS = ["", "start", "center", "end", "stretch"];

            var config = {
                /**
                 * Enable directive attribute-to-class conversions
                 * Developers can use `<body md-layout-css />` to quickly
                 * disable the Layout directives and prohibit the injection of Layout classNames
                 */
                enabled: true,

                /**
                 * List of mediaQuery breakpoints and associated suffixes
                 *
                 *   [
                 *    { suffix: "sm", mediaQuery: "screen and (max-width: 599px)" },
                 *    { suffix: "md", mediaQuery: "screen and (min-width: 600px) and (max-width: 959px)" }
                 *   ]
                 */
                breakpoints: []
            };

            registerLayoutAPI(angular.module('material.core.layout', ['ng']));

            /**
             *   registerLayoutAPI()
             *
             *   The original ngMaterial Layout solution used attribute selectors and CSS.
             *
             *  ```html
             *  <div layout="column"> My Content </div>
             *  ```
             *
             *  ```css
             *  [layout] {
             *    box-sizing: border-box;
             *    display:flex;
             *  }
             *  [layout=column] {
             *    flex-direction : column
             *  }
             *  ```
             *
             *  Use of attribute selectors creates significant performance impacts in some
             *  browsers... mainly IE.
             *
             *  This module registers directives that allow the same layout attributes to be
             *  interpreted and converted to class selectors. The directive will add equivalent classes to each element that
             *  contains a Layout directive.
             *
             * ```html
             *   <div layout="column" class="layout layout-column"> My Content </div>
             *```
             *
             *  ```css
             *  .layout {
             *    box-sizing: border-box;
             *    display:flex;
             *  }
             *  .layout-column {
             *    flex-direction : column
             *  }
             *  ```
             */
            function registerLayoutAPI(module) {
                var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
                var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;

                // NOTE: these are also defined in constants::MEDIA_PRIORITY and constants::MEDIA
                var BREAKPOINTS = ["", "xs", "gt-xs", "sm", "gt-sm", "md", "gt-md", "lg", "gt-lg", "xl"];
                var API_WITH_VALUES = ["layout", "flex", "flex-order", "flex-offset", "layout-align"];
                var API_NO_VALUES = ["show", "hide", "layout-padding", "layout-margin"];


                // Build directive registration functions for the standard Layout API... for all breakpoints.
                angular.forEach(BREAKPOINTS, function(mqb) {

                    // Attribute directives with expected, observable value(s)
                    angular.forEach(API_WITH_VALUES, function(name) {
                        var fullName = mqb ? name + "-" + mqb : name;
                        module.directive(directiveNormalize(fullName), attributeWithObserve(fullName));
                    });

                    // Attribute directives with no expected value(s)
                    angular.forEach(API_NO_VALUES, function(name) {
                        var fullName = mqb ? name + "-" + mqb : name;
                        module.directive(directiveNormalize(fullName), attributeWithoutValue(fullName));
                    });

                });

                // Register other, special directive functions for the Layout features:
                module
                    .directive('mdLayoutCss', disableLayoutDirective)
                    .directive('ngCloak', buildCloakInterceptor('ng-cloak'))

                .directive('layoutWrap', attributeWithoutValue('layout-wrap'))
                    .directive('layoutNoWrap', attributeWithoutValue('layout-no-wrap'))
                    .directive('layoutFill', attributeWithoutValue('layout-fill'))

                // !! Deprecated attributes: use the `-lt` (aka less-than) notations

                .directive('layoutLtMd', warnAttrNotSupported('layout-lt-md', true))
                    .directive('layoutLtLg', warnAttrNotSupported('layout-lt-lg', true))
                    .directive('flexLtMd', warnAttrNotSupported('flex-lt-md', true))
                    .directive('flexLtLg', warnAttrNotSupported('flex-lt-lg', true))

                .directive('layoutAlignLtMd', warnAttrNotSupported('layout-align-lt-md'))
                    .directive('layoutAlignLtLg', warnAttrNotSupported('layout-align-lt-lg'))
                    .directive('flexOrderLtMd', warnAttrNotSupported('flex-order-lt-md'))
                    .directive('flexOrderLtLg', warnAttrNotSupported('flex-order-lt-lg'))
                    .directive('offsetLtMd', warnAttrNotSupported('flex-offset-lt-md'))
                    .directive('offsetLtLg', warnAttrNotSupported('flex-offset-lt-lg'))

                .directive('hideLtMd', warnAttrNotSupported('hide-lt-md'))
                    .directive('hideLtLg', warnAttrNotSupported('hide-lt-lg'))
                    .directive('showLtMd', warnAttrNotSupported('show-lt-md'))
                    .directive('showLtLg', warnAttrNotSupported('show-lt-lg'));

                /**
                 * Converts snake_case to camelCase.
                 * Also there is special case for Moz prefix starting with upper case letter.
                 * @param name Name to normalize
                 */
                function directiveNormalize(name) {
                    return name
                        .replace(PREFIX_REGEXP, '')
                        .replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
                            return offset ? letter.toUpperCase() : letter;
                        });
                }

            }

            /**
             * Special directive that will disable ALL Layout conversions of layout
             * attribute(s) to classname(s).
             *
             * <link rel="stylesheet" href="angular-material.min.css">
             * <link rel="stylesheet" href="angular-material.layout.css">
             *
             * <body md-layout-css>
             *  ...
             * </body>
             *
             * Note: Using md-layout-css directive requires the developer to load the Material
             * Layout Attribute stylesheet (which only uses attribute selectors):
             *
             *       `angular-material.layout.css`
             *
             * Another option is to use the LayoutProvider to configure and disable the attribute
             * conversions; this would obviate the use of the `md-layout-css` directive
             *
             */
            function disableLayoutDirective() {
                return {
                    restrict: 'A',
                    priority: '900',
                    compile: function(element, attr) {
                        config.enabled = false;
                        return angular.noop;
                    }
                };
            }

            /**
             * Tail-hook ngCloak to delay the uncloaking while Layout transformers
             * finish processing. Eliminates flicker with Material.Layoouts
             */
            function buildCloakInterceptor(className) {
                return ['$timeout', function($timeout) {
                    return {
                        restrict: 'A',
                        priority: -10, // run after normal ng-cloak
                        compile: function(element) {
                            if (!config.enabled) return angular.noop;

                            // Re-add the cloak
                            element.addClass(className);

                            return function(scope, element) {
                                // Wait while layout injectors configure, then uncloak
                                // NOTE: $rAF does not delay enough... and this is a 1x-only event,
                                //       $timeout is acceptable.
                                $timeout(function() {
                                    element.removeClass(className);
                                }, 10, false);
                            };
                        }
                    };
                }];
            }


            // *********************************************************************************
            //
            // These functions create registration functions for ngMaterial Layout attribute directives
            // This provides easy translation to switch ngMaterial attribute selectors to
            // CLASS selectors and directives; which has huge performance implications
            // for IE Browsers
            //
            // *********************************************************************************

            /**
             * Creates a directive registration function where a possible dynamic attribute
             * value will be observed/watched.
             * @param {string} className attribute name; eg `layout-gt-md` with value ="row"
             */
            function attributeWithObserve(className) {

                return ['$mdUtil', '$interpolate', "$log", function(_$mdUtil_, _$interpolate_, _$log_) {
                    $mdUtil = _$mdUtil_;
                    $interpolate = _$interpolate_;
                    $log = _$log_;

                    return {
                        restrict: 'A',
                        compile: function(element, attr) {
                            var linkFn;
                            if (config.enabled) {
                                // immediately replace static (non-interpolated) invalid values...

                                validateAttributeUsage(className, attr, element, $log);

                                validateAttributeValue(className,
                                    getNormalizedAttrValue(className, attr, ""),
                                    buildUpdateFn(element, className, attr)
                                );

                                linkFn = translateWithValueToCssClass;
                            }

                            // Use for postLink to account for transforms after ng-transclude.
                            return linkFn || angular.noop;
                        }
                    };
                }];

                /**
                 * Add as transformed class selector(s), then
                 * remove the deprecated attribute selector
                 */
                function translateWithValueToCssClass(scope, element, attrs) {
                    var updateFn = updateClassWithValue(element, className, attrs);
                    var unwatch = attrs.$observe(attrs.$normalize(className), updateFn);

                    updateFn(getNormalizedAttrValue(className, attrs, ""));
                    scope.$on("$destroy", function() {
                        unwatch()
                    });
                }
            }

            /**
             * Creates a registration function for ngMaterial Layout attribute directive.
             * This is a `simple` transpose of attribute usage to class usage; where we ignore
             * any attribute value
             */
            function attributeWithoutValue(className) {
                return ['$mdUtil', '$interpolate', "$log", function(_$mdUtil_, _$interpolate_, _$log_) {
                    $mdUtil = _$mdUtil_;
                    $interpolate = _$interpolate_;
                    $log = _$log_;

                    return {
                        restrict: 'A',
                        compile: function(element, attr) {
                            var linkFn;
                            if (config.enabled) {
                                // immediately replace static (non-interpolated) invalid values...

                                validateAttributeValue(className,
                                    getNormalizedAttrValue(className, attr, ""),
                                    buildUpdateFn(element, className, attr)
                                );

                                translateToCssClass(null, element);

                                // Use for postLink to account for transforms after ng-transclude.
                                linkFn = translateToCssClass;
                            }

                            return linkFn || angular.noop;
                        }
                    };
                }];

                /**
                 * Add as transformed class selector, then
                 * remove the deprecated attribute selector
                 */
                function translateToCssClass(scope, element) {
                    element.addClass(className);
                }
            }



            /**
             * After link-phase, do NOT remove deprecated layout attribute selector.
             * Instead watch the attribute so interpolated data-bindings to layout
             * selectors will continue to be supported.
             *
             * $observe() the className and update with new class (after removing the last one)
             *
             * e.g. `layout="{{layoutDemo.direction}}"` will update...
             *
             * NOTE: The value must match one of the specified styles in the CSS.
             * For example `flex-gt-md="{{size}}`  where `scope.size == 47` will NOT work since
             * only breakpoints for 0, 5, 10, 15... 100, 33, 34, 66, 67 are defined.
             *
             */
            function updateClassWithValue(element, className) {
                var lastClass;

                return function updateClassFn(newValue) {
                    var value = validateAttributeValue(className, newValue || "");
                    if (angular.isDefined(value)) {
                        if (lastClass) element.removeClass(lastClass);
                        lastClass = !value ? className : className + "-" + value.replace(WHITESPACE, "-");
                        element.addClass(lastClass);
                    }
                };
            }

            /**
             * Provide console warning that this layout attribute has been deprecated
             *
             */
            function warnAttrNotSupported(className) {
                var parts = className.split("-");
                return ["$log", function($log) {
                    $log.warn(className + "has been deprecated. Please use a `" + parts[0] + "-gt-<xxx>` variant.");
                    return angular.noop;
                }];
            }

            /**
             * Centralize warnings for known flexbox issues (especially IE-related issues)
             */
            function validateAttributeUsage(className, attr, element, $log) {
                var message, usage, url;
                var nodeName = element[0].nodeName.toLowerCase();

                switch (className.replace(SUFFIXES, "")) {
                    case "flex":
                        if ((nodeName == "md-button") || (nodeName == "fieldset")) {
                            // @see https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers
                            // Use <div flex> wrapper inside (preferred) or outside

                            usage = "<" + nodeName + " " + className + "></" + nodeName + ">";
                            url = "https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers";
                            message = "Markup '{0}' may not work as expected in IE Browsers. Consult '{1}' for details.";

                            $log.warn($mdUtil.supplant(message, [usage, url]));
                        }
                }

            }


            /**
             * For the Layout attribute value, validate or replace with default
             * fallback value
             */
            function validateAttributeValue(className, value, updateFn) {
                var origValue = value;

                if (!needsInterpolation(value)) {
                    switch (className.replace(SUFFIXES, "")) {
                        case 'layout':
                            if (!findIn(value, LAYOUT_OPTIONS)) {
                                value = LAYOUT_OPTIONS[0]; // 'row';
                            }
                            break;

                        case 'flex':
                            if (!findIn(value, FLEX_OPTIONS)) {
                                if (isNaN(value)) {
                                    value = '';
                                }
                            }
                            break;

                        case 'flex-offset':
                        case 'flex-order':
                            if (!value || isNaN(+value)) {
                                value = '0';
                            }
                            break;

                        case 'layout-align':
                            var axis = extractAlignAxis(value);
                            value = $mdUtil.supplant("{main}-{cross}", axis);
                            break;

                        case 'layout-padding':
                        case 'layout-margin':
                        case 'layout-fill':
                        case 'layout-wrap':
                        case 'layout-no-wrap':
                            value = '';
                            break;
                    }

                    if (value != origValue) {
                        (updateFn || angular.noop)(value);
                    }
                }

                return value;
            }

            /**
             * Replace current attribute value with fallback value
             */
            function buildUpdateFn(element, className, attrs) {
                return function updateAttrValue(fallback) {
                    if (!needsInterpolation(fallback)) {
                        // Do not modify the element's attribute value; so
                        // uses '<ui-layout layout="/api/sidebar.html" />' will not
                        // be affected. Just update the attrs value.
                        attrs[attrs.$normalize(className)] = fallback;
                    }
                };
            }

            /**
             * See if the original value has interpolation symbols:
             * e.g.  flex-gt-md="{{triggerPoint}}"
             */
            function needsInterpolation(value) {
                return (value || "").indexOf($interpolate.startSymbol()) > -1;
            }

            function getNormalizedAttrValue(className, attrs, defaultVal) {
                var normalizedAttr = attrs.$normalize(className);
                return attrs[normalizedAttr] ? attrs[normalizedAttr].replace(WHITESPACE, "-") : defaultVal || null;
            }

            function findIn(item, list, replaceWith) {
                item = replaceWith && item ? item.replace(WHITESPACE, replaceWith) : item;

                var found = false;
                if (item) {
                    list.forEach(function(it) {
                        it = replaceWith ? it.replace(WHITESPACE, replaceWith) : it;
                        found = found || (it === item);
                    });
                }
                return found;
            }

            function extractAlignAxis(attrValue) {
                var axis = {
                        main: "start",
                        cross: "stretch"
                    },
                    values;

                attrValue = (attrValue || "");

                if (attrValue.indexOf("-") == 0 || attrValue.indexOf(" ") == 0) {
                    // For missing main-axis values
                    attrValue = "none" + attrValue;
                }

                values = attrValue.toLowerCase().trim().replace(WHITESPACE, "-").split("-");
                if (values.length && (values[0] === "space")) {
                    // for main-axis values of "space-around" or "space-between"
                    values = [values[0] + "-" + values[1], values[2]];
                }

                if (values.length > 0) axis.main = values[0] || axis.main;
                if (values.length > 1) axis.cross = values[1] || axis.cross;

                if (ALIGNMENT_MAIN_AXIS.indexOf(axis.main) < 0) axis.main = "start";
                if (ALIGNMENT_CROSS_AXIS.indexOf(axis.cross) < 0) axis.cross = "stretch";

                return axis;
            }


        })();

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.core.componentRegistry
         *
         * @description
         * A component instance registration service.
         * Note: currently this as a private service in the SideNav component.
         */
        angular.module('material.core')
            .factory('$mdComponentRegistry', ComponentRegistry);

        /*
         * @private
         * @ngdoc factory
         * @name ComponentRegistry
         * @module material.core.componentRegistry
         *
         */
        function ComponentRegistry($log, $q) {

            var self;
            var instances = [];
            var pendings = {};

            return self = {
                /**
                 * Used to print an error when an instance for a handle isn't found.
                 */
                notFoundError: function(handle) {
                    $log.error('No instance found for handle', handle);
                },
                /**
                 * Return all registered instances as an array.
                 */
                getInstances: function() {
                    return instances;
                },

                /**
                 * Get a registered instance.
                 * @param handle the String handle to look up for a registered instance.
                 */
                get: function(handle) {
                    if (!isValidID(handle)) return null;

                    var i, j, instance;
                    for (i = 0, j = instances.length; i < j; i++) {
                        instance = instances[i];
                        if (instance.$$mdHandle === handle) {
                            return instance;
                        }
                    }
                    return null;
                },

                /**
                 * Register an instance.
                 * @param instance the instance to register
                 * @param handle the handle to identify the instance under.
                 */
                register: function(instance, handle) {
                    if (!handle) return angular.noop;

                    instance.$$mdHandle = handle;
                    instances.push(instance);
                    resolveWhen();

                    return deregister;

                    /**
                     * Remove registration for an instance
                     */
                    function deregister() {
                        var index = instances.indexOf(instance);
                        if (index !== -1) {
                            instances.splice(index, 1);
                        }
                    }

                    /**
                     * Resolve any pending promises for this instance
                     */
                    function resolveWhen() {
                        var dfd = pendings[handle];
                        if (dfd) {
                            dfd.resolve(instance);
                            delete pendings[handle];
                        }
                    }
                },

                /**
                 * Async accessor to registered component instance
                 * If not available then a promise is created to notify
                 * all listeners when the instance is registered.
                 */
                when: function(handle) {
                    if (isValidID(handle)) {
                        var deferred = $q.defer();
                        var instance = self.get(handle);

                        if (instance) {
                            deferred.resolve(instance);
                        } else {
                            pendings[handle] = deferred;
                        }

                        return deferred.promise;
                    }
                    return $q.reject("Invalid `md-component-id` value.");
                }

            };

            function isValidID(handle) {
                return handle && (handle !== "");
            }

        }
        ComponentRegistry.$inject = ["$log", "$q"];

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            /**
             * @ngdoc service
             * @name $mdButtonInkRipple
             * @module material.core
             *
             * @description
             * Provides ripple effects for md-button.  See $mdInkRipple service for all possible configuration options.
             *
             * @param {object=} scope Scope within the current context
             * @param {object=} element The element the ripple effect should be applied to
             * @param {object=} options (Optional) Configuration options to override the default ripple configuration
             */

            angular.module('material.core')
                .factory('$mdButtonInkRipple', MdButtonInkRipple);

            function MdButtonInkRipple($mdInkRipple) {
                return {
                    attach: function attachRipple(scope, element, options) {
                        options = angular.extend(optionsForElement(element), options);

                        return $mdInkRipple.attach(scope, element, options);
                    }
                };

                function optionsForElement(element) {
                    if (element.hasClass('md-icon-button')) {
                        return {
                            isMenuItem: element.hasClass('md-menu-item'),
                            fitRipple: true,
                            center: true
                        };
                    } else {
                        return {
                            isMenuItem: element.hasClass('md-menu-item'),
                            dimBackground: true
                        }
                    }
                };
            }
            MdButtonInkRipple.$inject = ["$mdInkRipple"];;
        })();

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            /**
             * @ngdoc service
             * @name $mdCheckboxInkRipple
             * @module material.core
             *
             * @description
             * Provides ripple effects for md-checkbox.  See $mdInkRipple service for all possible configuration options.
             *
             * @param {object=} scope Scope within the current context
             * @param {object=} element The element the ripple effect should be applied to
             * @param {object=} options (Optional) Configuration options to override the defaultripple configuration
             */

            angular.module('material.core')
                .factory('$mdCheckboxInkRipple', MdCheckboxInkRipple);

            function MdCheckboxInkRipple($mdInkRipple) {
                return {
                    attach: attach
                };

                function attach(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: true,
                        dimBackground: false,
                        fitRipple: true
                    }, options));
                };
            }
            MdCheckboxInkRipple.$inject = ["$mdInkRipple"];;
        })();

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            /**
             * @ngdoc service
             * @name $mdListInkRipple
             * @module material.core
             *
             * @description
             * Provides ripple effects for md-list.  See $mdInkRipple service for all possible configuration options.
             *
             * @param {object=} scope Scope within the current context
             * @param {object=} element The element the ripple effect should be applied to
             * @param {object=} options (Optional) Configuration options to override the defaultripple configuration
             */

            angular.module('material.core')
                .factory('$mdListInkRipple', MdListInkRipple);

            function MdListInkRipple($mdInkRipple) {
                return {
                    attach: attach
                };

                function attach(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: false,
                        dimBackground: true,
                        outline: false,
                        rippleSize: 'full'
                    }, options));
                };
            }
            MdListInkRipple.$inject = ["$mdInkRipple"];;
        })();

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.core.ripple
         * @description
         * Ripple
         */
        angular.module('material.core')
            .factory('$mdInkRipple', InkRippleService)
            .directive('mdInkRipple', InkRippleDirective)
            .directive('mdNoInk', attrNoDirective)
            .directive('mdNoBar', attrNoDirective)
            .directive('mdNoStretch', attrNoDirective);

        var DURATION = 450;

        /**
         * @ngdoc directive
         * @name mdInkRipple
         * @module material.core.ripple
         *
         * @description
         * The `md-ink-ripple` directive allows you to specify the ripple color or id a ripple is allowed.
         *
         * @param {string|boolean} md-ink-ripple A color string `#FF0000` or boolean (`false` or `0`) for preventing ripple
         *
         * @usage
         * ### String values
         * <hljs lang="html">
         *   <ANY md-ink-ripple="#FF0000">
         *     Ripples in red
         *   </ANY>
         *
         *   <ANY md-ink-ripple="false">
         *     Not rippling
         *   </ANY>
         * </hljs>
         *
         * ### Interpolated values
         * <hljs lang="html">
         *   <ANY md-ink-ripple="{{ randomColor() }}">
         *     Ripples with the return value of 'randomColor' function
         *   </ANY>
         *
         *   <ANY md-ink-ripple="{{ canRipple() }}">
         *     Ripples if 'canRipple' function return value is not 'false' or '0'
         *   </ANY>
         * </hljs>
         */
        function InkRippleDirective($mdButtonInkRipple, $mdCheckboxInkRipple) {
            return {
                controller: angular.noop,
                link: function(scope, element, attr) {
                    attr.hasOwnProperty('mdInkRippleCheckbox') ? $mdCheckboxInkRipple.attach(scope, element) : $mdButtonInkRipple.attach(scope, element);
                }
            };
        }
        InkRippleDirective.$inject = ["$mdButtonInkRipple", "$mdCheckboxInkRipple"];

        /**
         * @ngdoc service
         * @name $mdInkRipple
         * @module material.core.ripple
         *
         * @description
         * `$mdInkRipple` is a service for adding ripples to any element
         *
         * @usage
         * <hljs lang="js">
         * app.factory('$myElementInkRipple', function($mdInkRipple) {
         *   return {
         *     attach: function (scope, element, options) {
         *       return $mdInkRipple.attach(scope, element, angular.extend({
         *         center: false,
         *         dimBackground: true
         *       }, options));
         *     }
         *   };
         * });
         *
         * app.controller('myController', function ($scope, $element, $myElementInkRipple) {
         *   $scope.onClick = function (ev) {
         *     $myElementInkRipple.attach($scope, angular.element(ev.target), { center: true });
         *   }
         * });
         * </hljs>
         */

        /**
         * @ngdoc method
         * @name $mdInkRipple#attach
         *
         * @description
         * Attaching given scope, element and options to inkRipple controller
         *
         * @param {object=} scope Scope within the current context
         * @param {object=} element The element the ripple effect should be applied to
         * @param {object=} options (Optional) Configuration options to override the defaultRipple configuration
         * * `center` -  Whether the ripple should start from the center of the container element
         * * `dimBackground` - Whether the background should be dimmed with the ripple color
         * * `colorElement` - The element the ripple should take its color from, defined by css property `color`
         * * `fitRipple` - Whether the ripple should fill the element
         */
        function InkRippleService($injector) {
            return {
                attach: attach
            };

            function attach(scope, element, options) {
                if (element.controller('mdNoInk')) return angular.noop;
                return $injector.instantiate(InkRippleCtrl, {
                    $scope: scope,
                    $element: element,
                    rippleOptions: options
                });
            }
        }
        InkRippleService.$inject = ["$injector"];

        /**
         * Controller used by the ripple service in order to apply ripples
         * @ngInject
         */
        function InkRippleCtrl($scope, $element, rippleOptions, $window, $timeout, $mdUtil) {
            this.$window = $window;
            this.$timeout = $timeout;
            this.$mdUtil = $mdUtil;
            this.$scope = $scope;
            this.$element = $element;
            this.options = rippleOptions;
            this.mousedown = false;
            this.ripples = [];
            this.timeout = null; // Stores a reference to the most-recent ripple timeout
            this.lastRipple = null;

            $mdUtil.valueOnUse(this, 'container', this.createContainer);

            this.$element.addClass('md-ink-ripple');

            // attach method for unit tests
            ($element.controller('mdInkRipple') || {}).createRipple = angular.bind(this, this.createRipple);
            ($element.controller('mdInkRipple') || {}).setColor = angular.bind(this, this.color);

            this.bindEvents();
        }
        InkRippleCtrl.$inject = ["$scope", "$element", "rippleOptions", "$window", "$timeout", "$mdUtil"];


        /**
         * Either remove or unlock any remaining ripples when the user mouses off of the element (either by
         * mouseup or mouseleave event)
         */
        function autoCleanup(self, cleanupFn) {

            if (self.mousedown || self.lastRipple) {
                self.mousedown = false;
                self.$mdUtil.nextTick(angular.bind(self, cleanupFn), false);
            }

        }


        /**
         * Returns the color that the ripple should be (either based on CSS or hard-coded)
         * @returns {string}
         */
        InkRippleCtrl.prototype.color = function(value) {
            var self = this;

            // If assigning a color value, apply it to background and the ripple color
            if (angular.isDefined(value)) {
                self._color = self._parseColor(value);
            }

            // If color lookup, use assigned, defined, or inherited
            return self._color || self._parseColor(self.inkRipple()) || self._parseColor(getElementColor());

            /**
             * Finds the color element and returns its text color for use as default ripple color
             * @returns {string}
             */
            function getElementColor() {
                var items = self.options && self.options.colorElement ? self.options.colorElement : [];
                var elem = items.length ? items[0] : self.$element[0];

                return elem ? self.$window.getComputedStyle(elem).color : 'rgb(0,0,0)';
            }
        };

        /**
         * Updating the ripple colors based on the current inkRipple value
         * or the element's computed style color
         */
        InkRippleCtrl.prototype.calculateColor = function() {
            return this.color();
        };


        /**
         * Takes a string color and converts it to RGBA format
         * @param color {string}
         * @param [multiplier] {int}
         * @returns {string}
         */

        InkRippleCtrl.prototype._parseColor = function parseColor(color, multiplier) {
            multiplier = multiplier || 1;

            if (!color) return;
            if (color.indexOf('rgba') === 0) return color.replace(/\d?\.?\d*\s*\)\s*$/, (0.1 * multiplier).toString() + ')');
            if (color.indexOf('rgb') === 0) return rgbToRGBA(color);
            if (color.indexOf('#') === 0) return hexToRGBA(color);

            /**
             * Converts hex value to RGBA string
             * @param color {string}
             * @returns {string}
             */
            function hexToRGBA(color) {
                var hex = color[0] === '#' ? color.substr(1) : color,
                    dig = hex.length / 3,
                    red = hex.substr(0, dig),
                    green = hex.substr(dig, dig),
                    blue = hex.substr(dig * 2);
                if (dig === 1) {
                    red += red;
                    green += green;
                    blue += blue;
                }
                return 'rgba(' + parseInt(red, 16) + ',' + parseInt(green, 16) + ',' + parseInt(blue, 16) + ',0.1)';
            }

            /**
             * Converts an RGB color to RGBA
             * @param color {string}
             * @returns {string}
             */
            function rgbToRGBA(color) {
                return color.replace(')', ', 0.1)').replace('(', 'a(');
            }

        };

        /**
         * Binds events to the root element for
         */
        InkRippleCtrl.prototype.bindEvents = function() {
            this.$element.on('mousedown', angular.bind(this, this.handleMousedown));
            this.$element.on('mouseup touchend', angular.bind(this, this.handleMouseup));
            this.$element.on('mouseleave', angular.bind(this, this.handleMouseup));
            this.$element.on('touchmove', angular.bind(this, this.handleTouchmove));
        };

        /**
         * Create a new ripple on every mousedown event from the root element
         * @param event {MouseEvent}
         */
        InkRippleCtrl.prototype.handleMousedown = function(event) {
            if (this.mousedown) return;

            // When jQuery is loaded, we have to get the original event
            if (event.hasOwnProperty('originalEvent')) event = event.originalEvent;
            this.mousedown = true;
            if (this.options.center) {
                this.createRipple(this.container.prop('clientWidth') / 2, this.container.prop('clientWidth') / 2);
            } else {

                // We need to calculate the relative coordinates if the target is a sublayer of the ripple element
                if (event.srcElement !== this.$element[0]) {
                    var layerRect = this.$element[0].getBoundingClientRect();
                    var layerX = event.clientX - layerRect.left;
                    var layerY = event.clientY - layerRect.top;

                    this.createRipple(layerX, layerY);
                } else {
                    this.createRipple(event.offsetX, event.offsetY);
                }
            }
        };

        /**
         * Either remove or unlock any remaining ripples when the user mouses off of the element (either by
         * mouseup, touchend or mouseleave event)
         */
        InkRippleCtrl.prototype.handleMouseup = function() {
            autoCleanup(this, this.clearRipples);
        };

        /**
         * Either remove or unlock any remaining ripples when the user mouses off of the element (by
         * touchmove)
         */
        InkRippleCtrl.prototype.handleTouchmove = function() {
            autoCleanup(this, this.deleteRipples);
        };

        /**
         * Cycles through all ripples and attempts to remove them.
         */
        InkRippleCtrl.prototype.deleteRipples = function() {
            for (var i = 0; i < this.ripples.length; i++) {
                this.ripples[i].remove();
            }
        };

        /**
         * Cycles through all ripples and attempts to remove them with fade.
         * Depending on logic within `fadeInComplete`, some removals will be postponed.
         */
        InkRippleCtrl.prototype.clearRipples = function() {
            for (var i = 0; i < this.ripples.length; i++) {
                this.fadeInComplete(this.ripples[i]);
            }
        };

        /**
         * Creates the ripple container element
         * @returns {*}
         */
        InkRippleCtrl.prototype.createContainer = function() {
            var container = angular.element('<div class="md-ripple-container"></div>');
            this.$element.append(container);
            return container;
        };

        InkRippleCtrl.prototype.clearTimeout = function() {
            if (this.timeout) {
                this.$timeout.cancel(this.timeout);
                this.timeout = null;
            }
        };

        InkRippleCtrl.prototype.isRippleAllowed = function() {
            var element = this.$element[0];
            do {
                if (!element.tagName || element.tagName === 'BODY') break;

                if (element && angular.isFunction(element.hasAttribute)) {
                    if (element.hasAttribute('disabled')) return false;
                    if (this.inkRipple() === 'false' || this.inkRipple() === '0') return false;
                }

            } while (element = element.parentNode);
            return true;
        };

        /**
         * The attribute `md-ink-ripple` may be a static or interpolated
         * color value OR a boolean indicator (used to disable ripples)
         */
        InkRippleCtrl.prototype.inkRipple = function() {
            return this.$element.attr('md-ink-ripple');
        };

        /**
         * Creates a new ripple and adds it to the container.  Also tracks ripple in `this.ripples`.
         * @param left
         * @param top
         */
        InkRippleCtrl.prototype.createRipple = function(left, top) {
            if (!this.isRippleAllowed()) return;

            var ctrl = this;
            var ripple = angular.element('<div class="md-ripple"></div>');
            var width = this.$element.prop('clientWidth');
            var height = this.$element.prop('clientHeight');
            var x = Math.max(Math.abs(width - left), left) * 2;
            var y = Math.max(Math.abs(height - top), top) * 2;
            var size = getSize(this.options.fitRipple, x, y);
            var color = this.calculateColor();

            ripple.css({
                left: left + 'px',
                top: top + 'px',
                background: 'black',
                width: size + 'px',
                height: size + 'px',
                backgroundColor: rgbaToRGB(color),
                borderColor: rgbaToRGB(color)
            });
            this.lastRipple = ripple;

            // we only want one timeout to be running at a time
            this.clearTimeout();
            this.timeout = this.$timeout(function() {
                ctrl.clearTimeout();
                if (!ctrl.mousedown) ctrl.fadeInComplete(ripple);
            }, DURATION * 0.35, false);

            if (this.options.dimBackground) this.container.css({
                backgroundColor: color
            });
            this.container.append(ripple);
            this.ripples.push(ripple);
            ripple.addClass('md-ripple-placed');

            this.$mdUtil.nextTick(function() {

                ripple.addClass('md-ripple-scaled md-ripple-active');
                ctrl.$timeout(function() {
                    ctrl.clearRipples();
                }, DURATION, false);

            }, false);

            function rgbaToRGB(color) {
                return color ? color.replace('rgba', 'rgb').replace(/,[^\),]+\)/, ')') : 'rgb(0,0,0)';
            }

            function getSize(fit, x, y) {
                return fit ? Math.max(x, y) : Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
            }
        };



        /**
         * After fadeIn finishes, either kicks off the fade-out animation or queues the element for removal on mouseup
         * @param ripple
         */
        InkRippleCtrl.prototype.fadeInComplete = function(ripple) {
            if (this.lastRipple === ripple) {
                if (!this.timeout && !this.mousedown) {
                    this.removeRipple(ripple);
                }
            } else {
                this.removeRipple(ripple);
            }
        };

        /**
         * Kicks off the animation for removing a ripple
         * @param ripple {Element}
         */
        InkRippleCtrl.prototype.removeRipple = function(ripple) {
            var ctrl = this;
            var index = this.ripples.indexOf(ripple);
            if (index < 0) return;
            this.ripples.splice(this.ripples.indexOf(ripple), 1);
            ripple.removeClass('md-ripple-active');
            if (this.ripples.length === 0) this.container.css({
                backgroundColor: ''
            });
            // use a 2-second timeout in order to allow for the animation to finish
            // we don't actually care how long the animation takes
            this.$timeout(function() {
                ctrl.fadeOutComplete(ripple);
            }, DURATION, false);
        };

        /**
         * Removes the provided ripple from the DOM
         * @param ripple
         */
        InkRippleCtrl.prototype.fadeOutComplete = function(ripple) {
            ripple.remove();
            this.lastRipple = null;
        };

        /**
         * Used to create an empty directive.  This is used to track flag-directives whose children may have
         * functionality based on them.
         *
         * Example: `md-no-ink` will potentially be used by all child directives.
         */
        function attrNoDirective() {
            return {
                controller: angular.noop
            };
        }

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            /**
             * @ngdoc service
             * @name $mdTabInkRipple
             * @module material.core
             *
             * @description
             * Provides ripple effects for md-tabs.  See $mdInkRipple service for all possible configuration options.
             *
             * @param {object=} scope Scope within the current context
             * @param {object=} element The element the ripple effect should be applied to
             * @param {object=} options (Optional) Configuration options to override the defaultripple configuration
             */

            angular.module('material.core')
                .factory('$mdTabInkRipple', MdTabInkRipple);

            function MdTabInkRipple($mdInkRipple) {
                return {
                    attach: attach
                };

                function attach(scope, element, options) {
                    return $mdInkRipple.attach(scope, element, angular.extend({
                        center: false,
                        dimBackground: true,
                        outline: false,
                        rippleSize: 'full'
                    }, options));
                };
            }
            MdTabInkRipple.$inject = ["$mdInkRipple"];;
        })();

    })();
    (function() {
        "use strict";

        angular.module('material.core.theming.palette', [])
            .constant('$mdColorPalette', {
                'red': {
                    '50': '#ffebee',
                    '100': '#ffcdd2',
                    '200': '#ef9a9a',
                    '300': '#e57373',
                    '400': '#ef5350',
                    '500': '#f44336',
                    '600': '#e53935',
                    '700': '#d32f2f',
                    '800': '#c62828',
                    '900': '#b71c1c',
                    'A100': '#ff8a80',
                    'A200': '#ff5252',
                    'A400': '#ff1744',
                    'A700': '#d50000',
                    'contrastDefaultColor': 'light',
                    'contrastDarkColors': '50 100 200 300 A100',
                    'contrastStrongLightColors': '400 500 600 700 A200 A400 A700'
                },
                'pink': {
                    '50': '#fce4ec',
                    '100': '#f8bbd0',
                    '200': '#f48fb1',
                    '300': '#f06292',
                    '400': '#ec407a',
                    '500': '#e91e63',
                    '600': '#d81b60',
                    '700': '#c2185b',
                    '800': '#ad1457',
                    '900': '#880e4f',
                    'A100': '#ff80ab',
                    'A200': '#ff4081',
                    'A400': '#f50057',
                    'A700': '#c51162',
                    'contrastDefaultColor': 'light',
                    'contrastDarkColors': '50 100 200 A100',
                    'contrastStrongLightColors': '500 600 A200 A400 A700'
                },
                'purple': {
                    '50': '#f3e5f5',
                    '100': '#e1bee7',
                    '200': '#ce93d8',
                    '300': '#ba68c8',
                    '400': '#ab47bc',
                    '500': '#9c27b0',
                    '600': '#8e24aa',
                    '700': '#7b1fa2',
                    '800': '#6a1b9a',
                    '900': '#4a148c',
                    'A100': '#ea80fc',
                    'A200': '#e040fb',
                    'A400': '#d500f9',
                    'A700': '#aa00ff',
                    'contrastDefaultColor': 'light',
                    'contrastDarkColors': '50 100 200 A100',
                    'contrastStrongLightColors': '300 400 A200 A400 A700'
                },
                'deep-purple': {
                    '50': '#ede7f6',
                    '100': '#d1c4e9',
                    '200': '#b39ddb',
                    '300': '#9575cd',
                    '400': '#7e57c2',
                    '500': '#673ab7',
                    '600': '#5e35b1',
                    '700': '#512da8',
                    '800': '#4527a0',
                    '900': '#311b92',
                    'A100': '#b388ff',
                    'A200': '#7c4dff',
                    'A400': '#651fff',
                    'A700': '#6200ea',
                    'contrastDefaultColor': 'light',
                    'contrastDarkColors': '50 100 200 A100',
                    'contrastStrongLightColors': '300 400 A200'
                },
                'indigo': {
                    '50': '#e8eaf6',
                    '100': '#c5cae9',
                    '200': '#9fa8da',
                    '300': '#7986cb',
                    '400': '#5c6bc0',
                    '500': '#3f51b5',
                    '600': '#3949ab',
                    '700': '#303f9f',
                    '800': '#283593',
                    '900': '#1a237e',
                    'A100': '#8c9eff',
                    'A200': '#536dfe',
                    'A400': '#3d5afe',
                    'A700': '#304ffe',
                    'contrastDefaultColor': 'light',
                    'contrastDarkColors': '50 100 200 A100',
                    'contrastStrongLightColors': '300 400 A200 A400'
                },
                'blue': {
                    '50': '#e3f2fd',
                    '100': '#bbdefb',
                    '200': '#90caf9',
                    '300': '#64b5f6',
                    '400': '#42a5f5',
                    '500': '#2196f3',
                    '600': '#1e88e5',
                    '700': '#1976d2',
                    '800': '#1565c0',
                    '900': '#0d47a1',
                    'A100': '#82b1ff',
                    'A200': '#448aff',
                    'A400': '#2979ff',
                    'A700': '#2962ff',
                    'contrastDefaultColor': 'light',
                    'contrastDarkColors': '50 100 200 300 400 A100',
                    'contrastStrongLightColors': '500 600 700 A200 A400 A700'
                },
                'light-blue': {
                    '50': '#e1f5fe',
                    '100': '#b3e5fc',
                    '200': '#81d4fa',
                    '300': '#4fc3f7',
                    '400': '#29b6f6',
                    '500': '#03a9f4',
                    '600': '#039be5',
                    '700': '#0288d1',
                    '800': '#0277bd',
                    '900': '#01579b',
                    'A100': '#80d8ff',
                    'A200': '#40c4ff',
                    'A400': '#00b0ff',
                    'A700': '#0091ea',
                    'contrastDefaultColor': 'dark',
                    'contrastLightColors': '600 700 800 900 A700',
                    'contrastStrongLightColors': '600 700 800 A700'
                },
                'cyan': {
                    '50': '#e0f7fa',
                    '100': '#b2ebf2',
                    '200': '#80deea',
                    '300': '#4dd0e1',
                    '400': '#26c6da',
                    '500': '#00bcd4',
                    '600': '#00acc1',
                    '700': '#0097a7',
                    '800': '#00838f',
                    '900': '#006064',
                    'A100': '#84ffff',
                    'A200': '#18ffff',
                    'A400': '#00e5ff',
                    'A700': '#00b8d4',
                    'contrastDefaultColor': 'dark',
                    'contrastLightColors': '700 800 900',
                    'contrastStrongLightColors': '700 800 900'
                },
                'teal': {
                    '50': '#e0f2f1',
                    '100': '#b2dfdb',
                    '200': '#80cbc4',
                    '300': '#4db6ac',
                    '400': '#26a69a',
                    '500': '#009688',
                    '600': '#00897b',
                    '700': '#00796b',
                    '800': '#00695c',
                    '900': '#004d40',
                    'A100': '#a7ffeb',
                    'A200': '#64ffda',
                    'A400': '#1de9b6',
                    'A700': '#00bfa5',
                    'contrastDefaultColor': 'dark',
                    'contrastLightColors': '500 600 700 800 900',
                    'contrastStrongLightColors': '500 600 700'
                },
                'green': {
                    '50': '#e8f5e9',
                    '100': '#c8e6c9',
                    '200': '#a5d6a7',
                    '300': '#81c784',
                    '400': '#66bb6a',
                    '500': '#4caf50',
                    '600': '#43a047',
                    '700': '#388e3c',
                    '800': '#2e7d32',
                    '900': '#1b5e20',
                    'A100': '#b9f6ca',
                    'A200': '#69f0ae',
                    'A400': '#00e676',
                    'A700': '#00c853',
                    'contrastDefaultColor': 'dark',
                    'contrastLightColors': '600 700 800 900',
                    'contrastStrongLightColors': '600 700'
                },
                'light-green': {
                    '50': '#f1f8e9',
                    '100': '#dcedc8',
                    '200': '#c5e1a5',
                    '300': '#aed581',
                    '400': '#9ccc65',
                    '500': '#8bc34a',
                    '600': '#7cb342',
                    '700': '#689f38',
                    '800': '#558b2f',
                    '900': '#33691e',
                    'A100': '#ccff90',
                    'A200': '#b2ff59',
                    'A400': '#76ff03',
                    'A700': '#64dd17',
                    'contrastDefaultColor': 'dark',
                    'contrastLightColors': '700 800 900',
                    'contrastStrongLightColors': '700 800 900'
                },
                'lime': {
                    '50': '#f9fbe7',
                    '100': '#f0f4c3',
                    '200': '#e6ee9c',
                    '300': '#dce775',
                    '400': '#d4e157',
                    '500': '#cddc39',
                    '600': '#c0ca33',
                    '700': '#afb42b',
                    '800': '#9e9d24',
                    '900': '#827717',
                    'A100': '#f4ff81',
                    'A200': '#eeff41',
                    'A400': '#c6ff00',
                    'A700': '#aeea00',
                    'contrastDefaultColor': 'dark',
                    'contrastLightColors': '900',
                    'contrastStrongLightColors': '900'
                },
                'yellow': {
                    '50': '#fffde7',
                    '100': '#fff9c4',
                    '200': '#fff59d',
                    '300': '#fff176',
                    '400': '#ffee58',
                    '500': '#ffeb3b',
                    '600': '#fdd835',
                    '700': '#fbc02d',
                    '800': '#f9a825',
                    '900': '#f57f17',
                    'A100': '#ffff8d',
                    'A200': '#ffff00',
                    'A400': '#ffea00',
                    'A700': '#ffd600',
                    'contrastDefaultColor': 'dark'
                },
                'amber': {
                    '50': '#fff8e1',
                    '100': '#ffecb3',
                    '200': '#ffe082',
                    '300': '#ffd54f',
                    '400': '#ffca28',
                    '500': '#ffc107',
                    '600': '#ffb300',
                    '700': '#ffa000',
                    '800': '#ff8f00',
                    '900': '#ff6f00',
                    'A100': '#ffe57f',
                    'A200': '#ffd740',
                    'A400': '#ffc400',
                    'A700': '#ffab00',
                    'contrastDefaultColor': 'dark'
                },
                'orange': {
                    '50': '#fff3e0',
                    '100': '#ffe0b2',
                    '200': '#ffcc80',
                    '300': '#ffb74d',
                    '400': '#ffa726',
                    '500': '#ff9800',
                    '600': '#fb8c00',
                    '700': '#f57c00',
                    '800': '#ef6c00',
                    '900': '#e65100',
                    'A100': '#ffd180',
                    'A200': '#ffab40',
                    'A400': '#ff9100',
                    'A700': '#ff6d00',
                    'contrastDefaultColor': 'dark',
                    'contrastLightColors': '800 900',
                    'contrastStrongLightColors': '800 900'
                },
                'deep-orange': {
                    '50': '#fbe9e7',
                    '100': '#ffccbc',
                    '200': '#ffab91',
                    '300': '#ff8a65',
                    '400': '#ff7043',
                    '500': '#ff5722',
                    '600': '#f4511e',
                    '700': '#e64a19',
                    '800': '#d84315',
                    '900': '#bf360c',
                    'A100': '#ff9e80',
                    'A200': '#ff6e40',
                    'A400': '#ff3d00',
                    'A700': '#dd2c00',
                    'contrastDefaultColor': 'light',
                    'contrastDarkColors': '50 100 200 300 400 A100 A200',
                    'contrastStrongLightColors': '500 600 700 800 900 A400 A700'
                },
                'brown': {
                    '50': '#efebe9',
                    '100': '#d7ccc8',
                    '200': '#bcaaa4',
                    '300': '#a1887f',
                    '400': '#8d6e63',
                    '500': '#795548',
                    '600': '#6d4c41',
                    '700': '#5d4037',
                    '800': '#4e342e',
                    '900': '#3e2723',
                    'A100': '#d7ccc8',
                    'A200': '#bcaaa4',
                    'A400': '#8d6e63',
                    'A700': '#5d4037',
                    'contrastDefaultColor': 'light',
                    'contrastDarkColors': '50 100 200',
                    'contrastStrongLightColors': '300 400'
                },
                'grey': {
                    '50': '#fafafa',
                    '100': '#f5f5f5',
                    '200': '#eeeeee',
                    '300': '#e0e0e0',
                    '400': '#bdbdbd',
                    '500': '#9e9e9e',
                    '600': '#757575',
                    '700': '#616161',
                    '800': '#424242',
                    '900': '#212121',
                    '1000': '#000000',
                    'A100': '#ffffff',
                    'A200': '#eeeeee',
                    'A400': '#bdbdbd',
                    'A700': '#616161',
                    'contrastDefaultColor': 'dark',
                    'contrastLightColors': '600 700 800 900'
                },
                'blue-grey': {
                    '50': '#eceff1',
                    '100': '#cfd8dc',
                    '200': '#b0bec5',
                    '300': '#90a4ae',
                    '400': '#78909c',
                    '500': '#607d8b',
                    '600': '#546e7a',
                    '700': '#455a64',
                    '800': '#37474f',
                    '900': '#263238',
                    'A100': '#cfd8dc',
                    'A200': '#b0bec5',
                    'A400': '#78909c',
                    'A700': '#455a64',
                    'contrastDefaultColor': 'light',
                    'contrastDarkColors': '50 100 200 300',
                    'contrastStrongLightColors': '400 500'
                }
            });

    })();
    (function() {
        "use strict";

        angular.module('material.core.theming', ['material.core.theming.palette'])
            .directive('mdTheme', ThemingDirective)
            .directive('mdThemable', ThemableDirective)
            .provider('$mdTheming', ThemingProvider)
            .run(generateAllThemes);

        /**
         * @ngdoc service
         * @name $mdThemingProvider
         * @module material.core.theming
         *
         * @description Provider to configure the `$mdTheming` service.
         */

        /**
         * @ngdoc method
         * @name $mdThemingProvider#setDefaultTheme
         * @param {string} themeName Default theme name to be applied to elements. Default value is `default`.
         */

        /**
         * @ngdoc method
         * @name $mdThemingProvider#alwaysWatchTheme
         * @param {boolean} watch Whether or not to always watch themes for changes and re-apply
         * classes when they change. Default is `false`. Enabling can reduce performance.
         */

        /* Some Example Valid Theming Expressions
         * =======================================
         *
         * Intention group expansion: (valid for primary, accent, warn, background)
         *
         * {{primary-100}} - grab shade 100 from the primary palette
         * {{primary-100-0.7}} - grab shade 100, apply opacity of 0.7
         * {{primary-100-contrast}} - grab shade 100's contrast color
         * {{primary-hue-1}} - grab the shade assigned to hue-1 from the primary palette
         * {{primary-hue-1-0.7}} - apply 0.7 opacity to primary-hue-1
         * {{primary-color}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured shades set for each hue
         * {{primary-color-0.7}} - Apply 0.7 opacity to each of the above rules
         * {{primary-contrast}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured contrast (ie. text) color shades set for each hue
         * {{primary-contrast-0.7}} - Apply 0.7 opacity to each of the above rules
         *
         * Foreground expansion: Applies rgba to black/white foreground text
         *
         * {{foreground-1}} - used for primary text
         * {{foreground-2}} - used for secondary text/divider
         * {{foreground-3}} - used for disabled text
         * {{foreground-4}} - used for dividers
         *
         */

        // In memory generated CSS rules; registered by theme.name
        var GENERATED = {};

        // In memory storage of defined themes and color palettes (both loaded by CSS, and user specified)
        var PALETTES;
        var THEMES;

        var DARK_FOREGROUND = {
            name: 'dark',
            '1': 'rgba(0,0,0,0.87)',
            '2': 'rgba(0,0,0,0.54)',
            '3': 'rgba(0,0,0,0.26)',
            '4': 'rgba(0,0,0,0.12)'
        };
        var LIGHT_FOREGROUND = {
            name: 'light',
            '1': 'rgba(255,255,255,1.0)',
            '2': 'rgba(255,255,255,0.7)',
            '3': 'rgba(255,255,255,0.3)',
            '4': 'rgba(255,255,255,0.12)'
        };

        var DARK_SHADOW = '1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)';
        var LIGHT_SHADOW = '';

        var DARK_CONTRAST_COLOR = colorToRgbaArray('rgba(0,0,0,0.87)');
        var LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgba(255,255,255,0.87)');
        var STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgb(255,255,255)');

        var THEME_COLOR_TYPES = ['primary', 'accent', 'warn', 'background'];
        var DEFAULT_COLOR_TYPE = 'primary';

        // A color in a theme will use these hues by default, if not specified by user.
        var LIGHT_DEFAULT_HUES = {
            'accent': {
                'default': 'A200',
                'hue-1': 'A100',
                'hue-2': 'A400',
                'hue-3': 'A700'
            },
            'background': {
                'default': 'A100',
                'hue-1': '300',
                'hue-2': '800',
                'hue-3': '900'
            }
        };

        var DARK_DEFAULT_HUES = {
            'background': {
                'default': '800',
                'hue-1': '600',
                'hue-2': '300',
                'hue-3': '900'
            }
        };
        THEME_COLOR_TYPES.forEach(function(colorType) {
            // Color types with unspecified default hues will use these default hue values
            var defaultDefaultHues = {
                'default': '500',
                'hue-1': '300',
                'hue-2': '800',
                'hue-3': 'A100'
            };
            if (!LIGHT_DEFAULT_HUES[colorType]) LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues;
            if (!DARK_DEFAULT_HUES[colorType]) DARK_DEFAULT_HUES[colorType] = defaultDefaultHues;
        });

        var VALID_HUE_VALUES = [
            '50', '100', '200', '300', '400', '500', '600',
            '700', '800', '900', 'A100', 'A200', 'A400', 'A700'
        ];

        // Whether or not themes are to be generated on-demand (vs. eagerly).
        var generateOnDemand = false;

        function ThemingProvider($mdColorPalette) {
            PALETTES = {};
            THEMES = {};

            var themingProvider;
            var defaultTheme = 'default';
            var alwaysWatchTheme = false;

            // Load JS Defined Palettes
            angular.extend(PALETTES, $mdColorPalette);

            // Default theme defined in core.js

            ThemingService.$inject = ["$rootScope", "$log"];
            return themingProvider = {
                definePalette: definePalette,
                extendPalette: extendPalette,
                theme: registerTheme,

                setDefaultTheme: function(theme) {
                    defaultTheme = theme;
                },
                alwaysWatchTheme: function(alwaysWatch) {
                    alwaysWatchTheme = alwaysWatch;
                },
                generateThemesOnDemand: function(onDemand) {
                    generateOnDemand = onDemand;
                },
                $get: ThemingService,
                _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,
                _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,
                _PALETTES: PALETTES,
                _THEMES: THEMES,
                _parseRules: parseRules,
                _rgba: rgba
            };

            // Example: $mdThemingProvider.definePalette('neonRed', { 50: '#f5fafa', ... });
            function definePalette(name, map) {
                map = map || {};
                PALETTES[name] = checkPaletteValid(name, map);
                return themingProvider;
            }

            // Returns an new object which is a copy of a given palette `name` with variables from
            // `map` overwritten
            // Example: var neonRedMap = $mdThemingProvider.extendPalette('red', { 50: '#f5fafafa' });
            function extendPalette(name, map) {
                return checkPaletteValid(name, angular.extend({}, PALETTES[name] || {}, map));
            }

            // Make sure that palette has all required hues
            function checkPaletteValid(name, map) {
                var missingColors = VALID_HUE_VALUES.filter(function(field) {
                    return !map[field];
                });
                if (missingColors.length) {
                    throw new Error("Missing colors %1 in palette %2!"
                        .replace('%1', missingColors.join(', '))
                        .replace('%2', name));
                }

                return map;
            }

            // Register a theme (which is a collection of color palettes to use with various states
            // ie. warn, accent, primary )
            // Optionally inherit from an existing theme
            // $mdThemingProvider.theme('custom-theme').primaryPalette('red');
            function registerTheme(name, inheritFrom) {
                if (THEMES[name]) return THEMES[name];

                inheritFrom = inheritFrom || 'default';

                var parentTheme = typeof inheritFrom === 'string' ? THEMES[inheritFrom] : inheritFrom;
                var theme = new Theme(name);

                if (parentTheme) {
                    angular.forEach(parentTheme.colors, function(color, colorType) {
                        theme.colors[colorType] = {
                            name: color.name,
                            // Make sure a COPY of the hues is given to the child color,
                            // not the same reference.
                            hues: angular.extend({}, color.hues)
                        };
                    });
                }
                THEMES[name] = theme;

                return theme;
            }

            function Theme(name) {
                var self = this;
                self.name = name;
                self.colors = {};

                self.dark = setDark;
                setDark(false);

                function setDark(isDark) {
                    isDark = arguments.length === 0 ? true : !!isDark;

                    // If no change, abort
                    if (isDark === self.isDark) return;

                    self.isDark = isDark;

                    self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;
                    self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;

                    // Light and dark themes have different default hues.
                    // Go through each existing color type for this theme, and for every
                    // hue value that is still the default hue value from the previous light/dark setting,
                    // set it to the default hue value from the new light/dark setting.
                    var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES;
                    var oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;
                    angular.forEach(newDefaultHues, function(newDefaults, colorType) {
                        var color = self.colors[colorType];
                        var oldDefaults = oldDefaultHues[colorType];
                        if (color) {
                            for (var hueName in color.hues) {
                                if (color.hues[hueName] === oldDefaults[hueName]) {
                                    color.hues[hueName] = newDefaults[hueName];
                                }
                            }
                        }
                    });

                    return self;
                }

                THEME_COLOR_TYPES.forEach(function(colorType) {
                    var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];
                    self[colorType + 'Palette'] = function setPaletteType(paletteName, hues) {
                        var color = self.colors[colorType] = {
                            name: paletteName,
                            hues: angular.extend({}, defaultHues, hues)
                        };

                        Object.keys(color.hues).forEach(function(name) {
                            if (!defaultHues[name]) {
                                throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4"
                                    .replace('%1', name)
                                    .replace('%2', self.name)
                                    .replace('%3', paletteName)
                                    .replace('%4', Object.keys(defaultHues).join(', '))
                                );
                            }
                        });
                        Object.keys(color.hues).map(function(key) {
                            return color.hues[key];
                        }).forEach(function(hueValue) {
                            if (VALID_HUE_VALUES.indexOf(hueValue) == -1) {
                                throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5"
                                    .replace('%1', hueValue)
                                    .replace('%2', self.name)
                                    .replace('%3', colorType)
                                    .replace('%4', paletteName)
                                    .replace('%5', VALID_HUE_VALUES.join(', '))
                                );
                            }
                        });
                        return self;
                    };

                    self[colorType + 'Color'] = function() {
                        var args = Array.prototype.slice.call(arguments);
                        console.warn('$mdThemingProviderTheme.' + colorType + 'Color() has been deprecated. ' +
                            'Use $mdThemingProviderTheme.' + colorType + 'Palette() instead.');
                        return self[colorType + 'Palette'].apply(self, args);
                    };
                });
            }

            /**
             * @ngdoc service
             * @name $mdTheming
             *
             * @description
             *
             * Service that makes an element apply theming related classes to itself.
             *
             * ```js
             * app.directive('myFancyDirective', function($mdTheming) {
             *   return {
             *     restrict: 'e',
             *     link: function(scope, el, attrs) {
             *       $mdTheming(el);
             *     }
             *   };
             * });
             * ```
             * @param {el=} element to apply theming to
             */
            /* @ngInject */
            function ThemingService($rootScope, $log) {

                applyTheme.inherit = function(el, parent) {
                    var ctrl = parent.controller('mdTheme');

                    var attrThemeValue = el.attr('md-theme-watch');
                    if ((alwaysWatchTheme || angular.isDefined(attrThemeValue)) && attrThemeValue != 'false') {
                        var deregisterWatch = $rootScope.$watch(function() {
                            return ctrl && ctrl.$mdTheme || (defaultTheme == 'default' ? '' : defaultTheme);
                        }, changeTheme);
                        el.on('$destroy', deregisterWatch);
                    } else {
                        var theme = ctrl && ctrl.$mdTheme || (defaultTheme == 'default' ? '' : defaultTheme);
                        changeTheme(theme);
                    }

                    function changeTheme(theme) {
                        if (!theme) return;
                        if (!registered(theme)) {
                            $log.warn('Attempted to use unregistered theme \'' + theme + '\'. ' +
                                'Register it with $mdThemingProvider.theme().');
                        }
                        var oldTheme = el.data('$mdThemeName');
                        if (oldTheme) el.removeClass('md-' + oldTheme + '-theme');
                        el.addClass('md-' + theme + '-theme');
                        el.data('$mdThemeName', theme);
                        if (ctrl) {
                            el.data('$mdThemeController', ctrl);
                        }
                    }
                };

                applyTheme.THEMES = angular.extend({}, THEMES);
                applyTheme.defaultTheme = function() {
                    return defaultTheme;
                };
                applyTheme.registered = registered;
                applyTheme.generateTheme = generateTheme;

                return applyTheme;

                function registered(themeName) {
                    if (themeName === undefined || themeName === '') return true;
                    return applyTheme.THEMES[themeName] !== undefined;
                }

                function applyTheme(scope, el) {
                    // Allow us to be invoked via a linking function signature.
                    if (el === undefined) {
                        el = scope;
                        scope = undefined;
                    }
                    if (scope === undefined) {
                        scope = $rootScope;
                    }
                    applyTheme.inherit(el, el);
                }
            }
        }
        ThemingProvider.$inject = ["$mdColorPalette"];

        function ThemingDirective($mdTheming, $interpolate, $log) {
            return {
                priority: 100,
                link: {
                    pre: function(scope, el, attrs) {
                        var ctrl = {
                            $setTheme: function(theme) {
                                if (!$mdTheming.registered(theme)) {
                                    $log.warn('attempted to use unregistered theme \'' + theme + '\'');
                                }
                                ctrl.$mdTheme = theme;
                            }
                        };
                        el.data('$mdThemeController', ctrl);
                        ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));
                        attrs.$observe('mdTheme', ctrl.$setTheme);
                    }
                }
            };
        }
        ThemingDirective.$inject = ["$mdTheming", "$interpolate", "$log"];

        function ThemableDirective($mdTheming) {
            return $mdTheming;
        }
        ThemableDirective.$inject = ["$mdTheming"];

        function parseRules(theme, colorType, rules) {
            checkValidPalette(theme, colorType);

            rules = rules.replace(/THEME_NAME/g, theme.name);
            var generatedRules = [];
            var color = theme.colors[colorType];

            var themeNameRegex = new RegExp('.md-' + theme.name + '-theme', 'g');
            // Matches '{{ primary-color }}', etc
            var hueRegex = new RegExp('(\'|")?{{\\s*(' + colorType + ')-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|\')?', 'g');
            var simpleVariableRegex = /'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?(contrast)?\s*\}\}'?"?/g;
            var palette = PALETTES[color.name];

            // find and replace simple variables where we use a specific hue, not an entire palette
            // eg. "{{primary-100}}"
            //\(' + THEME_COLOR_TYPES.join('\|') + '\)'
            rules = rules.replace(simpleVariableRegex, function(match, colorType, hue, opacity, contrast) {
                if (colorType === 'foreground') {
                    if (hue == 'shadow') {
                        return theme.foregroundShadow;
                    } else {
                        return theme.foregroundPalette[hue] || theme.foregroundPalette['1'];
                    }
                }
                if (hue.indexOf('hue') === 0) {
                    hue = theme.colors[colorType].hues[hue];
                }
                return rgba((PALETTES[theme.colors[colorType].name][hue] || '')[contrast ? 'contrast' : 'value'], opacity);
            });

            // For each type, generate rules for each hue (ie. default, md-hue-1, md-hue-2, md-hue-3)
            angular.forEach(color.hues, function(hueValue, hueName) {
                var newRule = rules
                    .replace(hueRegex, function(match, _, colorType, hueType, opacity) {
                        return rgba(palette[hueValue][hueType === 'color' ? 'value' : 'contrast'], opacity);
                    });
                if (hueName !== 'default') {
                    newRule = newRule.replace(themeNameRegex, '.md-' + theme.name + '-theme.md-' + hueName);
                }

                // Don't apply a selector rule to the default theme, making it easier to override
                // styles of the base-component
                if (theme.name == 'default') {
                    var themeRuleRegex = /((?:(?:(?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)+) )?)((?:(?:\w|\.|-)+)?)\.md-default-theme((?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)*)/g;
                    newRule = newRule.replace(themeRuleRegex, function(match, prefix, target, suffix) {
                        return match + ', ' + prefix + target + suffix;
                    });
                }
                generatedRules.push(newRule);
            });

            return generatedRules;
        }

        var rulesByType = {};

        // Generate our themes at run time given the state of THEMES and PALETTES
        function generateAllThemes($injector) {
            var head = document.head;
            var firstChild = head ? head.firstElementChild : null;
            var themeCss = $injector.has('$MD_THEME_CSS') ? $injector.get('$MD_THEME_CSS') : '';

            if (!firstChild) return;
            if (themeCss.length === 0) return; // no rules, so no point in running this expensive task

            // Expose contrast colors for palettes to ensure that text is always readable
            angular.forEach(PALETTES, sanitizePalette);

            // MD_THEME_CSS is a string generated by the build process that includes all the themable
            // components as templates

            // Break the CSS into individual rules
            var rules = themeCss
                .split(/\}(?!(\}|'|"|;))/)
                .filter(function(rule) {
                    return rule && rule.length;
                })
                .map(function(rule) {
                    return rule.trim() + '}';
                });


            var ruleMatchRegex = new RegExp('md-(' + THEME_COLOR_TYPES.join('|') + ')', 'g');

            THEME_COLOR_TYPES.forEach(function(type) {
                rulesByType[type] = '';
            });


            // Sort the rules based on type, allowing us to do color substitution on a per-type basis
            rules.forEach(function(rule) {
                var match = rule.match(ruleMatchRegex);
                // First: test that if the rule has '.md-accent', it goes into the accent set of rules
                for (var i = 0, type; type = THEME_COLOR_TYPES[i]; i++) {
                    if (rule.indexOf('.md-' + type) > -1) {
                        return rulesByType[type] += rule;
                    }
                }

                // If no eg 'md-accent' class is found, try to just find 'accent' in the rule and guess from
                // there
                for (i = 0; type = THEME_COLOR_TYPES[i]; i++) {
                    if (rule.indexOf(type) > -1) {
                        return rulesByType[type] += rule;
                    }
                }

                // Default to the primary array
                return rulesByType[DEFAULT_COLOR_TYPE] += rule;
            });

            // If themes are being generated on-demand, quit here. The user will later manually
            // call generateTheme to do this on a theme-by-theme basis.
            if (generateOnDemand) return;

            angular.forEach(THEMES, function(theme) {
                if (!GENERATED[theme.name]) {
                    generateTheme(theme.name);
                }
            });


            // *************************
            // Internal functions
            // *************************

            // The user specifies a 'default' contrast color as either light or dark,
            // then explicitly lists which hues are the opposite contrast (eg. A100 has dark, A200 has light)
            function sanitizePalette(palette) {
                var defaultContrast = palette.contrastDefaultColor;
                var lightColors = palette.contrastLightColors || [];
                var strongLightColors = palette.contrastStrongLightColors || [];
                var darkColors = palette.contrastDarkColors || [];

                // These colors are provided as space-separated lists
                if (typeof lightColors === 'string') lightColors = lightColors.split(' ');
                if (typeof strongLightColors === 'string') strongLightColors = strongLightColors.split(' ');
                if (typeof darkColors === 'string') darkColors = darkColors.split(' ');

                // Cleanup after ourselves
                delete palette.contrastDefaultColor;
                delete palette.contrastLightColors;
                delete palette.contrastStrongLightColors;
                delete palette.contrastDarkColors;

                // Change { 'A100': '#fffeee' } to { 'A100': { value: '#fffeee', contrast:DARK_CONTRAST_COLOR }
                angular.forEach(palette, function(hueValue, hueName) {
                    if (angular.isObject(hueValue)) return; // Already converted
                    // Map everything to rgb colors
                    var rgbValue = colorToRgbaArray(hueValue);
                    if (!rgbValue) {
                        throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected."
                            .replace('%1', hueValue)
                            .replace('%2', palette.name)
                            .replace('%3', hueName));
                    }

                    palette[hueName] = {
                        value: rgbValue,
                        contrast: getContrastColor()
                    };

                    function getContrastColor() {
                        if (defaultContrast === 'light') {
                            if (darkColors.indexOf(hueName) > -1) {
                                return DARK_CONTRAST_COLOR;
                            } else {
                                return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR : LIGHT_CONTRAST_COLOR;
                            }
                        } else {
                            if (lightColors.indexOf(hueName) > -1) {
                                return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR : LIGHT_CONTRAST_COLOR;
                            } else {
                                return DARK_CONTRAST_COLOR;
                            }
                        }
                    }
                });
            }
        }
        generateAllThemes.$inject = ["$injector"];

        function generateTheme(name) {
            var theme = THEMES[name];
            var head = document.head;
            var firstChild = head ? head.firstElementChild : null;

            if (!GENERATED[name]) {
                // For each theme, use the color palettes specified for
                // `primary`, `warn` and `accent` to generate CSS rules.
                THEME_COLOR_TYPES.forEach(function(colorType) {
                    var styleStrings = parseRules(theme, colorType, rulesByType[colorType]);
                    while (styleStrings.length) {
                        var styleContent = styleStrings.shift();
                        if (styleContent) {
                            var style = document.createElement('style');
                            style.setAttribute('md-theme-style', '');
                            style.appendChild(document.createTextNode(styleContent));
                            head.insertBefore(style, firstChild);
                        }
                    }
                });


                if (theme.colors.primary.name == theme.colors.accent.name) {
                    console.warn('$mdThemingProvider: Using the same palette for primary and' +
                        ' accent. This violates the material design spec.');
                }

                GENERATED[theme.name] = true;
            }

        }


        function checkValidPalette(theme, colorType) {
            // If theme attempts to use a palette that doesnt exist, throw error
            if (!PALETTES[(theme.colors[colorType] || {}).name]) {
                throw new Error(
                    "You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3"
                    .replace('%1', theme.name)
                    .replace('%2', colorType)
                    .replace('%3', Object.keys(PALETTES).join(', '))
                );
            }
        }

        function colorToRgbaArray(clr) {
            if (angular.isArray(clr) && clr.length == 3) return clr;
            if (/^rgb/.test(clr)) {
                return clr.replace(/(^\s*rgba?\(|\)\s*$)/g, '').split(',').map(function(value, i) {
                    return i == 3 ? parseFloat(value, 10) : parseInt(value, 10);
                });
            }
            if (clr.charAt(0) == '#') clr = clr.substring(1);
            if (!/^([a-fA-F0-9]{3}){1,2}$/g.test(clr)) return;

            var dig = clr.length / 3;
            var red = clr.substr(0, dig);
            var grn = clr.substr(dig, dig);
            var blu = clr.substr(dig * 2);
            if (dig === 1) {
                red += red;
                grn += grn;
                blu += blu;
            }
            return [parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16)];
        }

        function rgba(rgbArray, opacity) {
            if (!rgbArray) return "rgb('0,0,0')";

            if (rgbArray.length == 4) {
                rgbArray = angular.copy(rgbArray);
                opacity ? rgbArray.pop() : opacity = rgbArray.pop();
            }
            return opacity && (typeof opacity == 'number' || (typeof opacity == 'string' && opacity.length)) ?
                'rgba(' + rgbArray.join(',') + ',' + opacity + ')' :
                'rgb(' + rgbArray.join(',') + ')';
        }


    })();
    (function() {
        "use strict";

        // Polyfill angular < 1.4 (provide $animateCss)
        angular
            .module('material.core')
            .factory('$$mdAnimate', ["$q", "$timeout", "$mdConstant", "$animateCss", function($q, $timeout, $mdConstant, $animateCss) {

                // Since $$mdAnimate is injected into $mdUtil... use a wrapper function
                // to subsequently inject $mdUtil as an argument to the AnimateDomUtils

                return function($mdUtil) {
                    return AnimateDomUtils($mdUtil, $q, $timeout, $mdConstant, $animateCss);
                };
            }]);

        /**
         * Factory function that requires special injections
         */
        function AnimateDomUtils($mdUtil, $q, $timeout, $mdConstant, $animateCss) {
            var self;
            return self = {
                /**
                 *
                 */
                translate3d: function(target, from, to, options) {
                    return $animateCss(target, {
                            from: from,
                            to: to,
                            addClass: options.transitionInClass
                        })
                        .start()
                        .then(function() {
                            // Resolve with reverser function...
                            return reverseTranslate;
                        });

                    /**
                     * Specific reversal of the request translate animation above...
                     */
                    function reverseTranslate(newFrom) {
                        return $animateCss(target, {
                            to: newFrom || from,
                            addClass: options.transitionOutClass,
                            removeClass: options.transitionInClass
                        }).start();

                    }
                },

                /**
                 * Listen for transitionEnd event (with optional timeout)
                 * Announce completion or failure via promise handlers
                 */
                waitTransitionEnd: function(element, opts) {
                    var TIMEOUT = 3000; // fallback is 3 secs

                    return $q(function(resolve, reject) {
                        opts = opts || {};

                        var timer = $timeout(finished, opts.timeout || TIMEOUT);
                        element.on($mdConstant.CSS.TRANSITIONEND, finished);

                        /**
                         * Upon timeout or transitionEnd, reject or resolve (respectively) this promise.
                         * NOTE: Make sure this transitionEnd didn't bubble up from a child
                         */
                        function finished(ev) {
                            if (ev && ev.target !== element[0]) return;

                            if (ev) $timeout.cancel(timer);
                            element.off($mdConstant.CSS.TRANSITIONEND, finished);

                            // Never reject since ngAnimate may cause timeouts due missed transitionEnd events
                            resolve();

                        }

                    });
                },

                /**
                 * Calculate the zoom transform from dialog to origin.
                 *
                 * We use this to set the dialog position immediately;
                 * then the md-transition-in actually translates back to
                 * `translate3d(0,0,0) scale(1.0)`...
                 *
                 * NOTE: all values are rounded to the nearest integer
                 */
                calculateZoomToOrigin: function(element, originator) {
                    var origin = originator.element;
                    var bounds = originator.bounds;

                    var zoomTemplate = "translate3d( {centerX}px, {centerY}px, 0 ) scale( {scaleX}, {scaleY} )";
                    var buildZoom = angular.bind(null, $mdUtil.supplant, zoomTemplate);
                    var zoomStyle = buildZoom({
                        centerX: 0,
                        centerY: 0,
                        scaleX: 0.5,
                        scaleY: 0.5
                    });

                    if (origin || bounds) {
                        var originBnds = origin ? self.clientRect(origin) || currentBounds() : self.copyRect(bounds);
                        var dialogRect = self.copyRect(element[0].getBoundingClientRect());
                        var dialogCenterPt = self.centerPointFor(dialogRect);
                        var originCenterPt = self.centerPointFor(originBnds);

                        // Build the transform to zoom from the dialog center to the origin center

                        zoomStyle = buildZoom({
                            centerX: originCenterPt.x - dialogCenterPt.x,
                            centerY: originCenterPt.y - dialogCenterPt.y,
                            scaleX: Math.round(100 * Math.min(0.5, originBnds.width / dialogRect.width)) / 100,
                            scaleY: Math.round(100 * Math.min(0.5, originBnds.height / dialogRect.height)) / 100
                        });
                    }

                    return zoomStyle;

                    /**
                     * This is a fallback if the origin information is no longer valid, then the
                     * origin bounds simply becomes the current bounds for the dialogContainer's parent
                     */
                    function currentBounds() {
                        var cntr = element ? element.parent() : null;
                        var parent = cntr ? cntr.parent() : null;

                        return parent ? self.clientRect(parent) : null;
                    }
                },

                /**
                 * Enhance raw values to represent valid css stylings...
                 */
                toCss: function(raw) {
                    var css = {};
                    var lookups = 'left top right bottom width height x y min-width min-height max-width max-height';

                    angular.forEach(raw, function(value, key) {
                        if (angular.isUndefined(value)) return;

                        if (lookups.indexOf(key) >= 0) {
                            css[key] = value + 'px';
                        } else {
                            switch (key) {
                                case 'transition':
                                    convertToVendor(key, $mdConstant.CSS.TRANSITION, value);
                                    break;
                                case 'transform':
                                    convertToVendor(key, $mdConstant.CSS.TRANSFORM, value);
                                    break;
                                case 'transformOrigin':
                                    convertToVendor(key, $mdConstant.CSS.TRANSFORM_ORIGIN, value);
                                    break;
                            }
                        }
                    });

                    return css;

                    function convertToVendor(key, vendor, value) {
                        angular.forEach(vendor.split(' '), function(key) {
                            css[key] = value;
                        });
                    }
                },

                /**
                 * Convert the translate CSS value to key/value pair(s).
                 */
                toTransformCss: function(transform, addTransition, transition) {
                    var css = {};
                    angular.forEach($mdConstant.CSS.TRANSFORM.split(' '), function(key) {
                        css[key] = transform;
                    });

                    if (addTransition) {
                        transition = transition || "all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) !important";
                        css['transition'] = transition;
                    }

                    return css;
                },

                /**
                 *  Clone the Rect and calculate the height/width if needed
                 */
                copyRect: function(source, destination) {
                    if (!source) return null;

                    destination = destination || {};

                    angular.forEach('left top right bottom width height'.split(' '), function(key) {
                        destination[key] = Math.round(source[key])
                    });

                    destination.width = destination.width || (destination.right - destination.left);
                    destination.height = destination.height || (destination.bottom - destination.top);

                    return destination;
                },

                /**
                 * Calculate ClientRect of element; return null if hidden or zero size
                 */
                clientRect: function(element) {
                    var bounds = angular.element(element)[0].getBoundingClientRect();
                    var isPositiveSizeClientRect = function(rect) {
                        return rect && (rect.width > 0) && (rect.height > 0);
                    };

                    // If the event origin element has zero size, it has probably been hidden.
                    return isPositiveSizeClientRect(bounds) ? self.copyRect(bounds) : null;
                },

                /**
                 *  Calculate 'rounded' center point of Rect
                 */
                centerPointFor: function(targetRect) {
                    return targetRect ? {
                        x: Math.round(targetRect.left + (targetRect.width / 2)),
                        y: Math.round(targetRect.top + (targetRect.height / 2))
                    } : {
                        x: 0,
                        y: 0
                    };
                }

            };
        };


    })();
    (function() {
        "use strict";

        "use strict";

        if (angular.version.minor >= 4) {
            angular.module('material.core.animate', []);
        } else {
            (function() {

                var forEach = angular.forEach;

                var WEBKIT = angular.isDefined(document.documentElement.style.WebkitAppearance);
                var TRANSITION_PROP = WEBKIT ? 'WebkitTransition' : 'transition';
                var ANIMATION_PROP = WEBKIT ? 'WebkitAnimation' : 'animation';
                var PREFIX = WEBKIT ? '-webkit-' : '';

                var TRANSITION_EVENTS = (WEBKIT ? 'webkitTransitionEnd ' : '') + 'transitionend';
                var ANIMATION_EVENTS = (WEBKIT ? 'webkitAnimationEnd ' : '') + 'animationend';

                var $$ForceReflowFactory = ['$document', function($document) {
                    return function() {
                        return $document[0].body.clientWidth + 1;
                    }
                }];

                var $$rAFMutexFactory = ['$$rAF', function($$rAF) {
                    return function() {
                        var passed = false;
                        $$rAF(function() {
                            passed = true;
                        });
                        return function(fn) {
                            passed ? fn() : $$rAF(fn);
                        };
                    };
                }];

                var $$AnimateRunnerFactory = ['$q', '$$rAFMutex', function($q, $$rAFMutex) {
                    var INITIAL_STATE = 0;
                    var DONE_PENDING_STATE = 1;
                    var DONE_COMPLETE_STATE = 2;

                    function AnimateRunner(host) {
                        this.setHost(host);

                        this._doneCallbacks = [];
                        this._runInAnimationFrame = $$rAFMutex();
                        this._state = 0;
                    }

                    AnimateRunner.prototype = {
                        setHost: function(host) {
                            this.host = host || {};
                        },

                        done: function(fn) {
                            if (this._state === DONE_COMPLETE_STATE) {
                                fn();
                            } else {
                                this._doneCallbacks.push(fn);
                            }
                        },

                        progress: angular.noop,

                        getPromise: function() {
                            if (!this.promise) {
                                var self = this;
                                this.promise = $q(function(resolve, reject) {
                                    self.done(function(status) {
                                        status === false ? reject() : resolve();
                                    });
                                });
                            }
                            return this.promise;
                        },

                        then: function(resolveHandler, rejectHandler) {
                            return this.getPromise().then(resolveHandler, rejectHandler);
                        },

                        'catch': function(handler) {
                            return this.getPromise()['catch'](handler);
                        },

                        'finally': function(handler) {
                            return this.getPromise()['finally'](handler);
                        },

                        pause: function() {
                            if (this.host.pause) {
                                this.host.pause();
                            }
                        },

                        resume: function() {
                            if (this.host.resume) {
                                this.host.resume();
                            }
                        },

                        end: function() {
                            if (this.host.end) {
                                this.host.end();
                            }
                            this._resolve(true);
                        },

                        cancel: function() {
                            if (this.host.cancel) {
                                this.host.cancel();
                            }
                            this._resolve(false);
                        },

                        complete: function(response) {
                            var self = this;
                            if (self._state === INITIAL_STATE) {
                                self._state = DONE_PENDING_STATE;
                                self._runInAnimationFrame(function() {
                                    self._resolve(response);
                                });
                            }
                        },

                        _resolve: function(response) {
                            if (this._state !== DONE_COMPLETE_STATE) {
                                forEach(this._doneCallbacks, function(fn) {
                                    fn(response);
                                });
                                this._doneCallbacks.length = 0;
                                this._state = DONE_COMPLETE_STATE;
                            }
                        }
                    };

                    return AnimateRunner;
                }];

                angular
                    .module('material.core.animate', [])
                    .factory('$$forceReflow', $$ForceReflowFactory)
                    .factory('$$AnimateRunner', $$AnimateRunnerFactory)
                    .factory('$$rAFMutex', $$rAFMutexFactory)
                    .factory('$animateCss', ['$window', '$$rAF', '$$AnimateRunner', '$$forceReflow', '$$jqLite', '$timeout',
                        function($window, $$rAF, $$AnimateRunner, $$forceReflow, $$jqLite, $timeout) {

                            function init(element, options) {

                                var temporaryStyles = [];
                                var node = getDomNode(element);

                                if (options.transitionStyle) {
                                    temporaryStyles.push([PREFIX + 'transition', options.transitionStyle]);
                                }

                                if (options.keyframeStyle) {
                                    temporaryStyles.push([PREFIX + 'animation', options.keyframeStyle]);
                                }

                                if (options.delay) {
                                    temporaryStyles.push([PREFIX + 'transition-delay', options.delay + 's']);
                                }

                                if (options.duration) {
                                    temporaryStyles.push([PREFIX + 'transition-duration', options.duration + 's']);
                                }

                                var hasCompleteStyles = options.keyframeStyle ||
                                    (options.to && (options.duration > 0 || options.transitionStyle));
                                var hasCompleteClasses = !!options.addClass || !!options.removeClass;
                                var hasCompleteAnimation = hasCompleteStyles || hasCompleteClasses;

                                blockTransition(element, true);
                                applyAnimationFromStyles(element, options);

                                var animationClosed = false;
                                var events, eventFn;

                                return {
                                    close: $window.close,
                                    start: function() {
                                        var runner = new $$AnimateRunner();
                                        waitUntilQuiet(function() {
                                            blockTransition(element, false);
                                            if (!hasCompleteAnimation) {
                                                return close();
                                            }

                                            forEach(temporaryStyles, function(entry) {
                                                var key = entry[0];
                                                var value = entry[1];
                                                node.style[camelCase(key)] = value;
                                            });

                                            applyClasses(element, options);

                                            var timings = computeTimings(element);
                                            if (timings.duration === 0) {
                                                return close();
                                            }

                                            var moreStyles = [];

                                            if (options.easing) {
                                                if (timings.transitionDuration) {
                                                    moreStyles.push([PREFIX + 'transition-timing-function', options.easing]);
                                                }
                                                if (timings.animationDuration) {
                                                    moreStyles.push([PREFIX + 'animation-timing-function', options.easing]);
                                                }
                                            }

                                            if (options.delay && timings.animationDelay) {
                                                moreStyles.push([PREFIX + 'animation-delay', options.delay + 's']);
                                            }

                                            if (options.duration && timings.animationDuration) {
                                                moreStyles.push([PREFIX + 'animation-duration', options.duration + 's']);
                                            }

                                            forEach(moreStyles, function(entry) {
                                                var key = entry[0];
                                                var value = entry[1];
                                                node.style[camelCase(key)] = value;
                                                temporaryStyles.push(entry);
                                            });

                                            var maxDelay = timings.delay;
                                            var maxDelayTime = maxDelay * 1000;
                                            var maxDuration = timings.duration;
                                            var maxDurationTime = maxDuration * 1000;
                                            var startTime = Date.now();

                                            events = [];
                                            if (timings.transitionDuration) {
                                                events.push(TRANSITION_EVENTS);
                                            }
                                            if (timings.animationDuration) {
                                                events.push(ANIMATION_EVENTS);
                                            }
                                            events = events.join(' ');
                                            eventFn = function(event) {
                                                event.stopPropagation();
                                                var ev = event.originalEvent || event;
                                                var timeStamp = ev.timeStamp || Date.now();
                                                var elapsedTime = parseFloat(ev.elapsedTime.toFixed(3));
                                                if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
                                                    close();
                                                }
                                            };
                                            element.on(events, eventFn);

                                            applyAnimationToStyles(element, options);

                                            $timeout(close, maxDelayTime + maxDurationTime * 1.5, false);
                                        });

                                        return runner;

                                        function close() {
                                            if (animationClosed) return;
                                            animationClosed = true;

                                            if (events && eventFn) {
                                                element.off(events, eventFn);
                                            }
                                            applyClasses(element, options);
                                            applyAnimationStyles(element, options);
                                            forEach(temporaryStyles, function(entry) {
                                                node.style[camelCase(entry[0])] = '';
                                            });
                                            runner.complete(true);
                                            return runner;
                                        }
                                    }
                                }
                            }

                            function applyClasses(element, options) {
                                if (options.addClass) {
                                    $$jqLite.addClass(element, options.addClass);
                                    options.addClass = null;
                                }
                                if (options.removeClass) {
                                    $$jqLite.removeClass(element, options.removeClass);
                                    options.removeClass = null;
                                }
                            }

                            function computeTimings(element) {
                                var node = getDomNode(element);
                                var cs = $window.getComputedStyle(node)
                                var tdr = parseMaxTime(cs[prop('transitionDuration')]);
                                var adr = parseMaxTime(cs[prop('animationDuration')]);
                                var tdy = parseMaxTime(cs[prop('transitionDelay')]);
                                var ady = parseMaxTime(cs[prop('animationDelay')]);

                                adr *= (parseInt(cs[prop('animationIterationCount')], 10) || 1);
                                var duration = Math.max(adr, tdr);
                                var delay = Math.max(ady, tdy);

                                return {
                                    duration: duration,
                                    delay: delay,
                                    animationDuration: adr,
                                    transitionDuration: tdr,
                                    animationDelay: ady,
                                    transitionDelay: tdy
                                };

                                function prop(key) {
                                    return WEBKIT ? 'Webkit' + key.charAt(0).toUpperCase() + key.substr(1) : key;
                                }
                            }

                            function parseMaxTime(str) {
                                var maxValue = 0;
                                var values = (str || "").split(/\s*,\s*/);
                                forEach(values, function(value) {
                                    // it's always safe to consider only second values and omit `ms` values since
                                    // getComputedStyle will always handle the conversion for us
                                    if (value.charAt(value.length - 1) == 's') {
                                        value = value.substring(0, value.length - 1);
                                    }
                                    value = parseFloat(value) || 0;
                                    maxValue = maxValue ? Math.max(value, maxValue) : value;
                                });
                                return maxValue;
                            }

                            var cancelLastRAFRequest;
                            var rafWaitQueue = [];

                            function waitUntilQuiet(callback) {
                                if (cancelLastRAFRequest) {
                                    cancelLastRAFRequest(); //cancels the request
                                }
                                rafWaitQueue.push(callback);
                                cancelLastRAFRequest = $$rAF(function() {
                                    cancelLastRAFRequest = null;

                                    // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.
                                    // PLEASE EXAMINE THE `$$forceReflow` service to understand why.
                                    var pageWidth = $$forceReflow();

                                    // we use a for loop to ensure that if the queue is changed
                                    // during this looping then it will consider new requests
                                    for (var i = 0; i < rafWaitQueue.length; i++) {
                                        rafWaitQueue[i](pageWidth);
                                    }
                                    rafWaitQueue.length = 0;
                                });
                            }

                            function applyAnimationStyles(element, options) {
                                applyAnimationFromStyles(element, options);
                                applyAnimationToStyles(element, options);
                            }

                            function applyAnimationFromStyles(element, options) {
                                if (options.from) {
                                    element.css(options.from);
                                    options.from = null;
                                }
                            }

                            function applyAnimationToStyles(element, options) {
                                if (options.to) {
                                    element.css(options.to);
                                    options.to = null;
                                }
                            }

                            function getDomNode(element) {
                                for (var i = 0; i < element.length; i++) {
                                    if (element[i].nodeType === 1) return element[i];
                                }
                            }

                            function blockTransition(element, bool) {
                                var node = getDomNode(element);
                                var key = camelCase(PREFIX + 'transition-delay');
                                node.style[key] = bool ? '-9999s' : '';
                            }

                            return init;
                        }
                    ]);

                /**
                 * Older browsers [FF31] expect camelCase
                 * property keys.
                 * e.g.
                 *  animation-duration --> animationDuration
                 */
                function camelCase(str) {
                    return str.replace(/-[a-z]/g, function(str) {
                        return str.charAt(1).toUpperCase();
                    });
                }

            })();

        }

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.autocomplete
         */
        /*
         * @see js folder for autocomplete implementation
         */
        angular.module('material.components.autocomplete', [
            'material.core',
            'material.components.icon',
            'material.components.virtualRepeat'
        ]);

    })();
    (function() {
        "use strict";

        /*
         * @ngdoc module
         * @name material.components.backdrop
         * @description Backdrop
         */

        /**
         * @ngdoc directive
         * @name mdBackdrop
         * @module material.components.backdrop
         *
         * @restrict E
         *
         * @description
         * `<md-backdrop>` is a backdrop element used by other components, such as dialog and bottom sheet.
         * Apply class `opaque` to make the backdrop use the theme backdrop color.
         *
         */

        angular
            .module('material.components.backdrop', ['material.core'])
            .directive('mdBackdrop', ["$mdTheming", "$animate", "$rootElement", "$window", "$log", "$$rAF", "$document", function BackdropDirective($mdTheming, $animate, $rootElement, $window, $log, $$rAF, $document) {
                var ERROR_CSS_POSITION = "<md-backdrop> may not work properly in a scrolled, static-positioned parent container.";

                return {
                    restrict: 'E',
                    link: postLink
                };

                function postLink(scope, element, attrs) {

                    // If body scrolling has been disabled using mdUtil.disableBodyScroll(),
                    // adjust the 'backdrop' height to account for the fixed 'body' top offset
                    var body = $window.getComputedStyle($document[0].body);
                    if (body.position == 'fixed') {
                        var hViewport = parseInt(body.height, 10) + Math.abs(parseInt(body.top, 10));
                        element.css({
                            height: hViewport + 'px'
                        });
                    }

                    // backdrop may be outside the $rootElement, tell ngAnimate to animate regardless
                    if ($animate.pin) $animate.pin(element, $rootElement);

                    $$rAF(function() {

                        // Often $animate.enter() is used to append the backDrop element
                        // so let's wait until $animate is done...
                        var parent = element.parent()[0];
                        if (parent) {

                            if (parent.nodeName == 'BODY') {
                                element.css({
                                    position: 'fixed'
                                });
                            }

                            var styles = $window.getComputedStyle(parent);
                            if (styles.position == 'static') {
                                // backdrop uses position:absolute and will not work properly with parent position:static (default)
                                $log.warn(ERROR_CSS_POSITION);
                            }
                        }

                        $mdTheming.inherit(element, element.parent());
                    });

                }

            }]);

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.bottomSheet
         * @description
         * BottomSheet
         */
        angular
            .module('material.components.bottomSheet', [
                'material.core',
                'material.components.backdrop'
            ])
            .directive('mdBottomSheet', MdBottomSheetDirective)
            .provider('$mdBottomSheet', MdBottomSheetProvider);

        /* @ngInject */
        function MdBottomSheetDirective($mdBottomSheet) {
            return {
                restrict: 'E',
                link: function postLink(scope, element, attr) {
                    // When navigation force destroys an interimElement, then
                    // listen and $destroy() that interim instance...
                    scope.$on('$destroy', function() {
                        $mdBottomSheet.destroy();
                    });
                }
            };
        }
        MdBottomSheetDirective.$inject = ["$mdBottomSheet"];


        /**
         * @ngdoc service
         * @name $mdBottomSheet
         * @module material.components.bottomSheet
         *
         * @description
         * `$mdBottomSheet` opens a bottom sheet over the app and provides a simple promise API.
         *
         * ## Restrictions
         *
         * - The bottom sheet's template must have an outer `<md-bottom-sheet>` element.
         * - Add the `md-grid` class to the bottom sheet for a grid layout.
         * - Add the `md-list` class to the bottom sheet for a list layout.
         *
         * @usage
         * <hljs lang="html">
         * <div ng-controller="MyController">
         *   <md-button ng-click="openBottomSheet()">
         *     Open a Bottom Sheet!
         *   </md-button>
         * </div>
         * </hljs>
         * <hljs lang="js">
         * var app = angular.module('app', ['ngMaterial']);
         * app.controller('MyController', function($scope, $mdBottomSheet) {
         *   $scope.openBottomSheet = function() {
         *     $mdBottomSheet.show({
         *       template: '<md-bottom-sheet>Hello!</md-bottom-sheet>'
         *     });
         *   };
         * });
         * </hljs>
         */

        /**
         * @ngdoc method
         * @name $mdBottomSheet#show
         *
         * @description
         * Show a bottom sheet with the specified options.
         *
         * @param {object} options An options object, with the following properties:
         *
         *   - `templateUrl` - `{string=}`: The url of an html template file that will
         *   be used as the content of the bottom sheet. Restrictions: the template must
         *   have an outer `md-bottom-sheet` element.
         *   - `template` - `{string=}`: Same as templateUrl, except this is an actual
         *   template string.
         *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
         *     This scope will be destroyed when the bottom sheet is removed unless `preserveScope` is set to true.
         *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false
         *   - `controller` - `{string=}`: The controller to associate with this bottom sheet.
         *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will
         *   be used as names of values to inject into the controller. For example,
         *   `locals: {three: 3}` would inject `three` into the controller with the value
         *   of 3.
         *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the bottom sheet to
         *     close it. Default true.
         *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the bottom sheet.
         *     Default true.
         *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values
         *   and the bottom sheet will not open until the promises resolve.
         *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
         *   - `parent` - `{element=}`: The element to append the bottom sheet to. The `parent` may be a `function`, `string`,
         *   `object`, or null. Defaults to appending to the body of the root element (or the root element) of the application.
         *   e.g. angular.element(document.getElementById('content')) or "#content"
         *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the bottom sheet is open.
         *     Default true.
         *
         * @returns {promise} A promise that can be resolved with `$mdBottomSheet.hide()` or
         * rejected with `$mdBottomSheet.cancel()`.
         */

        /**
         * @ngdoc method
         * @name $mdBottomSheet#hide
         *
         * @description
         * Hide the existing bottom sheet and resolve the promise returned from
         * `$mdBottomSheet.show()`. This call will close the most recently opened/current bottomsheet (if any).
         *
         * @param {*=} response An argument for the resolved promise.
         *
         */

        /**
         * @ngdoc method
         * @name $mdBottomSheet#cancel
         *
         * @description
         * Hide the existing bottom sheet and reject the promise returned from
         * `$mdBottomSheet.show()`.
         *
         * @param {*=} response An argument for the rejected promise.
         *
         */

        function MdBottomSheetProvider($$interimElementProvider) {
            // how fast we need to flick down to close the sheet, pixels/ms
            var CLOSING_VELOCITY = 0.5;
            var PADDING = 80; // same as css

            bottomSheetDefaults.$inject = ["$animate", "$mdConstant", "$mdUtil", "$mdTheming", "$mdBottomSheet", "$rootElement", "$mdGesture"];
            return $$interimElementProvider('$mdBottomSheet')
                .setDefaults({
                    methods: ['disableParentScroll', 'escapeToClose', 'clickOutsideToClose'],
                    options: bottomSheetDefaults
                });

            /* @ngInject */
            function bottomSheetDefaults($animate, $mdConstant, $mdUtil, $mdTheming, $mdBottomSheet, $rootElement, $mdGesture) {
                var backdrop;

                return {
                    themable: true,
                    onShow: onShow,
                    onRemove: onRemove,
                    escapeToClose: true,
                    clickOutsideToClose: true,
                    disableParentScroll: true
                };


                function onShow(scope, element, options, controller) {

                    element = $mdUtil.extractElementByName(element, 'md-bottom-sheet');

                    // Add a backdrop that will close on click
                    backdrop = $mdUtil.createBackdrop(scope, "md-bottom-sheet-backdrop md-opaque");

                    if (options.clickOutsideToClose) {
                        backdrop.on('click', function() {
                            $mdUtil.nextTick($mdBottomSheet.cancel, true);
                        });
                    }

                    $mdTheming.inherit(backdrop, options.parent);

                    $animate.enter(backdrop, options.parent, null);

                    var bottomSheet = new BottomSheet(element, options.parent);
                    options.bottomSheet = bottomSheet;

                    $mdTheming.inherit(bottomSheet.element, options.parent);

                    if (options.disableParentScroll) {
                        options.restoreScroll = $mdUtil.disableScrollAround(bottomSheet.element, options.parent);
                    }

                    return $animate.enter(bottomSheet.element, options.parent)
                        .then(function() {
                            var focusable = $mdUtil.findFocusTarget(element) || angular.element(
                                element[0].querySelector('button') ||
                                element[0].querySelector('a') ||
                                element[0].querySelector('[ng-click]')
                            );
                            focusable.focus();

                            if (options.escapeToClose) {
                                options.rootElementKeyupCallback = function(e) {
                                    if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {
                                        $mdUtil.nextTick($mdBottomSheet.cancel, true);
                                    }
                                };
                                $rootElement.on('keyup', options.rootElementKeyupCallback);
                            }
                        });

                }

                function onRemove(scope, element, options) {

                    var bottomSheet = options.bottomSheet;

                    $animate.leave(backdrop);
                    return $animate.leave(bottomSheet.element).then(function() {
                        if (options.disableParentScroll) {
                            options.restoreScroll();
                            delete options.restoreScroll;
                        }

                        bottomSheet.cleanup();
                    });
                }

                /**
                 * BottomSheet class to apply bottom-sheet behavior to an element
                 */
                function BottomSheet(element, parent) {
                    var deregister = $mdGesture.register(parent, 'drag', {
                        horizontal: false
                    });
                    parent.on('$md.dragstart', onDragStart)
                        .on('$md.drag', onDrag)
                        .on('$md.dragend', onDragEnd);

                    return {
                        element: element,
                        cleanup: function cleanup() {
                            deregister();
                            parent.off('$md.dragstart', onDragStart);
                            parent.off('$md.drag', onDrag);
                            parent.off('$md.dragend', onDragEnd);
                        }
                    };

                    function onDragStart(ev) {
                        // Disable transitions on transform so that it feels fast
                        element.css($mdConstant.CSS.TRANSITION_DURATION, '0ms');
                    }

                    function onDrag(ev) {
                        var transform = ev.pointer.distanceY;
                        if (transform < 5) {
                            // Slow down drag when trying to drag up, and stop after PADDING
                            transform = Math.max(-PADDING, transform / 2);
                        }
                        element.css($mdConstant.CSS.TRANSFORM, 'translate3d(0,' + (PADDING + transform) + 'px,0)');
                    }

                    function onDragEnd(ev) {
                        if (ev.pointer.distanceY > 0 &&
                            (ev.pointer.distanceY > 20 || Math.abs(ev.pointer.velocityY) > CLOSING_VELOCITY)) {
                            var distanceRemaining = element.prop('offsetHeight') - ev.pointer.distanceY;
                            var transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * 0.75, 500);
                            element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + 'ms');
                            $mdUtil.nextTick($mdBottomSheet.cancel, true);
                        } else {
                            element.css($mdConstant.CSS.TRANSITION_DURATION, '');
                            element.css($mdConstant.CSS.TRANSFORM, '');
                        }
                    }
                }

            }

        }
        MdBottomSheetProvider.$inject = ["$$interimElementProvider"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.button
         * @description
         *
         * Button
         */
        angular
            .module('material.components.button', ['material.core'])
            .directive('mdButton', MdButtonDirective);

        /**
         * @ngdoc directive
         * @name mdButton
         * @module material.components.button
         *
         * @restrict E
         *
         * @description
         * `<md-button>` is a button directive with optional ink ripples (default enabled).
         *
         * If you supply a `href` or `ng-href` attribute, it will become an `<a>` element. Otherwise, it will
         * become a `<button>` element. As per the [Material Design specifications](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
         * the FAB button background is filled with the accent color [by default]. The primary color palette may be used with
         * the `md-primary` class.
         *
         * @param {boolean=} md-no-ink If present, disable ripple ink effects.
         * @param {expression=} ng-disabled En/Disable based on the expression
         * @param {string=} md-ripple-size Overrides the default ripple size logic. Options: `full`, `partial`, `auto`
         * @param {string=} aria-label Adds alternative text to button for accessibility, useful for icon buttons.
         * If no default text is found, a warning will be logged.
         *
         * @usage
         *
         * Regular buttons:
         *
         * <hljs lang="html">
         *  <md-button> Flat Button </md-button>
         *  <md-button href="http://google.com"> Flat link </md-button>
         *  <md-button class="md-raised"> Raised Button </md-button>
         *  <md-button ng-disabled="true"> Disabled Button </md-button>
         *  <md-button>
         *    <md-icon md-svg-src="your/icon.svg"></md-icon>
         *    Register Now
         *  </md-button>
         * </hljs>
         *
         * FAB buttons:
         *
         * <hljs lang="html">
         *  <md-button class="md-fab" aria-label="FAB">
         *    <md-icon md-svg-src="your/icon.svg"></md-icon>
         *  </md-button>
         *  <!-- mini-FAB -->
         *  <md-button class="md-fab md-mini" aria-label="Mini FAB">
         *    <md-icon md-svg-src="your/icon.svg"></md-icon>
         *  </md-button>
         *  <!-- Button with SVG Icon -->
         *  <md-button class="md-icon-button" aria-label="Custom Icon Button">
         *    <md-icon md-svg-icon="path/to/your.svg"></md-icon>
         *  </md-button>
         * </hljs>
         */
        function MdButtonDirective($mdButtonInkRipple, $mdTheming, $mdAria, $timeout) {

            return {
                restrict: 'EA',
                replace: true,
                transclude: true,
                template: getTemplate,
                link: postLink
            };

            function isAnchor(attr) {
                return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref) || angular.isDefined(attr.ngLink) || angular.isDefined(attr.uiSref);
            }

            function getTemplate(element, attr) {
                if (isAnchor(attr)) {
                    return '<a class="md-button" ng-transclude></a>';
                } else {
                    //If buttons don't have type="button", they will submit forms automatically.
                    var btnType = (typeof attr.type === 'undefined') ? 'button' : attr.type;
                    return '<button class="md-button" type="' + btnType + '" ng-transclude></button>';
                }
            }

            function postLink(scope, element, attr) {
                var node = element[0];
                $mdTheming(element);
                $mdButtonInkRipple.attach(scope, element);

                var elementHasText = node.textContent.trim();
                if (!elementHasText) {
                    $mdAria.expect(element, 'aria-label');
                }

                // For anchor elements, we have to set tabindex manually when the
                // element is disabled
                if (isAnchor(attr) && angular.isDefined(attr.ngDisabled)) {
                    scope.$watch(attr.ngDisabled, function(isDisabled) {
                        element.attr('tabindex', isDisabled ? -1 : 0);
                    });
                }

                // disabling click event when disabled is true
                element.on('click', function(e) {
                    if (attr.disabled === true) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                    }
                });

                // restrict focus styles to the keyboard
                scope.mouseActive = false;
                element.on('mousedown', function() {
                        scope.mouseActive = true;
                        $timeout(function() {
                            scope.mouseActive = false;
                        }, 100);
                    })
                    .on('focus', function() {
                        if (scope.mouseActive === false) {
                            element.addClass('md-focused');
                        }
                    })
                    .on('blur', function(ev) {
                        element.removeClass('md-focused');
                    });
            }

        }
        MdButtonDirective.$inject = ["$mdButtonInkRipple", "$mdTheming", "$mdAria", "$timeout"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.card
         *
         * @description
         * Card components.
         */
        angular.module('material.components.card', [
                'material.core'
            ])
            .directive('mdCard', mdCardDirective);


        /**
         * @ngdoc directive
         * @name mdCard
         * @module material.components.card
         *
         * @restrict E
         *
         * @description
         * The `<md-card>` directive is a container element used within `<md-content>` containers.
         *
         * An image included as a direct descendant will fill the card's width, while the `<md-card-content>`
         * container will wrap text content and provide padding. An `<md-card-footer>` element can be
         * optionally included to put content flush against the bottom edge of the card.
         *
         * Action buttons can be included in an `<md-card-actions>` element, similar to `<md-dialog-actions>`.
         * You can then position buttons using layout attributes.
         *
         * Card is built with:
         * * `<md-card-header>` - Header for the card, holds avatar, text and squared image
         *  - `<md-card-avatar>` - Card avatar
         *    - `md-user-avatar` - Class for user image
         *    - `<md-icon>`
         *  - `<md-card-header-text>` - Contains elements for the card description
         *    - `md-title` - Class for the card title
         *    - `md-subhead` - Class for the card sub header
         * * `<img>` - Image for the card
         * * `<md-card-title>` - Card content title
         *  - `<md-card-title-text>`
         *    - `md-headline` - Class for the card content title
         *    - `md-subhead` - Class for the card content sub header
         *  - `<md-card-title-media>` - Squared image within the title
         *    - `md-media-sm` - Class for small image
         *    - `md-media-md` - Class for medium image
         *    - `md-media-lg` - Class for large image
         * * `<md-card-content>` - Card content
         *  - `md-media-xl` - Class for extra large image
         * * `<md-card-actions>` - Card actions
         *  - `<md-card-icon-actions>` - Icon actions
         *
         * Cards have constant width and variable heights; where the maximum height is limited to what can
         * fit within a single view on a platform, but it can temporarily expand as needed.
         *
         * @usage
         * ### Card with optional footer
         * <hljs lang="html">
         * <md-card>
         *  <img src="card-image.png" class="md-card-image" alt="image caption">
         *  <md-card-content>
         *    <h2>Card headline</h2>
         *    <p>Card content</p>
         *  </md-card-content>
         *  <md-card-footer>
         *    Card footer
         *  </md-card-footer>
         * </md-card>
         * </hljs>
         *
         * ### Card with actions
         * <hljs lang="html">
         * <md-card>
         *  <img src="card-image.png" class="md-card-image" alt="image caption">
         *  <md-card-content>
         *    <h2>Card headline</h2>
         *    <p>Card content</p>
         *  </md-card-content>
         *  <md-card-actions layout="row" layout-align="end center">
         *    <md-button>Action 1</md-button>
         *    <md-button>Action 2</md-button>
         *  </md-card-actions>
         * </md-card>
         * </hljs>
         *
         * ### Card with header, image, title actions and content
         * <hljs lang="html">
         * <md-card>
         *   <md-card-header>
         *     <md-card-avatar>
         *       <img class="md-user-avatar" src="avatar.png"/>
         *     </md-card-avatar>
         *     <md-card-header-text>
         *       <span class="md-title">Title</span>
         *       <span class="md-subhead">Sub header</span>
         *     </md-card-header-text>
         *   </md-card-header>
         *   <img ng-src="card-image.png" class="md-card-image" alt="image caption">
         *   <md-card-title>
         *     <md-card-title-text>
         *       <span class="md-headline">Card headline</span>
         *       <span class="md-subhead">Card subheader</span>
         *     </md-card-title-text>
         *   </md-card-title>
         *   <md-card-actions layout="row" layout-align="start center">
         *     <md-button>Action 1</md-button>
         *     <md-button>Action 2</md-button>
         *     <md-card-icon-actions>
         *       <md-button class="md-icon-button" aria-label="icon">
         *         <md-icon md-svg-icon="icon"></md-icon>
         *       </md-button>
         *     </md-card-icon-actions>
         *   </md-card-actions>
         *   <md-card-content>
         *     <p>
         *      Card content
         *     </p>
         *   </md-card-content>
         * </md-card>
         * </hljs>
         */
        function mdCardDirective($mdTheming) {
            return {
                restrict: 'E',
                link: function($scope, $element) {
                    $mdTheming($element);
                }
            };
        }
        mdCardDirective.$inject = ["$mdTheming"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.checkbox
         * @description Checkbox module!
         */
        angular
            .module('material.components.checkbox', ['material.core'])
            .directive('mdCheckbox', MdCheckboxDirective);

        /**
         * @ngdoc directive
         * @name mdCheckbox
         * @module material.components.checkbox
         * @restrict E
         *
         * @description
         * The checkbox directive is used like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
         *
         * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
         * the checkbox is in the accent color by default. The primary color palette may be used with
         * the `md-primary` class.
         *
         * @param {string} ng-model Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {expression=} ng-true-value The value to which the expression should be set when selected.
         * @param {expression=} ng-false-value The value to which the expression should be set when not selected.
         * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
         * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects
         * @param {string=} aria-label Adds label to checkbox for accessibility.
         * Defaults to checkbox's text. If no default text is found, a warning will be logged.
         *
         * @usage
         * <hljs lang="html">
         * <md-checkbox ng-model="isChecked" aria-label="Finished?">
         *   Finished ?
         * </md-checkbox>
         *
         * <md-checkbox md-no-ink ng-model="hasInk" aria-label="No Ink Effects">
         *   No Ink Effects
         * </md-checkbox>
         *
         * <md-checkbox ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">
         *   Disabled
         * </md-checkbox>
         *
         * </hljs>
         *
         */
        function MdCheckboxDirective(inputDirective, $mdAria, $mdConstant, $mdTheming, $mdUtil, $timeout) {
            inputDirective = inputDirective[0];
            var CHECKED_CSS = 'md-checked';

            return {
                restrict: 'E',
                transclude: true,
                require: '?ngModel',
                priority: 210, // Run before ngAria
                template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' +
                    '<div class="md-icon"></div>' +
                    '</div>' +
                    '<div ng-transclude class="md-label"></div>',
                compile: compile
            };

            // **********************************************************
            // Private Methods
            // **********************************************************

            function compile(tElement, tAttrs) {

                tAttrs.type = 'checkbox';
                tAttrs.tabindex = tAttrs.tabindex || '0';
                tElement.attr('role', tAttrs.type);

                // Attach a click handler in compile in order to immediately stop propagation
                // (especially for ng-click) when the checkbox is disabled.
                tElement.on('click', function(event) {
                    if (this.hasAttribute('disabled')) {
                        event.stopImmediatePropagation();
                    }
                });

                return function postLink(scope, element, attr, ngModelCtrl) {
                    ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();
                    $mdTheming(element);

                    if (attr.ngChecked) {
                        scope.$watch(
                            scope.$eval.bind(scope, attr.ngChecked),
                            ngModelCtrl.$setViewValue.bind(ngModelCtrl)
                        );
                    }

                    $$watchExpr('ngDisabled', 'tabindex', {
                        true: '-1',
                        false: attr.tabindex
                    });

                    $mdAria.expectWithText(element, 'aria-label');

                    // Reuse the original input[type=checkbox] directive from Angular core.
                    // This is a bit hacky as we need our own event listener and own render
                    // function.
                    inputDirective.link.pre(scope, {
                        on: angular.noop,
                        0: {}
                    }, attr, [ngModelCtrl]);

                    scope.mouseActive = false;
                    element.on('click', listener)
                        .on('keypress', keypressHandler)
                        .on('mousedown', function() {
                            scope.mouseActive = true;
                            $timeout(function() {
                                scope.mouseActive = false;
                            }, 100);
                        })
                        .on('focus', function() {
                            if (scope.mouseActive === false) {
                                element.addClass('md-focused');
                            }
                        })
                        .on('blur', function() {
                            element.removeClass('md-focused');
                        });

                    ngModelCtrl.$render = render;

                    function $$watchExpr(expr, htmlAttr, valueOpts) {
                        if (attr[expr]) {
                            scope.$watch(attr[expr], function(val) {
                                if (valueOpts[val]) {
                                    element.attr(htmlAttr, valueOpts[val]);
                                }
                            });
                        }
                    }

                    function keypressHandler(ev) {
                        var keyCode = ev.which || ev.keyCode;
                        if (keyCode === $mdConstant.KEY_CODE.SPACE || keyCode === $mdConstant.KEY_CODE.ENTER) {
                            ev.preventDefault();

                            if (!element.hasClass('md-focused')) {
                                element.addClass('md-focused');
                            }

                            listener(ev);
                        }
                    }

                    function listener(ev) {
                        if (element[0].hasAttribute('disabled')) {
                            return;
                        }

                        scope.$apply(function() {
                            // Toggle the checkbox value...
                            var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;

                            ngModelCtrl.$setViewValue(viewValue, ev && ev.type);
                            ngModelCtrl.$render();
                        });
                    }

                    function render() {
                        if (ngModelCtrl.$viewValue) {
                            element.addClass(CHECKED_CSS);
                        } else {
                            element.removeClass(CHECKED_CSS);
                        }
                    }
                };
            }
        }
        MdCheckboxDirective.$inject = ["inputDirective", "$mdAria", "$mdConstant", "$mdTheming", "$mdUtil", "$timeout"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.chips
         */
        /*
         * @see js folder for chips implementation
         */
        angular.module('material.components.chips', [
            'material.core',
            'material.components.autocomplete'
        ]);

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.content
         *
         * @description
         * Scrollable content
         */
        angular.module('material.components.content', [
                'material.core'
            ])
            .directive('mdContent', mdContentDirective);

        /**
         * @ngdoc directive
         * @name mdContent
         * @module material.components.content
         *
         * @restrict E
         *
         * @description
         * The `<md-content>` directive is a container element useful for scrollable content
         *
         * @usage
         *
         * - Add the `[layout-padding]` attribute to make the content padded.
         *
         * <hljs lang="html">
         *  <md-content layout-padding>
         *      Lorem ipsum dolor sit amet, ne quod novum mei.
         *  </md-content>
         * </hljs>
         *
         */

        function mdContentDirective($mdTheming) {
            return {
                restrict: 'E',
                controller: ['$scope', '$element', ContentController],
                link: function(scope, element, attr) {
                    var node = element[0];

                    $mdTheming(element);
                    scope.$broadcast('$mdContentLoaded', element);

                    iosScrollFix(element[0]);
                }
            };

            function ContentController($scope, $element) {
                this.$scope = $scope;
                this.$element = $element;
            }
        }
        mdContentDirective.$inject = ["$mdTheming"];

        function iosScrollFix(node) {
            // IOS FIX:
            // If we scroll where there is no more room for the webview to scroll,
            // by default the webview itself will scroll up and down, this looks really
            // bad.  So if we are scrolling to the very top or bottom, add/subtract one
            angular.element(node).on('$md.pressdown', function(ev) {
                // Only touch events
                if (ev.pointer.type !== 't') return;
                // Don't let a child content's touchstart ruin it for us.
                if (ev.$materialScrollFixed) return;
                ev.$materialScrollFixed = true;

                if (node.scrollTop === 0) {
                    node.scrollTop = 1;
                } else if (node.scrollHeight === node.scrollTop + node.offsetHeight) {
                    node.scrollTop -= 1;
                }
            });
        }

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            /**
             * @ngdoc module
             * @name material.components.datepicker
             * @description Datepicker
             */
            angular.module('material.components.datepicker', [
                'material.core',
                'material.components.icon',
                'material.components.virtualRepeat'
            ]).directive('mdCalendar', calendarDirective);


            // POST RELEASE
            // TODO(jelbourn): Mac Cmd + left / right == Home / End
            // TODO(jelbourn): Clicking on the month label opens the month-picker.
            // TODO(jelbourn): Minimum and maximum date
            // TODO(jelbourn): Refactor month element creation to use cloneNode (performance).
            // TODO(jelbourn): Define virtual scrolling constants (compactness) users can override.
            // TODO(jelbourn): Animated month transition on ng-model change (virtual-repeat)
            // TODO(jelbourn): Scroll snapping (virtual repeat)
            // TODO(jelbourn): Remove superfluous row from short months (virtual-repeat)
            // TODO(jelbourn): Month headers stick to top when scrolling.
            // TODO(jelbourn): Previous month opacity is lowered when partially scrolled out of view.
            // TODO(jelbourn): Support md-calendar standalone on a page (as a tabstop w/ aria-live
            //     announcement and key handling).
            // Read-only calendar (not just date-picker).

            /**
             * Height of one calendar month tbody. This must be made known to the virtual-repeat and is
             * subsequently used for scrolling to specific months.
             */
            var TBODY_HEIGHT = 265;

            /**
             * Height of a calendar month with a single row. This is needed to calculate the offset for
             * rendering an extra month in virtual-repeat that only contains one row.
             */
            var TBODY_SINGLE_ROW_HEIGHT = 45;

            function calendarDirective() {
                return {
                    template: '<table aria-hidden="true" class="md-calendar-day-header"><thead></thead></table>' +
                        '<div class="md-calendar-scroll-mask">' +
                        '<md-virtual-repeat-container class="md-calendar-scroll-container" ' +
                        'md-offset-size="' + (TBODY_SINGLE_ROW_HEIGHT - TBODY_HEIGHT) + '">' +
                        '<table role="grid" tabindex="0" class="md-calendar" aria-readonly="true">' +
                        '<tbody role="rowgroup" md-virtual-repeat="i in ctrl.items" md-calendar-month ' +
                        'md-month-offset="$index" class="md-calendar-month" ' +
                        'md-start-index="ctrl.getSelectedMonthIndex()" ' +
                        'md-item-size="' + TBODY_HEIGHT + '"></tbody>' +
                        '</table>' +
                        '</md-virtual-repeat-container>' +
                        '</div>',
                    scope: {
                        minDate: '=mdMinDate',
                        maxDate: '=mdMaxDate',
                        dateFilter: '=mdDateFilter',
                    },
                    require: ['ngModel', 'mdCalendar'],
                    controller: CalendarCtrl,
                    controllerAs: 'ctrl',
                    bindToController: true,
                    link: function(scope, element, attrs, controllers) {
                        var ngModelCtrl = controllers[0];
                        var mdCalendarCtrl = controllers[1];
                        mdCalendarCtrl.configureNgModel(ngModelCtrl);
                    }
                };
            }

            /** Class applied to the selected date cell/. */
            var SELECTED_DATE_CLASS = 'md-calendar-selected-date';

            /** Class applied to the focused date cell/. */
            var FOCUSED_DATE_CLASS = 'md-focus';

            /** Next identifier for calendar instance. */
            var nextUniqueId = 0;

            /** The first renderable date in the virtual-scrolling calendar (for all instances). */
            var firstRenderableDate = null;

            /**
             * Controller for the mdCalendar component.
             * @ngInject @constructor
             */
            function CalendarCtrl($element, $attrs, $scope, $animate, $q, $mdConstant,
                $mdTheming, $$mdDateUtil, $mdDateLocale, $mdInkRipple, $mdUtil) {
                $mdTheming($element);
                /**
                 * Dummy array-like object for virtual-repeat to iterate over. The length is the total
                 * number of months that can be viewed. This is shorter than ideal because of (potential)
                 * Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1181658.
                 */
                this.items = {
                    length: 2000
                };

                if (this.maxDate && this.minDate) {
                    // Limit the number of months if min and max dates are set.
                    var numMonths = $$mdDateUtil.getMonthDistance(this.minDate, this.maxDate) + 1;
                    numMonths = Math.max(numMonths, 1);
                    // Add an additional month as the final dummy month for rendering purposes.
                    numMonths += 1;
                    this.items.length = numMonths;
                }

                /** @final {!angular.$animate} */
                this.$animate = $animate;

                /** @final {!angular.$q} */
                this.$q = $q;

                /** @final */
                this.$mdInkRipple = $mdInkRipple;

                /** @final */
                this.$mdUtil = $mdUtil;

                /** @final */
                this.keyCode = $mdConstant.KEY_CODE;

                /** @final */
                this.dateUtil = $$mdDateUtil;

                /** @final */
                this.dateLocale = $mdDateLocale;

                /** @final {!angular.JQLite} */
                this.$element = $element;

                /** @final {!angular.Scope} */
                this.$scope = $scope;

                /** @final {HTMLElement} */
                this.calendarElement = $element[0].querySelector('.md-calendar');

                /** @final {HTMLElement} */
                this.calendarScroller = $element[0].querySelector('.md-virtual-repeat-scroller');

                /** @final {Date} */
                this.today = this.dateUtil.createDateAtMidnight();

                /** @type {Date} */
                this.firstRenderableDate = this.dateUtil.incrementMonths(this.today, -this.items.length / 2);

                if (this.minDate && this.minDate > this.firstRenderableDate) {
                    this.firstRenderableDate = this.minDate;
                } else if (this.maxDate) {
                    // Calculate the difference between the start date and max date.
                    // Subtract 1 because it's an inclusive difference and 1 for the final dummy month.
                    //
                    var monthDifference = this.items.length - 2;
                    this.firstRenderableDate = this.dateUtil.incrementMonths(this.maxDate, -(this.items.length - 2));
                }


                /** @final {number} Unique ID for this calendar instance. */
                this.id = nextUniqueId++;

                /** @type {!angular.NgModelController} */
                this.ngModelCtrl = null;

                /**
                 * The selected date. Keep track of this separately from the ng-model value so that we
                 * can know, when the ng-model value changes, what the previous value was before its updated
                 * in the component's UI.
                 *
                 * @type {Date}
                 */
                this.selectedDate = null;

                /**
                 * The date that is currently focused or showing in the calendar. This will initially be set
                 * to the ng-model value if set, otherwise to today. It will be updated as the user navigates
                 * to other months. The cell corresponding to the displayDate does not necesarily always have
                 * focus in the document (such as for cases when the user is scrolling the calendar).
                 * @type {Date}
                 */
                this.displayDate = null;

                /**
                 * The date that has or should have focus.
                 * @type {Date}
                 */
                this.focusDate = null;

                /** @type {boolean} */
                this.isInitialized = false;

                /** @type {boolean} */
                this.isMonthTransitionInProgress = false;

                // Unless the user specifies so, the calendar should not be a tab stop.
                // This is necessary because ngAria might add a tabindex to anything with an ng-model
                // (based on whether or not the user has turned that particular feature on/off).
                if (!$attrs['tabindex']) {
                    $element.attr('tabindex', '-1');
                }

                var self = this;

                /**
                 * Handles a click event on a date cell.
                 * Created here so that every cell can use the same function instance.
                 * @this {HTMLTableCellElement} The cell that was clicked.
                 */
                this.cellClickHandler = function() {
                    var cellElement = this;
                    if (this.hasAttribute('data-timestamp')) {
                        $scope.$apply(function() {
                            var timestamp = Number(cellElement.getAttribute('data-timestamp'));
                            self.setNgModelValue(self.dateUtil.createDateAtMidnight(timestamp));
                        });
                    }
                };

                this.attachCalendarEventListeners();
            }
            CalendarCtrl.$inject = ["$element", "$attrs", "$scope", "$animate", "$q", "$mdConstant", "$mdTheming", "$$mdDateUtil", "$mdDateLocale", "$mdInkRipple", "$mdUtil"];


            /*** Initialization ***/

            /**
             * Sets up the controller's reference to ngModelController.
             * @param {!angular.NgModelController} ngModelCtrl
             */
            CalendarCtrl.prototype.configureNgModel = function(ngModelCtrl) {
                this.ngModelCtrl = ngModelCtrl;

                var self = this;
                ngModelCtrl.$render = function() {
                    self.changeSelectedDate(self.ngModelCtrl.$viewValue);
                };
            };

            /**
             * Initialize the calendar by building the months that are initially visible.
             * Initialization should occur after the ngModel value is known.
             */
            CalendarCtrl.prototype.buildInitialCalendarDisplay = function() {
                this.buildWeekHeader();
                this.hideVerticalScrollbar();

                this.displayDate = this.selectedDate || this.today;
                this.isInitialized = true;
            };

            /**
             * Hides the vertical scrollbar on the calendar scroller by setting the width on the
             * calendar scroller and the `overflow: hidden` wrapper around the scroller, and then setting
             * a padding-right on the scroller equal to the width of the browser's scrollbar.
             *
             * This will cause a reflow.
             */
            CalendarCtrl.prototype.hideVerticalScrollbar = function() {
                var element = this.$element[0];

                var scrollMask = element.querySelector('.md-calendar-scroll-mask');
                var scroller = this.calendarScroller;

                var headerWidth = element.querySelector('.md-calendar-day-header').clientWidth;
                var scrollbarWidth = scroller.offsetWidth - scroller.clientWidth;

                scrollMask.style.width = headerWidth + 'px';
                scroller.style.width = (headerWidth + scrollbarWidth) + 'px';
                scroller.style.paddingRight = scrollbarWidth + 'px';
            };


            /** Attach event listeners for the calendar. */
            CalendarCtrl.prototype.attachCalendarEventListeners = function() {
                // Keyboard interaction.
                this.$element.on('keydown', angular.bind(this, this.handleKeyEvent));
            };

            /*** User input handling ***/

            /**
             * Handles a key event in the calendar with the appropriate action. The action will either
             * be to select the focused date or to navigate to focus a new date.
             * @param {KeyboardEvent} event
             */
            CalendarCtrl.prototype.handleKeyEvent = function(event) {
                var self = this;
                this.$scope.$apply(function() {
                    // Capture escape and emit back up so that a wrapping component
                    // (such as a date-picker) can decide to close.
                    if (event.which == self.keyCode.ESCAPE || event.which == self.keyCode.TAB) {
                        self.$scope.$emit('md-calendar-close');

                        if (event.which == self.keyCode.TAB) {
                            event.preventDefault();
                        }

                        return;
                    }

                    // Remaining key events fall into two categories: selection and navigation.
                    // Start by checking if this is a selection event.
                    if (event.which === self.keyCode.ENTER) {
                        self.setNgModelValue(self.displayDate);
                        event.preventDefault();
                        return;
                    }

                    // Selection isn't occuring, so the key event is either navigation or nothing.
                    var date = self.getFocusDateFromKeyEvent(event);
                    if (date) {
                        date = self.boundDateByMinAndMax(date);
                        event.preventDefault();
                        event.stopPropagation();

                        // Since this is a keyboard interaction, actually give the newly focused date keyboard
                        // focus after the been brought into view.
                        self.changeDisplayDate(date).then(function() {
                            self.focus(date);
                        });
                    }
                });
            };

            /**
             * Gets the date to focus as the result of a key event.
             * @param {KeyboardEvent} event
             * @returns {Date} Date to navigate to, or null if the key does not match a calendar shortcut.
             */
            CalendarCtrl.prototype.getFocusDateFromKeyEvent = function(event) {
                var dateUtil = this.dateUtil;
                var keyCode = this.keyCode;

                switch (event.which) {
                    case keyCode.RIGHT_ARROW:
                        return dateUtil.incrementDays(this.displayDate, 1);
                    case keyCode.LEFT_ARROW:
                        return dateUtil.incrementDays(this.displayDate, -1);
                    case keyCode.DOWN_ARROW:
                        return event.metaKey ?
                            dateUtil.incrementMonths(this.displayDate, 1) :
                            dateUtil.incrementDays(this.displayDate, 7);
                    case keyCode.UP_ARROW:
                        return event.metaKey ?
                            dateUtil.incrementMonths(this.displayDate, -1) :
                            dateUtil.incrementDays(this.displayDate, -7);
                    case keyCode.PAGE_DOWN:
                        return dateUtil.incrementMonths(this.displayDate, 1);
                    case keyCode.PAGE_UP:
                        return dateUtil.incrementMonths(this.displayDate, -1);
                    case keyCode.HOME:
                        return dateUtil.getFirstDateOfMonth(this.displayDate);
                    case keyCode.END:
                        return dateUtil.getLastDateOfMonth(this.displayDate);
                    default:
                        return null;
                }
            };

            /**
             * Gets the "index" of the currently selected date as it would be in the virtual-repeat.
             * @returns {number}
             */
            CalendarCtrl.prototype.getSelectedMonthIndex = function() {
                return this.dateUtil.getMonthDistance(this.firstRenderableDate,
                    this.selectedDate || this.today);
            };

            /**
             * Scrolls to the month of the given date.
             * @param {Date} date
             */
            CalendarCtrl.prototype.scrollToMonth = function(date) {
                if (!this.dateUtil.isValidDate(date)) {
                    return;
                }

                var monthDistance = this.dateUtil.getMonthDistance(this.firstRenderableDate, date);
                this.calendarScroller.scrollTop = monthDistance * TBODY_HEIGHT;
            };

            /**
             * Sets the ng-model value for the calendar and emits a change event.
             * @param {Date} date
             */
            CalendarCtrl.prototype.setNgModelValue = function(date) {
                this.$scope.$emit('md-calendar-change', date);
                this.ngModelCtrl.$setViewValue(date);
                this.ngModelCtrl.$render();
            };

            /**
             * Focus the cell corresponding to the given date.
             * @param {Date=} opt_date
             */
            CalendarCtrl.prototype.focus = function(opt_date) {
                var date = opt_date || this.selectedDate || this.today;

                var previousFocus = this.calendarElement.querySelector('.md-focus');
                if (previousFocus) {
                    previousFocus.classList.remove(FOCUSED_DATE_CLASS);
                }

                var cellId = this.getDateId(date);
                var cell = document.getElementById(cellId);
                if (cell) {
                    cell.classList.add(FOCUSED_DATE_CLASS);
                    cell.focus();
                } else {
                    this.focusDate = date;
                }
            };

            /**
             * If a date exceeds minDate or maxDate, returns date matching minDate or maxDate, respectively.
             * Otherwise, returns the date.
             * @param {Date} date
             * @return {Date}
             */
            CalendarCtrl.prototype.boundDateByMinAndMax = function(date) {
                var boundDate = date;
                if (this.minDate && date < this.minDate) {
                    boundDate = new Date(this.minDate.getTime());
                }
                if (this.maxDate && date > this.maxDate) {
                    boundDate = new Date(this.maxDate.getTime());
                }
                return boundDate;
            };

            /*** Updating the displayed / selected date ***/

            /**
             * Change the selected date in the calendar (ngModel value has already been changed).
             * @param {Date} date
             */
            CalendarCtrl.prototype.changeSelectedDate = function(date) {
                var self = this;
                var previousSelectedDate = this.selectedDate;
                this.selectedDate = date;
                this.changeDisplayDate(date).then(function() {

                    // Remove the selected class from the previously selected date, if any.
                    if (previousSelectedDate) {
                        var prevDateCell =
                            document.getElementById(self.getDateId(previousSelectedDate));
                        if (prevDateCell) {
                            prevDateCell.classList.remove(SELECTED_DATE_CLASS);
                            prevDateCell.setAttribute('aria-selected', 'false');
                        }
                    }

                    // Apply the select class to the new selected date if it is set.
                    if (date) {
                        var dateCell = document.getElementById(self.getDateId(date));
                        if (dateCell) {
                            dateCell.classList.add(SELECTED_DATE_CLASS);
                            dateCell.setAttribute('aria-selected', 'true');
                        }
                    }
                });
            };


            /**
             * Change the date that is being shown in the calendar. If the given date is in a different
             * month, the displayed month will be transitioned.
             * @param {Date} date
             */
            CalendarCtrl.prototype.changeDisplayDate = function(date) {
                // Initialization is deferred until this function is called because we want to reflect
                // the starting value of ngModel.
                if (!this.isInitialized) {
                    this.buildInitialCalendarDisplay();
                    return this.$q.when();
                }

                // If trying to show an invalid date or a transition is in progress, do nothing.
                if (!this.dateUtil.isValidDate(date) || this.isMonthTransitionInProgress) {
                    return this.$q.when();
                }

                this.isMonthTransitionInProgress = true;
                var animationPromise = this.animateDateChange(date);

                this.displayDate = date;

                var self = this;
                animationPromise.then(function() {
                    self.isMonthTransitionInProgress = false;
                });

                return animationPromise;
            };

            /**
             * Animates the transition from the calendar's current month to the given month.
             * @param {Date} date
             * @returns {angular.$q.Promise} The animation promise.
             */
            CalendarCtrl.prototype.animateDateChange = function(date) {
                this.scrollToMonth(date);
                return this.$q.when();
            };

            /*** Constructing the calendar table ***/

            /**
             * Builds and appends a day-of-the-week header to the calendar.
             * This should only need to be called once during initialization.
             */
            CalendarCtrl.prototype.buildWeekHeader = function() {
                var firstDayOfWeek = this.dateLocale.firstDayOfWeek;
                var shortDays = this.dateLocale.shortDays;

                var row = document.createElement('tr');
                for (var i = 0; i < 7; i++) {
                    var th = document.createElement('th');
                    th.textContent = shortDays[(i + firstDayOfWeek) % 7];
                    row.appendChild(th);
                }

                this.$element.find('thead').append(row);
            };

            /**
             * Gets an identifier for a date unique to the calendar instance for internal
             * purposes. Not to be displayed.
             * @param {Date} date
             * @returns {string}
             */
            CalendarCtrl.prototype.getDateId = function(date) {
                return [
                    'md',
                    this.id,
                    date.getFullYear(),
                    date.getMonth(),
                    date.getDate()
                ].join('-');
            };
        })();

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';


            angular.module('material.components.datepicker')
                .directive('mdCalendarMonth', mdCalendarMonthDirective);


            /**
             * Private directive consumed by md-calendar. Having this directive lets the calender use
             * md-virtual-repeat and also cleanly separates the month DOM construction functions from
             * the rest of the calendar controller logic.
             */
            function mdCalendarMonthDirective() {
                return {
                    require: ['^^mdCalendar', 'mdCalendarMonth'],
                    scope: {
                        offset: '=mdMonthOffset'
                    },
                    controller: CalendarMonthCtrl,
                    controllerAs: 'mdMonthCtrl',
                    bindToController: true,
                    link: function(scope, element, attrs, controllers) {
                        var calendarCtrl = controllers[0];
                        var monthCtrl = controllers[1];

                        monthCtrl.calendarCtrl = calendarCtrl;
                        monthCtrl.generateContent();

                        // The virtual-repeat re-uses the same DOM elements, so there are only a limited number
                        // of repeated items that are linked, and then those elements have their bindings updataed.
                        // Since the months are not generated by bindings, we simply regenerate the entire thing
                        // when the binding (offset) changes.
                        scope.$watch(function() {
                            return monthCtrl.offset;
                        }, function(offset, oldOffset) {
                            if (offset != oldOffset) {
                                monthCtrl.generateContent();
                            }
                        });
                    }
                };
            }

            /** Class applied to the cell for today. */
            var TODAY_CLASS = 'md-calendar-date-today';

            /** Class applied to the selected date cell/. */
            var SELECTED_DATE_CLASS = 'md-calendar-selected-date';

            /** Class applied to the focused date cell/. */
            var FOCUSED_DATE_CLASS = 'md-focus';

            /**
             * Controller for a single calendar month.
             * @ngInject @constructor
             */
            function CalendarMonthCtrl($element, $$mdDateUtil, $mdDateLocale) {
                this.dateUtil = $$mdDateUtil;
                this.dateLocale = $mdDateLocale;
                this.$element = $element;
                this.calendarCtrl = null;

                /**
                 * Number of months from the start of the month "items" that the currently rendered month
                 * occurs. Set via angular data binding.
                 * @type {number}
                 */
                this.offset;

                /**
                 * Date cell to focus after appending the month to the document.
                 * @type {HTMLElement}
                 */
                this.focusAfterAppend = null;
            }
            CalendarMonthCtrl.$inject = ["$element", "$$mdDateUtil", "$mdDateLocale"];

            /** Generate and append the content for this month to the directive element. */
            CalendarMonthCtrl.prototype.generateContent = function() {
                var calendarCtrl = this.calendarCtrl;
                var date = this.dateUtil.incrementMonths(calendarCtrl.firstRenderableDate, this.offset);

                this.$element.empty();
                this.$element.append(this.buildCalendarForMonth(date));

                if (this.focusAfterAppend) {
                    this.focusAfterAppend.classList.add(FOCUSED_DATE_CLASS);
                    this.focusAfterAppend.focus();
                    this.focusAfterAppend = null;
                }
            };

            /**
             * Creates a single cell to contain a date in the calendar with all appropriate
             * attributes and classes added. If a date is given, the cell content will be set
             * based on the date.
             * @param {Date=} opt_date
             * @returns {HTMLElement}
             */
            CalendarMonthCtrl.prototype.buildDateCell = function(opt_date) {
                var calendarCtrl = this.calendarCtrl;

                // TODO(jelbourn): cloneNode is likely a faster way of doing this.
                var cell = document.createElement('td');
                cell.tabIndex = -1;
                cell.classList.add('md-calendar-date');
                cell.setAttribute('role', 'gridcell');

                if (opt_date) {
                    cell.setAttribute('tabindex', '-1');
                    cell.setAttribute('aria-label', this.dateLocale.longDateFormatter(opt_date));
                    cell.id = calendarCtrl.getDateId(opt_date);

                    // Use `data-timestamp` attribute because IE10 does not support the `dataset` property.
                    cell.setAttribute('data-timestamp', opt_date.getTime());

                    // TODO(jelourn): Doing these comparisons for class addition during generation might be slow.
                    // It may be better to finish the construction and then query the node and add the class.
                    if (this.dateUtil.isSameDay(opt_date, calendarCtrl.today)) {
                        cell.classList.add(TODAY_CLASS);
                    }

                    if (this.dateUtil.isValidDate(calendarCtrl.selectedDate) &&
                        this.dateUtil.isSameDay(opt_date, calendarCtrl.selectedDate)) {
                        cell.classList.add(SELECTED_DATE_CLASS);
                        cell.setAttribute('aria-selected', 'true');
                    }

                    var cellText = this.dateLocale.dates[opt_date.getDate()];

                    if (this.isDateEnabled(opt_date)) {
                        // Add a indicator for select, hover, and focus states.
                        var selectionIndicator = document.createElement('span');
                        cell.appendChild(selectionIndicator);
                        selectionIndicator.classList.add('md-calendar-date-selection-indicator');
                        selectionIndicator.textContent = cellText;

                        cell.addEventListener('click', calendarCtrl.cellClickHandler);

                        if (calendarCtrl.focusDate && this.dateUtil.isSameDay(opt_date, calendarCtrl.focusDate)) {
                            this.focusAfterAppend = cell;
                        }
                    } else {
                        cell.classList.add('md-calendar-date-disabled');
                        cell.textContent = cellText;
                    }
                }

                return cell;
            };

            /**
             * Check whether date is in range and enabled
             * @param {Date=} opt_date
             * @return {boolean} Whether the date is enabled.
             */
            CalendarMonthCtrl.prototype.isDateEnabled = function(opt_date) {
                return this.dateUtil.isDateWithinRange(opt_date,
                        this.calendarCtrl.minDate, this.calendarCtrl.maxDate) &&
                    (!angular.isFunction(this.calendarCtrl.dateFilter) || this.calendarCtrl.dateFilter(opt_date));
            }

            /**
             * Builds a `tr` element for the calendar grid.
             * @param rowNumber The week number within the month.
             * @returns {HTMLElement}
             */
            CalendarMonthCtrl.prototype.buildDateRow = function(rowNumber) {
                var row = document.createElement('tr');
                row.setAttribute('role', 'row');

                // Because of an NVDA bug (with Firefox), the row needs an aria-label in order
                // to prevent the entire row being read aloud when the user moves between rows.
                // See http://community.nvda-project.org/ticket/4643.
                row.setAttribute('aria-label', this.dateLocale.weekNumberFormatter(rowNumber));

                return row;
            };

            /**
             * Builds the <tbody> content for the given date's month.
             * @param {Date=} opt_dateInMonth
             * @returns {DocumentFragment} A document fragment containing the <tr> elements.
             */
            CalendarMonthCtrl.prototype.buildCalendarForMonth = function(opt_dateInMonth) {
                var date = this.dateUtil.isValidDate(opt_dateInMonth) ? opt_dateInMonth : new Date();

                var firstDayOfMonth = this.dateUtil.getFirstDateOfMonth(date);
                var firstDayOfTheWeek = this.getLocaleDay_(firstDayOfMonth);
                var numberOfDaysInMonth = this.dateUtil.getNumberOfDaysInMonth(date);

                // Store rows for the month in a document fragment so that we can append them all at once.
                var monthBody = document.createDocumentFragment();

                var rowNumber = 1;
                var row = this.buildDateRow(rowNumber);
                monthBody.appendChild(row);

                // If this is the final month in the list of items, only the first week should render,
                // so we should return immediately after the first row is complete and has been
                // attached to the body.
                var isFinalMonth = this.offset === this.calendarCtrl.items.length - 1;

                // Add a label for the month. If the month starts on a Sun/Mon/Tues, the month label
                // goes on a row above the first of the month. Otherwise, the month label takes up the first
                // two cells of the first row.
                var blankCellOffset = 0;
                var monthLabelCell = document.createElement('td');
                monthLabelCell.classList.add('md-calendar-month-label');
                // If the entire month is after the max date, render the label as a disabled state.
                if (this.calendarCtrl.maxDate && firstDayOfMonth > this.calendarCtrl.maxDate) {
                    monthLabelCell.classList.add('md-calendar-month-label-disabled');
                }
                monthLabelCell.textContent = this.dateLocale.monthHeaderFormatter(date);
                if (firstDayOfTheWeek <= 2) {
                    monthLabelCell.setAttribute('colspan', '7');

                    var monthLabelRow = this.buildDateRow();
                    monthLabelRow.appendChild(monthLabelCell);
                    monthBody.insertBefore(monthLabelRow, row);

                    if (isFinalMonth) {
                        return monthBody;
                    }
                } else {
                    blankCellOffset = 2;
                    monthLabelCell.setAttribute('colspan', '2');
                    row.appendChild(monthLabelCell);
                }

                // Add a blank cell for each day of the week that occurs before the first of the month.
                // For example, if the first day of the month is a Tuesday, add blank cells for Sun and Mon.
                // The blankCellOffset is needed in cases where the first N cells are used by the month label.
                for (var i = blankCellOffset; i < firstDayOfTheWeek; i++) {
                    row.appendChild(this.buildDateCell());
                }

                // Add a cell for each day of the month, keeping track of the day of the week so that
                // we know when to start a new row.
                var dayOfWeek = firstDayOfTheWeek;
                var iterationDate = firstDayOfMonth;
                for (var d = 1; d <= numberOfDaysInMonth; d++) {
                    // If we've reached the end of the week, start a new row.
                    if (dayOfWeek === 7) {
                        // We've finished the first row, so we're done if this is the final month.
                        if (isFinalMonth) {
                            return monthBody;
                        }
                        dayOfWeek = 0;
                        rowNumber++;
                        row = this.buildDateRow(rowNumber);
                        monthBody.appendChild(row);
                    }

                    iterationDate.setDate(d);
                    var cell = this.buildDateCell(iterationDate);
                    row.appendChild(cell);

                    dayOfWeek++;
                }

                // Ensure that the last row of the month has 7 cells.
                while (row.childNodes.length < 7) {
                    row.appendChild(this.buildDateCell());
                }

                // Ensure that all months have 6 rows. This is necessary for now because the virtual-repeat
                // requires that all items have exactly the same height.
                while (monthBody.childNodes.length < 6) {
                    var whitespaceRow = this.buildDateRow();
                    for (var i = 0; i < 7; i++) {
                        whitespaceRow.appendChild(this.buildDateCell());
                    }
                    monthBody.appendChild(whitespaceRow);
                }

                return monthBody;
            };

            /**
             * Gets the day-of-the-week index for a date for the current locale.
             * @private
             * @param {Date} date
             * @returns {number} The column index of the date in the calendar.
             */
            CalendarMonthCtrl.prototype.getLocaleDay_ = function(date) {
                return (date.getDay() + (7 - this.dateLocale.firstDayOfWeek)) % 7
            };
        })();

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            /**
             * @ngdoc service
             * @name $mdDateLocaleProvider
             * @module material.components.datepicker
             *
             * @description
             * The `$mdDateLocaleProvider` is the provider that creates the `$mdDateLocale` service.
             * This provider that allows the user to specify messages, formatters, and parsers for date
             * internationalization. The `$mdDateLocale` service itself is consumed by Angular Material
             * components that that deal with dates.
             *
             * @property {(Array<string>)=} months Array of month names (in order).
             * @property {(Array<string>)=} shortMonths Array of abbreviated month names.
             * @property {(Array<string>)=} days Array of the days of the week (in order).
             * @property {(Array<string>)=} shortDays Array of abbreviated dayes of the week.
             * @property {(Array<string>)=} dates Array of dates of the month. Only necessary for locales
             *     using a numeral system other than [1, 2, 3...].
             * @property {(Array<string>)=} firstDayOfWeek The first day of the week. Sunday = 0, Monday = 1,
             *    etc.
             * @property {(function(string): Date)=} parseDate Function to parse a date object from a string.
             * @property {(function(Date): string)=} formatDate Function to format a date object to a string.
             * @property {(function(Date): string)=} monthHeaderFormatter Function that returns the label for
             *     a month given a date.
             * @property {(function(number): string)=} weekNumberFormatter Function that returns a label for
             *     a week given the week number.
             * @property {(string)=} msgCalendar Translation of the label "Calendar" for the current locale.
             * @property {(string)=} msgOpenCalendar Translation of the button label "Open calendar" for the
             *     current locale.
             *
             * @usage
             * <hljs lang="js">
             *   myAppModule.config(function($mdDateLocaleProvider) {
             *
             *     // Example of a French localization.
             *     $mdDateLocaleProvider.months = ['janvier', 'février', 'mars', ...];
             *     $mdDateLocaleProvider.shortMonths = ['janv', 'févr', 'mars', ...];
             *     $mdDateLocaleProvider.days = ['dimanche', 'lundi', 'mardi', ...];
             *     $mdDateLocaleProvider.shortDays = ['Di', 'Lu', 'Ma', ...];
             *
             *     // Can change week display to start on Monday.
             *     $mdDateLocaleProvider.firstDayOfWeek = 1;
             *
             *     // Optional.
             *     $mdDateLocaleProvider.dates = [1, 2, 3, 4, 5, 6, ...];
             *
             *     // Example uses moment.js to parse and format dates.
             *     $mdDateLocaleProvider.parseDate = function(dateString) {
             *       var m = moment(dateString, 'L', true);
             *       return m.isValid() ? m.toDate() : new Date(NaN);
             *     };
             *
             *     $mdDateLocaleProvider.formatDate = function(date) {
             *       return moment(date).format('L');
             *     };
             *
             *     $mdDateLocaleProvider.monthHeaderFormatter = function(date) {
             *       return myShortMonths[date.getMonth()] + ' ' + date.getFullYear();
             *     };
             *
             *     // In addition to date display, date components also need localized messages
             *     // for aria-labels for screen-reader users.
             *
             *     $mdDateLocaleProvider.weekNumberFormatter = function(weekNumber) {
             *       return 'Semaine ' + weekNumber;
             *     };
             *
             *     $mdDateLocaleProvider.msgCalendar = 'Calendrier';
             *     $mdDateLocaleProvider.msgOpenCalendar = 'Ouvrir le calendrier';
             *
             * });
             * </hljs>
             *
             */

            angular.module('material.components.datepicker').config(["$provide", function($provide) {
                // TODO(jelbourn): Assert provided values are correctly formatted. Need assertions.

                /** @constructor */
                function DateLocaleProvider() {
                    /** Array of full month names. E.g., ['January', 'Febuary', ...] */
                    this.months = null;

                    /** Array of abbreviated month names. E.g., ['Jan', 'Feb', ...] */
                    this.shortMonths = null;

                    /** Array of full day of the week names. E.g., ['Monday', 'Tuesday', ...] */
                    this.days = null;

                    /** Array of abbreviated dat of the week names. E.g., ['M', 'T', ...] */
                    this.shortDays = null;

                    /** Array of dates of a month (1 - 31). Characters might be different in some locales. */
                    this.dates = null;

                    /** Index of the first day of the week. 0 = Sunday, 1 = Monday, etc. */
                    this.firstDayOfWeek = 0;

                    /**
                     * Function that converts the date portion of a Date to a string.
                     * @type {(function(Date): string)}
                     */
                    this.formatDate = null;

                    /**
                     * Function that converts a date string to a Date object (the date portion)
                     * @type {function(string): Date}
                     */
                    this.parseDate = null;

                    /**
                     * Function that formats a Date into a month header string.
                     * @type {function(Date): string}
                     */
                    this.monthHeaderFormatter = null;

                    /**
                     * Function that formats a week number into a label for the week.
                     * @type {function(number): string}
                     */
                    this.weekNumberFormatter = null;

                    /**
                     * Function that formats a date into a long aria-label that is read
                     * when the focused date changes.
                     * @type {function(Date): string}
                     */
                    this.longDateFormatter = null;

                    /**
                     * ARIA label for the calendar "dialog" used in the datepicker.
                     * @type {string}
                     */
                    this.msgCalendar = '';

                    /**
                     * ARIA label for the datepicker's "Open calendar" buttons.
                     * @type {string}
                     */
                    this.msgOpenCalendar = '';
                }

                /**
                 * Factory function that returns an instance of the dateLocale service.
                 * @ngInject
                 * @param $locale
                 * @returns {DateLocale}
                 */
                DateLocaleProvider.prototype.$get = function($locale) {
                    /**
                     * Default date-to-string formatting function.
                     * @param {!Date} date
                     * @returns {string}
                     */
                    function defaultFormatDate(date) {
                        if (!date) {
                            return '';
                        }

                        // All of the dates created through ng-material *should* be set to midnight.
                        // If we encounter a date where the localeTime shows at 11pm instead of midnight,
                        // we have run into an issue with DST where we need to increment the hour by one:
                        // var d = new Date(1992, 9, 8, 0, 0, 0);
                        // d.toLocaleString(); // == "10/7/1992, 11:00:00 PM"
                        var localeTime = date.toLocaleTimeString();
                        var formatDate = date;
                        if (date.getHours() == 0 &&
                            (localeTime.indexOf('11:') !== -1 || localeTime.indexOf('23:') !== -1)) {
                            formatDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 1, 0, 0);
                        }

                        return formatDate.toLocaleDateString();
                    }

                    /**
                     * Default string-to-date parsing function.
                     * @param {string} dateString
                     * @returns {!Date}
                     */
                    function defaultParseDate(dateString) {
                        return new Date(dateString);
                    }

                    /**
                     * Default function to determine whether a string makes sense to be
                     * parsed to a Date object.
                     *
                     * This is very permissive and is just a basic sanity check to ensure that
                     * things like single integers aren't able to be parsed into dates.
                     * @param {string} dateString
                     * @returns {boolean}
                     */
                    function defaultIsDateComplete(dateString) {
                        dateString = dateString.trim();

                        // Looks for three chunks of content (either numbers or text) separated
                        // by delimiters.
                        var re = /^(([a-zA-Z]{3,}|[0-9]{1,4})([ \.,]+|[\/\-])){2}([a-zA-Z]{3,}|[0-9]{1,4})$/;
                        return re.test(dateString);
                    }

                    /**
                     * Default date-to-string formatter to get a month header.
                     * @param {!Date} date
                     * @returns {string}
                     */
                    function defaultMonthHeaderFormatter(date) {
                        return service.shortMonths[date.getMonth()] + ' ' + date.getFullYear();
                    }

                    /**
                     * Default week number formatter.
                     * @param number
                     * @returns {string}
                     */
                    function defaultWeekNumberFormatter(number) {
                        return 'Week ' + number;
                    }

                    /**
                     * Default formatter for date cell aria-labels.
                     * @param {!Date} date
                     * @returns {string}
                     */
                    function defaultLongDateFormatter(date) {
                        // Example: 'Thursday June 18 2015'
                        return [
                            service.days[date.getDay()],
                            service.months[date.getMonth()],
                            service.dates[date.getDate()],
                            date.getFullYear()
                        ].join(' ');
                    }

                    // The default "short" day strings are the first character of each day,
                    // e.g., "Monday" => "M".
                    var defaultShortDays = $locale.DATETIME_FORMATS.DAY.map(function(day) {
                        return day[0];
                    });

                    // The default dates are simply the numbers 1 through 31.
                    var defaultDates = Array(32);
                    for (var i = 1; i <= 31; i++) {
                        defaultDates[i] = i;
                    }

                    // Default ARIA messages are in English (US).
                    var defaultMsgCalendar = 'Calendar';
                    var defaultMsgOpenCalendar = 'Open calendar';

                    var service = {
                        months: this.months || $locale.DATETIME_FORMATS.MONTH,
                        shortMonths: this.shortMonths || $locale.DATETIME_FORMATS.SHORTMONTH,
                        days: this.days || $locale.DATETIME_FORMATS.DAY,
                        shortDays: this.shortDays || defaultShortDays,
                        dates: this.dates || defaultDates,
                        firstDayOfWeek: this.firstDayOfWeek || 0,
                        formatDate: this.formatDate || defaultFormatDate,
                        parseDate: this.parseDate || defaultParseDate,
                        isDateComplete: this.isDateComplete || defaultIsDateComplete,
                        monthHeaderFormatter: this.monthHeaderFormatter || defaultMonthHeaderFormatter,
                        weekNumberFormatter: this.weekNumberFormatter || defaultWeekNumberFormatter,
                        longDateFormatter: this.longDateFormatter || defaultLongDateFormatter,
                        msgCalendar: this.msgCalendar || defaultMsgCalendar,
                        msgOpenCalendar: this.msgOpenCalendar || defaultMsgOpenCalendar
                    };

                    return service;
                };
                DateLocaleProvider.prototype.$get.$inject = ["$locale"];

                $provide.provider('$mdDateLocale', new DateLocaleProvider());
            }]);
        })();

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            // POST RELEASE
            // TODO(jelbourn): Demo that uses moment.js
            // TODO(jelbourn): make sure this plays well with validation and ngMessages.
            // TODO(jelbourn): calendar pane doesn't open up outside of visible viewport.
            // TODO(jelbourn): forward more attributes to the internal input (required, autofocus, etc.)
            // TODO(jelbourn): something better for mobile (calendar panel takes up entire screen?)
            // TODO(jelbourn): input behavior (masking? auto-complete?)
            // TODO(jelbourn): UTC mode
            // TODO(jelbourn): RTL


            angular.module('material.components.datepicker')
                .directive('mdDatepicker', datePickerDirective);

            /**
             * @ngdoc directive
             * @name mdDatepicker
             * @module material.components.datepicker
             *
             * @param {Date} ng-model The component's model. Expects a JavaScript Date object.
             * @param {expression=} ng-change Expression evaluated when the model value changes.
             * @param {Date=} md-min-date Expression representing a min date (inclusive).
             * @param {Date=} md-max-date Expression representing a max date (inclusive).
             * @param {(function(Date): boolean)=} md-date-filter Function expecting a date and returning a boolean whether it can be selected or not.
             * @param {String=} md-placeholder The date input placeholder value.
             * @param {boolean=} ng-disabled Whether the datepicker is disabled.
             * @param {boolean=} ng-required Whether a value is required for the datepicker.
             *
             * @description
             * `<md-datepicker>` is a component used to select a single date.
             * For information on how to configure internationalization for the date picker,
             * see `$mdDateLocaleProvider`.
             *
             * This component supports [ngMessages](https://docs.angularjs.org/api/ngMessages/directive/ngMessages).
             * Supported attributes are:
             * * `required`: whether a required date is not set.
             * * `mindate`: whether the selected date is before the minimum allowed date.
             * * `maxdate`: whether the selected date is after the maximum allowed date.
             *
             * @usage
             * <hljs lang="html">
             *   <md-datepicker ng-model="birthday"></md-datepicker>
             * </hljs>
             *
             */
            function datePickerDirective() {
                return {
                    template:
                    // Buttons are not in the tab order because users can open the calendar via keyboard
                    // interaction on the text input, and multiple tab stops for one component (picker)
                    // may be confusing.
                        '<md-button class="md-datepicker-button md-icon-button" type="button" ' +
                        'tabindex="-1" aria-hidden="true" ' +
                        'ng-click="ctrl.openCalendarPane($event)">' +
                        '<md-icon class="md-datepicker-calendar-icon" md-svg-icon="md-calendar"></md-icon>' +
                        '</md-button>' +
                        '<div class="md-datepicker-input-container" ' +
                        'ng-class="{\'md-datepicker-focused\': ctrl.isFocused}">' +
                        '<input class="md-datepicker-input" aria-haspopup="true" ' +
                        'ng-focus="ctrl.setFocused(true)" ng-blur="ctrl.setFocused(false)">' +
                        '<md-button type="button" md-no-ink ' +
                        'class="md-datepicker-triangle-button md-icon-button" ' +
                        'ng-click="ctrl.openCalendarPane($event)" ' +
                        'aria-label="{{::ctrl.dateLocale.msgOpenCalendar}}">' +
                        '<div class="md-datepicker-expand-triangle"></div>' +
                        '</md-button>' +
                        '</div>' +

                        // This pane will be detached from here and re-attached to the document body.
                        '<div class="md-datepicker-calendar-pane md-whiteframe-z1">' +
                        '<div class="md-datepicker-input-mask">' +
                        '<div class="md-datepicker-input-mask-opaque"></div>' +
                        '</div>' +
                        '<div class="md-datepicker-calendar">' +
                        '<md-calendar role="dialog" aria-label="{{::ctrl.dateLocale.msgCalendar}}" ' +
                        'md-min-date="ctrl.minDate" md-max-date="ctrl.maxDate"' +
                        'md-date-filter="ctrl.dateFilter"' +
                        'ng-model="ctrl.date" ng-if="ctrl.isCalendarOpen">' +
                        '</md-calendar>' +
                        '</div>' +
                        '</div>',
                    require: ['ngModel', 'mdDatepicker', '?^mdInputContainer'],
                    scope: {
                        minDate: '=mdMinDate',
                        maxDate: '=mdMaxDate',
                        placeholder: '@mdPlaceholder',
                        dateFilter: '=mdDateFilter'
                    },
                    controller: DatePickerCtrl,
                    controllerAs: 'ctrl',
                    bindToController: true,
                    link: function(scope, element, attr, controllers) {
                        var ngModelCtrl = controllers[0];
                        var mdDatePickerCtrl = controllers[1];

                        var mdInputContainer = controllers[2];
                        if (mdInputContainer) {
                            throw Error('md-datepicker should not be placed inside md-input-container.');
                        }

                        mdDatePickerCtrl.configureNgModel(ngModelCtrl);
                    }
                };
            }

            /** Additional offset for the input's `size` attribute, which is updated based on its content. */
            var EXTRA_INPUT_SIZE = 3;

            /** Class applied to the container if the date is invalid. */
            var INVALID_CLASS = 'md-datepicker-invalid';

            /** Default time in ms to debounce input event by. */
            var DEFAULT_DEBOUNCE_INTERVAL = 500;

            /**
             * Height of the calendar pane used to check if the pane is going outside the boundary of
             * the viewport. See calendar.scss for how $md-calendar-height is computed; an extra 20px is
             * also added to space the pane away from the exact edge of the screen.
             *
             *  This is computed statically now, but can be changed to be measured if the circumstances
             *  of calendar sizing are changed.
             */
            var CALENDAR_PANE_HEIGHT = 368;

            /**
             * Width of the calendar pane used to check if the pane is going outside the boundary of
             * the viewport. See calendar.scss for how $md-calendar-width is computed; an extra 20px is
             * also added to space the pane away from the exact edge of the screen.
             *
             *  This is computed statically now, but can be changed to be measured if the circumstances
             *  of calendar sizing are changed.
             */
            var CALENDAR_PANE_WIDTH = 360;

            /**
             * Controller for md-datepicker.
             *
             * @ngInject @constructor
             */
            function DatePickerCtrl($scope, $element, $attrs, $compile, $timeout, $window,
                $mdConstant, $mdTheming, $mdUtil, $mdDateLocale, $$mdDateUtil, $$rAF) {
                /** @final */
                this.$compile = $compile;

                /** @final */
                this.$timeout = $timeout;

                /** @final */
                this.$window = $window;

                /** @final */
                this.dateLocale = $mdDateLocale;

                /** @final */
                this.dateUtil = $$mdDateUtil;

                /** @final */
                this.$mdConstant = $mdConstant;

                /* @final */
                this.$mdUtil = $mdUtil;

                /** @final */
                this.$$rAF = $$rAF;

                /**
                 * The root document element. This is used for attaching a top-level click handler to
                 * close the calendar panel when a click outside said panel occurs. We use `documentElement`
                 * instead of body because, when scrolling is disabled, some browsers consider the body element
                 * to be completely off the screen and propagate events directly to the html element.
                 * @type {!angular.JQLite}
                 */
                this.documentElement = angular.element(document.documentElement);

                /** @type {!angular.NgModelController} */
                this.ngModelCtrl = null;

                /** @type {HTMLInputElement} */
                this.inputElement = $element[0].querySelector('input');

                /** @final {!angular.JQLite} */
                this.ngInputElement = angular.element(this.inputElement);

                /** @type {HTMLElement} */
                this.inputContainer = $element[0].querySelector('.md-datepicker-input-container');

                /** @type {HTMLElement} Floating calendar pane. */
                this.calendarPane = $element[0].querySelector('.md-datepicker-calendar-pane');

                /** @type {HTMLElement} Calendar icon button. */
                this.calendarButton = $element[0].querySelector('.md-datepicker-button');

                /**
                 * Element covering everything but the input in the top of the floating calendar pane.
                 * @type {HTMLElement}
                 */
                this.inputMask = $element[0].querySelector('.md-datepicker-input-mask-opaque');

                /** @final {!angular.JQLite} */
                this.$element = $element;

                /** @final {!angular.Attributes} */
                this.$attrs = $attrs;

                /** @final {!angular.Scope} */
                this.$scope = $scope;

                /** @type {Date} */
                this.date = null;

                /** @type {boolean} */
                this.isFocused = false;

                /** @type {boolean} */
                this.isDisabled;
                this.setDisabled($element[0].disabled || angular.isString($attrs['disabled']));

                /** @type {boolean} Whether the date-picker's calendar pane is open. */
                this.isCalendarOpen = false;

                /**
                 * Element from which the calendar pane was opened. Keep track of this so that we can return
                 * focus to it when the pane is closed.
                 * @type {HTMLElement}
                 */
                this.calendarPaneOpenedFrom = null;

                this.calendarPane.id = 'md-date-pane' + $mdUtil.nextUid();

                $mdTheming($element);

                /** Pre-bound click handler is saved so that the event listener can be removed. */
                this.bodyClickHandler = angular.bind(this, this.handleBodyClick);

                /** Pre-bound resize handler so that the event listener can be removed. */
                this.windowResizeHandler = $mdUtil.debounce(angular.bind(this, this.closeCalendarPane), 100);

                // Unless the user specifies so, the datepicker should not be a tab stop.
                // This is necessary because ngAria might add a tabindex to anything with an ng-model
                // (based on whether or not the user has turned that particular feature on/off).
                if (!$attrs['tabindex']) {
                    $element.attr('tabindex', '-1');
                }

                this.installPropertyInterceptors();
                this.attachChangeListeners();
                this.attachInteractionListeners();

                var self = this;
                $scope.$on('$destroy', function() {
                    self.detachCalendarPane();
                });
            }
            DatePickerCtrl.$inject = ["$scope", "$element", "$attrs", "$compile", "$timeout", "$window", "$mdConstant", "$mdTheming", "$mdUtil", "$mdDateLocale", "$$mdDateUtil", "$$rAF"];

            /**
             * Sets up the controller's reference to ngModelController.
             * @param {!angular.NgModelController} ngModelCtrl
             */
            DatePickerCtrl.prototype.configureNgModel = function(ngModelCtrl) {
                this.ngModelCtrl = ngModelCtrl;

                var self = this;
                ngModelCtrl.$render = function() {
                    var value = self.ngModelCtrl.$viewValue;

                    if (value && !(value instanceof Date)) {
                        throw Error('The ng-model for md-datepicker must be a Date instance. ' +
                            'Currently the model is a: ' + (typeof value));
                    }

                    self.date = value;
                    self.inputElement.value = self.dateLocale.formatDate(value);
                    self.resizeInputElement();
                    self.updateErrorState();
                };
            };

            /**
             * Attach event listeners for both the text input and the md-calendar.
             * Events are used instead of ng-model so that updates don't infinitely update the other
             * on a change. This should also be more performant than using a $watch.
             */
            DatePickerCtrl.prototype.attachChangeListeners = function() {
                var self = this;

                self.$scope.$on('md-calendar-change', function(event, date) {
                    self.ngModelCtrl.$setViewValue(date);
                    self.date = date;
                    self.inputElement.value = self.dateLocale.formatDate(date);
                    self.closeCalendarPane();
                    self.resizeInputElement();
                    self.updateErrorState();
                });

                self.ngInputElement.on('input', angular.bind(self, self.resizeInputElement));
                // TODO(chenmike): Add ability for users to specify this interval.
                self.ngInputElement.on('input', self.$mdUtil.debounce(self.handleInputEvent,
                    DEFAULT_DEBOUNCE_INTERVAL, self));
            };

            /** Attach event listeners for user interaction. */
            DatePickerCtrl.prototype.attachInteractionListeners = function() {
                var self = this;
                var $scope = this.$scope;
                var keyCodes = this.$mdConstant.KEY_CODE;

                // Add event listener through angular so that we can triggerHandler in unit tests.
                self.ngInputElement.on('keydown', function(event) {
                    if (event.altKey && event.keyCode == keyCodes.DOWN_ARROW) {
                        self.openCalendarPane(event);
                        $scope.$digest();
                    }
                });

                $scope.$on('md-calendar-close', function() {
                    self.closeCalendarPane();
                });
            };

            /**
             * Capture properties set to the date-picker and imperitively handle internal changes.
             * This is done to avoid setting up additional $watches.
             */
            DatePickerCtrl.prototype.installPropertyInterceptors = function() {
                var self = this;

                if (this.$attrs['ngDisabled']) {
                    // The expression is to be evaluated against the directive element's scope and not
                    // the directive's isolate scope.
                    var scope = this.$mdUtil.validateScope(this.$element) ? this.$element.scope() : null;

                    if (scope) {
                        scope.$watch(this.$attrs['ngDisabled'], function(isDisabled) {
                            self.setDisabled(isDisabled);
                        });
                    }
                }

                Object.defineProperty(this, 'placeholder', {
                    get: function() {
                        return self.inputElement.placeholder;
                    },
                    set: function(value) {
                        self.inputElement.placeholder = value || '';
                    }
                });
            };

            /**
             * Sets whether the date-picker is disabled.
             * @param {boolean} isDisabled
             */
            DatePickerCtrl.prototype.setDisabled = function(isDisabled) {
                this.isDisabled = isDisabled;
                this.inputElement.disabled = isDisabled;
                this.calendarButton.disabled = isDisabled;
            };

            /**
             * Sets the custom ngModel.$error flags to be consumed by ngMessages. Flags are:
             *   - mindate: whether the selected date is before the minimum date.
             *   - maxdate: whether the selected flag is after the maximum date.
             *   - filtered: whether the selected date is allowed by the custom filtering function.
             *   - valid: whether the entered text input is a valid date
             *
             * The 'required' flag is handled automatically by ngModel.
             *
             * @param {Date=} opt_date Date to check. If not given, defaults to the datepicker's model value.
             */
            DatePickerCtrl.prototype.updateErrorState = function(opt_date) {
                var date = opt_date || this.date;

                // Clear any existing errors to get rid of anything that's no longer relevant.
                this.clearErrorState();

                if (this.dateUtil.isValidDate(date)) {
                    if (this.dateUtil.isValidDate(this.minDate)) {
                        this.ngModelCtrl.$setValidity('mindate', date >= this.minDate);
                    }

                    if (this.dateUtil.isValidDate(this.maxDate)) {
                        this.ngModelCtrl.$setValidity('maxdate', date <= this.maxDate);
                    }

                    if (angular.isFunction(this.dateFilter)) {
                        this.ngModelCtrl.$setValidity('filtered', this.dateFilter(date));
                    }
                } else {
                    // The date is seen as "not a valid date" if there is *something* set
                    // (i.e.., not null or undefined), but that something isn't a valid date.
                    this.ngModelCtrl.$setValidity('valid', date == null);
                }

                // TODO(jelbourn): Change this to classList.toggle when we stop using PhantomJS in unit tests
                // because it doesn't conform to the DOMTokenList spec.
                // See https://github.com/ariya/phantomjs/issues/12782.
                if (!this.ngModelCtrl.$valid) {
                    this.inputContainer.classList.add(INVALID_CLASS);
                }
            };

            /** Clears any error flags set by `updateErrorState`. */
            DatePickerCtrl.prototype.clearErrorState = function() {
                this.inputContainer.classList.remove(INVALID_CLASS);
                ['mindate', 'maxdate', 'filtered', 'valid'].forEach(function(field) {
                    this.ngModelCtrl.$setValidity(field, true);
                }, this);
            };

            /** Resizes the input element based on the size of its content. */
            DatePickerCtrl.prototype.resizeInputElement = function() {
                this.inputElement.size = this.inputElement.value.length + EXTRA_INPUT_SIZE;
            };

            /**
             * Sets the model value if the user input is a valid date.
             * Adds an invalid class to the input element if not.
             */
            DatePickerCtrl.prototype.handleInputEvent = function() {
                var inputString = this.inputElement.value;
                var parsedDate = inputString ? this.dateLocale.parseDate(inputString) : null;
                this.dateUtil.setDateTimeToMidnight(parsedDate);

                // An input string is valid if it is either empty (representing no date)
                // or if it parses to a valid date that the user is allowed to select.
                var isValidInput = inputString == '' || (
                    this.dateUtil.isValidDate(parsedDate) &&
                    this.dateLocale.isDateComplete(inputString) &&
                    this.isDateEnabled(parsedDate)
                );

                // The datepicker's model is only updated when there is a valid input.
                if (isValidInput) {
                    this.ngModelCtrl.$setViewValue(parsedDate);
                    this.date = parsedDate;
                }

                this.updateErrorState(parsedDate);
            };

            /**
             * Check whether date is in range and enabled
             * @param {Date=} opt_date
             * @return {boolean} Whether the date is enabled.
             */
            DatePickerCtrl.prototype.isDateEnabled = function(opt_date) {
                return this.dateUtil.isDateWithinRange(opt_date, this.minDate, this.maxDate) &&
                    (!angular.isFunction(this.dateFilter) || this.dateFilter(opt_date));
            };

            /** Position and attach the floating calendar to the document. */
            DatePickerCtrl.prototype.attachCalendarPane = function() {
                var calendarPane = this.calendarPane;
                calendarPane.style.transform = '';
                this.$element.addClass('md-datepicker-open');

                var elementRect = this.inputContainer.getBoundingClientRect();
                var bodyRect = document.body.getBoundingClientRect();

                // Check to see if the calendar pane would go off the screen. If so, adjust position
                // accordingly to keep it within the viewport.
                var paneTop = elementRect.top - bodyRect.top;
                var paneLeft = elementRect.left - bodyRect.left;

                // If ng-material has disabled body scrolling (for example, if a dialog is open),
                // then it's possible that the already-scrolled body has a negative top/left. In this case,
                // we want to treat the "real" top as (0 - bodyRect.top). In a normal scrolling situation,
                // though, the top of the viewport should just be the body's scroll position.
                var viewportTop = (bodyRect.top < 0 && document.body.scrollTop == 0) ?
                    -bodyRect.top :
                    document.body.scrollTop;

                var viewportLeft = (bodyRect.left < 0 && document.body.scrollLeft == 0) ?
                    -bodyRect.left :
                    document.body.scrollLeft;

                var viewportBottom = viewportTop + this.$window.innerHeight;
                var viewportRight = viewportLeft + this.$window.innerWidth;

                // If the right edge of the pane would be off the screen and shifting it left by the
                // difference would not go past the left edge of the screen. If the calendar pane is too
                // big to fit on the screen at all, move it to the left of the screen and scale the entire
                // element down to fit.
                if (paneLeft + CALENDAR_PANE_WIDTH > viewportRight) {
                    if (viewportRight - CALENDAR_PANE_WIDTH > 0) {
                        paneLeft = viewportRight - CALENDAR_PANE_WIDTH;
                    } else {
                        paneLeft = viewportLeft;
                        var scale = this.$window.innerWidth / CALENDAR_PANE_WIDTH;
                        calendarPane.style.transform = 'scale(' + scale + ')';
                    }

                    calendarPane.classList.add('md-datepicker-pos-adjusted');
                }

                // If the bottom edge of the pane would be off the screen and shifting it up by the
                // difference would not go past the top edge of the screen.
                if (paneTop + CALENDAR_PANE_HEIGHT > viewportBottom &&
                    viewportBottom - CALENDAR_PANE_HEIGHT > viewportTop) {
                    paneTop = viewportBottom - CALENDAR_PANE_HEIGHT;
                    calendarPane.classList.add('md-datepicker-pos-adjusted');
                }

                calendarPane.style.left = paneLeft + 'px';
                calendarPane.style.top = paneTop + 'px';
                document.body.appendChild(calendarPane);

                // The top of the calendar pane is a transparent box that shows the text input underneath.
                // Since the pane is floating, though, the page underneath the pane *adjacent* to the input is
                // also shown unless we cover it up. The inputMask does this by filling up the remaining space
                // based on the width of the input.
                this.inputMask.style.left = elementRect.width + 'px';

                // Add CSS class after one frame to trigger open animation.
                this.$$rAF(function() {
                    calendarPane.classList.add('md-pane-open');
                });
            };

            /** Detach the floating calendar pane from the document. */
            DatePickerCtrl.prototype.detachCalendarPane = function() {
                this.$element.removeClass('md-datepicker-open');
                this.calendarPane.classList.remove('md-pane-open');
                this.calendarPane.classList.remove('md-datepicker-pos-adjusted');

                if (this.calendarPane.parentNode) {
                    // Use native DOM removal because we do not want any of the angular state of this element
                    // to be disposed.
                    this.calendarPane.parentNode.removeChild(this.calendarPane);
                }
            };

            /**
             * Open the floating calendar pane.
             * @param {Event} event
             */
            DatePickerCtrl.prototype.openCalendarPane = function(event) {
                if (!this.isCalendarOpen && !this.isDisabled) {
                    this.isCalendarOpen = true;
                    this.calendarPaneOpenedFrom = event.target;

                    // Because the calendar pane is attached directly to the body, it is possible that the
                    // rest of the component (input, etc) is in a different scrolling container, such as
                    // an md-content. This means that, if the container is scrolled, the pane would remain
                    // stationary. To remedy this, we disable scrolling while the calendar pane is open, which
                    // also matches the native behavior for things like `<select>` on Mac and Windows.
                    this.$mdUtil.disableScrollAround(this.calendarPane);

                    this.attachCalendarPane();
                    this.focusCalendar();

                    // Attach click listener inside of a timeout because, if this open call was triggered by a
                    // click, we don't want it to be immediately propogated up to the body and handled.
                    var self = this;
                    this.$mdUtil.nextTick(function() {
                        // Use 'touchstart` in addition to click in order to work on iOS Safari, where click
                        // events aren't propogated under most circumstances.
                        // See http://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
                        self.documentElement.on('click touchstart', self.bodyClickHandler);
                    }, false);

                    window.addEventListener('resize', this.windowResizeHandler);
                }
            };

            /** Close the floating calendar pane. */
            DatePickerCtrl.prototype.closeCalendarPane = function() {
                if (this.isCalendarOpen) {
                    this.isCalendarOpen = false;
                    this.detachCalendarPane();
                    this.calendarPaneOpenedFrom.focus();
                    this.calendarPaneOpenedFrom = null;
                    this.$mdUtil.enableScrolling();

                    this.documentElement.off('click touchstart', this.bodyClickHandler);
                    window.removeEventListener('resize', this.windowResizeHandler);
                }
            };

            /** Gets the controller instance for the calendar in the floating pane. */
            DatePickerCtrl.prototype.getCalendarCtrl = function() {
                return angular.element(this.calendarPane.querySelector('md-calendar')).controller('mdCalendar');
            };

            /** Focus the calendar in the floating pane. */
            DatePickerCtrl.prototype.focusCalendar = function() {
                // Use a timeout in order to allow the calendar to be rendered, as it is gated behind an ng-if.
                var self = this;
                this.$mdUtil.nextTick(function() {
                    self.getCalendarCtrl().focus();
                }, false);
            };

            /**
             * Sets whether the input is currently focused.
             * @param {boolean} isFocused
             */
            DatePickerCtrl.prototype.setFocused = function(isFocused) {
                this.isFocused = isFocused;
            };

            /**
             * Handles a click on the document body when the floating calendar pane is open.
             * Closes the floating calendar pane if the click is not inside of it.
             * @param {MouseEvent} event
             */
            DatePickerCtrl.prototype.handleBodyClick = function(event) {
                if (this.isCalendarOpen) {
                    // TODO(jelbourn): way want to also include the md-datepicker itself in this check.
                    var isInCalendar = this.$mdUtil.getClosest(event.target, 'md-calendar');
                    if (!isInCalendar) {
                        this.closeCalendarPane();
                    }

                    this.$scope.$digest();
                }
            };
        })();

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            /**
             * Utility for performing date calculations to facilitate operation of the calendar and
             * datepicker.
             */
            angular.module('material.components.datepicker').factory('$$mdDateUtil', function() {
                return {
                    getFirstDateOfMonth: getFirstDateOfMonth,
                    getNumberOfDaysInMonth: getNumberOfDaysInMonth,
                    getDateInNextMonth: getDateInNextMonth,
                    getDateInPreviousMonth: getDateInPreviousMonth,
                    isInNextMonth: isInNextMonth,
                    isInPreviousMonth: isInPreviousMonth,
                    getDateMidpoint: getDateMidpoint,
                    isSameMonthAndYear: isSameMonthAndYear,
                    getWeekOfMonth: getWeekOfMonth,
                    incrementDays: incrementDays,
                    incrementMonths: incrementMonths,
                    getLastDateOfMonth: getLastDateOfMonth,
                    isSameDay: isSameDay,
                    getMonthDistance: getMonthDistance,
                    isValidDate: isValidDate,
                    setDateTimeToMidnight: setDateTimeToMidnight,
                    createDateAtMidnight: createDateAtMidnight,
                    isDateWithinRange: isDateWithinRange
                };

                /**
                 * Gets the first day of the month for the given date's month.
                 * @param {Date} date
                 * @returns {Date}
                 */
                function getFirstDateOfMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth(), 1);
                }

                /**
                 * Gets the number of days in the month for the given date's month.
                 * @param date
                 * @returns {number}
                 */
                function getNumberOfDaysInMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
                }

                /**
                 * Get an arbitrary date in the month after the given date's month.
                 * @param date
                 * @returns {Date}
                 */
                function getDateInNextMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth() + 1, 1);
                }

                /**
                 * Get an arbitrary date in the month before the given date's month.
                 * @param date
                 * @returns {Date}
                 */
                function getDateInPreviousMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth() - 1, 1);
                }

                /**
                 * Gets whether two dates have the same month and year.
                 * @param {Date} d1
                 * @param {Date} d2
                 * @returns {boolean}
                 */
                function isSameMonthAndYear(d1, d2) {
                    return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();
                }

                /**
                 * Gets whether two dates are the same day (not not necesarily the same time).
                 * @param {Date} d1
                 * @param {Date} d2
                 * @returns {boolean}
                 */
                function isSameDay(d1, d2) {
                    return d1.getDate() == d2.getDate() && isSameMonthAndYear(d1, d2);
                }

                /**
                 * Gets whether a date is in the month immediately after some date.
                 * @param {Date} startDate The date from which to compare.
                 * @param {Date} endDate The date to check.
                 * @returns {boolean}
                 */
                function isInNextMonth(startDate, endDate) {
                    var nextMonth = getDateInNextMonth(startDate);
                    return isSameMonthAndYear(nextMonth, endDate);
                }

                /**
                 * Gets whether a date is in the month immediately before some date.
                 * @param {Date} startDate The date from which to compare.
                 * @param {Date} endDate The date to check.
                 * @returns {boolean}
                 */
                function isInPreviousMonth(startDate, endDate) {
                    var previousMonth = getDateInPreviousMonth(startDate);
                    return isSameMonthAndYear(endDate, previousMonth);
                }

                /**
                 * Gets the midpoint between two dates.
                 * @param {Date} d1
                 * @param {Date} d2
                 * @returns {Date}
                 */
                function getDateMidpoint(d1, d2) {
                    return createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);
                }

                /**
                 * Gets the week of the month that a given date occurs in.
                 * @param {Date} date
                 * @returns {number} Index of the week of the month (zero-based).
                 */
                function getWeekOfMonth(date) {
                    var firstDayOfMonth = getFirstDateOfMonth(date);
                    return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);
                }

                /**
                 * Gets a new date incremented by the given number of days. Number of days can be negative.
                 * @param {Date} date
                 * @param {number} numberOfDays
                 * @returns {Date}
                 */
                function incrementDays(date, numberOfDays) {
                    return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays);
                }

                /**
                 * Gets a new date incremented by the given number of months. Number of months can be negative.
                 * If the date of the given month does not match the target month, the date will be set to the
                 * last day of the month.
                 * @param {Date} date
                 * @param {number} numberOfMonths
                 * @returns {Date}
                 */
                function incrementMonths(date, numberOfMonths) {
                    // If the same date in the target month does not actually exist, the Date object will
                    // automatically advance *another* month by the number of missing days.
                    // For example, if you try to go from Jan. 30 to Feb. 30, you'll end up on March 2.
                    // So, we check if the month overflowed and go to the last day of the target month instead.
                    var dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1);
                    var numberOfDaysInMonth = getNumberOfDaysInMonth(dateInTargetMonth);
                    if (numberOfDaysInMonth < date.getDate()) {
                        dateInTargetMonth.setDate(numberOfDaysInMonth);
                    } else {
                        dateInTargetMonth.setDate(date.getDate());
                    }

                    return dateInTargetMonth;
                }

                /**
                 * Get the integer distance between two months. This *only* considers the month and year
                 * portion of the Date instances.
                 *
                 * @param {Date} start
                 * @param {Date} end
                 * @returns {number} Number of months between `start` and `end`. If `end` is before `start`
                 *     chronologically, this number will be negative.
                 */
                function getMonthDistance(start, end) {
                    return (12 * (end.getFullYear() - start.getFullYear())) + (end.getMonth() - start.getMonth());
                }

                /**
                 * Gets the last day of the month for the given date.
                 * @param {Date} date
                 * @returns {Date}
                 */
                function getLastDateOfMonth(date) {
                    return new Date(date.getFullYear(), date.getMonth(), getNumberOfDaysInMonth(date));
                }

                /**
                 * Checks whether a date is valid.
                 * @param {Date} date
                 * @return {boolean} Whether the date is a valid Date.
                 */
                function isValidDate(date) {
                    return date != null && date.getTime && !isNaN(date.getTime());
                }

                /**
                 * Sets a date's time to midnight.
                 * @param {Date} date
                 */
                function setDateTimeToMidnight(date) {
                    if (isValidDate(date)) {
                        date.setHours(0, 0, 0, 0);
                    }
                }

                /**
                 * Creates a date with the time set to midnight.
                 * Drop-in replacement for two forms of the Date constructor:
                 * 1. No argument for Date representing now.
                 * 2. Single-argument value representing number of seconds since Unix Epoch.
                 * @param {number=} opt_value
                 * @return {Date} New date with time set to midnight.
                 */
                function createDateAtMidnight(opt_value) {
                    var date;
                    if (angular.isUndefined(opt_value)) {
                        date = new Date();
                    } else {
                        date = new Date(opt_value);
                    }
                    setDateTimeToMidnight(date);
                    return date;
                }

                /**
                 * Checks if a date is within a min and max range.
                 * If minDate or maxDate are not dates, they are ignored.
                 * @param {Date} date
                 * @param {Date} minDate
                 * @param {Date} maxDate
                 */
                function isDateWithinRange(date, minDate, maxDate) {
                    return (!angular.isDate(minDate) || minDate <= date) &&
                        (!angular.isDate(maxDate) || maxDate >= date);
                }
            });
        })();

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.dialog
         */
        angular
            .module('material.components.dialog', [
                'material.core',
                'material.components.backdrop'
            ])
            .directive('mdDialog', MdDialogDirective)
            .provider('$mdDialog', MdDialogProvider);

        /**
         * @ngdoc directive
         * @name mdDialog
         * @module material.components.dialog
         *
         * @restrict E
         *
         * @description
         * `<md-dialog>` - The dialog's template must be inside this element.
         *
         * Inside, use an `<md-dialog-content>` element for the dialog's content, and use
         * an `<md-dialog-actions>` element for the dialog's actions.
         *
         * * ## CSS
         * - `.md-dialog-content` - class that sets the padding on the content as the spec file
         *
         * @usage
         * ### Dialog template
         * <hljs lang="html">
         * <md-dialog aria-label="List dialog">
         *   <md-dialog-content>
         *     <md-list>
         *       <md-list-item ng-repeat="item in items">
         *         <p>Number {{item}}</p>
         *       </md-list-item>
         *     </md-list>
         *   </md-dialog-content>
         *   <md-dialog-actions>
         *     <md-button ng-click="closeDialog()" class="md-primary">Close Dialog</md-button>
         *   </md-dialog-actions>
         * </md-dialog>
         * </hljs>
         */
        function MdDialogDirective($$rAF, $mdTheming, $mdDialog) {
            return {
                restrict: 'E',
                link: function(scope, element, attr) {
                    $mdTheming(element);
                    $$rAF(function() {
                        var images;
                        var content = element[0].querySelector('md-dialog-content');

                        if (content) {
                            images = content.getElementsByTagName('img');
                            addOverflowClass();
                            //-- delayed image loading may impact scroll height, check after images are loaded
                            angular.element(images).on('load', addOverflowClass);
                        }

                        scope.$on('$destroy', function() {
                            $mdDialog.destroy(element);
                        });

                        /**
                         *
                         */
                        function addOverflowClass() {
                            element.toggleClass('md-content-overflow', content.scrollHeight > content.clientHeight);
                        }


                    });
                }
            };
        }
        MdDialogDirective.$inject = ["$$rAF", "$mdTheming", "$mdDialog"];

        /**
         * @ngdoc service
         * @name $mdDialog
         * @module material.components.dialog
         *
         * @description
         * `$mdDialog` opens a dialog over the app to inform users about critical information or require
         *  them to make decisions. There are two approaches for setup: a simple promise API
         *  and regular object syntax.
         *
         * ## Restrictions
         *
         * - The dialog is always given an isolate scope.
         * - The dialog's template must have an outer `<md-dialog>` element.
         *   Inside, use an `<md-dialog-content>` element for the dialog's content, and use
         *   an `<md-dialog-actions>` element for the dialog's actions.
         * - Dialogs must cover the entire application to keep interactions inside of them.
         * Use the `parent` option to change where dialogs are appended.
         *
         * ## Sizing
         * - Complex dialogs can be sized with `flex="percentage"`, i.e. `flex="66"`.
         * - Default max-width is 80% of the `rootElement` or `parent`.
         *
         * ## CSS
         * - `.md-dialog-content` - class that sets the padding on the content as the spec file
         *
         * @usage
         * <hljs lang="html">
         * <div  ng-app="demoApp" ng-controller="EmployeeController">
         *   <div>
         *     <md-button ng-click="showAlert()" class="md-raised md-warn">
         *       Employee Alert!
         *       </md-button>
         *   </div>
         *   <div>
         *     <md-button ng-click="showDialog($event)" class="md-raised">
         *       Custom Dialog
         *       </md-button>
         *   </div>
         *   <div>
         *     <md-button ng-click="closeAlert()" ng-disabled="!hasAlert()" class="md-raised">
         *       Close Alert
         *     </md-button>
         *   </div>
         *   <div>
         *     <md-button ng-click="showGreeting($event)" class="md-raised md-primary" >
         *       Greet Employee
         *       </md-button>
         *   </div>
         * </div>
         * </hljs>
         *
         * ### JavaScript: object syntax
         * <hljs lang="js">
         * (function(angular, undefined){
         *   "use strict";
         *
         *   angular
         *    .module('demoApp', ['ngMaterial'])
         *    .controller('AppCtrl', AppController);
         *
         *   function AppController($scope, $mdDialog) {
         *     var alert;
         *     $scope.showAlert = showAlert;
         *     $scope.showDialog = showDialog;
         *     $scope.items = [1, 2, 3];
         *
         *     // Internal method
         *     function showAlert() {
         *       alert = $mdDialog.alert({
         *         title: 'Attention',
         *         textContent: 'This is an example of how easy dialogs can be!',
         *         ok: 'Close'
         *       });
         *
         *       $mdDialog
         *         .show( alert )
         *         .finally(function() {
         *           alert = undefined;
         *         });
         *     }
         *
         *     function showDialog($event) {
         *        var parentEl = angular.element(document.body);
         *        $mdDialog.show({
         *          parent: parentEl,
         *          targetEvent: $event,
         *          template:
         *            '<md-dialog aria-label="List dialog">' +
         *            '  <md-dialog-content>'+
         *            '    <md-list>'+
         *            '      <md-list-item ng-repeat="item in items">'+
         *            '       <p>Number {{item}}</p>' +
         *            '      </md-item>'+
         *            '    </md-list>'+
         *            '  </md-dialog-content>' +
         *            '  <md-dialog-actions>' +
         *            '    <md-button ng-click="closeDialog()" class="md-primary">' +
         *            '      Close Dialog' +
         *            '    </md-button>' +
         *            '  </md-dialog-actions>' +
         *            '</md-dialog>',
         *          locals: {
         *            items: $scope.items
         *          },
         *          controller: DialogController
         *       });
         *       function DialogController($scope, $mdDialog, items) {
         *         $scope.items = items;
         *         $scope.closeDialog = function() {
         *           $mdDialog.hide();
         *         }
         *       }
         *     }
         *   }
         * })(angular);
         * </hljs>
         *
         * ### JavaScript: promise API syntax, custom dialog template
         * <hljs lang="js">
         * (function(angular, undefined){
         *   "use strict";
         *
         *   angular
         *     .module('demoApp', ['ngMaterial'])
         *     .controller('EmployeeController', EmployeeEditor)
         *     .controller('GreetingController', GreetingController);
         *
         *   // Fictitious Employee Editor to show how to use simple and complex dialogs.
         *
         *   function EmployeeEditor($scope, $mdDialog) {
         *     var alert;
         *
         *     $scope.showAlert = showAlert;
         *     $scope.closeAlert = closeAlert;
         *     $scope.showGreeting = showCustomGreeting;
         *
         *     $scope.hasAlert = function() { return !!alert };
         *     $scope.userName = $scope.userName || 'Bobby';
         *
         *     // Dialog #1 - Show simple alert dialog and cache
         *     // reference to dialog instance
         *
         *     function showAlert() {
         *       alert = $mdDialog.alert()
         *         .title('Attention, ' + $scope.userName)
         *         .textContent('This is an example of how easy dialogs can be!')
         *         .ok('Close');
         *
         *       $mdDialog
         *           .show( alert )
         *           .finally(function() {
         *             alert = undefined;
         *           });
         *     }
         *
         *     // Close the specified dialog instance and resolve with 'finished' flag
         *     // Normally this is not needed, just use '$mdDialog.hide()' to close
         *     // the most recent dialog popup.
         *
         *     function closeAlert() {
         *       $mdDialog.hide( alert, "finished" );
         *       alert = undefined;
         *     }
         *
         *     // Dialog #2 - Demonstrate more complex dialogs construction and popup.
         *
         *     function showCustomGreeting($event) {
         *         $mdDialog.show({
         *           targetEvent: $event,
         *           template:
         *             '<md-dialog>' +
         *
         *             '  <md-dialog-content>Hello {{ employee }}!</md-dialog-content>' +
         *
         *             '  <md-dialog-actions>' +
         *             '    <md-button ng-click="closeDialog()" class="md-primary">' +
         *             '      Close Greeting' +
         *             '    </md-button>' +
         *             '  </md-dialog-actions>' +
         *             '</md-dialog>',
         *           controller: 'GreetingController',
         *           onComplete: afterShowAnimation,
         *           locals: { employee: $scope.userName }
         *         });
         *
         *         // When the 'enter' animation finishes...
         *
         *         function afterShowAnimation(scope, element, options) {
         *            // post-show code here: DOM element focus, etc.
         *         }
         *     }
         *
         *     // Dialog #3 - Demonstrate use of ControllerAs and passing $scope to dialog
         *     //             Here we used ng-controller="GreetingController as vm" and
         *     //             $scope.vm === <controller instance>
         *
         *     function showCustomGreeting() {
         *
         *        $mdDialog.show({
         *           clickOutsideToClose: true,
         *
         *           scope: $scope,        // use parent scope in template
         *           preserveScope: true,  // do not forget this if use parent scope

         *           // Since GreetingController is instantiated with ControllerAs syntax
         *           // AND we are passing the parent '$scope' to the dialog, we MUST
         *           // use 'vm.<xxx>' in the template markup
         *
         *           template: '<md-dialog>' +
         *                     '  <md-dialog-content>' +
         *                     '     Hi There {{vm.employee}}' +
         *                     '  </md-dialog-content>' +
         *                     '</md-dialog>',
         *
         *           controller: function DialogController($scope, $mdDialog) {
         *             $scope.closeDialog = function() {
         *               $mdDialog.hide();
         *             }
         *           }
         *        });
         *     }
         *
         *   }
         *
         *   // Greeting controller used with the more complex 'showCustomGreeting()' custom dialog
         *
         *   function GreetingController($scope, $mdDialog, employee) {
         *     // Assigned from construction <code>locals</code> options...
         *     $scope.employee = employee;
         *
         *     $scope.closeDialog = function() {
         *       // Easily hides most recent dialog shown...
         *       // no specific instance reference is needed.
         *       $mdDialog.hide();
         *     };
         *   }
         *
         * })(angular);
         * </hljs>
         */

        /**
         * @ngdoc method
         * @name $mdDialog#alert
         *
         * @description
         * Builds a preconfigured dialog with the specified message.
         *
         * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:
         *
         * - $mdDialogPreset#title(string) - Sets the alert title.
         * - $mdDialogPreset#textContent(string) - Sets the alert message.
         * - $mdDialogPreset#htmlContent(string) - Sets the alert message as HTML. Requires ngSanitize
         *     module to be loaded. HTML is not run through Angular's compiler.
         * - $mdDialogPreset#ok(string) - Sets the alert "Okay" button text.
         * - $mdDialogPreset#theme(string) - Sets the theme of the alert dialog.
         * - $mdDialogPreset#targetEvent(DOMClickEvent=) - A click's event object. When passed in as an option,
         *     the location of the click will be used as the starting point for the opening animation
         *     of the the dialog.
         *
         */

        /**
         * @ngdoc method
         * @name $mdDialog#confirm
         *
         * @description
         * Builds a preconfigured dialog with the specified message. You can call show and the promise returned
         * will be resolved only if the user clicks the confirm action on the dialog.
         *
         * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:
         *
         * Additionally, it supports the following methods:
         *
         * - $mdDialogPreset#title(string) - Sets the confirm title.
         * - $mdDialogPreset#textContent(string) - Sets the confirm message.
         * - $mdDialogPreset#htmlContent(string) - Sets the confirm message as HTML. Requires ngSanitize
         *     module to be loaded. HTML is not run through Angular's compiler.
         * - $mdDialogPreset#ok(string) - Sets the confirm "Okay" button text.
         * - $mdDialogPreset#cancel(string) - Sets the confirm "Cancel" button text.
         * - $mdDialogPreset#theme(string) - Sets the theme of the confirm dialog.
         * - $mdDialogPreset#targetEvent(DOMClickEvent=) - A click's event object. When passed in as an option,
         *     the location of the click will be used as the starting point for the opening animation
         *     of the the dialog.
         *
         */

        /**
         * @ngdoc method
         * @name $mdDialog#show
         *
         * @description
         * Show a dialog with the specified options.
         *
         * @param {object} optionsOrPreset Either provide an `$mdDialogPreset` returned from `alert()`, and
         * `confirm()`, or an options object with the following properties:
         *   - `templateUrl` - `{string=}`: The url of a template that will be used as the content
         *   of the dialog.
         *   - `template` - `{string=}`: HTML template to show in the dialog. This **must** be trusted HTML
         *      with respect to Angular's [$sce service](https://docs.angularjs.org/api/ng/service/$sce).
         *      This template should **never** be constructed with any kind of user input or user data.
         *   - `autoWrap` - `{boolean=}`: Whether or not to automatically wrap the template with a
         *     `<md-dialog>` tag if one is not provided. Defaults to true. Can be disabled if you provide a
         *     custom dialog directive.
         *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,
         *     the location of the click will be used as the starting point for the opening animation
         *     of the the dialog.
         *   - `openFrom` - `{string|Element|object}`: The query selector, DOM element or the Rect object
         *     that is used to determine the bounds (top, left, height, width) from which the Dialog will
         *     originate.
         *   - `closeTo` - `{string|Element|object}`: The query selector, DOM element or the Rect object
         *     that is used to determine the bounds (top, left, height, width) to which the Dialog will
         *     target.
         *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified,
         *     it will create a new isolate scope.
         *     This scope will be destroyed when the dialog is removed unless `preserveScope` is set to true.
         *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false
         *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the dialog is open.
         *     Default true.
         *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop behind the dialog.
         *     Default true.
         *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the dialog to
         *     close it. Default false.
         *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the dialog.
         *     Default true.
         *   - `focusOnOpen` - `{boolean=}`: An option to override focus behavior on open. Only disable if
         *     focusing some other way, as focus management is required for dialogs to be accessible.
         *     Defaults to true.
         *   - `controller` - `{function|string=}`: The controller to associate with the dialog. The controller
         *     will be injected with the local `$mdDialog`, which passes along a scope for the dialog.
         *   - `locals` - `{object=}`: An object containing key/value pairs. The keys will be used as names
         *     of values to inject into the controller. For example, `locals: {three: 3}` would inject
         *     `three` into the controller, with the value 3. If `bindToController` is true, they will be
         *     copied to the controller instead.
         *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.
         *     These values will not be available until after initialization.
         *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values, and the
         *     dialog will not open until all of the promises resolve.
         *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
         *   - `parent` - `{element=}`: The element to append the dialog to. Defaults to appending
         *     to the root element of the application.
         *   - `onShowing` `{function=} Callback function used to announce the show() action is
         *     starting.
         *   - `onComplete` `{function=}`: Callback function used to announce when the show() action is
         *     finished.
         *   - `onRemoving` `{function=}`: Callback function used to announce the close/hide() action is
         *     starting. This allows developers to run custom animations in parallel the close animations.
         *   - `fullscreen` `{boolean=}`: An option to apply `.md-dialog-fullscreen` class on open.
         * @returns {promise} A promise that can be resolved with `$mdDialog.hide()` or
         * rejected with `$mdDialog.cancel()`.
         */

        /**
         * @ngdoc method
         * @name $mdDialog#hide
         *
         * @description
         * Hide an existing dialog and resolve the promise returned from `$mdDialog.show()`.
         *
         * @param {*=} response An argument for the resolved promise.
         *
         * @returns {promise} A promise that is resolved when the dialog has been closed.
         */

        /**
         * @ngdoc method
         * @name $mdDialog#cancel
         *
         * @description
         * Hide an existing dialog and reject the promise returned from `$mdDialog.show()`.
         *
         * @param {*=} response An argument for the rejected promise.
         *
         * @returns {promise} A promise that is resolved when the dialog has been closed.
         */

        function MdDialogProvider($$interimElementProvider) {
            // Elements to capture and redirect focus when the user presses tab at the dialog boundary.
            var topFocusTrap, bottomFocusTrap;

            advancedDialogOptions.$inject = ["$mdDialog", "$mdTheming"];
            dialogDefaultOptions.$inject = ["$mdDialog", "$mdAria", "$mdUtil", "$mdConstant", "$animate", "$document", "$window", "$rootElement", "$log", "$injector"];
            return $$interimElementProvider('$mdDialog')
                .setDefaults({
                    methods: ['disableParentScroll', 'hasBackdrop', 'clickOutsideToClose', 'escapeToClose',
                        'targetEvent', 'closeTo', 'openFrom', 'parent', 'fullscreen'
                    ],
                    options: dialogDefaultOptions
                })
                .addPreset('alert', {
                    methods: ['title', 'htmlContent', 'textContent', 'content', 'ariaLabel', 'ok', 'theme',
                        'css'
                    ],
                    options: advancedDialogOptions
                })
                .addPreset('confirm', {
                    methods: ['title', 'htmlContent', 'textContent', 'content', 'ariaLabel', 'ok', 'cancel',
                        'theme', 'css'
                    ],
                    options: advancedDialogOptions
                });

            /* @ngInject */
            function advancedDialogOptions($mdDialog, $mdTheming) {
                return {
                    template: [
                        '<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}" ng-class="dialog.css">',
                        '  <md-dialog-content class="md-dialog-content" role="document" tabIndex="-1">',
                        '    <h2 class="md-title">{{ dialog.title }}</h2>',
                        '    <div ng-if="::dialog.mdHtmlContent" class="md-dialog-content-body" ',
                        '        ng-bind-html="::dialog.mdHtmlContent"></div>',
                        '    <div ng-if="::!dialog.mdHtmlContent" class="md-dialog-content-body">',
                        '      <p>{{::dialog.mdTextContent}}</p>',
                        '    </div>',
                        '  </md-dialog-content>',
                        '  <md-dialog-actions>',
                        '    <md-button ng-if="dialog.$type == \'confirm\'"' +
                        '               ng-click="dialog.abort()" class="md-primary">',
                        '      {{ dialog.cancel }}',
                        '    </md-button>',
                        '    <md-button ng-click="dialog.hide()" class="md-primary" md-autofocus="dialog.$type!=\'confirm\'">',
                        '      {{ dialog.ok }}',
                        '    </md-button>',
                        '  </md-dialog-actions>',
                        '</md-dialog>'
                    ].join('').replace(/\s\s+/g, ''),
                    controller: function mdDialogCtrl() {
                        this.hide = function() {
                            $mdDialog.hide(true);
                        };
                        this.abort = function() {
                            $mdDialog.cancel();
                        };
                    },
                    controllerAs: 'dialog',
                    bindToController: true,
                    theme: $mdTheming.defaultTheme()
                };
            }

            /* @ngInject */
            function dialogDefaultOptions($mdDialog, $mdAria, $mdUtil, $mdConstant, $animate, $document, $window, $rootElement, $log, $injector) {
                return {
                    hasBackdrop: true,
                    isolateScope: true,
                    onShow: onShow,
                    onShowing: beforeShow,
                    onRemove: onRemove,
                    clickOutsideToClose: false,
                    escapeToClose: true,
                    targetEvent: null,
                    closeTo: null,
                    openFrom: null,
                    focusOnOpen: true,
                    disableParentScroll: true,
                    autoWrap: true,
                    fullscreen: false,
                    transformTemplate: function(template, options) {
                        return '<div class="md-dialog-container">' + validatedTemplate(template) + '</div>';

                        /**
                         * The specified template should contain a <md-dialog> wrapper element....
                         */
                        function validatedTemplate(template) {
                            if (options.autoWrap && !/<\/md-dialog>/g.test(template)) {
                                return '<md-dialog>' + (template || '') + '</md-dialog>';
                            } else {
                                return template || '';
                            }
                        }
                    }
                };

                function beforeShow(scope, element, options, controller) {
                    if (controller) {
                        controller.mdHtmlContent = controller.htmlContent || options.htmlContent || '';
                        controller.mdTextContent = controller.textContent || options.textContent ||
                            controller.content || options.content || '';

                        if (controller.mdHtmlContent && !$injector.has('$sanitize')) {
                            throw Error('The ngSanitize module must be loaded in order to use htmlContent.');
                        }

                        if (controller.mdHtmlContent && controller.mdTextContent) {
                            throw Error('md-dialog cannot have both `htmlContent` and `textContent`');
                        }
                    }
                }

                /** Show method for dialogs */
                function onShow(scope, element, options, controller) {
                    angular.element($document[0].body).addClass('md-dialog-is-showing');

                    captureParentAndFromToElements(options);
                    configureAria(element.find('md-dialog'), options);
                    showBackdrop(scope, element, options);

                    return dialogPopIn(element, options)
                        .then(function() {
                            activateListeners(element, options);
                            lockScreenReader(element, options);
                            warnDeprecatedActions();
                            focusOnOpen();
                        });

                    /**
                     * Check to see if they used the deprecated .md-actions class and log a warning
                     */
                    function warnDeprecatedActions() {
                        var badActions = element[0].querySelectorAll('.md-actions');

                        if (badActions.length > 0) {
                            $log.warn('Using a class of md-actions is deprected, please use <md-dialog-actions>.');
                        }
                    }

                    /**
                     * For alerts, focus on content... otherwise focus on
                     * the close button (or equivalent)
                     */
                    function focusOnOpen() {
                        if (options.focusOnOpen) {
                            var target = $mdUtil.findFocusTarget(element) || findCloseButton();
                            target.focus();
                        }

                        /**
                         * If no element with class dialog-close, try to find the last
                         * button child in md-actions and assume it is a close button.
                         *
                         * If we find no actions at all, log a warning to the console.
                         */
                        function findCloseButton() {
                            var closeButton = element[0].querySelector('.dialog-close');
                            if (!closeButton) {
                                var actionButtons = element[0].querySelectorAll('.md-actions button, md-dialog-actions button');
                                closeButton = actionButtons[actionButtons.length - 1];
                            }
                            return angular.element(closeButton);
                        }
                    }
                }

                /**
                 * Remove function for all dialogs
                 */
                function onRemove(scope, element, options) {
                    options.deactivateListeners();
                    options.unlockScreenReader();
                    options.hideBackdrop(options.$destroy);

                    // Remove the focus traps that we added earlier for keeping focus within the dialog.
                    if (topFocusTrap && topFocusTrap.parentNode) {
                        topFocusTrap.parentNode.removeChild(topFocusTrap);
                    }

                    if (bottomFocusTrap && bottomFocusTrap.parentNode) {
                        bottomFocusTrap.parentNode.removeChild(bottomFocusTrap);
                    }

                    // For navigation $destroy events, do a quick, non-animated removal,
                    // but for normal closes (from clicks, etc) animate the removal
                    return !!options.$destroy ? detachAndClean() : animateRemoval().then(detachAndClean);

                    /**
                     * For normal closes, animate the removal.
                     * For forced closes (like $destroy events), skip the animations
                     */
                    function animateRemoval() {
                        return dialogPopOut(element, options);
                    }

                    /**
                     * Detach the element
                     */
                    function detachAndClean() {
                        angular.element($document[0].body).removeClass('md-dialog-is-showing');
                        element.remove();

                        if (!options.$destroy) options.origin.focus();
                    }
                }

                /**
                 * Capture originator/trigger/from/to element information (if available)
                 * and the parent container for the dialog; defaults to the $rootElement
                 * unless overridden in the options.parent
                 */
                function captureParentAndFromToElements(options) {
                    options.origin = angular.extend({
                        element: null,
                        bounds: null,
                        focus: angular.noop
                    }, options.origin || {});

                    options.parent = getDomElement(options.parent, $rootElement);
                    options.closeTo = getBoundingClientRect(getDomElement(options.closeTo));
                    options.openFrom = getBoundingClientRect(getDomElement(options.openFrom));

                    if (options.targetEvent) {
                        options.origin = getBoundingClientRect(options.targetEvent.target, options.origin);
                    }

                    /**
                     * Identify the bounding RECT for the target element
                     *
                     */
                    function getBoundingClientRect(element, orig) {
                        var source = angular.element((element || {}));
                        if (source && source.length) {
                            // Compute and save the target element's bounding rect, so that if the
                            // element is hidden when the dialog closes, we can shrink the dialog
                            // back to the same position it expanded from.
                            //
                            // Checking if the source is a rect object or a DOM element
                            var bounds = {
                                top: 0,
                                left: 0,
                                height: 0,
                                width: 0
                            };
                            var hasFn = angular.isFunction(source[0].getBoundingClientRect);

                            return angular.extend(orig || {}, {
                                element: hasFn ? source : undefined,
                                bounds: hasFn ? source[0].getBoundingClientRect() : angular.extend({}, bounds, source[0]),
                                focus: angular.bind(source, source.focus),
                            });
                        }
                    }

                    /**
                     * If the specifier is a simple string selector, then query for
                     * the DOM element.
                     */
                    function getDomElement(element, defaultElement) {
                        if (angular.isString(element)) {
                            var simpleSelector = element,
                                container = $document[0].querySelectorAll(simpleSelector);
                            element = container.length ? container[0] : null;
                        }

                        // If we have a reference to a raw dom element, always wrap it in jqLite
                        return angular.element(element || defaultElement);
                    }

                }

                /**
                 * Listen for escape keys and outside clicks to auto close
                 */
                function activateListeners(element, options) {
                    var window = angular.element($window);
                    var onWindowResize = $mdUtil.debounce(function() {
                        stretchDialogContainerToViewport(element, options);
                    }, 60);

                    var removeListeners = [];
                    var smartClose = function() {
                        // Only 'confirm' dialogs have a cancel button... escape/clickOutside will
                        // cancel or fallback to hide.
                        var closeFn = (options.$type == 'alert') ? $mdDialog.hide : $mdDialog.cancel;
                        $mdUtil.nextTick(closeFn, true);
                    };

                    if (options.escapeToClose) {
                        var target = options.parent;
                        var keyHandlerFn = function(ev) {
                            if (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE) {
                                ev.stopPropagation();
                                ev.preventDefault();

                                smartClose();
                            }
                        };

                        // Add keydown listeners
                        element.on('keydown', keyHandlerFn);
                        target.on('keydown', keyHandlerFn);
                        window.on('resize', onWindowResize);

                        // Queue remove listeners function
                        removeListeners.push(function() {

                            element.off('keydown', keyHandlerFn);
                            target.off('keydown', keyHandlerFn);
                            window.off('resize', onWindowResize);

                        });
                    }
                    if (options.clickOutsideToClose) {
                        var target = element;
                        var sourceElem;

                        // Keep track of the element on which the mouse originally went down
                        // so that we can only close the backdrop when the 'click' started on it.
                        // A simple 'click' handler does not work,
                        // it sets the target object as the element the mouse went down on.
                        var mousedownHandler = function(ev) {
                            sourceElem = ev.target;
                        };

                        // We check if our original element and the target is the backdrop
                        // because if the original was the backdrop and the target was inside the dialog
                        // we don't want to dialog to close.
                        var mouseupHandler = function(ev) {
                            if (sourceElem === target[0] && ev.target === target[0]) {
                                ev.stopPropagation();
                                ev.preventDefault();

                                smartClose();
                            }
                        };

                        // Add listeners
                        target.on('mousedown', mousedownHandler);
                        target.on('mouseup', mouseupHandler);

                        // Queue remove listeners function
                        removeListeners.push(function() {
                            target.off('mousedown', mousedownHandler);
                            target.off('mouseup', mouseupHandler);
                        });
                    }

                    // Attach specific `remove` listener handler
                    options.deactivateListeners = function() {
                        removeListeners.forEach(function(removeFn) {
                            removeFn();
                        });
                        options.deactivateListeners = null;
                    };
                }

                /**
                 * Show modal backdrop element...
                 */
                function showBackdrop(scope, element, options) {

                    if (options.disableParentScroll) {
                        // !! DO this before creating the backdrop; since disableScrollAround()
                        //    configures the scroll offset; which is used by mdBackDrop postLink()
                        options.restoreScroll = $mdUtil.disableScrollAround(element, options.parent);
                    }

                    if (options.hasBackdrop) {
                        options.backdrop = $mdUtil.createBackdrop(scope, "md-dialog-backdrop md-opaque");
                        $animate.enter(options.backdrop, options.parent);
                    }

                    /**
                     * Hide modal backdrop element...
                     */
                    options.hideBackdrop = function hideBackdrop($destroy) {
                        if (options.backdrop) {
                            if (!!$destroy) options.backdrop.remove();
                            else $animate.leave(options.backdrop);
                        }

                        if (options.disableParentScroll) {
                            options.restoreScroll();
                            delete options.restoreScroll;
                        }

                        options.hideBackdrop = null;
                    }
                }

                /**
                 * Inject ARIA-specific attributes appropriate for Dialogs
                 */
                function configureAria(element, options) {

                    var role = (options.$type === 'alert') ? 'alertdialog' : 'dialog';
                    var dialogContent = element.find('md-dialog-content');
                    var dialogId = element.attr('id') || ('dialog_' + $mdUtil.nextUid());

                    element.attr({
                        'role': role,
                        'tabIndex': '-1'
                    });

                    if (dialogContent.length === 0) {
                        dialogContent = element;
                    }

                    dialogContent.attr('id', dialogId);
                    element.attr('aria-describedby', dialogId);

                    if (options.ariaLabel) {
                        $mdAria.expect(element, 'aria-label', options.ariaLabel);
                    } else {
                        $mdAria.expectAsync(element, 'aria-label', function() {
                            var words = dialogContent.text().split(/\s+/);
                            if (words.length > 3) words = words.slice(0, 3).concat('...');
                            return words.join(' ');
                        });
                    }

                    // Set up elements before and after the dialog content to capture focus and
                    // redirect back into the dialog.
                    topFocusTrap = document.createElement('div');
                    topFocusTrap.classList.add('md-dialog-focus-trap');
                    topFocusTrap.tabIndex = 0;

                    bottomFocusTrap = topFocusTrap.cloneNode(false);

                    // When focus is about to move out of the dialog, we want to intercept it and redirect it
                    // back to the dialog element.
                    var focusHandler = angular.bind(element, element.focus);
                    topFocusTrap.addEventListener('focus', focusHandler);
                    bottomFocusTrap.addEventListener('focus', focusHandler);

                    // The top focus trap inserted immeidately before the md-dialog element (as a sibling).
                    // The bottom focus trap is inserted at the very end of the md-dialog element (as a child).
                    element[0].parentNode.insertBefore(topFocusTrap, element[0]);
                    element.append(bottomFocusTrap);
                }

                /**
                 * Prevents screen reader interaction behind modal window
                 * on swipe interfaces
                 */
                function lockScreenReader(element, options) {
                    var isHidden = true;

                    // get raw DOM node
                    walkDOM(element[0]);

                    options.unlockScreenReader = function() {
                        isHidden = false;
                        walkDOM(element[0]);

                        options.unlockScreenReader = null;
                    };

                    /**
                     * Walk DOM to apply or remove aria-hidden on sibling nodes
                     * and parent sibling nodes
                     *
                     */
                    function walkDOM(element) {
                        while (element.parentNode) {
                            if (element === document.body) {
                                return;
                            }
                            var children = element.parentNode.children;
                            for (var i = 0; i < children.length; i++) {
                                // skip over child if it is an ascendant of the dialog
                                // or a script or style tag
                                if (element !== children[i] && !isNodeOneOf(children[i], ['SCRIPT', 'STYLE'])) {
                                    children[i].setAttribute('aria-hidden', isHidden);
                                }
                            }

                            walkDOM(element = element.parentNode);
                        }
                    }
                }

                /**
                 * Ensure the dialog container fill-stretches to the viewport
                 */
                function stretchDialogContainerToViewport(container, options) {
                    var isFixed = $window.getComputedStyle($document[0].body).position == 'fixed';
                    var backdrop = options.backdrop ? $window.getComputedStyle(options.backdrop[0]) : null;
                    var height = backdrop ? Math.min($document[0].body.clientHeight, Math.ceil(Math.abs(parseInt(backdrop.height, 10)))) : 0;

                    container.css({
                        top: (isFixed ? $mdUtil.scrollTop(options.parent) : 0) + 'px',
                        height: height ? height + 'px' : '100%'
                    });

                    return container;
                }

                /**
                 *  Dialog open and pop-in animation
                 */
                function dialogPopIn(container, options) {
                    // Add the `md-dialog-container` to the DOM
                    options.parent.append(container);
                    stretchDialogContainerToViewport(container, options);

                    var dialogEl = container.find('md-dialog');
                    var animator = $mdUtil.dom.animator;
                    var buildTranslateToOrigin = animator.calculateZoomToOrigin;
                    var translateOptions = {
                        transitionInClass: 'md-transition-in',
                        transitionOutClass: 'md-transition-out'
                    };
                    var from = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.openFrom || options.origin));
                    var to = animator.toTransformCss(""); // defaults to center display (or parent or $rootElement)

                    if (options.fullscreen) {
                        dialogEl.addClass('md-dialog-fullscreen');
                    }

                    return animator
                        .translate3d(dialogEl, from, to, translateOptions)
                        .then(function(animateReversal) {
                            // Build a reversal translate function synched to this translation...
                            options.reverseAnimate = function() {
                                delete options.reverseAnimate;

                                if (options.closeTo) {
                                    // Using the opposite classes to create a close animation to the closeTo element
                                    translateOptions = {
                                        transitionInClass: 'md-transition-out',
                                        transitionOutClass: 'md-transition-in'
                                    };
                                    from = to;
                                    to = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.closeTo));

                                    return animator
                                        .translate3d(dialogEl, from, to, translateOptions);
                                }

                                return animateReversal(
                                    animator.toTransformCss(
                                        // in case the origin element has moved or is hidden,
                                        // let's recalculate the translateCSS
                                        buildTranslateToOrigin(dialogEl, options.origin)
                                    )
                                );

                            };
                            return true;
                        });
                }

                /**
                 * Dialog close and pop-out animation
                 */
                function dialogPopOut(container, options) {
                    return options.reverseAnimate();
                }

                /**
                 * Utility function to filter out raw DOM nodes
                 */
                function isNodeOneOf(elem, nodeTypeArray) {
                    if (nodeTypeArray.indexOf(elem.nodeName) !== -1) {
                        return true;
                    }
                }

            }
        }
        MdDialogProvider.$inject = ["$$interimElementProvider"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.divider
         * @description Divider module!
         */
        angular.module('material.components.divider', [
                'material.core'
            ])
            .directive('mdDivider', MdDividerDirective);

        /**
         * @ngdoc directive
         * @name mdDivider
         * @module material.components.divider
         * @restrict E
         *
         * @description
         * Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.
         *
         * @param {boolean=} md-inset Add this attribute to activate the inset divider style.
         * @usage
         * <hljs lang="html">
         * <md-divider></md-divider>
         *
         * <md-divider md-inset></md-divider>
         * </hljs>
         *
         */
        function MdDividerDirective($mdTheming) {
            return {
                restrict: 'E',
                link: $mdTheming
            };
        }
        MdDividerDirective.$inject = ["$mdTheming"];

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            /**
             * @ngdoc module
             * @name material.components.fabActions
             */
            angular
                .module('material.components.fabActions', ['material.core'])
                .directive('mdFabActions', MdFabActionsDirective);

            /**
             * @ngdoc directive
             * @name mdFabActions
             * @module material.components.fabActions
             *
             * @restrict E
             *
             * @description
             * The `<md-fab-actions>` directive is used inside of a `<md-fab-speed-dial>` or
             * `<md-fab-toolbar>` directive to mark an element (or elements) as the actions and setup the
             * proper event listeners.
             *
             * @usage
             * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.
             */
            function MdFabActionsDirective() {
                return {
                    restrict: 'E',

                    require: ['^?mdFabSpeedDial', '^?mdFabToolbar'],

                    compile: function(element, attributes) {
                        var children = element.children();

                        var hasNgRepeat = false;

                        angular.forEach(['', 'data-', 'x-'], function(prefix) {
                            hasNgRepeat = hasNgRepeat || (children.attr(prefix + 'ng-repeat') ? true : false);
                        });

                        // Support both ng-repeat and static content
                        if (hasNgRepeat) {
                            children.addClass('md-fab-action-item');
                        } else {
                            // Wrap every child in a new div and add a class that we can scale/fling independently
                            children.wrap('<div class="md-fab-action-item">');
                        }
                    }
                }
            }

        })();

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            angular.module('material.components.fabShared', ['material.core'])
                .controller('FabController', FabController);

            function FabController($scope, $element, $animate, $mdUtil, $mdConstant, $timeout) {
                var vm = this;

                // NOTE: We use async eval(s) below to avoid conflicts with any existing digest loops

                vm.open = function() {
                    $scope.$evalAsync("vm.isOpen = true");
                };

                vm.close = function() {
                    // Async eval to avoid conflicts with existing digest loops
                    $scope.$evalAsync("vm.isOpen = false");

                    // Focus the trigger when the element closes so users can still tab to the next item
                    $element.find('md-fab-trigger')[0].focus();
                };

                // Toggle the open/close state when the trigger is clicked
                vm.toggle = function() {
                    $scope.$evalAsync("vm.isOpen = !vm.isOpen");
                };

                setupDefaults();
                setupListeners();
                setupWatchers();

                var initialAnimationAttempts = 0;
                fireInitialAnimations();

                function setupDefaults() {
                    // Set the default direction to 'down' if none is specified
                    vm.direction = vm.direction || 'down';

                    // Set the default to be closed
                    vm.isOpen = vm.isOpen || false;

                    // Start the keyboard interaction at the first action
                    resetActionIndex();

                    // Add an animations waiting class so we know not to run
                    $element.addClass('md-animations-waiting');
                }

                function setupListeners() {
                    var eventTypes = [
                        'click', 'focusin', 'focusout'
                    ];

                    // Add our listeners
                    angular.forEach(eventTypes, function(eventType) {
                        $element.on(eventType, parseEvents);
                    });

                    // Remove our listeners when destroyed
                    $scope.$on('$destroy', function() {
                        angular.forEach(eventTypes, function(eventType) {
                            $element.off(eventType, parseEvents);
                        });

                        // remove any attached keyboard handlers in case element is removed while
                        // speed dial is open
                        disableKeyboard();
                    });
                }

                var closeTimeout;

                function parseEvents(event) {
                    // If the event is a click, just handle it
                    if (event.type == 'click') {
                        handleItemClick(event);
                    }

                    // If we focusout, set a timeout to close the element
                    if (event.type == 'focusout' && !closeTimeout) {
                        closeTimeout = $timeout(function() {
                            vm.close();
                        }, 100, false);
                    }

                    // If we see a focusin and there is a timeout about to run, cancel it so we stay open
                    if (event.type == 'focusin' && closeTimeout) {
                        $timeout.cancel(closeTimeout);
                        closeTimeout = null;
                    }
                }

                function resetActionIndex() {
                    vm.currentActionIndex = -1;
                }

                function setupWatchers() {
                    // Watch for changes to the direction and update classes/attributes
                    $scope.$watch('vm.direction', function(newDir, oldDir) {
                        // Add the appropriate classes so we can target the direction in the CSS
                        $animate.removeClass($element, 'md-' + oldDir);
                        $animate.addClass($element, 'md-' + newDir);

                        // Reset the action index since it may have changed
                        resetActionIndex();
                    });

                    var trigger, actions;

                    // Watch for changes to md-open
                    $scope.$watch('vm.isOpen', function(isOpen) {
                        // Reset the action index since it may have changed
                        resetActionIndex();

                        // We can't get the trigger/actions outside of the watch because the component hasn't been
                        // linked yet, so we wait until the first watch fires to cache them.
                        if (!trigger || !actions) {
                            trigger = getTriggerElement();
                            actions = getActionsElement();
                        }

                        if (isOpen) {
                            enableKeyboard();
                        } else {
                            disableKeyboard();
                        }

                        var toAdd = isOpen ? 'md-is-open' : '';
                        var toRemove = isOpen ? '' : 'md-is-open';

                        // Set the proper ARIA attributes
                        trigger.attr('aria-haspopup', true);
                        trigger.attr('aria-expanded', isOpen);
                        actions.attr('aria-hidden', !isOpen);

                        // Animate the CSS classes
                        $animate.setClass($element, toAdd, toRemove);
                    });
                }

                function fireInitialAnimations() {
                    // If the element is actually visible on the screen
                    if ($element[0].scrollHeight > 0) {
                        // Fire our animation
                        $animate.addClass($element, 'md-animations-ready').then(function() {
                            // Remove the waiting class
                            $element.removeClass('md-animations-waiting');
                        });
                    }

                    // Otherwise, try for up to 1 second before giving up
                    else if (initialAnimationAttempts < 10) {
                        $timeout(fireInitialAnimations, 100);

                        // Increment our counter
                        initialAnimationAttempts = initialAnimationAttempts + 1;
                    }
                }

                function enableKeyboard() {
                    $element.on('keydown', keyPressed);

                    // On the next tick, setup a check for outside clicks; we do this on the next tick to avoid
                    // clicks/touches that result in the isOpen attribute changing (e.g. a bound radio button)
                    $mdUtil.nextTick(function() {
                        angular.element(document).on('click touchend', checkForOutsideClick);
                    });

                    // TODO: On desktop, we should be able to reset the indexes so you cannot tab through, but
                    // this breaks accessibility, especially on mobile, since you have no arrow keys to press
                    //resetActionTabIndexes();
                }

                function disableKeyboard() {
                    $element.off('keydown', keyPressed);
                    angular.element(document).off('click touchend', checkForOutsideClick);
                }

                function checkForOutsideClick(event) {
                    if (event.target) {
                        var closestTrigger = $mdUtil.getClosest(event.target, 'md-fab-trigger');
                        var closestActions = $mdUtil.getClosest(event.target, 'md-fab-actions');

                        if (!closestTrigger && !closestActions) {
                            vm.close();
                        }
                    }
                }

                function keyPressed(event) {
                    switch (event.which) {
                        case $mdConstant.KEY_CODE.ESCAPE:
                            vm.close();
                            event.preventDefault();
                            return false;
                        case $mdConstant.KEY_CODE.LEFT_ARROW:
                            doKeyLeft(event);
                            return false;
                        case $mdConstant.KEY_CODE.UP_ARROW:
                            doKeyUp(event);
                            return false;
                        case $mdConstant.KEY_CODE.RIGHT_ARROW:
                            doKeyRight(event);
                            return false;
                        case $mdConstant.KEY_CODE.DOWN_ARROW:
                            doKeyDown(event);
                            return false;
                    }
                }

                function doActionPrev(event) {
                    focusAction(event, -1);
                }

                function doActionNext(event) {
                    focusAction(event, 1);
                }

                function focusAction(event, direction) {
                    var actions = resetActionTabIndexes();

                    // Increment/decrement the counter with restrictions
                    vm.currentActionIndex = vm.currentActionIndex + direction;
                    vm.currentActionIndex = Math.min(actions.length - 1, vm.currentActionIndex);
                    vm.currentActionIndex = Math.max(0, vm.currentActionIndex);

                    // Focus the element
                    var focusElement = angular.element(actions[vm.currentActionIndex]).children()[0];
                    angular.element(focusElement).attr('tabindex', 0);
                    focusElement.focus();

                    // Make sure the event doesn't bubble and cause something else
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }

                function resetActionTabIndexes() {
                    // Grab all of the actions
                    var actions = getActionsElement()[0].querySelectorAll('.md-fab-action-item');

                    // Disable all other actions for tabbing
                    angular.forEach(actions, function(action) {
                        angular.element(angular.element(action).children()[0]).attr('tabindex', -1);
                    });

                    return actions;
                }

                function doKeyLeft(event) {
                    if (vm.direction === 'left') {
                        doActionNext(event);
                    } else {
                        doActionPrev(event);
                    }
                }

                function doKeyUp(event) {
                    if (vm.direction === 'down') {
                        doActionPrev(event);
                    } else {
                        doActionNext(event);
                    }
                }

                function doKeyRight(event) {
                    if (vm.direction === 'left') {
                        doActionPrev(event);
                    } else {
                        doActionNext(event);
                    }
                }

                function doKeyDown(event) {
                    if (vm.direction === 'up') {
                        doActionPrev(event);
                    } else {
                        doActionNext(event);
                    }
                }

                function isTrigger(element) {
                    return $mdUtil.getClosest(element, 'md-fab-trigger');
                }

                function isAction(element) {
                    return $mdUtil.getClosest(element, 'md-fab-actions');
                }

                function handleItemClick(event) {
                    if (isTrigger(event.target)) {
                        vm.toggle();
                    }

                    if (isAction(event.target)) {
                        vm.close();
                    }
                }

                function getTriggerElement() {
                    return $element.find('md-fab-trigger');
                }

                function getActionsElement() {
                    return $element.find('md-fab-actions');
                }
            }
            FabController.$inject = ["$scope", "$element", "$animate", "$mdUtil", "$mdConstant", "$timeout"];
        })();

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            /**
             * The duration of the CSS animation in milliseconds.
             *
             * @type {number}
             */
            var cssAnimationDuration = 300;

            /**
             * @ngdoc module
             * @name material.components.fabSpeedDial
             */
            angular
            // Declare our module
                .module('material.components.fabSpeedDial', [
                'material.core',
                'material.components.fabShared',
                'material.components.fabTrigger',
                'material.components.fabActions'
            ])

            // Register our directive
            .directive('mdFabSpeedDial', MdFabSpeedDialDirective)

            // Register our custom animations
            .animation('.md-fling', MdFabSpeedDialFlingAnimation)
                .animation('.md-scale', MdFabSpeedDialScaleAnimation)

            // Register a service for each animation so that we can easily inject them into unit tests
            .service('mdFabSpeedDialFlingAnimation', MdFabSpeedDialFlingAnimation)
                .service('mdFabSpeedDialScaleAnimation', MdFabSpeedDialScaleAnimation);

            /**
             * @ngdoc directive
             * @name mdFabSpeedDial
             * @module material.components.fabSpeedDial
             *
             * @restrict E
             *
             * @description
             * The `<md-fab-speed-dial>` directive is used to present a series of popup elements (usually
             * `<md-button>`s) for quick access to common actions.
             *
             * There are currently two animations available by applying one of the following classes to
             * the component:
             *
             *  - `md-fling` - The speed dial items appear from underneath the trigger and move into their
             *    appropriate positions.
             *  - `md-scale` - The speed dial items appear in their proper places by scaling from 0% to 100%.
             *
             * You may also easily position the trigger by applying one one of the following classes to the
             * `<md-fab-speed-dial>` element:
             *  - `md-fab-top-left`
             *  - `md-fab-top-right`
             *  - `md-fab-bottom-left`
             *  - `md-fab-bottom-right`
             *
             * These CSS classes use `position: absolute`, so you need to ensure that the container element
             * also uses `position: absolute` or `position: relative` in order for them to work.
             *
             * Additionally, you may use the standard `ng-mouseenter` and `ng-mouseleave` directives to
             * open or close the speed dial. However, if you wish to allow users to hover over the empty
             * space where the actions will appear, you must also add the `md-hover-full` class to the speed
             * dial element. Without this, the hover effect will only occur on top of the trigger.
             *
             * @usage
             * <hljs lang="html">
             * <md-fab-speed-dial md-direction="up" class="md-fling">
             *   <md-fab-trigger>
             *     <md-button aria-label="Add..."><md-icon icon="/img/icons/plus.svg"></md-icon></md-button>
             *   </md-fab-trigger>
             *
             *   <md-fab-actions>
             *     <md-button aria-label="Add User">
             *       <md-icon icon="/img/icons/user.svg"></md-icon>
             *     </md-button>
             *
             *     <md-button aria-label="Add Group">
             *       <md-icon icon="/img/icons/group.svg"></md-icon>
             *     </md-button>
             *   </md-fab-actions>
             * </md-fab-speed-dial>
             * </hljs>
             *
             * @param {string} md-direction From which direction you would like the speed dial to appear
             * relative to the trigger element.
             * @param {expression=} md-open Programmatically control whether or not the speed-dial is visible.
             */
            function MdFabSpeedDialDirective() {
                return {
                    restrict: 'E',

                    scope: {
                        direction: '@?mdDirection',
                        isOpen: '=?mdOpen'
                    },

                    bindToController: true,
                    controller: 'FabController',
                    controllerAs: 'vm',

                    link: FabSpeedDialLink
                };

                function FabSpeedDialLink(scope, element) {
                    // Prepend an element to hold our CSS variables so we can use them in the animations below
                    element.prepend('<div class="md-css-variables"></div>');
                }
            }

            function MdFabSpeedDialFlingAnimation($timeout) {
                function delayDone(done) {
                    $timeout(done, cssAnimationDuration, false);
                }

                function runAnimation(element) {
                    // Don't run if we are still waiting and we are not ready
                    if (element.hasClass('md-animations-waiting') && !element.hasClass('md-animations-ready')) {
                        return;
                    }

                    var el = element[0];
                    var ctrl = element.controller('mdFabSpeedDial');
                    var items = el.querySelectorAll('.md-fab-action-item');

                    // Grab our trigger element
                    var triggerElement = el.querySelector('md-fab-trigger');

                    // Grab our element which stores CSS variables
                    var variablesElement = el.querySelector('.md-css-variables');

                    // Setup JS variables based on our CSS variables
                    var startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);

                    // Always reset the items to their natural position/state
                    angular.forEach(items, function(item, index) {
                        var styles = item.style;

                        styles.transform = styles.webkitTransform = '';
                        styles.transitionDelay = '';
                        styles.opacity = 1;

                        // Make the items closest to the trigger have the highest z-index
                        styles.zIndex = (items.length - index) + startZIndex;
                    });

                    // Set the trigger to be above all of the actions so they disappear behind it.
                    triggerElement.style.zIndex = startZIndex + items.length + 1;

                    // If the control is closed, hide the items behind the trigger
                    if (!ctrl.isOpen) {
                        angular.forEach(items, function(item, index) {
                            var newPosition, axis;
                            var styles = item.style;

                            // Make sure to account for differences in the dimensions of the trigger verses the items
                            // so that we can properly center everything; this helps hide the item's shadows behind
                            // the trigger.
                            var triggerItemHeightOffset = (triggerElement.clientHeight - item.clientHeight) / 2;
                            var triggerItemWidthOffset = (triggerElement.clientWidth - item.clientWidth) / 2;

                            switch (ctrl.direction) {
                                case 'up':
                                    newPosition = (item.scrollHeight * (index + 1) + triggerItemHeightOffset);
                                    axis = 'Y';
                                    break;
                                case 'down':
                                    newPosition = -(item.scrollHeight * (index + 1) + triggerItemHeightOffset);
                                    axis = 'Y';
                                    break;
                                case 'left':
                                    newPosition = (item.scrollWidth * (index + 1) + triggerItemWidthOffset);
                                    axis = 'X';
                                    break;
                                case 'right':
                                    newPosition = -(item.scrollWidth * (index + 1) + triggerItemWidthOffset);
                                    axis = 'X';
                                    break;
                            }

                            var newTranslate = 'translate' + axis + '(' + newPosition + 'px)';

                            styles.transform = styles.webkitTransform = newTranslate;
                        });
                    }
                }

                return {
                    addClass: function(element, className, done) {
                        if (element.hasClass('md-fling')) {
                            runAnimation(element);
                            delayDone(done);
                        } else {
                            done();
                        }
                    },
                    removeClass: function(element, className, done) {
                        runAnimation(element);
                        delayDone(done);
                    }
                }
            }
            MdFabSpeedDialFlingAnimation.$inject = ["$timeout"];

            function MdFabSpeedDialScaleAnimation($timeout) {
                function delayDone(done) {
                    $timeout(done, cssAnimationDuration, false);
                }

                var delay = 65;

                function runAnimation(element) {
                    var el = element[0];
                    var ctrl = element.controller('mdFabSpeedDial');
                    var items = el.querySelectorAll('.md-fab-action-item');

                    // Grab our element which stores CSS variables
                    var variablesElement = el.querySelector('.md-css-variables');

                    // Setup JS variables based on our CSS variables
                    var startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);

                    // Always reset the items to their natural position/state
                    angular.forEach(items, function(item, index) {
                        var styles = item.style,
                            offsetDelay = index * delay;

                        styles.opacity = ctrl.isOpen ? 1 : 0;
                        styles.transform = styles.webkitTransform = ctrl.isOpen ? 'scale(1)' : 'scale(0.1)';
                        styles.transitionDelay = (ctrl.isOpen ? offsetDelay : (items.length - offsetDelay)) + 'ms';

                        // Make the items closest to the trigger have the highest z-index
                        styles.zIndex = (items.length - index) + startZIndex;
                    });
                }

                return {
                    addClass: function(element, className, done) {
                        runAnimation(element);
                        delayDone(done);
                    },

                    removeClass: function(element, className, done) {
                        runAnimation(element);
                        delayDone(done);
                    }
                }
            }
            MdFabSpeedDialScaleAnimation.$inject = ["$timeout"];
        })();

    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            /**
             * @ngdoc module
             * @name material.components.fabToolbar
             */
            angular
            // Declare our module
                .module('material.components.fabToolbar', [
                'material.core',
                'material.components.fabShared',
                'material.components.fabTrigger',
                'material.components.fabActions'
            ])

            // Register our directive
            .directive('mdFabToolbar', MdFabToolbarDirective)

            // Register our custom animations
            .animation('.md-fab-toolbar', MdFabToolbarAnimation)

            // Register a service for the animation so that we can easily inject it into unit tests
            .service('mdFabToolbarAnimation', MdFabToolbarAnimation);

            /**
             * @ngdoc directive
             * @name mdFabToolbar
             * @module material.components.fabToolbar
             *
             * @restrict E
             *
             * @description
             *
             * The `<md-fab-toolbar>` directive is used present a toolbar of elements (usually `<md-button>`s)
             * for quick access to common actions when a floating action button is activated (via click or
             * keyboard navigation).
             *
             * You may also easily position the trigger by applying one one of the following classes to the
             * `<md-fab-toolbar>` element:
             *  - `md-fab-top-left`
             *  - `md-fab-top-right`
             *  - `md-fab-bottom-left`
             *  - `md-fab-bottom-right`
             *
             * These CSS classes use `position: absolute`, so you need to ensure that the container element
             * also uses `position: absolute` or `position: relative` in order for them to work.
             *
             * @usage
             *
             * <hljs lang="html">
             * <md-fab-toolbar md-direction='left'>
             *   <md-fab-trigger>
             *     <md-button aria-label="Add..."><md-icon icon="/img/icons/plus.svg"></md-icon></md-button>
             *   </md-fab-trigger>
             *
             *   <md-fab-actions>
             *     <md-button aria-label="Add User">
             *       <md-icon icon="/img/icons/user.svg"></md-icon>
             *     </md-button>
             *
             *     <md-button aria-label="Add Group">
             *       <md-icon icon="/img/icons/group.svg"></md-icon>
             *     </md-button>
             *   </md-fab-actions>
             * </md-fab-toolbar>
             * </hljs>
             *
             * @param {string} md-direction From which direction you would like the toolbar items to appear
             * relative to the trigger element. Supports `left` and `right` directions.
             * @param {expression=} md-open Programmatically control whether or not the toolbar is visible.
             */
            function MdFabToolbarDirective() {
                return {
                    restrict: 'E',
                    transclude: true,
                    template: '<div class="md-fab-toolbar-wrapper">' +
                        '  <div class="md-fab-toolbar-content" ng-transclude></div>' +
                        '</div>',

                    scope: {
                        direction: '@?mdDirection',
                        isOpen: '=?mdOpen'
                    },

                    bindToController: true,
                    controller: 'FabController',
                    controllerAs: 'vm',

                    link: link
                };

                function link(scope, element, attributes) {
                    // Add the base class for animations
                    element.addClass('md-fab-toolbar');

                    // Prepend the background element to the trigger's button
                    element.find('md-fab-trigger').find('button')
                        .prepend('<div class="md-fab-toolbar-background"></div>');
                }
            }

            function MdFabToolbarAnimation() {

                function runAnimation(element, className, done) {
                    // If no className was specified, don't do anything
                    if (!className) {
                        return;
                    }

                    var el = element[0];
                    var ctrl = element.controller('mdFabToolbar');

                    // Grab the relevant child elements
                    var backgroundElement = el.querySelector('.md-fab-toolbar-background');
                    var triggerElement = el.querySelector('md-fab-trigger button');
                    var toolbarElement = el.querySelector('md-toolbar');
                    var iconElement = el.querySelector('md-fab-trigger button md-icon');
                    var actions = element.find('md-fab-actions').children();

                    // If we have both elements, use them to position the new background
                    if (triggerElement && backgroundElement) {
                        // Get our variables
                        var color = window.getComputedStyle(triggerElement).getPropertyValue('background-color');
                        var width = el.offsetWidth;
                        var height = el.offsetHeight;

                        // Make it twice as big as it should be since we scale from the center
                        var scale = 2 * (width / triggerElement.offsetWidth);

                        // Set some basic styles no matter what animation we're doing
                        backgroundElement.style.backgroundColor = color;
                        backgroundElement.style.borderRadius = width + 'px';

                        // If we're open
                        if (ctrl.isOpen) {
                            // Turn on toolbar pointer events when closed
                            toolbarElement.style.pointerEvents = 'initial';

                            backgroundElement.style.width = triggerElement.offsetWidth + 'px';
                            backgroundElement.style.height = triggerElement.offsetHeight + 'px';
                            backgroundElement.style.transform = 'scale(' + scale + ')';

                            // Set the next close animation to have the proper delays
                            backgroundElement.style.transitionDelay = '0ms';
                            iconElement && (iconElement.style.transitionDelay = '.3s');

                            // Apply a transition delay to actions
                            angular.forEach(actions, function(action, index) {
                                action.style.transitionDelay = (actions.length - index) * 25 + 'ms';
                            });
                        } else {
                            // Turn off toolbar pointer events when closed
                            toolbarElement.style.pointerEvents = 'none';

                            // Scale it back down to the trigger's size
                            backgroundElement.style.transform = 'scale(1)';

                            // Reset the position
                            backgroundElement.style.top = '0';

                            if (element.hasClass('md-right')) {
                                backgroundElement.style.left = '0';
                                backgroundElement.style.right = null;
                            }

                            if (element.hasClass('md-left')) {
                                backgroundElement.style.right = '0';
                                backgroundElement.style.left = null;
                            }

                            // Set the next open animation to have the proper delays
                            backgroundElement.style.transitionDelay = '200ms';
                            iconElement && (iconElement.style.transitionDelay = '0ms');

                            // Apply a transition delay to actions
                            angular.forEach(actions, function(action, index) {
                                action.style.transitionDelay = 200 + (index * 25) + 'ms';
                            });
                        }
                    }
                }

                return {
                    addClass: function(element, className, done) {
                        runAnimation(element, className, done);
                        done();
                    },

                    removeClass: function(element, className, done) {
                        runAnimation(element, className, done);
                        done();
                    }
                }
            }
        })();
    })();
    (function() {
        "use strict";

        (function() {
            'use strict';

            /**
             * @ngdoc module
             * @name material.components.fabTrigger
             */
            angular
                .module('material.components.fabTrigger', ['material.core'])
                .directive('mdFabTrigger', MdFabTriggerDirective);

            /**
             * @ngdoc directive
             * @name mdFabTrigger
             * @module material.components.fabSpeedDial
             *
             * @restrict E
             *
             * @description
             * The `<md-fab-trigger>` directive is used inside of a `<md-fab-speed-dial>` or
             * `<md-fab-toolbar>` directive to mark an element (or elements) as the trigger and setup the
             * proper event listeners.
             *
             * @usage
             * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.
             */
            function MdFabTriggerDirective() {
                // TODO: Remove this completely?
                return {
                    restrict: 'E',

                    require: ['^?mdFabSpeedDial', '^?mdFabToolbar']
                };
            }
        })();


    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.gridList
         */
        angular.module('material.components.gridList', ['material.core'])
            .directive('mdGridList', GridListDirective)
            .directive('mdGridTile', GridTileDirective)
            .directive('mdGridTileFooter', GridTileCaptionDirective)
            .directive('mdGridTileHeader', GridTileCaptionDirective)
            .factory('$mdGridLayout', GridLayoutFactory);

        /**
         * @ngdoc directive
         * @name mdGridList
         * @module material.components.gridList
         * @restrict E
         * @description
         * Grid lists are an alternative to standard list views. Grid lists are distinct
         * from grids used for layouts and other visual presentations.
         *
         * A grid list is best suited to presenting a homogenous data type, typically
         * images, and is optimized for visual comprehension and differentiating between
         * like data types.
         *
         * A grid list is a continuous element consisting of tessellated, regular
         * subdivisions called cells that contain tiles (`md-grid-tile`).
         *
         * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7OVlEaXZ5YmU1Xzg/components_grids_usage2.png"
         *    style="width: 300px; height: auto; margin-right: 16px;" alt="Concept of grid explained visually">
         * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7VGhsOE5idWlJWXM/components_grids_usage3.png"
         *    style="width: 300px; height: auto;" alt="Grid concepts legend">
         *
         * Cells are arrayed vertically and horizontally within the grid.
         *
         * Tiles hold content and can span one or more cells vertically or horizontally.
         *
         * ### Responsive Attributes
         *
         * The `md-grid-list` directive supports "responsive" attributes, which allow
         * different `md-cols`, `md-gutter` and `md-row-height` values depending on the
         * currently matching media query (as defined in `$mdConstant.MEDIA`).
         *
         * In order to set a responsive attribute, first define the fallback value with
         * the standard attribute name, then add additional attributes with the
         * following convention: `{base-attribute-name}-{media-query-name}="{value}"`
         * (ie. `md-cols-lg="8"`)
         *
         * @param {number} md-cols Number of columns in the grid.
         * @param {string} md-row-height One of
         * <ul>
         *   <li>CSS length - Fixed height rows (eg. `8px` or `1rem`)</li>
         *   <li>`{width}:{height}` - Ratio of width to height (eg.
         *   `md-row-height="16:9"`)</li>
         *   <li>`"fit"` - Height will be determined by subdividing the available
         *   height by the number of rows</li>
         * </ul>
         * @param {string=} md-gutter The amount of space between tiles in CSS units
         *     (default 1px)
         * @param {expression=} md-on-layout Expression to evaluate after layout. Event
         *     object is available as `$event`, and contains performance information.
         *
         * @usage
         * Basic:
         * <hljs lang="html">
         * <md-grid-list md-cols="5" md-gutter="1em" md-row-height="4:3">
         *   <md-grid-tile></md-grid-tile>
         * </md-grid-list>
         * </hljs>
         *
         * Fixed-height rows:
         * <hljs lang="html">
         * <md-grid-list md-cols="4" md-row-height="200px" ...>
         *   <md-grid-tile></md-grid-tile>
         * </md-grid-list>
         * </hljs>
         *
         * Fit rows:
         * <hljs lang="html">
         * <md-grid-list md-cols="4" md-row-height="fit" style="height: 400px;" ...>
         *   <md-grid-tile></md-grid-tile>
         * </md-grid-list>
         * </hljs>
         *
         * Using responsive attributes:
         * <hljs lang="html">
         * <md-grid-list
         *     md-cols-sm="2"
         *     md-cols-md="4"
         *     md-cols-lg="8"
         *     md-cols-gt-lg="12"
         *     ...>
         *   <md-grid-tile></md-grid-tile>
         * </md-grid-list>
         * </hljs>
         */
        function GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia) {
            return {
                restrict: 'E',
                controller: GridListController,
                scope: {
                    mdOnLayout: '&'
                },
                link: postLink
            };

            function postLink(scope, element, attrs, ctrl) {
                // Apply semantics
                element.attr('role', 'list');

                // Provide the controller with a way to trigger layouts.
                ctrl.layoutDelegate = layoutDelegate;

                var invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout),
                    unwatchAttrs = watchMedia();
                scope.$on('$destroy', unwatchMedia);

                /**
                 * Watches for changes in media, invalidating layout as necessary.
                 */
                function watchMedia() {
                    for (var mediaName in $mdConstant.MEDIA) {
                        $mdMedia(mediaName); // initialize
                        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])
                            .addListener(invalidateLayout);
                    }
                    return $mdMedia.watchResponsiveAttributes(
                        ['md-cols', 'md-row-height', 'md-gutter'], attrs, layoutIfMediaMatch);
                }

                function unwatchMedia() {
                    ctrl.layoutDelegate = angular.noop;

                    unwatchAttrs();
                    for (var mediaName in $mdConstant.MEDIA) {
                        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])
                            .removeListener(invalidateLayout);
                    }
                }

                /**
                 * Performs grid layout if the provided mediaName matches the currently
                 * active media type.
                 */
                function layoutIfMediaMatch(mediaName) {
                    if (mediaName == null) {
                        // TODO(shyndman): It would be nice to only layout if we have
                        // instances of attributes using this media type
                        ctrl.invalidateLayout();
                    } else if ($mdMedia(mediaName)) {
                        ctrl.invalidateLayout();
                    }
                }

                var lastLayoutProps;

                /**
                 * Invokes the layout engine, and uses its results to lay out our
                 * tile elements.
                 *
                 * @param {boolean} tilesInvalidated Whether tiles have been
                 *    added/removed/moved since the last layout. This is to avoid situations
                 *    where tiles are replaced with properties identical to their removed
                 *    counterparts.
                 */
                function layoutDelegate(tilesInvalidated) {
                    var tiles = getTileElements();
                    var props = {
                        tileSpans: getTileSpans(tiles),
                        colCount: getColumnCount(),
                        rowMode: getRowMode(),
                        rowHeight: getRowHeight(),
                        gutter: getGutter()
                    };

                    if (!tilesInvalidated && angular.equals(props, lastLayoutProps)) {
                        return;
                    }

                    var performance =
                        $mdGridLayout(props.colCount, props.tileSpans, tiles)
                        .map(function(tilePositions, rowCount) {
                            return {
                                grid: {
                                    element: element,
                                    style: getGridStyle(props.colCount, rowCount,
                                        props.gutter, props.rowMode, props.rowHeight)
                                },
                                tiles: tilePositions.map(function(ps, i) {
                                    return {
                                        element: angular.element(tiles[i]),
                                        style: getTileStyle(ps.position, ps.spans,
                                            props.colCount, rowCount,
                                            props.gutter, props.rowMode, props.rowHeight)
                                    }
                                })
                            }
                        })
                        .reflow()
                        .performance();

                    // Report layout
                    scope.mdOnLayout({
                        $event: {
                            performance: performance
                        }
                    });

                    lastLayoutProps = props;
                }

                // Use $interpolate to do some simple string interpolation as a convenience.

                var startSymbol = $interpolate.startSymbol();
                var endSymbol = $interpolate.endSymbol();

                // Returns an expression wrapped in the interpolator's start and end symbols.
                function expr(exprStr) {
                    return startSymbol + exprStr + endSymbol;
                }

                // The amount of space a single 1x1 tile would take up (either width or height), used as
                // a basis for other calculations. This consists of taking the base size percent (as would be
                // if evenly dividing the size between cells), and then subtracting the size of one gutter.
                // However, since there are no gutters on the edges, each tile only uses a fration
                // (gutterShare = numGutters / numCells) of the gutter size. (Imagine having one gutter per
                // tile, and then breaking up the extra gutter on the edge evenly among the cells).
                var UNIT = $interpolate(expr('share') + '% - (' + expr('gutter') + ' * ' + expr('gutterShare') + ')');

                // The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.
                // The position comes the size of a 1x1 tile plus gutter for each previous tile in the
                // row/column (offset).
                var POSITION = $interpolate('calc((' + expr('unit') + ' + ' + expr('gutter') + ') * ' + expr('offset') + ')');

                // The actual size of a tile, e.g., width or height, taking rowSpan or colSpan into account.
                // This is computed by multiplying the base unit by the rowSpan/colSpan, and then adding back
                // in the space that the gutter would normally have used (which was already accounted for in
                // the base unit calculation).
                var DIMENSION = $interpolate('calc((' + expr('unit') + ') * ' + expr('span') + ' + (' + expr('span') + ' - 1) * ' + expr('gutter') + ')');

                /**
                 * Gets the styles applied to a tile element described by the given parameters.
                 * @param {{row: number, col: number}} position The row and column indices of the tile.
                 * @param {{row: number, col: number}} spans The rowSpan and colSpan of the tile.
                 * @param {number} colCount The number of columns.
                 * @param {number} rowCount The number of rows.
                 * @param {string} gutter The amount of space between tiles. This will be something like
                 *     '5px' or '2em'.
                 * @param {string} rowMode The row height mode. Can be one of:
                 *     'fixed': all rows have a fixed size, given by rowHeight,
                 *     'ratio': row height defined as a ratio to width, or
                 *     'fit': fit to the grid-list element height, divinding evenly among rows.
                 * @param {string|number} rowHeight The height of a row. This is only used for 'fixed' mode and
                 *     for 'ratio' mode. For 'ratio' mode, this is the *ratio* of width-to-height (e.g., 0.75).
                 * @returns {Object} Map of CSS properties to be applied to the style element. Will define
                 *     values for top, left, width, height, marginTop, and paddingTop.
                 */
                function getTileStyle(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {
                    // TODO(shyndman): There are style caching opportunities here.

                    // Percent of the available horizontal space that one column takes up.
                    var hShare = (1 / colCount) * 100;

                    // Fraction of the gutter size that each column takes up.
                    var hGutterShare = (colCount - 1) / colCount;

                    // Base horizontal size of a column.
                    var hUnit = UNIT({
                        share: hShare,
                        gutterShare: hGutterShare,
                        gutter: gutter
                    });

                    // The width and horizontal position of each tile is always calculated the same way, but the
                    // height and vertical position depends on the rowMode.
                    var style = {
                        left: POSITION({
                            unit: hUnit,
                            offset: position.col,
                            gutter: gutter
                        }),
                        width: DIMENSION({
                            unit: hUnit,
                            span: spans.col,
                            gutter: gutter
                        }),
                        // resets
                        paddingTop: '',
                        marginTop: '',
                        top: '',
                        height: ''
                    };

                    switch (rowMode) {
                        case 'fixed':
                            // In fixed mode, simply use the given rowHeight.
                            style.top = POSITION({
                                unit: rowHeight,
                                offset: position.row,
                                gutter: gutter
                            });
                            style.height = DIMENSION({
                                unit: rowHeight,
                                span: spans.row,
                                gutter: gutter
                            });
                            break;

                        case 'ratio':
                            // Percent of the available vertical space that one row takes up. Here, rowHeight holds
                            // the ratio value. For example, if the width:height ratio is 4:3, rowHeight = 1.333.
                            var vShare = hShare / rowHeight;

                            // Base veritcal size of a row.
                            var vUnit = UNIT({
                                share: vShare,
                                gutterShare: hGutterShare,
                                gutter: gutter
                            });

                            // padidngTop and marginTop are used to maintain the given aspect ratio, as
                            // a percentage-based value for these properties is applied to the *width* of the
                            // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties
                            style.paddingTop = DIMENSION({
                                unit: vUnit,
                                span: spans.row,
                                gutter: gutter
                            });
                            style.marginTop = POSITION({
                                unit: vUnit,
                                offset: position.row,
                                gutter: gutter
                            });
                            break;

                        case 'fit':
                            // Fraction of the gutter size that each column takes up.
                            var vGutterShare = (rowCount - 1) / rowCount;

                            // Percent of the available vertical space that one row takes up.
                            var vShare = (1 / rowCount) * 100;

                            // Base vertical size of a row.
                            var vUnit = UNIT({
                                share: vShare,
                                gutterShare: vGutterShare,
                                gutter: gutter
                            });

                            style.top = POSITION({
                                unit: vUnit,
                                offset: position.row,
                                gutter: gutter
                            });
                            style.height = DIMENSION({
                                unit: vUnit,
                                span: spans.row,
                                gutter: gutter
                            });
                            break;
                    }

                    return style;
                }

                function getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight) {
                    var style = {};

                    switch (rowMode) {
                        case 'fixed':
                            style.height = DIMENSION({
                                unit: rowHeight,
                                span: rowCount,
                                gutter: gutter
                            });
                            style.paddingBottom = '';
                            break;

                        case 'ratio':
                            // rowHeight is width / height
                            var hGutterShare = colCount === 1 ? 0 : (colCount - 1) / colCount,
                                hShare = (1 / colCount) * 100,
                                vShare = hShare * (1 / rowHeight),
                                vUnit = UNIT({
                                    share: vShare,
                                    gutterShare: hGutterShare,
                                    gutter: gutter
                                });

                            style.height = '';
                            style.paddingBottom = DIMENSION({
                                unit: vUnit,
                                span: rowCount,
                                gutter: gutter
                            });
                            break;

                        case 'fit':
                            // noop, as the height is user set
                            break;
                    }

                    return style;
                }

                function getTileElements() {
                    return [].filter.call(element.children(), function(ele) {
                        return ele.tagName == 'MD-GRID-TILE' && !ele.$$mdDestroyed;
                    });
                }

                /**
                 * Gets an array of objects containing the rowspan and colspan for each tile.
                 * @returns {Array<{row: number, col: number}>}
                 */
                function getTileSpans(tileElements) {
                    return [].map.call(tileElements, function(ele) {
                        var ctrl = angular.element(ele).controller('mdGridTile');
                        return {
                            row: parseInt(
                                $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-rowspan'), 10) || 1,
                            col: parseInt(
                                $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-colspan'), 10) || 1
                        };
                    });
                }

                function getColumnCount() {
                    var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, 'md-cols'), 10);
                    if (isNaN(colCount)) {
                        throw 'md-grid-list: md-cols attribute was not found, or contained a non-numeric value';
                    }
                    return colCount;
                }

                function getGutter() {
                    return applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, 'md-gutter') || 1);
                }

                function getRowHeight() {
                    var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');
                    switch (getRowMode()) {
                        case 'fixed':
                            return applyDefaultUnit(rowHeight);
                        case 'ratio':
                            var whRatio = rowHeight.split(':');
                            return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);
                        case 'fit':
                            return 0; // N/A
                    }
                }

                function getRowMode() {
                    var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');
                    if (rowHeight == 'fit') {
                        return 'fit';
                    } else if (rowHeight.indexOf(':') !== -1) {
                        return 'ratio';
                    } else {
                        return 'fixed';
                    }
                }

                function applyDefaultUnit(val) {
                    return /\D$/.test(val) ? val : val + 'px';
                }
            }
        }
        GridListDirective.$inject = ["$interpolate", "$mdConstant", "$mdGridLayout", "$mdMedia"];

        /* @ngInject */
        function GridListController($mdUtil) {
            this.layoutInvalidated = false;
            this.tilesInvalidated = false;
            this.$timeout_ = $mdUtil.nextTick;
            this.layoutDelegate = angular.noop;
        }
        GridListController.$inject = ["$mdUtil"];

        GridListController.prototype = {
            invalidateTiles: function() {
                this.tilesInvalidated = true;
                this.invalidateLayout();
            },

            invalidateLayout: function() {
                if (this.layoutInvalidated) {
                    return;
                }
                this.layoutInvalidated = true;
                this.$timeout_(angular.bind(this, this.layout));
            },

            layout: function() {
                try {
                    this.layoutDelegate(this.tilesInvalidated);
                } finally {
                    this.layoutInvalidated = false;
                    this.tilesInvalidated = false;
                }
            }
        };


        /* @ngInject */
        function GridLayoutFactory($mdUtil) {
            var defaultAnimator = GridTileAnimator;

            /**
             * Set the reflow animator callback
             */
            GridLayout.animateWith = function(customAnimator) {
                defaultAnimator = !angular.isFunction(customAnimator) ? GridTileAnimator : customAnimator;
            };

            return GridLayout;

            /**
             * Publish layout function
             */
            function GridLayout(colCount, tileSpans) {
                var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime;

                layoutTime = $mdUtil.time(function() {
                    layoutInfo = calculateGridFor(colCount, tileSpans);
                });

                return self = {

                    /**
                     * An array of objects describing each tile's position in the grid.
                     */
                    layoutInfo: function() {
                        return layoutInfo;
                    },

                    /**
                     * Maps grid positioning to an element and a set of styles using the
                     * provided updateFn.
                     */
                    map: function(updateFn) {
                        mapTime = $mdUtil.time(function() {
                            var info = self.layoutInfo();
                            gridStyles = updateFn(info.positioning, info.rowCount);
                        });
                        return self;
                    },

                    /**
                     * Default animator simply sets the element.css( <styles> ). An alternate
                     * animator can be provided as an argument. The function has the following
                     * signature:
                     *
                     *    function({grid: {element: JQLite, style: Object}, tiles: Array<{element: JQLite, style: Object}>)
                     */
                    reflow: function(animatorFn) {
                        reflowTime = $mdUtil.time(function() {
                            var animator = animatorFn || defaultAnimator;
                            animator(gridStyles.grid, gridStyles.tiles);
                        });
                        return self;
                    },

                    /**
                     * Timing for the most recent layout run.
                     */
                    performance: function() {
                        return {
                            tileCount: tileSpans.length,
                            layoutTime: layoutTime,
                            mapTime: mapTime,
                            reflowTime: reflowTime,
                            totalTime: layoutTime + mapTime + reflowTime
                        };
                    }
                };
            }

            /**
             * Default Gridlist animator simple sets the css for each element;
             * NOTE: any transitions effects must be manually set in the CSS.
             * e.g.
             *
             *  md-grid-tile {
             *    transition: all 700ms ease-out 50ms;
             *  }
             *
             */
            function GridTileAnimator(grid, tiles) {
                grid.element.css(grid.style);
                tiles.forEach(function(t) {
                    t.element.css(t.style);
                })
            }

            /**
             * Calculates the positions of tiles.
             *
             * The algorithm works as follows:
             *    An Array<Number> with length colCount (spaceTracker) keeps track of
             *    available tiling positions, where elements of value 0 represents an
             *    empty position. Space for a tile is reserved by finding a sequence of
             *    0s with length <= than the tile's colspan. When such a space has been
             *    found, the occupied tile positions are incremented by the tile's
             *    rowspan value, as these positions have become unavailable for that
             *    many rows.
             *
             *    If the end of a row has been reached without finding space for the
             *    tile, spaceTracker's elements are each decremented by 1 to a minimum
             *    of 0. Rows are searched in this fashion until space is found.
             */
            function calculateGridFor(colCount, tileSpans) {
                var curCol = 0,
                    curRow = 0,
                    spaceTracker = newSpaceTracker();

                return {
                    positioning: tileSpans.map(function(spans, i) {
                        return {
                            spans: spans,
                            position: reserveSpace(spans, i)
                        };
                    }),
                    rowCount: curRow + Math.max.apply(Math, spaceTracker)
                };

                function reserveSpace(spans, i) {
                    if (spans.col > colCount) {
                        throw 'md-grid-list: Tile at position ' + i + ' has a colspan ' +
                            '(' + spans.col + ') that exceeds the column count ' +
                            '(' + colCount + ')';
                    }

                    var start = 0,
                        end = 0;

                    // TODO(shyndman): This loop isn't strictly necessary if you can
                    // determine the minimum number of rows before a space opens up. To do
                    // this, recognize that you've iterated across an entire row looking for
                    // space, and if so fast-forward by the minimum rowSpan count. Repeat
                    // until the required space opens up.
                    while (end - start < spans.col) {
                        if (curCol >= colCount) {
                            nextRow();
                            continue;
                        }

                        start = spaceTracker.indexOf(0, curCol);
                        if (start === -1 || (end = findEnd(start + 1)) === -1) {
                            start = end = 0;
                            nextRow();
                            continue;
                        }

                        curCol = end + 1;
                    }

                    adjustRow(start, spans.col, spans.row);
                    curCol = start + spans.col;

                    return {
                        col: start,
                        row: curRow
                    };
                }

                function nextRow() {
                    curCol = 0;
                    curRow++;
                    adjustRow(0, colCount, -1); // Decrement row spans by one
                }

                function adjustRow(from, cols, by) {
                    for (var i = from; i < from + cols; i++) {
                        spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);
                    }
                }

                function findEnd(start) {
                    var i;
                    for (i = start; i < spaceTracker.length; i++) {
                        if (spaceTracker[i] !== 0) {
                            return i;
                        }
                    }

                    if (i === spaceTracker.length) {
                        return i;
                    }
                }

                function newSpaceTracker() {
                    var tracker = [];
                    for (var i = 0; i < colCount; i++) {
                        tracker.push(0);
                    }
                    return tracker;
                }
            }
        }
        GridLayoutFactory.$inject = ["$mdUtil"];

        /**
         * @ngdoc directive
         * @name mdGridTile
         * @module material.components.gridList
         * @restrict E
         * @description
         * Tiles contain the content of an `md-grid-list`. They span one or more grid
         * cells vertically or horizontally, and use `md-grid-tile-{footer,header}` to
         * display secondary content.
         *
         * ### Responsive Attributes
         *
         * The `md-grid-tile` directive supports "responsive" attributes, which allow
         * different `md-rowspan` and `md-colspan` values depending on the currently
         * matching media query (as defined in `$mdConstant.MEDIA`).
         *
         * In order to set a responsive attribute, first define the fallback value with
         * the standard attribute name, then add additional attributes with the
         * following convention: `{base-attribute-name}-{media-query-name}="{value}"`
         * (ie. `md-colspan-sm="4"`)
         *
         * @param {number=} md-colspan The number of columns to span (default 1). Cannot
         *    exceed the number of columns in the grid. Supports interpolation.
         * @param {number=} md-rowspan The number of rows to span (default 1). Supports
         *     interpolation.
         *
         * @usage
         * With header:
         * <hljs lang="html">
         * <md-grid-tile>
         *   <md-grid-tile-header>
         *     <h3>This is a header</h3>
         *   </md-grid-tile-header>
         * </md-grid-tile>
         * </hljs>
         *
         * With footer:
         * <hljs lang="html">
         * <md-grid-tile>
         *   <md-grid-tile-footer>
         *     <h3>This is a footer</h3>
         *   </md-grid-tile-footer>
         * </md-grid-tile>
         * </hljs>
         *
         * Spanning multiple rows/columns:
         * <hljs lang="html">
         * <md-grid-tile md-colspan="2" md-rowspan="3">
         * </md-grid-tile>
         * </hljs>
         *
         * Responsive attributes:
         * <hljs lang="html">
         * <md-grid-tile md-colspan="1" md-colspan-sm="3" md-colspan-md="5">
         * </md-grid-tile>
         * </hljs>
         */
        function GridTileDirective($mdMedia) {
            return {
                restrict: 'E',
                require: '^mdGridList',
                template: '<figure ng-transclude></figure>',
                transclude: true,
                scope: {},
                // Simple controller that exposes attributes to the grid directive
                controller: ["$attrs", function($attrs) {
                    this.$attrs = $attrs;
                }],
                link: postLink
            };

            function postLink(scope, element, attrs, gridCtrl) {
                // Apply semantics
                element.attr('role', 'listitem');

                // If our colspan or rowspan changes, trigger a layout
                var unwatchAttrs = $mdMedia.watchResponsiveAttributes(['md-colspan', 'md-rowspan'],
                    attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));

                // Tile registration/deregistration
                gridCtrl.invalidateTiles();
                scope.$on('$destroy', function() {
                    // Mark the tile as destroyed so it is no longer considered in layout,
                    // even if the DOM element sticks around (like during a leave animation)
                    element[0].$$mdDestroyed = true;
                    unwatchAttrs();
                    gridCtrl.invalidateLayout();
                });

                if (angular.isDefined(scope.$parent.$index)) {
                    scope.$watch(function() {
                            return scope.$parent.$index;
                        },
                        function indexChanged(newIdx, oldIdx) {
                            if (newIdx === oldIdx) {
                                return;
                            }
                            gridCtrl.invalidateTiles();
                        });
                }
            }
        }
        GridTileDirective.$inject = ["$mdMedia"];


        function GridTileCaptionDirective() {
            return {
                template: '<figcaption ng-transclude></figcaption>',
                transclude: true
            };
        }

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.icon
         * @description
         * Icon
         */
        angular.module('material.components.icon', [
            'material.core'
        ]);

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.input
         */

        angular.module('material.components.input', [
                'material.core'
            ])
            .directive('mdInputContainer', mdInputContainerDirective)
            .directive('label', labelDirective)
            .directive('input', inputTextareaDirective)
            .directive('textarea', inputTextareaDirective)
            .directive('mdMaxlength', mdMaxlengthDirective)
            .directive('placeholder', placeholderDirective)
            .directive('ngMessages', ngMessagesDirective)
            .directive('ngMessage', ngMessageDirective)
            .directive('ngMessageExp', ngMessageDirective)

        .animation('.md-input-invalid', mdInputInvalidMessagesAnimation)
            .animation('.md-input-messages-animation', ngMessagesAnimation)
            .animation('.md-input-message-animation', ngMessageAnimation);

        /**
         * @ngdoc directive
         * @name mdInputContainer
         * @module material.components.input
         *
         * @restrict E
         *
         * @description
         * `<md-input-container>` is the parent of any input or textarea element.
         *
         * Input and textarea elements will not behave properly unless the md-input-container
         * parent is provided.
         *
         * @param md-is-error {expression=} When the given expression evaluates to true, the input container
         *   will go into error state. Defaults to erroring if the input has been touched and is invalid.
         * @param md-no-float {boolean=} When present, placeholders will not be converted to floating
         *   labels.
         *
         * @usage
         * <hljs lang="html">
         *
         * <md-input-container>
         *   <label>Username</label>
         *   <input type="text" ng-model="user.name">
         * </md-input-container>
         *
         * <md-input-container>
         *   <label>Description</label>
         *   <textarea ng-model="user.description"></textarea>
         * </md-input-container>
         *
         * </hljs>
         */
        function mdInputContainerDirective($mdTheming, $parse) {
            ContainerCtrl.$inject = ["$scope", "$element", "$attrs", "$animate"];
            return {
                restrict: 'E',
                link: postLink,
                controller: ContainerCtrl
            };

            function postLink(scope, element, attr) {
                $mdTheming(element);
                if (element.find('md-icon').length) element.addClass('md-has-icon');
            }

            function ContainerCtrl($scope, $element, $attrs, $animate) {
                var self = this;

                self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);

                self.delegateClick = function() {
                    self.input.focus();
                };
                self.element = $element;
                self.setFocused = function(isFocused) {
                    $element.toggleClass('md-input-focused', !!isFocused);
                };
                self.setHasValue = function(hasValue) {
                    $element.toggleClass('md-input-has-value', !!hasValue);
                };
                self.setHasPlaceholder = function(hasPlaceholder) {
                    $element.toggleClass('md-input-has-placeholder', !!hasPlaceholder);
                };
                self.setInvalid = function(isInvalid) {
                    if (isInvalid) {
                        $animate.addClass($element, 'md-input-invalid');
                    } else {
                        $animate.removeClass($element, 'md-input-invalid');
                    }
                };
                $scope.$watch(function() {
                    return self.label && self.input;
                }, function(hasLabelAndInput) {
                    if (hasLabelAndInput && !self.label.attr('for')) {
                        self.label.attr('for', self.input.attr('id'));
                    }
                });
            }
        }
        mdInputContainerDirective.$inject = ["$mdTheming", "$parse"];

        function labelDirective() {
            return {
                restrict: 'E',
                require: '^?mdInputContainer',
                link: function(scope, element, attr, containerCtrl) {
                    if (!containerCtrl || attr.mdNoFloat || element.hasClass('md-container-ignore')) return;

                    containerCtrl.label = element;
                    scope.$on('$destroy', function() {
                        containerCtrl.label = null;
                    });
                }
            };
        }

        /**
         * @ngdoc directive
         * @name mdInput
         * @restrict E
         * @module material.components.input
         *
         * @description
         * You can use any `<input>` or `<textarea>` element as a child of an `<md-input-container>`. This
         * allows you to build complex forms for data entry.
         *
         * @param {number=} md-maxlength The maximum number of characters allowed in this input. If this is
         *   specified, a character counter will be shown underneath the input.<br/><br/>
         *   The purpose of **`md-maxlength`** is exactly to show the max length counter text. If you don't
         *   want the counter text and only need "plain" validation, you can use the "simple" `ng-maxlength`
         *   or maxlength attributes.
         * @param {string=} aria-label Aria-label is required when no label is present.  A warning message
         *   will be logged in the console if not present.
         * @param {string=} placeholder An alternative approach to using aria-label when the label is not
         *   PRESENT. The placeholder text is copied to the aria-label attribute.
         * @param md-no-autogrow {boolean=} When present, textareas will not grow automatically.
         * @param md-detect-hidden {boolean=} When present, textareas will be sized properly when they are
         *   revealed after being hidden. This is off by default for performance reasons because it
         *   guarantees a reflow every digest cycle.
         *
         * @usage
         * <hljs lang="html">
         * <md-input-container>
         *   <label>Color</label>
         *   <input type="text" ng-model="color" required md-maxlength="10">
         * </md-input-container>
         * </hljs>
         *
         * <h3>With Errors</h3>
         *
         * `md-input-container` also supports errors using the standard `ng-messages` directives and
         * animates the messages when they become visible using from the `ngEnter`/`ngLeave` events or
         * the `ngShow`/`ngHide` events.
         *
         * By default, the messages will be hidden until the input is in an error state. This is based off
         * of the `md-is-error` expression of the `md-input-container`. This gives the user a chance to
         * fill out the form before the errors become visible.
         *
         * <hljs lang="html">
         * <form name="colorForm">
         *   <md-input-container>
         *     <label>Favorite Color</label>
         *     <input name="favoriteColor" ng-model="favoriteColor" required>
         *     <div ng-messages="userForm.lastName.$error">
         *       <div ng-message="required">This is required!</div>
         *     </div>
         *   </md-input-container>
         * </form>
         * </hljs>
         *
         * We automatically disable this auto-hiding functionality if you provide any of the following
         * visibility directives on the `ng-messages` container:
         *
         *  - `ng-if`
         *  - `ng-show`/`ng-hide`
         *  - `ng-switch-when`/`ng-switch-default`
         *
         * You can also disable this functionality manually by adding the `md-auto-hide="false"` expression
         * to the `ng-messages` container. This may be helpful if you always want to see the error messages
         * or if you are building your own visibilty directive.
         *
         * _<b>Note:</b> The `md-auto-hide` attribute is a static string that is  only checked upon
         * initialization of the `ng-messages` directive to see if it equals the string `false`._
         *
         * <hljs lang="html">
         * <form name="userForm">
         *   <md-input-container>
         *     <label>Last Name</label>
         *     <input name="lastName" ng-model="lastName" required md-maxlength="10" minlength="4">
         *     <div ng-messages="userForm.lastName.$error" ng-show="userForm.lastName.$dirty">
         *       <div ng-message="required">This is required!</div>
         *       <div ng-message="md-maxlength">That's too long!</div>
         *       <div ng-message="minlength">That's too short!</div>
         *     </div>
         *   </md-input-container>
         *   <md-input-container>
         *     <label>Biography</label>
         *     <textarea name="bio" ng-model="biography" required md-maxlength="150"></textarea>
         *     <div ng-messages="userForm.bio.$error" ng-show="userForm.bio.$dirty">
         *       <div ng-message="required">This is required!</div>
         *       <div ng-message="md-maxlength">That's too long!</div>
         *     </div>
         *   </md-input-container>
         *   <md-input-container>
         *     <input aria-label='title' ng-model='title'>
         *   </md-input-container>
         *   <md-input-container>
         *     <input placeholder='title' ng-model='title'>
         *   </md-input-container>
         * </form>
         * </hljs>
         *
         * <h3>Notes</h3>
         *
         * - Requires [ngMessages](https://docs.angularjs.org/api/ngMessages).
         * - Behaves like the [AngularJS input directive](https://docs.angularjs.org/api/ng/directive/input).
         *
         * The `md-input` and `md-input-container` directives use very specific positioning to achieve the
         * error animation effects. Therefore, it is *not* advised to use the Layout system inside of the
         * `<md-input-container>` tags. Instead, use relative or absolute positioning.
         *
         */

        function inputTextareaDirective($mdUtil, $window, $mdAria) {
            return {
                restrict: 'E',
                require: ['^?mdInputContainer', '?ngModel'],
                link: postLink
            };

            function postLink(scope, element, attr, ctrls) {

                var containerCtrl = ctrls[0];
                var hasNgModel = !!ctrls[1];
                var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();
                var isReadonly = angular.isDefined(attr.readonly);

                if (!containerCtrl) return;
                if (containerCtrl.input) {
                    throw new Error("<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!");
                }
                containerCtrl.input = element;

                // Add an error spacer div after our input to provide space for the char counter and any ng-messages
                var errorsSpacer = angular.element('<div class="md-errors-spacer">');
                element.after(errorsSpacer);

                if (!containerCtrl.label) {
                    $mdAria.expect(element, 'aria-label', element.attr('placeholder'));
                }

                element.addClass('md-input');
                if (!element.attr('id')) {
                    element.attr('id', 'input_' + $mdUtil.nextUid());
                }

                if (element[0].tagName.toLowerCase() === 'textarea') {
                    setupTextarea();
                }

                // If the input doesn't have an ngModel, it may have a static value. For that case,
                // we have to do one initial check to determine if the container should be in the
                // "has a value" state.
                if (!hasNgModel) {
                    inputCheckValue();
                }

                var isErrorGetter = containerCtrl.isErrorGetter || function() {
                    return ngModelCtrl.$invalid && (
                        ngModelCtrl.$touched ||
                        (ngModelCtrl.$$parentForm && ngModelCtrl.$$parentForm.$submitted)
                    );
                };

                scope.$watch(isErrorGetter, containerCtrl.setInvalid);

                ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);
                ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);

                element.on('input', inputCheckValue);

                if (!isReadonly) {
                    element
                        .on('focus', function(ev) {
                            containerCtrl.setFocused(true);
                        })
                        .on('blur', function(ev) {
                            containerCtrl.setFocused(false);
                            inputCheckValue();
                        });

                }

                //ngModelCtrl.$setTouched();
                //if( ngModelCtrl.$invalid ) containerCtrl.setInvalid();

                scope.$on('$destroy', function() {
                    containerCtrl.setFocused(false);
                    containerCtrl.setHasValue(false);
                    containerCtrl.input = null;
                });

                /**
                 *
                 */
                function ngModelPipelineCheckValue(arg) {
                    containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));
                    return arg;
                }

                function inputCheckValue() {
                    // An input's value counts if its length > 0,
                    // or if the input's validity state says it has bad input (eg string in a number input)
                    containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity || {}).badInput);
                }

                function setupTextarea() {
                    if (angular.isDefined(element.attr('md-no-autogrow'))) {
                        return;
                    }

                    var node = element[0];
                    var container = containerCtrl.element[0];

                    var min_rows = NaN;
                    var lineHeight = null;
                    // can't check if height was or not explicity set,
                    // so rows attribute will take precedence if present
                    if (node.hasAttribute('rows')) {
                        min_rows = parseInt(node.getAttribute('rows'));
                    }

                    var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);

                    function pipelineListener(value) {
                        onChangeTextarea();
                        return value;
                    }

                    if (ngModelCtrl) {
                        ngModelCtrl.$formatters.push(pipelineListener);
                        ngModelCtrl.$viewChangeListeners.push(pipelineListener);
                    } else {
                        onChangeTextarea();
                    }
                    element.on('keydown input', onChangeTextarea);

                    if (isNaN(min_rows)) {
                        element.attr('rows', '1');

                        element.on('scroll', onScroll);
                    }

                    angular.element($window).on('resize', onChangeTextarea);

                    scope.$on('$destroy', function() {
                        angular.element($window).off('resize', onChangeTextarea);
                    });

                    function growTextarea() {
                        // sets the md-input-container height to avoid jumping around
                        container.style.height = container.offsetHeight + 'px';

                        // temporarily disables element's flex so its height 'runs free'
                        element.addClass('md-no-flex');

                        if (isNaN(min_rows)) {
                            node.style.height = "auto";
                            node.scrollTop = 0;
                            var height = getHeight();
                            if (height) node.style.height = height + 'px';
                        } else {
                            node.setAttribute("rows", 1);

                            if (!lineHeight) {
                                node.style.minHeight = '0';

                                lineHeight = element.prop('clientHeight');

                                node.style.minHeight = null;
                            }

                            var rows = Math.min(min_rows, Math.round(node.scrollHeight / lineHeight));
                            node.setAttribute("rows", rows);
                            node.style.height = lineHeight * rows + "px";
                        }

                        // reset everything back to normal
                        element.removeClass('md-no-flex');
                        container.style.height = 'auto';
                    }

                    function getHeight() {
                        var line = node.scrollHeight - node.offsetHeight;
                        return node.offsetHeight + (line > 0 ? line : 0);
                    }

                    function onScroll(e) {
                        node.scrollTop = 0;
                        // for smooth new line adding
                        var line = node.scrollHeight - node.offsetHeight;
                        var height = node.offsetHeight + line;
                        node.style.height = height + 'px';
                    }

                    // Attach a watcher to detect when the textarea gets shown.
                    if (angular.isDefined(element.attr('md-detect-hidden'))) {

                        var handleHiddenChange = function() {
                            var wasHidden = false;

                            return function() {
                                var isHidden = node.offsetHeight === 0;

                                if (isHidden === false && wasHidden === true) {
                                    growTextarea();
                                }

                                wasHidden = isHidden;
                            };
                        }();

                        // Check every digest cycle whether the visibility of the textarea has changed.
                        // Queue up to run after the digest cycle is complete.
                        scope.$watch(function() {
                            $mdUtil.nextTick(handleHiddenChange, false);
                            return true;
                        });
                    }
                }
            }
        }
        inputTextareaDirective.$inject = ["$mdUtil", "$window", "$mdAria"];

        function mdMaxlengthDirective($animate, $mdUtil) {
            return {
                restrict: 'A',
                require: ['ngModel', '^mdInputContainer'],
                link: postLink
            };

            function postLink(scope, element, attr, ctrls) {
                var maxlength;
                var ngModelCtrl = ctrls[0];
                var containerCtrl = ctrls[1];
                var charCountEl, errorsSpacer;

                // Wait until the next tick to ensure that the input has setup the errors spacer where we will
                // append our counter
                $mdUtil.nextTick(function() {
                    errorsSpacer = angular.element(containerCtrl.element[0].querySelector('.md-errors-spacer'));
                    charCountEl = angular.element('<div class="md-char-counter">');

                    // Append our character counter inside the errors spacer
                    errorsSpacer.append(charCountEl);

                    // Stop model from trimming. This makes it so whitespace
                    // over the maxlength still counts as invalid.
                    attr.$set('ngTrim', 'false');

                    ngModelCtrl.$formatters.push(renderCharCount);
                    ngModelCtrl.$viewChangeListeners.push(renderCharCount);
                    element.on('input keydown keyup', function() {
                        renderCharCount(); //make sure it's called with no args
                    });

                    scope.$watch(attr.mdMaxlength, function(value) {
                        maxlength = value;
                        if (angular.isNumber(value) && value > 0) {
                            if (!charCountEl.parent().length) {
                                $animate.enter(charCountEl, errorsSpacer);
                            }
                            renderCharCount();
                        } else {
                            $animate.leave(charCountEl);
                        }
                    });

                    ngModelCtrl.$validators['md-maxlength'] = function(modelValue, viewValue) {
                        if (!angular.isNumber(maxlength) || maxlength < 0) {
                            return true;
                        }
                        return (modelValue || element.val() || viewValue || '').length <= maxlength;
                    };
                });

                function renderCharCount(value) {
                    // If we have not been appended to the body yet; do not render
                    if (!charCountEl.parent) {
                        return value;
                    }

                    // Force the value into a string since it may be a number,
                    // which does not have a length property.
                    charCountEl.text(String(element.val() || value || '').length + '/' + maxlength);
                    return value;
                }
            }
        }
        mdMaxlengthDirective.$inject = ["$animate", "$mdUtil"];

        function placeholderDirective($log) {
            return {
                restrict: 'A',
                require: '^^?mdInputContainer',
                priority: 200,
                link: postLink
            };

            function postLink(scope, element, attr, inputContainer) {
                // If there is no input container, just return
                if (!inputContainer) return;

                var label = inputContainer.element.find('label');
                var hasNoFloat = angular.isDefined(inputContainer.element.attr('md-no-float'));

                // If we have a label, or they specify the md-no-float attribute, just return
                if ((label && label.length) || hasNoFloat) {
                    // Add a placeholder class so we can target it in the CSS
                    inputContainer.setHasPlaceholder(true);
                    return;
                }

                // Otherwise, grab/remove the placeholder
                var placeholderText = attr.placeholder;
                element.removeAttr('placeholder');

                // And add the placeholder text as a separate label
                if (inputContainer.input && inputContainer.input[0].nodeName != 'MD-SELECT') {
                    var placeholder = '<label ng-click="delegateClick()">' + placeholderText + '</label>';

                    inputContainer.element.addClass('md-icon-float');
                    inputContainer.element.prepend(placeholder);
                }
            }
        }
        placeholderDirective.$inject = ["$log"];

        var visibilityDirectives = ['ngIf', 'ngShow', 'ngHide', 'ngSwitchWhen', 'ngSwitchDefault'];

        function ngMessagesDirective() {
            return {
                restrict: 'EA',
                link: postLink,

                // This is optional because we don't want target *all* ngMessage instances, just those inside of
                // mdInputContainer.
                require: '^^?mdInputContainer'
            };

            function postLink(scope, element, attrs, inputContainer) {
                // If we are not a child of an input container, don't do anything
                if (!inputContainer) return;

                // Add our animation class
                element.toggleClass('md-input-messages-animation', true);

                // Add our md-auto-hide class to automatically hide/show messages when container is invalid
                element.toggleClass('md-auto-hide', true);

                // If we see some known visibility directives, remove the md-auto-hide class
                if (attrs.mdAutoHide == 'false' || hasVisibiltyDirective(attrs)) {
                    element.toggleClass('md-auto-hide', false);
                }
            }

            function hasVisibiltyDirective(attrs) {
                return visibilityDirectives.some(function(attr) {
                    return attrs[attr];
                });
            }
        }

        function ngMessageDirective($mdUtil) {
            return {
                restrict: 'EA',
                compile: compile,
                priority: 100
            };

            function compile(element) {
                var inputContainer = $mdUtil.getClosest(element, "md-input-container");

                // If we are not a child of an input container, don't do anything
                if (!inputContainer) return;

                // Add our animation class
                element.toggleClass('md-input-message-animation', true);

                return {};
            }
        }
        ngMessageDirective.$inject = ["$mdUtil"];

        function mdInputInvalidMessagesAnimation($q, $animateCss) {
            return {
                addClass: function(element, className, done) {
                    var messages = getMessagesElement(element);

                    if (className == "md-input-invalid" && messages.hasClass('md-auto-hide')) {
                        showInputMessages(element, $animateCss, $q).finally(done);
                    }
                }

                // NOTE: We do not need the removeClass method, because the message ng-leave animation will fire
            }
        }
        mdInputInvalidMessagesAnimation.$inject = ["$q", "$animateCss"];

        function ngMessagesAnimation($q, $animateCss) {
            return {
                enter: function(element, done) {
                    showInputMessages(element, $animateCss, $q).finally(done);
                },

                leave: function(element, done) {
                    hideInputMessages(element, $animateCss, $q).finally(done);
                },

                addClass: function(element, className, done) {
                    if (className == "ng-hide") {
                        hideInputMessages(element, $animateCss, $q).finally(done);
                    } else {
                        done();
                    }
                },

                removeClass: function(element, className, done) {
                    if (className == "ng-hide") {
                        showInputMessages(element, $animateCss, $q).finally(done);
                    } else {
                        done();
                    }
                }
            }
        }
        ngMessagesAnimation.$inject = ["$q", "$animateCss"];

        function ngMessageAnimation($animateCss) {
            return {
                enter: function(element, done) {
                    var messages = getMessagesElement(element);

                    // If we have the md-auto-hide class, the md-input-invalid animation will fire, so we can skip
                    if (messages.hasClass('md-auto-hide')) {
                        done();
                        return;
                    }

                    return showMessage(element, $animateCss);
                },

                leave: function(element, done) {
                    return hideMessage(element, $animateCss);
                }
            }
        }
        ngMessageAnimation.$inject = ["$animateCss"];

        function showInputMessages(element, $animateCss, $q) {
            var animators = [],
                animator;
            var messages = getMessagesElement(element);

            angular.forEach(messages.children(), function(child) {
                animator = showMessage(angular.element(child), $animateCss);

                animators.push(animator.start());
            });

            return $q.all(animators);
        }

        function hideInputMessages(element, $animateCss, $q) {
            var animators = [],
                animator;
            var messages = getMessagesElement(element);

            angular.forEach(messages.children(), function(child) {
                animator = hideMessage(angular.element(child), $animateCss);

                animators.push(animator.start());
            });

            return $q.all(animators);
        }

        function showMessage(element, $animateCss) {
            var height = element[0].offsetHeight;

            return $animateCss(element, {
                event: 'enter',
                structural: true,
                from: {
                    "opacity": 0,
                    "margin-top": -height + "px"
                },
                to: {
                    "opacity": 1,
                    "margin-top": "0"
                },
                duration: 0.3
            });
        }

        function hideMessage(element, $animateCss) {
            var height = element[0].offsetHeight;
            var styles = window.getComputedStyle(element[0]);

            // If we are already hidden, just return an empty animation
            if (styles.opacity == 0) {
                return $animateCss(element, {});
            }

            // Otherwise, animate
            return $animateCss(element, {
                event: 'leave',
                structural: true,
                from: {
                    "opacity": 1,
                    "margin-top": 0
                },
                to: {
                    "opacity": 0,
                    "margin-top": -height + "px"
                },
                duration: 0.3
            });
        }

        function getInputElement(element) {
            var inputContainer = element.controller('mdInputContainer');

            return inputContainer.element;
        }

        function getMessagesElement(element) {
            var input = getInputElement(element);
            var selector = 'ng-messages,data-ng-messages,x-ng-messages,' +
                '[ng-messages],[data-ng-messages],[x-ng-messages]';

            return angular.element(input[0].querySelector(selector));
        }

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.list
         * @description
         * List module
         */
        angular.module('material.components.list', [
                'material.core'
            ])
            .controller('MdListController', MdListController)
            .directive('mdList', mdListDirective)
            .directive('mdListItem', mdListItemDirective);

        /**
         * @ngdoc directive
         * @name mdList
         * @module material.components.list
         *
         * @restrict E
         *
         * @description
         * The `<md-list>` directive is a list container for 1..n `<md-list-item>` tags.
         *
         * @usage
         * <hljs lang="html">
         * <md-list>
         *   <md-list-item class="md-2-line" ng-repeat="item in todos">
         *     <md-checkbox ng-model="item.done"></md-checkbox>
         *     <div class="md-list-item-text">
         *       <h3>{{item.title}}</h3>
         *       <p>{{item.description}}</p>
         *     </div>
         *   </md-list-item>
         * </md-list>
         * </hljs>
         */

        function mdListDirective($mdTheming) {
            return {
                restrict: 'E',
                compile: function(tEl) {
                    tEl[0].setAttribute('role', 'list');
                    return $mdTheming;
                }
            };
        }
        mdListDirective.$inject = ["$mdTheming"];
        /**
         * @ngdoc directive
         * @name mdListItem
         * @module material.components.list
         *
         * @restrict E
         *
         * @description
         * The `<md-list-item>` directive is a container intended for row items in a `<md-list>` container.
         * The `md-2-line` and `md-3-line` classes can be added to a `<md-list-item>` 
         * to increase the height with 22px and 40px respectively.
         *
         * ## CSS
         * `.md-avatar` - class for image avatars
         *
         * `.md-avatar-icon` - class for icon avatars
         *
         * `.md-offset` - on content without an avatar
         *
         * @usage
         * <hljs lang="html">
         *  <md-list>
         *    <md-list-item>
         *      <img class="md-avatar" ng-src="path/to/img"/>
         *      <span>Item content in list</span>
         *    </md-list-item>
         *    <md-list-item>
         *      <md-icon class="md-avatar-icon" md-svg-icon="communication:phone"></md-icon>
         *      <span>Item content in list</span>
         *    </md-list-item>
         *  </md-list>
         * </hljs>
         *
         * _**Note:** We automatically apply special styling when the inner contents are wrapped inside
         * of a `<md-button>` tag. This styling is automatically ignored for `class="md-secondary"` buttons
         * and you can include a class of `class="md-exclude"` if you need to use a non-secondary button
         * that is inside the list, but does not wrap the contents._
         */
        function mdListItemDirective($mdAria, $mdConstant, $mdUtil, $timeout) {
            var proxiedTypes = ['md-checkbox', 'md-switch'];
            return {
                restrict: 'E',
                controller: 'MdListController',
                compile: function(tEl, tAttrs) {
                    // Check for proxy controls (no ng-click on parent, and a control inside)
                    var secondaryItem = tEl[0].querySelector('.md-secondary');
                    var hasProxiedElement;
                    var proxyElement;

                    tEl[0].setAttribute('role', 'listitem');

                    if (tAttrs.ngClick || tAttrs.ngHref || tAttrs.href || tAttrs.uiSref || tAttrs.ngAttrUiSref) {
                        wrapIn('button');
                    } else {
                        for (var i = 0, type; type = proxiedTypes[i]; ++i) {
                            if (proxyElement = tEl[0].querySelector(type)) {
                                hasProxiedElement = true;
                                break;
                            }
                        }
                        if (hasProxiedElement) {
                            wrapIn('div');
                        } else if (!tEl[0].querySelector('md-button:not(.md-secondary):not(.md-exclude)')) {
                            tEl.addClass('md-no-proxy');
                        }
                    }
                    wrapSecondary();
                    setupToggleAria();


                    function setupToggleAria() {
                        var toggleTypes = ['md-switch', 'md-checkbox'];
                        var toggle;

                        for (var i = 0, toggleType; toggleType = toggleTypes[i]; ++i) {
                            if (toggle = tEl.find(toggleType)[0]) {
                                if (!toggle.hasAttribute('aria-label')) {
                                    var p = tEl.find('p')[0];
                                    if (!p) return;
                                    toggle.setAttribute('aria-label', 'Toggle ' + p.textContent);
                                }
                            }
                        }
                    }

                    function wrapIn(type) {
                        var container;
                        if (type == 'div') {
                            container = angular.element('<div class="md-no-style md-list-item-inner">');
                            container.append(tEl.contents());
                            tEl.addClass('md-proxy-focus');
                        } else {
                            container = angular.element('<md-button class="md-no-style"><div class="md-list-item-inner"></div></md-button>');
                            copyAttributes(tEl[0], container[0]);
                            container.children().eq(0).append(tEl.contents());
                        }

                        tEl[0].setAttribute('tabindex', '-1');
                        tEl.append(container);
                    }

                    function wrapSecondary() {
                        if (secondaryItem && !isButton(secondaryItem) && secondaryItem.hasAttribute('ng-click')) {
                            $mdAria.expect(secondaryItem, 'aria-label');
                            var buttonWrapper = angular.element('<md-button class="md-secondary-container md-icon-button">');
                            copyAttributes(secondaryItem, buttonWrapper[0]);
                            secondaryItem.setAttribute('tabindex', '-1');
                            secondaryItem.classList.remove('md-secondary');
                            buttonWrapper.append(secondaryItem);
                            secondaryItem = buttonWrapper[0];
                        }

                        // Check for a secondary item and move it outside
                        if (secondaryItem && (
                                secondaryItem.hasAttribute('ng-click') ||
                                (tAttrs.ngClick &&
                                    isProxiedElement(secondaryItem))
                            )) {
                            tEl.addClass('md-with-secondary');
                            tEl.append(secondaryItem);
                        }
                    }

                    function copyAttributes(item, wrapper) {
                        var copiedAttrs = ['ng-if', 'ng-click', 'aria-label', 'ng-disabled',
                            'ui-sref', 'href', 'ng-href', 'ng-attr-ui-sref'
                        ];
                        angular.forEach(copiedAttrs, function(attr) {
                            if (item.hasAttribute(attr)) {
                                wrapper.setAttribute(attr, item.getAttribute(attr));
                                item.removeAttribute(attr);
                            }
                        });
                    }

                    function isProxiedElement(el) {
                        return proxiedTypes.indexOf(el.nodeName.toLowerCase()) != -1;
                    }

                    function isButton(el) {
                        var nodeName = el.nodeName.toUpperCase();

                        return nodeName == "MD-BUTTON" || nodeName == "BUTTON";
                    }

                    return postLink;

                    function postLink($scope, $element, $attr, ctrl) {

                        var proxies = [],
                            firstChild = $element[0].firstElementChild,
                            hasClick = firstChild && hasClickEvent(firstChild);

                        computeProxies();
                        computeClickable();

                        if ($element.hasClass('md-proxy-focus') && proxies.length) {
                            angular.forEach(proxies, function(proxy) {
                                proxy = angular.element(proxy);

                                $scope.mouseActive = false;
                                proxy.on('mousedown', function() {
                                        $scope.mouseActive = true;
                                        $timeout(function() {
                                            $scope.mouseActive = false;
                                        }, 100);
                                    })
                                    .on('focus', function() {
                                        if ($scope.mouseActive === false) {
                                            $element.addClass('md-focused');
                                        }
                                        proxy.on('blur', function proxyOnBlur() {
                                            $element.removeClass('md-focused');
                                            proxy.off('blur', proxyOnBlur);
                                        });
                                    });
                            });
                        }

                        function hasClickEvent(element) {
                            var attr = element.attributes;
                            for (var i = 0; i < attr.length; i++) {
                                if ($attr.$normalize(attr[i].name) === 'ngClick') return true;
                            }
                            return false;
                        }

                        function computeProxies() {
                            var children = $element.children();
                            if (children.length && !children[0].hasAttribute('ng-click')) {
                                angular.forEach(proxiedTypes, function(type) {
                                    angular.forEach(firstChild.querySelectorAll(type), function(child) {
                                        proxies.push(child);
                                    });
                                });
                            }
                        }

                        function computeClickable() {
                            if (proxies.length == 1 || hasClick) {
                                $element.addClass('md-clickable');

                                if (!hasClick) {
                                    ctrl.attachRipple($scope, angular.element($element[0].querySelector('.md-no-style')));
                                }
                            }
                        }

                        if (!hasClick && !proxies.length) {
                            firstChild && firstChild.addEventListener('keypress', function(e) {
                                if (e.target.nodeName != 'INPUT' && e.target.nodeName != 'TEXTAREA') {
                                    var keyCode = e.which || e.keyCode;
                                    if (keyCode == $mdConstant.KEY_CODE.SPACE) {
                                        if (firstChild) {
                                            firstChild.click();
                                            e.preventDefault();
                                            e.stopPropagation();
                                        }
                                    }
                                }
                            });
                        }

                        $element.off('click');
                        $element.off('keypress');

                        if (proxies.length == 1 && firstChild) {
                            $element.children().eq(0).on('click', function(e) {
                                var parentButton = $mdUtil.getClosest(e.target, 'BUTTON');
                                if (!parentButton && firstChild.contains(e.target)) {
                                    angular.forEach(proxies, function(proxy) {
                                        if (e.target !== proxy && !proxy.contains(e.target)) {
                                            angular.element(proxy).triggerHandler('click');
                                        }
                                    });
                                }
                            });
                        }
                    }
                }
            };
        }
        mdListItemDirective.$inject = ["$mdAria", "$mdConstant", "$mdUtil", "$timeout"];

        /*
         * @private
         * @ngdoc controller
         * @name MdListController
         * @module material.components.list
         *
         */
        function MdListController($scope, $element, $mdListInkRipple) {
            var ctrl = this;
            ctrl.attachRipple = attachRipple;

            function attachRipple(scope, element) {
                var options = {};
                $mdListInkRipple.attach(scope, element, options);
            }
        }
        MdListController.$inject = ["$scope", "$element", "$mdListInkRipple"];


    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.menu
         */

        angular.module('material.components.menu', [
            'material.core',
            'material.components.backdrop'
        ]);

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.menu-bar
         */

        angular.module('material.components.menuBar', [
            'material.core',
            'material.components.menu'
        ]);

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.progressCircular
         * @description Circular Progress module!
         */
        angular.module('material.components.progressCircular', [
                'material.core'
            ])
            .directive('mdProgressCircular', MdProgressCircularDirective);

        /**
         * @ngdoc directive
         * @name mdProgressCircular
         * @module material.components.progressCircular
         * @restrict E
         *
         * @description
         * The circular progress directive is used to make loading content in your app as delightful and
         * painless as possible by minimizing the amount of visual change a user sees before they can view
         * and interact with content.
         *
         * For operations where the percentage of the operation completed can be determined, use a
         * determinate indicator. They give users a quick sense of how long an operation will take.
         *
         * For operations where the user is asked to wait a moment while something finishes up, and it’s
         * not necessary to expose what's happening behind the scenes and how long it will take, use an
         * indeterminate indicator.
         *
         * @param {string} md-mode Select from one of two modes: **'determinate'** and **'indeterminate'**.
         *
         * Note: if the `md-mode` value is set as undefined or specified as not 1 of the two (2) valid modes, then `.ng-hide`
         * will be auto-applied as a style to the component.
         *
         * Note: if not configured, the `md-mode="indeterminate"` will be auto injected as an attribute.
         * If `value=""` is also specified, however, then `md-mode="determinate"` would be auto-injected instead.
         * @param {number=} value In determinate mode, this number represents the percentage of the
         *     circular progress. Default: 0
         * @param {number=} md-diameter This specifies the diamter of the circular progress. The value
         * may be a percentage (eg '25%') or a pixel-size value (eg '48'). If this attribute is
         * not present then a default value of '48px' is assumed.
         *
         * @usage
         * <hljs lang="html">
         * <md-progress-circular md-mode="determinate" value="..."></md-progress-circular>
         *
         * <md-progress-circular md-mode="determinate" ng-value="..."></md-progress-circular>
         *
         * <md-progress-circular md-mode="determinate" value="..." md-diameter="100"></md-progress-circular>
         *
         * <md-progress-circular md-mode="indeterminate"></md-progress-circular>
         * </hljs>
         */
        function MdProgressCircularDirective($mdTheming, $mdUtil, $log) {
            var DEFAULT_PROGRESS_SIZE = 100;
            var DEFAULT_SCALING = 0.5;

            var MODE_DETERMINATE = "determinate",
                MODE_INDETERMINATE = "indeterminate";


            return {
                restrict: 'E',
                scope: true,
                template:
                // The progress 'circle' is composed of two half-circles: the left side and the right
                // side. Each side has CSS applied to 'fill-in' the half-circle to the appropriate progress.
                    '<div class="md-scale-wrapper">' +
                    '<div class="md-spinner-wrapper">' +
                    '<div class="md-inner">' +
                    '<div class="md-gap"></div>' +
                    '<div class="md-left">' +
                    '<div class="md-half-circle"></div>' +
                    '</div>' +
                    '<div class="md-right">' +
                    '<div class="md-half-circle"></div>' +
                    '</div>' +
                    '</div>' +
                    '</div>' +
                    '</div>',
                compile: compile
            };

            function compile(tElement) {
                // The javascript in this file is mainly responsible for setting the correct aria attributes.
                // The animation of the progress spinner is done entirely with just CSS.
                tElement.attr('aria-valuemin', 0);
                tElement.attr('aria-valuemax', 100);
                tElement.attr('role', 'progressbar');

                return postLink;
            }

            function postLink(scope, element, attr) {
                $mdTheming(element);

                var circle = element;
                var spinnerWrapper = angular.element(element.children()[0]);
                var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss;

                element.attr('md-mode', mode());

                updateScale();
                validateMode();
                watchAttributes();

                /**
                 * Watch the value and md-mode attributes
                 */
                function watchAttributes() {
                    attr.$observe('value', function(value) {
                        var percentValue = clamp(value);
                        element.attr('aria-valuenow', percentValue);

                        if (mode() == MODE_DETERMINATE) {
                            animateIndicator(percentValue);
                        }
                    });
                    attr.$observe('mdMode', function(mode) {
                        switch (mode) {
                            case MODE_DETERMINATE:
                            case MODE_INDETERMINATE:
                                spinnerWrapper.removeClass('ng-hide');
                                if (lastMode) spinnerWrapper.removeClass(lastMode);
                                spinnerWrapper.addClass(lastMode = "md-mode-" + mode);
                                break;
                            default:
                                if (lastMode) spinnerWrapper.removeClass(lastMode);
                                spinnerWrapper.addClass('ng-hide');
                                lastMode = undefined;
                                break;
                        }
                    });
                }

                /**
                 * Update size/scaling of the progress indicator
                 * Watch the "value" and "md-mode" attributes
                 */
                function updateScale() {
                    // set the outer container to the size the user specified
                    circle.css({
                        width: (100 * getDiameterRatio()) + 'px',
                        height: (100 * getDiameterRatio()) + 'px'
                    });
                    // the internal element is still 100px, so we have to scale it down to match the size
                    circle.children().eq(0).css(toVendorCSS({
                        transform: $mdUtil.supplant('translate(-50%, -50%) scale( {0} )', [getDiameterRatio()])
                    }));
                }

                /**
                 * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified
                 */
                function validateMode() {
                    if (angular.isUndefined(attr.mdMode)) {
                        var hasValue = angular.isDefined(attr.value);
                        var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;
                        var info = "Auto-adding the missing md-mode='{0}' to the ProgressCircular element";

                        $log.debug($mdUtil.supplant(info, [mode]));

                        element.attr("md-mode", mode);
                        attr['mdMode'] = mode;
                    }
                }

                var leftC, rightC, gap;

                /**
                 * Manually animate the Determinate indicator based on the specified
                 * percentage value (0-100).
                 *
                 * Note: this animation was previously done using SCSS.
                 * - generated 54K of styles
                 * - use attribute selectors which had poor performances in IE
                 */
                function animateIndicator(value) {
                    if (!mode()) return;

                    leftC = leftC || angular.element(element[0].querySelector('.md-left > .md-half-circle'));
                    rightC = rightC || angular.element(element[0].querySelector('.md-right > .md-half-circle'));
                    gap = gap || angular.element(element[0].querySelector('.md-gap'));

                    var gapStyles = removeEmptyValues({
                            borderBottomColor: (value <= 50) ? "transparent !important" : "",
                            transition: (value <= 50) ? "" : "borderBottomColor 0.1s linear"
                        }),
                        leftStyles = removeEmptyValues({
                            transition: (value <= 50) ? "transform 0.1s linear" : "",
                            transform: $mdUtil.supplant("rotate({0}deg)", [value <= 50 ? 135 : (((value - 50) / 50 * 180) + 135)])
                        }),
                        rightStyles = removeEmptyValues({
                            transition: (value >= 50) ? "transform 0.1s linear" : "",
                            transform: $mdUtil.supplant("rotate({0}deg)", [value >= 50 ? 45 : (value / 50 * 180 - 135)])
                        });

                    leftC.css(toVendorCSS(leftStyles));
                    rightC.css(toVendorCSS(rightStyles));
                    gap.css(toVendorCSS(gapStyles));

                }

                /**
                 * We will scale the progress circle based on the default diameter.
                 *
                 * Determine the diameter percentage (defaults to 100%)
                 * May be express as float, percentage, or integer
                 */
                function getDiameterRatio() {
                    if (!attr.mdDiameter) return DEFAULT_SCALING;

                    var match = /([0-9]*)%/.exec(attr.mdDiameter);
                    var value = Math.max(0, (match && match[1] / 100) || parseFloat(attr.mdDiameter));

                    // should return ratio; DEFAULT_PROGRESS_SIZE === 100px is default size
                    return (value > 1) ? value / DEFAULT_PROGRESS_SIZE : value;
                }

                /**
                 * Is the md-mode a valid option?
                 */
                function mode() {
                    var value = (attr.mdMode || "").trim();
                    if (value) {
                        switch (value) {
                            case MODE_DETERMINATE:
                            case MODE_INDETERMINATE:
                                break;
                            default:
                                value = undefined;
                                break;
                        }
                    }
                    return value;
                }

            }

            /**
             * Clamps the value to be between 0 and 100.
             * @param {number} value The value to clamp.
             * @returns {number}
             */
            function clamp(value) {
                return Math.max(0, Math.min(value || 0, 100));
            }

            function removeEmptyValues(target) {
                for (var key in target) {
                    if (target.hasOwnProperty(key)) {
                        if (target[key] == "") delete target[key];
                    }
                }

                return target;
            }
        }
        MdProgressCircularDirective.$inject = ["$mdTheming", "$mdUtil", "$log"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.progressLinear
         * @description Linear Progress module!
         */
        angular.module('material.components.progressLinear', [
                'material.core'
            ])
            .directive('mdProgressLinear', MdProgressLinearDirective);

        /**
         * @ngdoc directive
         * @name mdProgressLinear
         * @module material.components.progressLinear
         * @restrict E
         *
         * @description
         * The linear progress directive is used to make loading content
         * in your app as delightful and painless as possible by minimizing
         * the amount of visual change a user sees before they can view
         * and interact with content.
         *
         * Each operation should only be represented by one activity indicator
         * For example: one refresh operation should not display both a
         * refresh bar and an activity circle.
         *
         * For operations where the percentage of the operation completed
         * can be determined, use a determinate indicator. They give users
         * a quick sense of how long an operation will take.
         *
         * For operations where the user is asked to wait a moment while
         * something finishes up, and it’s not necessary to expose what's
         * happening behind the scenes and how long it will take, use an
         * indeterminate indicator.
         *
         * @param {string} md-mode Select from one of four modes: determinate, indeterminate, buffer or query.
         *
         * Note: if the `md-mode` value is set as undefined or specified as 1 of the four (4) valid modes, then `.ng-hide`
         * will be auto-applied as a style to the component.
         *
         * Note: if not configured, the `md-mode="indeterminate"` will be auto injected as an attribute. If `value=""` is also specified, however,
         * then `md-mode="determinate"` would be auto-injected instead.
         * @param {number=} value In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0
         * @param {number=} md-buffer-value In the buffer mode, this number represents the percentage of the secondary progress bar. Default: 0
         *
         * @usage
         * <hljs lang="html">
         * <md-progress-linear md-mode="determinate" value="..."></md-progress-linear>
         *
         * <md-progress-linear md-mode="determinate" ng-value="..."></md-progress-linear>
         *
         * <md-progress-linear md-mode="indeterminate"></md-progress-linear>
         *
         * <md-progress-linear md-mode="buffer" value="..." md-buffer-value="..."></md-progress-linear>
         *
         * <md-progress-linear md-mode="query"></md-progress-linear>
         * </hljs>
         */
        function MdProgressLinearDirective($mdTheming, $mdUtil, $log) {
            var MODE_DETERMINATE = "determinate",
                MODE_INDETERMINATE = "indeterminate",
                MODE_BUFFER = "buffer",
                MODE_QUERY = "query";

            return {
                restrict: 'E',
                template: '<div class="md-container">' +
                    '<div class="md-dashed"></div>' +
                    '<div class="md-bar md-bar1"></div>' +
                    '<div class="md-bar md-bar2"></div>' +
                    '</div>',
                compile: compile
            };

            function compile(tElement, tAttrs, transclude) {
                tElement.attr('aria-valuemin', 0);
                tElement.attr('aria-valuemax', 100);
                tElement.attr('role', 'progressbar');

                return postLink;
            }

            function postLink(scope, element, attr) {
                $mdTheming(element);

                var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss;
                var bar1 = angular.element(element[0].querySelector('.md-bar1')),
                    bar2 = angular.element(element[0].querySelector('.md-bar2')),
                    container = angular.element(element[0].querySelector('.md-container'));

                element.attr('md-mode', mode());

                validateMode();
                watchAttributes();

                /**
                 * Watch the value, md-buffer-value, and md-mode attributes
                 */
                function watchAttributes() {
                    attr.$observe('value', function(value) {
                        var percentValue = clamp(value);
                        element.attr('aria-valuenow', percentValue);

                        if (mode() != MODE_QUERY) animateIndicator(bar2, percentValue);
                    });

                    attr.$observe('mdBufferValue', function(value) {
                        animateIndicator(bar1, clamp(value));
                    });

                    attr.$observe('mdMode', function(mode) {
                        switch (mode) {
                            case MODE_QUERY:
                            case MODE_BUFFER:
                            case MODE_DETERMINATE:
                            case MODE_INDETERMINATE:
                                container.removeClass('ng-hide' + ' ' + lastMode);
                                container.addClass(lastMode = "md-mode-" + mode);
                                break;
                            default:
                                if (lastMode) container.removeClass(lastMode);
                                container.addClass('ng-hide');
                                lastMode = undefined;
                                break;
                        }
                    });
                }

                /**
                 * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified
                 */
                function validateMode() {
                    if (angular.isUndefined(attr.mdMode)) {
                        var hasValue = angular.isDefined(attr.value);
                        var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;
                        var info = "Auto-adding the missing md-mode='{0}' to the ProgressLinear element";

                        $log.debug($mdUtil.supplant(info, [mode]));

                        element.attr("md-mode", mode);
                        attr['mdMode'] = mode;
                    }
                }

                /**
                 * Is the md-mode a valid option?
                 */
                function mode() {
                    var value = (attr.mdMode || "").trim();
                    if (value) {
                        switch (value) {
                            case MODE_DETERMINATE:
                            case MODE_INDETERMINATE:
                            case MODE_BUFFER:
                            case MODE_QUERY:
                                break;
                            default:
                                value = undefined;
                                break;
                        }
                    }
                    return value;
                }

                /**
                 * Manually set CSS to animate the Determinate indicator based on the specified
                 * percentage value (0-100).
                 */
                function animateIndicator(target, value) {
                    if (!mode()) return;

                    var to = $mdUtil.supplant("translateX({0}%) scale({1},1)", [(value - 100) / 2, value / 100]);
                    var styles = toVendorCSS({
                        transform: to
                    });
                    angular.element(target).css(styles);
                }
            }

            /**
             * Clamps the value to be between 0 and 100.
             * @param {number} value The value to clamp.
             * @returns {number}
             */
            function clamp(value) {
                return Math.max(0, Math.min(value || 0, 100));
            }
        }
        MdProgressLinearDirective.$inject = ["$mdTheming", "$mdUtil", "$log"];


    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.radioButton
         * @description radioButton module!
         */
        angular.module('material.components.radioButton', [
                'material.core'
            ])
            .directive('mdRadioGroup', mdRadioGroupDirective)
            .directive('mdRadioButton', mdRadioButtonDirective);

        /**
         * @ngdoc directive
         * @module material.components.radioButton
         * @name mdRadioGroup
         *
         * @restrict E
         *
         * @description
         * The `<md-radio-group>` directive identifies a grouping
         * container for the 1..n grouped radio buttons; specified using nested
         * `<md-radio-button>` tags.
         *
         * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
         * the radio button is in the accent color by default. The primary color palette may be used with
         * the `md-primary` class.
         *
         * Note: `<md-radio-group>` and `<md-radio-button>` handle tabindex differently
         * than the native `<input type='radio'>` controls. Whereas the native controls
         * force the user to tab through all the radio buttons, `<md-radio-group>`
         * is focusable, and by default the `<md-radio-button>`s are not.
         *
         * @param {string} ng-model Assignable angular expression to data-bind to.
         * @param {boolean=} md-no-ink Use of attribute indicates flag to disable ink ripple effects.
         *
         * @usage
         * <hljs lang="html">
         * <md-radio-group ng-model="selected">
         *
         *   <md-radio-button
         *        ng-repeat="d in colorOptions"
         *        ng-value="d.value" aria-label="{{ d.label }}">
         *
         *          {{ d.label }}
         *
         *   </md-radio-button>
         *
         * </md-radio-group>
         * </hljs>
         *
         */
        function mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming, $timeout) {
            RadioGroupController.prototype = createRadioGroupControllerProto();

            return {
                restrict: 'E',
                controller: ['$element', RadioGroupController],
                require: ['mdRadioGroup', '?ngModel'],
                link: {
                    pre: linkRadioGroup
                }
            };

            function linkRadioGroup(scope, element, attr, ctrls) {
                $mdTheming(element);
                var rgCtrl = ctrls[0];
                var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();

                rgCtrl.init(ngModelCtrl);

                scope.mouseActive = false;
                element.attr({
                        'role': 'radiogroup',
                        'tabIndex': element.attr('tabindex') || '0'
                    })
                    .on('keydown', keydownListener)
                    .on('mousedown', function(event) {
                        scope.mouseActive = true;
                        $timeout(function() {
                            scope.mouseActive = false;
                        }, 100);
                    })
                    .on('focus', function() {
                        if (scope.mouseActive === false) {
                            rgCtrl.$element.addClass('md-focused');
                        }
                    })
                    .on('blur', function() {
                        rgCtrl.$element.removeClass('md-focused');
                    });

                /**
                 *
                 */
                function setFocus() {
                    if (!element.hasClass('md-focused')) {
                        element.addClass('md-focused');
                    }
                }

                /**
                 *
                 */
                function keydownListener(ev) {
                    var keyCode = ev.which || ev.keyCode;

                    // Only listen to events that we originated ourselves
                    // so that we don't trigger on things like arrow keys in
                    // inputs.

                    if (keyCode != $mdConstant.KEY_CODE.ENTER &&
                        ev.currentTarget != ev.target) {
                        return;
                    }

                    switch (keyCode) {
                        case $mdConstant.KEY_CODE.LEFT_ARROW:
                        case $mdConstant.KEY_CODE.UP_ARROW:
                            ev.preventDefault();
                            rgCtrl.selectPrevious();
                            setFocus();
                            break;

                        case $mdConstant.KEY_CODE.RIGHT_ARROW:
                        case $mdConstant.KEY_CODE.DOWN_ARROW:
                            ev.preventDefault();
                            rgCtrl.selectNext();
                            setFocus();
                            break;

                        case $mdConstant.KEY_CODE.ENTER:
                            var form = angular.element($mdUtil.getClosest(element[0], 'form'));
                            if (form.length > 0) {
                                form.triggerHandler('submit');
                            }
                            break;
                    }

                }
            }

            function RadioGroupController($element) {
                this._radioButtonRenderFns = [];
                this.$element = $element;
            }

            function createRadioGroupControllerProto() {
                return {
                    init: function(ngModelCtrl) {
                        this._ngModelCtrl = ngModelCtrl;
                        this._ngModelCtrl.$render = angular.bind(this, this.render);
                    },
                    add: function(rbRender) {
                        this._radioButtonRenderFns.push(rbRender);
                    },
                    remove: function(rbRender) {
                        var index = this._radioButtonRenderFns.indexOf(rbRender);
                        if (index !== -1) {
                            this._radioButtonRenderFns.splice(index, 1);
                        }
                    },
                    render: function() {
                        this._radioButtonRenderFns.forEach(function(rbRender) {
                            rbRender();
                        });
                    },
                    setViewValue: function(value, eventType) {
                        this._ngModelCtrl.$setViewValue(value, eventType);
                        // update the other radio buttons as well
                        this.render();
                    },
                    getViewValue: function() {
                        return this._ngModelCtrl.$viewValue;
                    },
                    selectNext: function() {
                        return changeSelectedButton(this.$element, 1);
                    },
                    selectPrevious: function() {
                        return changeSelectedButton(this.$element, -1);
                    },
                    setActiveDescendant: function(radioId) {
                        this.$element.attr('aria-activedescendant', radioId);
                    }
                };
            }
            /**
             * Change the radio group's selected button by a given increment.
             * If no button is selected, select the first button.
             */
            function changeSelectedButton(parent, increment) {
                // Coerce all child radio buttons into an array, then wrap then in an iterator
                var buttons = $mdUtil.iterator(parent[0].querySelectorAll('md-radio-button'), true);

                if (buttons.count()) {
                    var validate = function(button) {
                        // If disabled, then NOT valid
                        return !angular.element(button).attr("disabled");
                    };

                    var selected = parent[0].querySelector('md-radio-button.md-checked');
                    var target = buttons[increment < 0 ? 'previous' : 'next'](selected, validate) || buttons.first();

                    // Activate radioButton's click listener (triggerHandler won't create a real click event)
                    angular.element(target).triggerHandler('click');


                }
            }

        }
        mdRadioGroupDirective.$inject = ["$mdUtil", "$mdConstant", "$mdTheming", "$timeout"];

        /**
         * @ngdoc directive
         * @module material.components.radioButton
         * @name mdRadioButton
         *
         * @restrict E
         *
         * @description
         * The `<md-radio-button>`directive is the child directive required to be used within `<md-radio-group>` elements.
         *
         * While similar to the `<input type="radio" ng-model="" value="">` directive,
         * the `<md-radio-button>` directive provides ink effects, ARIA support, and
         * supports use within named radio groups.
         *
         * @param {string} ngModel Assignable angular expression to data-bind to.
         * @param {string=} ngChange Angular expression to be executed when input changes due to user
         *    interaction with the input element.
         * @param {string} ngValue Angular expression which sets the value to which the expression should
         *    be set when selected.
         * @param {string} value The value to which the expression should be set when selected.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {string=} aria-label Adds label to radio button for accessibility.
         * Defaults to radio button's text. If no text content is available, a warning will be logged.
         *
         * @usage
         * <hljs lang="html">
         *
         * <md-radio-button value="1" aria-label="Label 1">
         *   Label 1
         * </md-radio-button>
         *
         * <md-radio-button ng-model="color" ng-value="specialValue" aria-label="Green">
         *   Green
         * </md-radio-button>
         *
         * </hljs>
         *
         */
        function mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {

            var CHECKED_CSS = 'md-checked';

            return {
                restrict: 'E',
                require: '^mdRadioGroup',
                transclude: true,
                template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' +
                    '<div class="md-off"></div>' +
                    '<div class="md-on"></div>' +
                    '</div>' +
                    '<div ng-transclude class="md-label"></div>',
                link: link
            };

            function link(scope, element, attr, rgCtrl) {
                var lastChecked;

                $mdTheming(element);
                configureAria(element, scope);

                initialize();

                /**
                 *
                 */
                function initialize(controller) {
                    if (!rgCtrl) {
                        throw 'RadioGroupController not found.';
                    }

                    rgCtrl.add(render);
                    attr.$observe('value', render);

                    element
                        .on('click', listener)
                        .on('$destroy', function() {
                            rgCtrl.remove(render);
                        });
                }

                /**
                 *
                 */
                function listener(ev) {
                    if (element[0].hasAttribute('disabled')) return;

                    scope.$apply(function() {
                        rgCtrl.setViewValue(attr.value, ev && ev.type);
                    });
                }

                /**
                 *  Add or remove the `.md-checked` class from the RadioButton (and conditionally its parent).
                 *  Update the `aria-activedescendant` attribute.
                 */
                function render() {
                    var checked = (rgCtrl.getViewValue() == attr.value);
                    if (checked === lastChecked) {
                        return;
                    }

                    lastChecked = checked;
                    element.attr('aria-checked', checked);

                    if (checked) {
                        markParentAsChecked(true);
                        element.addClass(CHECKED_CSS);

                        rgCtrl.setActiveDescendant(element.attr('id'));

                    } else {
                        markParentAsChecked(false);
                        element.removeClass(CHECKED_CSS);
                    }

                    /**
                     * If the radioButton is inside a div, then add class so highlighting will work...
                     */
                    function markParentAsChecked(addClass) {
                        if (element.parent()[0].nodeName != "MD-RADIO-GROUP") {
                            element.parent()[!!addClass ? 'addClass' : 'removeClass'](CHECKED_CSS);
                        }

                    }
                }

                /**
                 * Inject ARIA-specific attributes appropriate for each radio button
                 */
                function configureAria(element, scope) {
                    scope.ariaId = buildAriaID();

                    element.attr({
                        'id': scope.ariaId,
                        'role': 'radio',
                        'aria-checked': 'false'
                    });

                    $mdAria.expectWithText(element, 'aria-label');

                    /**
                     * Build a unique ID for each radio button that will be used with aria-activedescendant.
                     * Preserve existing ID if already specified.
                     * @returns {*|string}
                     */
                    function buildAriaID() {
                        return attr.id || ('radio' + "_" + $mdUtil.nextUid());
                    }
                }
            }
        }
        mdRadioButtonDirective.$inject = ["$mdAria", "$mdUtil", "$mdTheming"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.select
         */

        /***************************************************

         ### TODO - POST RC1 ###
         - [ ] Abstract placement logic in $mdSelect service to $mdMenu service

         ***************************************************/

        var SELECT_EDGE_MARGIN = 8;
        var selectNextId = 0;

        angular.module('material.components.select', [
                'material.core',
                'material.components.backdrop'
            ])
            .directive('mdSelect', SelectDirective)
            .directive('mdSelectMenu', SelectMenuDirective)
            .directive('mdOption', OptionDirective)
            .directive('mdOptgroup', OptgroupDirective)
            .provider('$mdSelect', SelectProvider);

        /**
         * @ngdoc directive
         * @name mdSelect
         * @restrict E
         * @module material.components.select
         *
         * @description Displays a select box, bound to an ng-model.
         *
         * @param {expression} ng-model The model!
         * @param {boolean=} multiple Whether it's multiple.
         * @param {expression=} md-on-close Expression to be evaluated when the select is closed.
         * @param {string=} placeholder Placeholder hint text.
         * @param {string=} aria-label Optional label for accessibility. Only necessary if no placeholder or
         * explicit label is present.
         * @param {string=} md-container-class Class list to get applied to the `.md-select-menu-container`
         * element (for custom styling).
         *
         * @usage
         * With a placeholder (label and aria-label are added dynamically)
         * <hljs lang="html">
         *   <md-input-container>
         *     <md-select
         *       ng-model="someModel"
         *       placeholder="Select a state">
         *       <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>
         *     </md-select>
         *   </md-input-container>
         * </hljs>
         *
         * With an explicit label
         * <hljs lang="html">
         *   <md-input-container>
         *     <label>State</label>
         *     <md-select
         *       ng-model="someModel">
         *       <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>
         *     </md-select>
         *   </md-input-container>
         * </hljs>
         *
         * ## Selects and object equality
         * When using a `md-select` to pick from a list of objects, it is important to realize how javascript handles
         * equality. Consider the following example:
         * <hljs lang="js">
         * angular.controller('MyCtrl', function($scope) {
         *   $scope.users = [
         *     { id: 1, name: 'Bob' },
         *     { id: 2, name: 'Alice' },
         *     { id: 3, name: 'Steve' }
         *   ];
         *   $scope.selectedUser = { id: 1, name: 'Bob' };
         * });
         * </hljs>
         * <hljs lang="html">
         * <div ng-controller="MyCtrl">
         *   <md-select ng-model="selectedUser">
         *     <md-option ng-value="user" ng-repeat="user in users">{{ user.name }}</md-option>
         *   </md-select>
         * </div>
         * </hljs>
         *
         * At first one might expect that the select should be populated with "Bob" as the selected user. However,
         * this is not true. To determine whether something is selected, 
         * `ngModelController` is looking at whether `$scope.selectedUser == (any user in $scope.users);`;
         * 
         * Javascript's `==` operator does not check for deep equality (ie. that all properties
         * on the object are the same), but instead whether the objects are *the same object in memory*.
         * In this case, we have two instances of identical objects, but they exist in memory as unique
         * entities. Because of this, the select will have no value populated for a selected user.
         *
         * To get around this, `ngModelController` provides a `track by` option that allows us to specify a different
         * expression which will be used for the equality operator. As such, we can update our `html` to
         * make use of this by specifying the `ng-model-options="{trackBy: '$value.id'}"` on the `md-select`
         * element. This converts our equality expression to be 
         * `$scope.selectedUser.id == (any id in $scope.users.map(function(u) { return u.id; }));`
         * which results in Bob being selected as desired.
         *
         * Working HTML:
         * <hljs lang="html">
         * <div ng-controller="MyCtrl">
         *   <md-select ng-model="selectedUser" ng-model-options="{trackBy: '$value.id'}">
         *     <md-option ng-value="user" ng-repeat="user in users">{{ user.name }}</md-option>
         *   </md-select>
         * </div>
         * </hljs>
         */
        function SelectDirective($mdSelect, $mdUtil, $mdTheming, $mdAria, $compile, $parse) {
            return {
                restrict: 'E',
                require: ['^?mdInputContainer', 'mdSelect', 'ngModel', '?^form'],
                compile: compile,
                controller: function() {} // empty placeholder controller to be initialized in link
            };

            function compile(element, attr) {
                // add the select value that will hold our placeholder or selected option value
                var valueEl = angular.element('<md-select-value><span></span></md-select-value>');
                valueEl.append('<span class="md-select-icon" aria-hidden="true"></span>');
                valueEl.addClass('md-select-value');
                if (!valueEl[0].hasAttribute('id')) {
                    valueEl.attr('id', 'select_value_label_' + $mdUtil.nextUid());
                }

                // There's got to be an md-content inside. If there's not one, let's add it.
                if (!element.find('md-content').length) {
                    element.append(angular.element('<md-content>').append(element.contents()));
                }


                // Add progress spinner for md-options-loading
                if (attr.mdOnOpen) {

                    // Show progress indicator while loading async
                    // Use ng-hide for `display:none` so the indicator does not interfere with the options list
                    element
                        .find('md-content')
                        .prepend(angular.element(
                            '<div>' +
                            ' <md-progress-circular md-mode="{{progressMode}}" ng-hide="$$loadingAsyncDone"></md-progress-circular>' +
                            '</div>'
                        ));

                    // Hide list [of item options] while loading async
                    element
                        .find('md-option')
                        .attr('ng-show', '$$loadingAsyncDone');
                }

                if (attr.name) {
                    var autofillClone = angular.element('<select class="md-visually-hidden">');
                    autofillClone.attr({
                        'name': '.' + attr.name,
                        'ng-model': attr.ngModel,
                        'aria-hidden': 'true',
                        'tabindex': '-1'
                    });
                    var opts = element.find('md-option');
                    angular.forEach(opts, function(el) {
                        var newEl = angular.element('<option>' + el.innerHTML + '</option>');
                        if (el.hasAttribute('ng-value')) newEl.attr('ng-value', el.getAttribute('ng-value'));
                        else if (el.hasAttribute('value')) newEl.attr('value', el.getAttribute('value'));
                        autofillClone.append(newEl);
                    });

                    element.parent().append(autofillClone);
                }

                // Use everything that's left inside element.contents() as the contents of the menu
                var multiple = angular.isDefined(attr.multiple) ? 'multiple' : '';
                var selectTemplate = '' +
                    '<div class="md-select-menu-container" aria-hidden="true">' +
                    '<md-select-menu {0}>{1}</md-select-menu>' +
                    '</div>';

                selectTemplate = $mdUtil.supplant(selectTemplate, [multiple, element.html()]);
                element.empty().append(valueEl);
                element.append(selectTemplate);

                attr.tabindex = attr.tabindex || '0';

                return function postLink(scope, element, attr, ctrls) {
                    var untouched = true;
                    var isDisabled, ariaLabelBase;

                    var containerCtrl = ctrls[0];
                    var mdSelectCtrl = ctrls[1];
                    var ngModelCtrl = ctrls[2];
                    var formCtrl = ctrls[3];
                    // grab a reference to the select menu value label
                    var valueEl = element.find('md-select-value');
                    var isReadonly = angular.isDefined(attr.readonly);

                    if (containerCtrl) {
                        var isErrorGetter = containerCtrl.isErrorGetter || function() {
                            return ngModelCtrl.$invalid && ngModelCtrl.$touched;
                        };

                        if (containerCtrl.input) {
                            throw new Error("<md-input-container> can only have *one* child <input>, <textarea> or <select> element!");
                        }

                        containerCtrl.input = element;
                        if (!containerCtrl.label) {
                            $mdAria.expect(element, 'aria-label', element.attr('placeholder'));
                        }

                        scope.$watch(isErrorGetter, containerCtrl.setInvalid);
                    }

                    var selectContainer, selectScope, selectMenuCtrl;

                    findSelectContainer();
                    $mdTheming(element);

                    if (attr.name && formCtrl) {
                        var selectEl = element.parent()[0].querySelector('select[name=".' + attr.name + '"]');
                        $mdUtil.nextTick(function() {
                            var controller = angular.element(selectEl).controller('ngModel');
                            if (controller) {
                                formCtrl.$removeControl(controller);
                            }
                        });
                    }

                    if (formCtrl) {
                        $mdUtil.nextTick(function() {
                            formCtrl.$setPristine();
                        });
                    }

                    var originalRender = ngModelCtrl.$render;
                    ngModelCtrl.$render = function() {
                        originalRender();
                        syncLabelText();
                        syncAriaLabel();
                        inputCheckValue();
                    };


                    attr.$observe('placeholder', ngModelCtrl.$render);


                    mdSelectCtrl.setLabelText = function(text) {
                        mdSelectCtrl.setIsPlaceholder(!text);
                        // Use placeholder attribute, otherwise fallback to the md-input-container label
                        var tmpPlaceholder = attr.placeholder || (containerCtrl && containerCtrl.label ? containerCtrl.label.text() : '');
                        text = text || tmpPlaceholder || '';
                        var target = valueEl.children().eq(0);
                        target.html(text);
                    };

                    mdSelectCtrl.setIsPlaceholder = function(isPlaceholder) {
                        if (isPlaceholder) {
                            valueEl.addClass('md-select-placeholder');
                            if (containerCtrl && containerCtrl.label) {
                                containerCtrl.label.addClass('md-placeholder');
                            }
                        } else {
                            valueEl.removeClass('md-select-placeholder');
                            if (containerCtrl && containerCtrl.label) {
                                containerCtrl.label.removeClass('md-placeholder');
                            }
                        }
                    };

                    if (!isReadonly) {
                        element
                            .on('focus', function(ev) {
                                // only set focus on if we don't currently have a selected value. This avoids the "bounce"
                                // on the label transition because the focus will immediately switch to the open menu.
                                if (containerCtrl && containerCtrl.element.hasClass('md-input-has-value')) {
                                    containerCtrl.setFocused(true);
                                }
                            });

                        // Wait until postDigest so that we attach after ngModel's 
                        // blur listener so we can set untouched.
                        $mdUtil.nextTick(function() {
                            element.on('blur', function() {
                                if (untouched) {
                                    untouched = false;
                                    ngModelCtrl.$setUntouched();
                                }

                                if (selectScope.isOpen) return;
                                containerCtrl && containerCtrl.setFocused(false);
                                inputCheckValue();
                            });
                        });
                    }

                    mdSelectCtrl.triggerClose = function() {
                        $parse(attr.mdOnClose)(scope);
                    };

                    scope.$$postDigest(function() {
                        initAriaLabel();
                        syncLabelText();
                        syncAriaLabel();
                    });

                    function initAriaLabel() {
                        var labelText = element.attr('aria-label') || element.attr('placeholder');
                        if (!labelText && containerCtrl && containerCtrl.label) {
                            labelText = containerCtrl.label.text();
                        }
                        ariaLabelBase = labelText;
                        $mdAria.expect(element, 'aria-label', labelText);
                    }

                    scope.$watch(selectMenuCtrl.selectedLabels, syncLabelText);

                    function syncLabelText() {
                        if (selectContainer) {
                            selectMenuCtrl = selectMenuCtrl || selectContainer.find('md-select-menu').controller('mdSelectMenu');
                            mdSelectCtrl.setLabelText(selectMenuCtrl.selectedLabels());
                        }
                    }

                    function syncAriaLabel() {
                        if (!ariaLabelBase) return;
                        var ariaLabels = selectMenuCtrl.selectedLabels({
                            mode: 'aria'
                        });
                        element.attr('aria-label', ariaLabels.length ? ariaLabelBase + ': ' + ariaLabels : ariaLabelBase);
                    }

                    var deregisterWatcher;
                    attr.$observe('ngMultiple', function(val) {
                        if (deregisterWatcher) deregisterWatcher();
                        var parser = $parse(val);
                        deregisterWatcher = scope.$watch(function() {
                            return parser(scope);
                        }, function(multiple, prevVal) {
                            if (multiple === undefined && prevVal === undefined) return; // assume compiler did a good job
                            if (multiple) {
                                element.attr('multiple', 'multiple');
                            } else {
                                element.removeAttr('multiple');
                            }
                            element.attr('aria-multiselectable', multiple ? 'true' : 'false');
                            if (selectContainer) {
                                selectMenuCtrl.setMultiple(multiple);
                                originalRender = ngModelCtrl.$render;
                                ngModelCtrl.$render = function() {
                                    originalRender();
                                    syncLabelText();
                                    syncAriaLabel();
                                    inputCheckValue();
                                };
                                ngModelCtrl.$render();
                            }
                        });
                    });

                    attr.$observe('disabled', function(disabled) {
                        if (angular.isString(disabled)) {
                            disabled = true;
                        }
                        // Prevent click event being registered twice
                        if (isDisabled !== undefined && isDisabled === disabled) {
                            return;
                        }
                        isDisabled = disabled;
                        if (disabled) {
                            element.attr({
                                'tabindex': -1,
                                'aria-disabled': 'true'
                            });
                            element.off('click', openSelect);
                            element.off('keydown', handleKeypress);
                        } else {
                            element.attr({
                                'tabindex': attr.tabindex,
                                'aria-disabled': 'false'
                            });
                            element.on('click', openSelect);
                            element.on('keydown', handleKeypress);
                        }
                    });

                    if (!attr.disabled && !attr.ngDisabled) {
                        element.attr({
                            'tabindex': attr.tabindex,
                            'aria-disabled': 'false'
                        });
                        element.on('click', openSelect);
                        element.on('keydown', handleKeypress);
                    }


                    var ariaAttrs = {
                        role: 'listbox',
                        'aria-expanded': 'false',
                        'aria-multiselectable': attr.multiple !== undefined && !attr.ngMultiple ? 'true' : 'false'
                    };

                    if (!element[0].hasAttribute('id')) {
                        ariaAttrs.id = 'select_' + $mdUtil.nextUid();
                    }

                    var containerId = 'select_container_' + $mdUtil.nextUid();
                    selectContainer.attr('id', containerId);
                    ariaAttrs['aria-owns'] = containerId;
                    element.attr(ariaAttrs);

                    scope.$on('$destroy', function() {
                        $mdSelect
                            .destroy()
                            .finally(function() {
                                if (containerCtrl) {
                                    containerCtrl.setFocused(false);
                                    containerCtrl.setHasValue(false);
                                    containerCtrl.input = null;
                                }
                                ngModelCtrl.$setTouched();
                            });
                    });



                    function inputCheckValue() {
                        // The select counts as having a value if one or more options are selected,
                        // or if the input's validity state says it has bad input (eg string in a number input)
                        containerCtrl && containerCtrl.setHasValue(selectMenuCtrl.selectedLabels().length > 0 || (element[0].validity || {}).badInput);
                    }

                    function findSelectContainer() {
                        selectContainer = angular.element(
                            element[0].querySelector('.md-select-menu-container')
                        );
                        selectScope = scope;
                        if (element.attr('md-container-class')) {
                            var value = selectContainer[0].getAttribute('class') + ' ' + element.attr('md-container-class');
                            selectContainer[0].setAttribute('class', value);
                        }
                        selectMenuCtrl = selectContainer.find('md-select-menu').controller('mdSelectMenu');
                        selectMenuCtrl.init(ngModelCtrl, attr.ngModel);
                        element.on('$destroy', function() {
                            selectContainer.remove();
                        });
                    }

                    function handleKeypress(e) {
                        var allowedCodes = [32, 13, 38, 40];
                        if (allowedCodes.indexOf(e.keyCode) != -1) {
                            // prevent page scrolling on interaction
                            e.preventDefault();
                            openSelect(e);
                        } else {
                            if (e.keyCode <= 90 && e.keyCode >= 31) {
                                e.preventDefault();
                                var node = selectMenuCtrl.optNodeForKeyboardSearch(e);
                                if (!node) return;
                                var optionCtrl = angular.element(node).controller('mdOption');
                                if (!selectMenuCtrl.isMultiple) {
                                    selectMenuCtrl.deselect(Object.keys(selectMenuCtrl.selected)[0]);
                                }
                                selectMenuCtrl.select(optionCtrl.hashKey, optionCtrl.value);
                                selectMenuCtrl.refreshViewValue();
                            }
                        }
                    }

                    function openSelect() {
                        selectScope.isOpen = true;
                        element.attr('aria-expanded', 'true');

                        $mdSelect.show({
                            scope: selectScope,
                            preserveScope: true,
                            skipCompile: true,
                            element: selectContainer,
                            target: element[0],
                            selectCtrl: mdSelectCtrl,
                            preserveElement: true,
                            hasBackdrop: true,
                            loadingAsync: attr.mdOnOpen ? scope.$eval(attr.mdOnOpen) || true : false
                        }).finally(function() {
                            selectScope.isOpen = false;
                            element.focus();
                            element.attr('aria-expanded', 'false');
                            ngModelCtrl.$setTouched();
                        });
                    }
                };
            }
        }
        SelectDirective.$inject = ["$mdSelect", "$mdUtil", "$mdTheming", "$mdAria", "$compile", "$parse"];

        function SelectMenuDirective($parse, $mdUtil, $mdTheming) {

            SelectMenuController.$inject = ["$scope", "$attrs", "$element"];
            return {
                restrict: 'E',
                require: ['mdSelectMenu'],
                scope: true,
                controller: SelectMenuController,
                link: {
                    pre: preLink
                }
            };

            // We use preLink instead of postLink to ensure that the select is initialized before
            // its child options run postLink.
            function preLink(scope, element, attr, ctrls) {
                var selectCtrl = ctrls[0];

                $mdTheming(element);
                element.on('click', clickListener);
                element.on('keypress', keyListener);

                function keyListener(e) {
                    if (e.keyCode == 13 || e.keyCode == 32) {
                        clickListener(e);
                    }
                }

                function clickListener(ev) {
                    var option = $mdUtil.getClosest(ev.target, 'md-option');
                    var optionCtrl = option && angular.element(option).data('$mdOptionController');
                    if (!option || !optionCtrl) return;
                    if (option.hasAttribute('disabled')) {
                        ev.stopImmediatePropagation();
                        return false;
                    }

                    var optionHashKey = selectCtrl.hashGetter(optionCtrl.value);
                    var isSelected = angular.isDefined(selectCtrl.selected[optionHashKey]);

                    scope.$apply(function() {
                        if (selectCtrl.isMultiple) {
                            if (isSelected) {
                                selectCtrl.deselect(optionHashKey);
                            } else {
                                selectCtrl.select(optionHashKey, optionCtrl.value);
                            }
                        } else {
                            if (!isSelected) {
                                selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);
                                selectCtrl.select(optionHashKey, optionCtrl.value);
                            }
                        }
                        selectCtrl.refreshViewValue();
                    });
                }
            }

            function SelectMenuController($scope, $attrs, $element) {
                var self = this;
                self.isMultiple = angular.isDefined($attrs.multiple);
                // selected is an object with keys matching all of the selected options' hashed values
                self.selected = {};
                // options is an object with keys matching every option's hash value,
                // and values matching every option's controller.
                self.options = {};

                $scope.$watchCollection(function() {
                    return self.options;
                }, function() {
                    self.ngModel.$render();
                });

                var deregisterCollectionWatch;
                var defaultIsEmpty;
                self.setMultiple = function(isMultiple) {
                    var ngModel = self.ngModel;
                    defaultIsEmpty = defaultIsEmpty || ngModel.$isEmpty;

                    self.isMultiple = isMultiple;
                    if (deregisterCollectionWatch) deregisterCollectionWatch();

                    if (self.isMultiple) {
                        ngModel.$validators['md-multiple'] = validateArray;
                        ngModel.$render = renderMultiple;

                        // watchCollection on the model because by default ngModel only watches the model's
                        // reference. This allowed the developer to also push and pop from their array.
                        $scope.$watchCollection(self.modelBinding, function(value) {
                            if (validateArray(value)) renderMultiple(value);
                            self.ngModel.$setPristine();
                        });

                        ngModel.$isEmpty = function(value) {
                            return !value || value.length === 0;
                        };
                    } else {
                        delete ngModel.$validators['md-multiple'];
                        ngModel.$render = renderSingular;
                    }

                    function validateArray(modelValue, viewValue) {
                        // If a value is truthy but not an array, reject it.
                        // If value is undefined/falsy, accept that it's an empty array.
                        return angular.isArray(modelValue || viewValue || []);
                    }
                };

                var searchStr = '';
                var clearSearchTimeout, optNodes, optText;
                var CLEAR_SEARCH_AFTER = 300;
                self.optNodeForKeyboardSearch = function(e) {
                    clearSearchTimeout && clearTimeout(clearSearchTimeout);
                    clearSearchTimeout = setTimeout(function() {
                        clearSearchTimeout = undefined;
                        searchStr = '';
                        optText = undefined;
                        optNodes = undefined;
                    }, CLEAR_SEARCH_AFTER);
                    searchStr += String.fromCharCode(e.keyCode);
                    var search = new RegExp('^' + searchStr, 'i');
                    if (!optNodes) {
                        optNodes = $element.find('md-option');
                        optText = new Array(optNodes.length);
                        angular.forEach(optNodes, function(el, i) {
                            optText[i] = el.textContent.trim();
                        });
                    }
                    for (var i = 0; i < optText.length; ++i) {
                        if (search.test(optText[i])) {
                            return optNodes[i];
                        }
                    }
                };

                self.init = function(ngModel, binding) {
                    self.ngModel = ngModel;
                    self.modelBinding = binding;

                    // Allow users to provide `ng-model="foo" ng-model-options="{trackBy: 'foo.id'}"` so
                    // that we can properly compare objects set on the model to the available options
                    if (ngModel.$options && ngModel.$options.trackBy) {
                        var trackByLocals = {};
                        var trackByParsed = $parse(ngModel.$options.trackBy);
                        self.hashGetter = function(value, valueScope) {
                            trackByLocals.$value = value;
                            return trackByParsed(valueScope || $scope, trackByLocals);
                        };
                        // If the user doesn't provide a trackBy, we automatically generate an id for every
                        // value passed in
                    } else {
                        self.hashGetter = function getHashValue(value) {
                            if (angular.isObject(value)) {
                                return 'object_' + (value.$$mdSelectId || (value.$$mdSelectId = ++selectNextId));
                            }
                            return value;
                        };
                    }
                    self.setMultiple(self.isMultiple);
                };

                self.selectedLabels = function(opts) {
                    opts = opts || {};
                    var mode = opts.mode || 'html';
                    var selectedOptionEls = $mdUtil.nodesToArray($element[0].querySelectorAll('md-option[selected]'));
                    if (selectedOptionEls.length) {
                        var mapFn;

                        if (mode == 'html') {
                            mapFn = function(el) {
                                return el.innerHTML;
                            };
                        } else if (mode == 'aria') {
                            mapFn = function(el) {
                                return el.hasAttribute('aria-label') ? el.getAttribute('aria-label') : el.textContent;
                            };
                        }
                        return selectedOptionEls.map(mapFn).join(', ');
                    } else {
                        return '';
                    }
                };

                self.select = function(hashKey, hashedValue) {
                    var option = self.options[hashKey];
                    option && option.setSelected(true);
                    self.selected[hashKey] = hashedValue;
                };
                self.deselect = function(hashKey) {
                    var option = self.options[hashKey];
                    option && option.setSelected(false);
                    delete self.selected[hashKey];
                };

                self.addOption = function(hashKey, optionCtrl) {
                    if (angular.isDefined(self.options[hashKey])) {
                        throw new Error('Duplicate md-option values are not allowed in a select. ' +
                            'Duplicate value "' + optionCtrl.value + '" found.');
                    }
                    self.options[hashKey] = optionCtrl;

                    // If this option's value was already in our ngModel, go ahead and select it.
                    if (angular.isDefined(self.selected[hashKey])) {
                        self.select(hashKey, optionCtrl.value);
                        self.refreshViewValue();
                    }
                };
                self.removeOption = function(hashKey) {
                    delete self.options[hashKey];
                    // Don't deselect an option when it's removed - the user's ngModel should be allowed
                    // to have values that do not match a currently available option.
                };

                self.refreshViewValue = function() {
                    var values = [];
                    var option;
                    for (var hashKey in self.selected) {
                        // If this hashKey has an associated option, push that option's value to the model.
                        if ((option = self.options[hashKey])) {
                            values.push(option.value);
                        } else {
                            // Otherwise, the given hashKey has no associated option, and we got it
                            // from an ngModel value at an earlier time. Push the unhashed value of
                            // this hashKey to the model.
                            // This allows the developer to put a value in the model that doesn't yet have
                            // an associated option.
                            values.push(self.selected[hashKey]);
                        }
                    }
                    var usingTrackBy = self.ngModel.$options && self.ngModel.$options.trackBy;

                    var newVal = self.isMultiple ? values : values[0];
                    var prevVal = self.ngModel.$modelValue;

                    if (usingTrackBy ? !angular.equals(prevVal, newVal) : prevVal != newVal) {
                        self.ngModel.$setViewValue(newVal);
                        self.ngModel.$render();
                    }
                };

                function renderMultiple() {
                    var newSelectedValues = self.ngModel.$modelValue || self.ngModel.$viewValue || [];
                    if (!angular.isArray(newSelectedValues)) return;

                    var oldSelected = Object.keys(self.selected);

                    var newSelectedHashes = newSelectedValues.map(self.hashGetter);
                    var deselected = oldSelected.filter(function(hash) {
                        return newSelectedHashes.indexOf(hash) === -1;
                    });

                    deselected.forEach(self.deselect);
                    newSelectedHashes.forEach(function(hashKey, i) {
                        self.select(hashKey, newSelectedValues[i]);
                    });
                }

                function renderSingular() {
                    var value = self.ngModel.$viewValue || self.ngModel.$modelValue;
                    Object.keys(self.selected).forEach(self.deselect);
                    self.select(self.hashGetter(value), value);
                }
            }

        }
        SelectMenuDirective.$inject = ["$parse", "$mdUtil", "$mdTheming"];

        function OptionDirective($mdButtonInkRipple, $mdUtil) {

            OptionController.$inject = ["$element"];
            return {
                restrict: 'E',
                require: ['mdOption', '^^mdSelectMenu'],
                controller: OptionController,
                compile: compile
            };

            function compile(element, attr) {
                // Manual transclusion to avoid the extra inner <span> that ng-transclude generates
                element.append(angular.element('<div class="md-text">').append(element.contents()));

                element.attr('tabindex', attr.tabindex || '0');
                return postLink;
            }

            function postLink(scope, element, attr, ctrls) {
                var optionCtrl = ctrls[0];
                var selectCtrl = ctrls[1];

                if (angular.isDefined(attr.ngValue)) {
                    scope.$watch(attr.ngValue, setOptionValue);
                } else if (angular.isDefined(attr.value)) {
                    setOptionValue(attr.value);
                } else {
                    scope.$watch(function() {
                        return element.text();
                    }, setOptionValue);
                }

                attr.$observe('disabled', function(disabled) {
                    if (disabled) {
                        element.attr('tabindex', '-1');
                    } else {
                        element.attr('tabindex', '0');
                    }
                });

                scope.$$postDigest(function() {
                    attr.$observe('selected', function(selected) {
                        if (!angular.isDefined(selected)) return;
                        if (typeof selected == 'string') selected = true;
                        if (selected) {
                            if (!selectCtrl.isMultiple) {
                                selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);
                            }
                            selectCtrl.select(optionCtrl.hashKey, optionCtrl.value);
                        } else {
                            selectCtrl.deselect(optionCtrl.hashKey);
                        }
                        selectCtrl.refreshViewValue();
                    });
                });

                $mdButtonInkRipple.attach(scope, element);
                configureAria();

                function setOptionValue(newValue, oldValue, prevAttempt) {
                    if (!selectCtrl.hashGetter) {
                        if (!prevAttempt) {
                            scope.$$postDigest(function() {
                                setOptionValue(newValue, oldValue, true);
                            });
                        }
                        return;
                    }
                    var oldHashKey = selectCtrl.hashGetter(oldValue, scope);
                    var newHashKey = selectCtrl.hashGetter(newValue, scope);

                    optionCtrl.hashKey = newHashKey;
                    optionCtrl.value = newValue;

                    selectCtrl.removeOption(oldHashKey, optionCtrl);
                    selectCtrl.addOption(newHashKey, optionCtrl);
                }

                scope.$on('$destroy', function() {
                    selectCtrl.removeOption(optionCtrl.hashKey, optionCtrl);
                });

                function configureAria() {
                    var ariaAttrs = {
                        'role': 'option',
                        'aria-selected': 'false'
                    };

                    if (!element[0].hasAttribute('id')) {
                        ariaAttrs.id = 'select_option_' + $mdUtil.nextUid();
                    }
                    element.attr(ariaAttrs);
                }
            }

            function OptionController($element) {
                this.selected = false;
                this.setSelected = function(isSelected) {
                    if (isSelected && !this.selected) {
                        $element.attr({
                            'selected': 'selected',
                            'aria-selected': 'true'
                        });
                    } else if (!isSelected && this.selected) {
                        $element.removeAttr('selected');
                        $element.attr('aria-selected', 'false');
                    }
                    this.selected = isSelected;
                };
            }

        }
        OptionDirective.$inject = ["$mdButtonInkRipple", "$mdUtil"];

        function OptgroupDirective() {
            return {
                restrict: 'E',
                compile: compile
            };

            function compile(el, attrs) {
                var labelElement = el.find('label');
                if (!labelElement.length) {
                    labelElement = angular.element('<label>');
                    el.prepend(labelElement);
                }
                labelElement.addClass('md-container-ignore');
                if (attrs.label) labelElement.text(attrs.label);
            }
        }

        function SelectProvider($$interimElementProvider) {
            selectDefaultOptions.$inject = ["$mdSelect", "$mdConstant", "$mdUtil", "$window", "$q", "$$rAF", "$animateCss", "$animate", "$document"];
            return $$interimElementProvider('$mdSelect')
                .setDefaults({
                    methods: ['target'],
                    options: selectDefaultOptions
                });

            /* @ngInject */
            function selectDefaultOptions($mdSelect, $mdConstant, $mdUtil, $window, $q, $$rAF, $animateCss, $animate, $document) {
                var ERRROR_TARGET_EXPECTED = "$mdSelect.show() expected a target element in options.target but got '{0}'!";
                var animator = $mdUtil.dom.animator;

                return {
                    parent: 'body',
                    themable: true,
                    onShow: onShow,
                    onRemove: onRemove,
                    hasBackdrop: true,
                    disableParentScroll: true
                };

                /**
                 * Interim-element onRemove logic....
                 */
                function onRemove(scope, element, opts) {
                    opts = opts || {};
                    opts.cleanupInteraction();
                    opts.cleanupResizing();
                    opts.hideBackdrop();

                    // For navigation $destroy events, do a quick, non-animated removal,
                    // but for normal closes (from clicks, etc) animate the removal

                    return (opts.$destroy === true) ? cleanElement() : animateRemoval().then(cleanElement);

                    /**
                     * For normal closes (eg clicks), animate the removal.
                     * For forced closes (like $destroy events from navigation),
                     * skip the animations
                     */
                    function animateRemoval() {
                        return $animateCss(element, {
                            addClass: 'md-leave'
                        }).start();
                    }

                    /**
                     * Restore the element to a closed state
                     */
                    function cleanElement() {

                        element.removeClass('md-active');
                        element.attr('aria-hidden', 'true');
                        element[0].style.display = 'none';

                        announceClosed(opts);

                        if (!opts.$destroy && opts.restoreFocus) {
                            opts.target.focus();
                        }
                    }

                }

                /**
                 * Interim-element onShow logic....
                 */
                function onShow(scope, element, opts) {

                    watchAsyncLoad();
                    sanitizeAndConfigure(scope, opts);

                    opts.hideBackdrop = showBackdrop(scope, element, opts);

                    return showDropDown(scope, element, opts)
                        .then(function(response) {
                            element.attr('aria-hidden', 'false');
                            opts.alreadyOpen = true;
                            opts.cleanupInteraction = activateInteraction();
                            opts.cleanupResizing = activateResizing();

                            return response;
                        }, opts.hideBackdrop);

                    // ************************************
                    // Closure Functions
                    // ************************************

                    /**
                     *  Attach the select DOM element(s) and animate to the correct positions
                     *  and scalings...
                     */
                    function showDropDown(scope, element, opts) {
                        opts.parent.append(element);

                        return $q(function(resolve, reject) {

                            try {

                                $animateCss(element, {
                                        removeClass: 'md-leave',
                                        duration: 0
                                    })
                                    .start()
                                    .then(positionAndFocusMenu)
                                    .then(resolve);

                            } catch (e) {
                                reject(e);
                            }

                        });
                    }

                    /**
                     * Initialize container and dropDown menu positions/scale, then animate
                     * to show... and autoFocus.
                     */
                    function positionAndFocusMenu() {
                        return $q(function(resolve) {
                            if (opts.isRemoved) return $q.reject(false);

                            var info = calculateMenuPositions(scope, element, opts);

                            info.container.element.css(animator.toCss(info.container.styles));
                            info.dropDown.element.css(animator.toCss(info.dropDown.styles));

                            $$rAF(function() {
                                element.addClass('md-active');
                                info.dropDown.element.css(animator.toCss({
                                    transform: ''
                                }));

                                autoFocus(opts.focusedNode);
                                resolve();
                            });

                        });
                    }

                    /**
                     * Show modal backdrop element...
                     */
                    function showBackdrop(scope, element, options) {

                        // If we are not within a dialog...
                        if (options.disableParentScroll && !$mdUtil.getClosest(options.target, 'MD-DIALOG')) {
                            // !! DO this before creating the backdrop; since disableScrollAround()
                            //    configures the scroll offset; which is used by mdBackDrop postLink()
                            options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent);
                        } else {
                            options.disableParentScroll = false;
                        }

                        if (options.hasBackdrop) {
                            // Override duration to immediately show invisible backdrop
                            options.backdrop = $mdUtil.createBackdrop(scope, "md-select-backdrop md-click-catcher");
                            $animate.enter(options.backdrop, $document[0].body, null, {
                                duration: 0
                            });
                        }

                        /**
                         * Hide modal backdrop element...
                         */
                        return function hideBackdrop() {
                            if (options.backdrop) options.backdrop.remove();
                            if (options.disableParentScroll) options.restoreScroll();

                            delete options.restoreScroll;
                        };
                    }

                    /**
                     *
                     */
                    function autoFocus(focusedNode) {
                        if (focusedNode && !focusedNode.hasAttribute('disabled')) {
                            focusedNode.focus();
                        }
                    }

                    /**
                     * Check for valid opts and set some sane defaults
                     */
                    function sanitizeAndConfigure(scope, options) {
                        var selectEl = element.find('md-select-menu');

                        if (!options.target) {
                            throw new Error($mdUtil.supplant(ERRROR_TARGET_EXPECTED, [options.target]));
                        }

                        angular.extend(options, {
                            isRemoved: false,
                            target: angular.element(options.target), //make sure it's not a naked dom node
                            parent: angular.element(options.parent),
                            selectEl: selectEl,
                            contentEl: element.find('md-content'),
                            optionNodes: selectEl[0].getElementsByTagName('md-option')
                        });
                    }

                    /**
                     * Configure various resize listeners for screen changes
                     */
                    function activateResizing() {
                        var debouncedOnResize = (function(scope, target, options) {

                            return function() {
                                if (options.isRemoved) return;

                                var updates = calculateMenuPositions(scope, target, options);
                                var container = updates.container;
                                var dropDown = updates.dropDown;

                                container.element.css(animator.toCss(container.styles));
                                dropDown.element.css(animator.toCss(dropDown.styles));
                            };

                        })(scope, element, opts);

                        var window = angular.element($window);
                        window.on('resize', debouncedOnResize);
                        window.on('orientationchange', debouncedOnResize);

                        // Publish deactivation closure...
                        return function deactivateResizing() {

                            // Disable resizing handlers
                            window.off('resize', debouncedOnResize);
                            window.off('orientationchange', debouncedOnResize);
                        };
                    }

                    /**
                     *  If asynchronously loading, watch and update internal
                     *  '$$loadingAsyncDone' flag
                     */
                    function watchAsyncLoad() {
                        if (opts.loadingAsync && !opts.isRemoved) {
                            scope.$$loadingAsyncDone = false;
                            scope.progressMode = 'indeterminate';

                            $q.when(opts.loadingAsync)
                                .then(function() {
                                    scope.$$loadingAsyncDone = true;
                                    scope.progressMode = '';
                                    delete opts.loadingAsync;
                                }).then(function() {
                                    $$rAF(positionAndFocusMenu);
                                });
                        }
                    }

                    /**
                     *
                     */
                    function activateInteraction() {
                        if (opts.isRemoved) return;

                        var dropDown = opts.selectEl;
                        var selectCtrl = dropDown.controller('mdSelectMenu') || {};

                        element.addClass('md-clickable');

                        // Close on backdrop click
                        opts.backdrop && opts.backdrop.on('click', onBackdropClick);

                        // Escape to close
                        // Cycling of options, and closing on enter
                        dropDown.on('keydown', onMenuKeyDown);
                        dropDown.on('click', checkCloseMenu);

                        return function cleanupInteraction() {
                            opts.backdrop && opts.backdrop.off('click', onBackdropClick);
                            dropDown.off('keydown', onMenuKeyDown);
                            dropDown.off('click', checkCloseMenu);

                            element.removeClass('md-clickable');
                            opts.isRemoved = true;
                        };

                        // ************************************
                        // Closure Functions
                        // ************************************

                        function onBackdropClick(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            opts.restoreFocus = false;
                            $mdUtil.nextTick($mdSelect.hide, true);
                        }

                        function onMenuKeyDown(ev) {
                            var keyCodes = $mdConstant.KEY_CODE;
                            ev.preventDefault();
                            ev.stopPropagation();

                            switch (ev.keyCode) {
                                case keyCodes.UP_ARROW:
                                    return focusPrevOption();
                                case keyCodes.DOWN_ARROW:
                                    return focusNextOption();
                                case keyCodes.SPACE:
                                case keyCodes.ENTER:
                                    var option = $mdUtil.getClosest(ev.target, 'md-option');
                                    if (option) {
                                        dropDown.triggerHandler({
                                            type: 'click',
                                            target: option
                                        });
                                        ev.preventDefault();
                                    }
                                    checkCloseMenu(ev);
                                    break;
                                case keyCodes.TAB:
                                case keyCodes.ESCAPE:
                                    ev.stopPropagation();
                                    ev.preventDefault();
                                    opts.restoreFocus = true;
                                    $mdUtil.nextTick($mdSelect.hide, true);
                                    break;
                                default:
                                    if (ev.keyCode >= 31 && ev.keyCode <= 90) {
                                        var optNode = dropDown.controller('mdSelectMenu').optNodeForKeyboardSearch(ev);
                                        opts.focusedNode = optNode || opts.focusedNode;
                                        optNode && optNode.focus();
                                    }
                            }
                        }

                        function focusOption(direction) {
                            var optionsArray = $mdUtil.nodesToArray(opts.optionNodes);
                            var index = optionsArray.indexOf(opts.focusedNode);

                            var newOption;

                            do {
                                if (index === -1) {
                                    // We lost the previously focused element, reset to first option
                                    index = 0;
                                } else if (direction === 'next' && index < optionsArray.length - 1) {
                                    index++;
                                } else if (direction === 'prev' && index > 0) {
                                    index--;
                                }
                                newOption = optionsArray[index];
                                if (newOption.hasAttribute('disabled')) newOption = undefined;
                            } while (!newOption && index < optionsArray.length - 1 && index > 0)
                            newOption && newOption.focus();
                            opts.focusedNode = newOption;
                        }

                        function focusNextOption() {
                            focusOption('next');
                        }

                        function focusPrevOption() {
                            focusOption('prev');
                        }

                        function checkCloseMenu(ev) {
                            if (ev && (ev.type == 'click') && (ev.currentTarget != dropDown[0])) return;
                            if (mouseOnScrollbar()) return;

                            var option = $mdUtil.getClosest(ev.target, 'md-option');
                            if (option && option.hasAttribute && !option.hasAttribute('disabled')) {
                                ev.preventDefault();
                                ev.stopPropagation();
                                if (!selectCtrl.isMultiple) {
                                    opts.restoreFocus = true;

                                    $mdUtil.nextTick(function() {
                                        $mdSelect.hide(selectCtrl.ngModel.$viewValue);
                                    }, true);
                                }
                            }
                            /**
                             * check if the mouseup event was on a scrollbar
                             */
                            function mouseOnScrollbar() {
                                var clickOnScrollbar = false;
                                if (ev && (ev.currentTarget.children.length > 0)) {
                                    var child = ev.currentTarget.children[0];
                                    var hasScrollbar = child.scrollHeight > child.clientHeight;
                                    if (hasScrollbar && child.children.length > 0) {
                                        var relPosX = ev.pageX - ev.currentTarget.getBoundingClientRect().left;
                                        if (relPosX > child.querySelector('md-option').offsetWidth)
                                            clickOnScrollbar = true;
                                    }
                                }
                                return clickOnScrollbar;
                            }
                        }
                    }

                }

                /**
                 * To notify listeners that the Select menu has closed,
                 * trigger the [optional] user-defined expression
                 */
                function announceClosed(opts) {
                    var mdSelect = opts.selectCtrl;
                    if (mdSelect) {
                        var menuController = opts.selectEl.controller('mdSelectMenu');
                        mdSelect.setLabelText(menuController.selectedLabels());
                        mdSelect.triggerClose();
                    }
                }


                /**
                 * Calculate the
                 */
                function calculateMenuPositions(scope, element, opts) {
                    var
                        containerNode = element[0],
                        targetNode = opts.target[0].children[0], // target the label
                        parentNode = $document[0].body,
                        selectNode = opts.selectEl[0],
                        contentNode = opts.contentEl[0],
                        parentRect = parentNode.getBoundingClientRect(),
                        targetRect = targetNode.getBoundingClientRect(),
                        shouldOpenAroundTarget = false,
                        bounds = {
                            left: parentRect.left + SELECT_EDGE_MARGIN,
                            top: SELECT_EDGE_MARGIN,
                            bottom: parentRect.height - SELECT_EDGE_MARGIN,
                            right: parentRect.width - SELECT_EDGE_MARGIN - ($mdUtil.floatingScrollbars() ? 16 : 0)
                        },
                        spaceAvailable = {
                            top: targetRect.top - bounds.top,
                            left: targetRect.left - bounds.left,
                            right: bounds.right - (targetRect.left + targetRect.width),
                            bottom: bounds.bottom - (targetRect.top + targetRect.height)
                        },
                        maxWidth = parentRect.width - SELECT_EDGE_MARGIN * 2,
                        selectedNode = selectNode.querySelector('md-option[selected]'),
                        optionNodes = selectNode.getElementsByTagName('md-option'),
                        optgroupNodes = selectNode.getElementsByTagName('md-optgroup'),
                        isScrollable = calculateScrollable(element, contentNode),
                        centeredNode;

                    var loading = isPromiseLike(opts.loadingAsync);
                    if (!loading) {
                        // If a selected node, center around that
                        if (selectedNode) {
                            centeredNode = selectedNode;
                            // If there are option groups, center around the first option group
                        } else if (optgroupNodes.length) {
                            centeredNode = optgroupNodes[0];
                            // Otherwise - if we are not loading async - center around the first optionNode
                        } else if (optionNodes.length) {
                            centeredNode = optionNodes[0];
                            // In case there are no options, center on whatever's in there... (eg progress indicator)
                        } else {
                            centeredNode = contentNode.firstElementChild || contentNode;
                        }
                    } else {
                        // If loading, center on progress indicator
                        centeredNode = contentNode.firstElementChild || contentNode;
                    }

                    if (contentNode.offsetWidth > maxWidth) {
                        contentNode.style['max-width'] = maxWidth + 'px';
                    } else {
                        contentNode.style.maxWidth = null;
                    }
                    if (shouldOpenAroundTarget) {
                        contentNode.style['min-width'] = targetRect.width + 'px';
                    }

                    // Remove padding before we compute the position of the menu
                    if (isScrollable) {
                        selectNode.classList.add('md-overflow');
                    }

                    var focusedNode = centeredNode;
                    if ((focusedNode.tagName || '').toUpperCase() === 'MD-OPTGROUP') {
                        focusedNode = optionNodes[0] || contentNode.firstElementChild || contentNode;
                        centeredNode = focusedNode;
                    }
                    // Cache for autoFocus()
                    opts.focusedNode = focusedNode;

                    // Get the selectMenuRect *after* max-width is possibly set above
                    containerNode.style.display = 'block';
                    var selectMenuRect = selectNode.getBoundingClientRect();
                    var centeredRect = getOffsetRect(centeredNode);

                    if (centeredNode) {
                        var centeredStyle = $window.getComputedStyle(centeredNode);
                        centeredRect.paddingLeft = parseInt(centeredStyle.paddingLeft, 10) || 0;
                        centeredRect.paddingRight = parseInt(centeredStyle.paddingRight, 10) || 0;
                    }

                    if (isScrollable) {
                        var scrollBuffer = contentNode.offsetHeight / 2;
                        contentNode.scrollTop = centeredRect.top + centeredRect.height / 2 - scrollBuffer;

                        if (spaceAvailable.top < scrollBuffer) {
                            contentNode.scrollTop = Math.min(
                                centeredRect.top,
                                contentNode.scrollTop + scrollBuffer - spaceAvailable.top
                            );
                        } else if (spaceAvailable.bottom < scrollBuffer) {
                            contentNode.scrollTop = Math.max(
                                centeredRect.top + centeredRect.height - selectMenuRect.height,
                                contentNode.scrollTop - scrollBuffer + spaceAvailable.bottom
                            );
                        }
                    }

                    var left, top, transformOrigin, minWidth;
                    if (shouldOpenAroundTarget) {
                        left = targetRect.left;
                        top = targetRect.top + targetRect.height;
                        transformOrigin = '50% 0';
                        if (top + selectMenuRect.height > bounds.bottom) {
                            top = targetRect.top - selectMenuRect.height;
                            transformOrigin = '50% 100%';
                        }
                    } else {
                        left = (targetRect.left + centeredRect.left - centeredRect.paddingLeft) + 2;
                        top = Math.floor(targetRect.top + targetRect.height / 2 - centeredRect.height / 2 -
                            centeredRect.top + contentNode.scrollTop) + 2;

                        transformOrigin = (centeredRect.left + targetRect.width / 2) + 'px ' +
                            (centeredRect.top + centeredRect.height / 2 - contentNode.scrollTop) + 'px 0px';

                        minWidth = Math.min(targetRect.width + centeredRect.paddingLeft + centeredRect.paddingRight, maxWidth);
                    }

                    // Keep left and top within the window
                    var containerRect = containerNode.getBoundingClientRect();
                    var scaleX = Math.round(100 * Math.min(targetRect.width / selectMenuRect.width, 1.0)) / 100;
                    var scaleY = Math.round(100 * Math.min(targetRect.height / selectMenuRect.height, 1.0)) / 100;

                    return {
                        container: {
                            element: angular.element(containerNode),
                            styles: {
                                left: Math.floor(clamp(bounds.left, left, bounds.right - containerRect.width)),
                                top: Math.floor(clamp(bounds.top, top, bounds.bottom - containerRect.height)),
                                'min-width': minWidth
                            }
                        },
                        dropDown: {
                            element: angular.element(selectNode),
                            styles: {
                                transformOrigin: transformOrigin,
                                transform: !opts.alreadyOpen ? $mdUtil.supplant('scale({0},{1})', [scaleX, scaleY]) : ""
                            }
                        }
                    };

                }

            }

            function isPromiseLike(obj) {
                return obj && angular.isFunction(obj.then);
            }

            function clamp(min, n, max) {
                return Math.max(min, Math.min(n, max));
            }

            function getOffsetRect(node) {
                return node ? {
                    left: node.offsetLeft,
                    top: node.offsetTop,
                    width: node.offsetWidth,
                    height: node.offsetHeight
                } : {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                };
            }

            function calculateScrollable(element, contentNode) {
                var isScrollable = false;

                try {
                    var oldDisplay = element[0].style.display;

                    // Set the element's display to block so that this calculation is correct
                    element[0].style.display = 'block';

                    isScrollable = contentNode.scrollHeight > contentNode.offsetHeight;

                    // Reset it back afterwards
                    element[0].style.display = oldDisplay;
                } finally {
                    // Nothing to do
                }
                return isScrollable;
            }
        }
        SelectProvider.$inject = ["$$interimElementProvider"];


    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.showHide
         */

        // Add additional handlers to ng-show and ng-hide that notify directives
        // contained within that they should recompute their size.
        // These run in addition to Angular's built-in ng-hide and ng-show directives.
        angular.module('material.components.showHide', [
                'material.core'
            ])
            .directive('ngShow', createDirective('ngShow', true))
            .directive('ngHide', createDirective('ngHide', false));


        function createDirective(name, targetValue) {
            return ['$mdUtil', function($mdUtil) {
                return {
                    restrict: 'A',
                    multiElement: true,
                    link: function($scope, $element, $attr) {
                        var unregister = $scope.$on('$md-resize-enable', function() {
                            unregister();

                            $scope.$watch($attr[name], function(value) {
                                if (!!value === targetValue) {
                                    $mdUtil.nextTick(function() {
                                        $scope.$broadcast('$md-resize');
                                    });
                                    $mdUtil.dom.animator.waitTransitionEnd($element).then(function() {
                                        $scope.$broadcast('$md-resize');
                                    });
                                }
                            });
                        });
                    }
                };
            }];
        }
    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.sidenav
         *
         * @description
         * A Sidenav QP component.
         */
        angular
            .module('material.components.sidenav', [
                'material.core',
                'material.components.backdrop'
            ])
            .factory('$mdSidenav', SidenavService)
            .directive('mdSidenav', SidenavDirective)
            .directive('mdSidenavFocus', SidenavFocusDirective)
            .controller('$mdSidenavController', SidenavController);


        /**
         * @ngdoc service
         * @name $mdSidenav
         * @module material.components.sidenav
         *
         * @description
         * `$mdSidenav` makes it easy to interact with multiple sidenavs
         * in an app.
         *
         * @usage
         * <hljs lang="js">
         * // Async lookup for sidenav instance; will resolve when the instance is available
         * $mdSidenav(componentId).then(function(instance) {
         *   $log.debug( componentId + "is now ready" );
         * });
         * // Async toggle the given sidenav;
         * // when instance is known ready and lazy lookup is not needed.
         * $mdSidenav(componentId)
         *    .toggle()
         *    .then(function(){
         *      $log.debug('toggled');
         *    });
         * // Async open the given sidenav
         * $mdSidenav(componentId)
         *    .open()
         *    .then(function(){
         *      $log.debug('opened');
         *    });
         * // Async close the given sidenav
         * $mdSidenav(componentId)
         *    .close()
         *    .then(function(){
         *      $log.debug('closed');
         *    });
         * // Sync check to see if the specified sidenav is set to be open
         * $mdSidenav(componentId).isOpen();
         * // Sync check to whether given sidenav is locked open
         * // If this is true, the sidenav will be open regardless of close()
         * $mdSidenav(componentId).isLockedOpen();
         * </hljs>
         */
        function SidenavService($mdComponentRegistry, $q) {
            return function(handle) {

                // Lookup the controller instance for the specified sidNav instance
                var self;
                var errorMsg = "SideNav '" + handle + "' is not available!";
                var instance = $mdComponentRegistry.get(handle);

                if (!instance) {
                    $mdComponentRegistry.notFoundError(handle);
                }

                return self = {
                    // -----------------
                    // Sync methods
                    // -----------------
                    isOpen: function() {
                        return instance && instance.isOpen();
                    },
                    isLockedOpen: function() {
                        return instance && instance.isLockedOpen();
                    },
                    // -----------------
                    // Async methods
                    // -----------------
                    toggle: function() {
                        return instance ? instance.toggle() : $q.reject(errorMsg);
                    },
                    open: function() {
                        return instance ? instance.open() : $q.reject(errorMsg);
                    },
                    close: function() {
                        return instance ? instance.close() : $q.reject(errorMsg);
                    },
                    then: function(callbackFn) {
                        var promise = instance ? $q.when(instance) : waitForInstance();
                        return promise.then(callbackFn || angular.noop);
                    }
                };

                /**
                 * Deferred lookup of component instance using $component registry
                 */
                function waitForInstance() {
                    return $mdComponentRegistry
                        .when(handle)
                        .then(function(it) {
                            instance = it;
                            return it;
                        });
                }
            };
        }
        SidenavService.$inject = ["$mdComponentRegistry", "$q"];
        /**
         * @ngdoc directive
         * @name mdSidenavFocus
         * @module material.components.sidenav
         *
         * @restrict A
         *
         * @description
         * `mdSidenavFocus` provides a way to specify the focused element when a sidenav opens.
         * This is completely optional, as the sidenav itself is focused by default.
         *
         * @usage
         * <hljs lang="html">
         * <md-sidenav>
         *   <form>
         *     <md-input-container>
         *       <label for="testInput">Label</label>
         *       <input id="testInput" type="text" md-sidenav-focus>
         *     </md-input-container>
         *   </form>
         * </md-sidenav>
         * </hljs>
         **/
        function SidenavFocusDirective() {
            return {
                restrict: 'A',
                require: '^mdSidenav',
                link: function(scope, element, attr, sidenavCtrl) {
                    // @see $mdUtil.findFocusTarget(...)
                }
            };
        }
        /**
         * @ngdoc directive
         * @name mdSidenav
         * @module material.components.sidenav
         * @restrict E
         *
         * @description
         *
         * A Sidenav component that can be opened and closed programatically.
         *
         * By default, upon opening it will slide out on top of the main content area.
         *
         * For keyboard and screen reader accessibility, focus is sent to the sidenav wrapper by default.
         * It can be overridden with the `md-autofocus` directive on the child element you want focused.
         *
         * @usage
         * <hljs lang="html">
         * <div layout="row" ng-controller="MyController">
         *   <md-sidenav md-component-id="left" class="md-sidenav-left">
         *     Left Nav!
         *   </md-sidenav>
         *
         *   <md-content>
         *     Center Content
         *     <md-button ng-click="openLeftMenu()">
         *       Open Left Menu
         *     </md-button>
         *   </md-content>
         *
         *   <md-sidenav md-component-id="right"
         *     md-is-locked-open="$mdMedia('min-width: 333px')"
         *     class="md-sidenav-right">
         *     <form>
         *       <md-input-container>
         *         <label for="testInput">Test input</label>
         *         <input id="testInput" type="text"
         *                ng-model="data" md-autofocus>
         *       </md-input-container>
         *     </form>
         *   </md-sidenav>
         * </div>
         * </hljs>
         *
         * <hljs lang="js">
         * var app = angular.module('myApp', ['ngMaterial']);
         * app.controller('MyController', function($scope, $mdSidenav) {
         *   $scope.openLeftMenu = function() {
         *     $mdSidenav('left').toggle();
         *   };
         * });
         * </hljs>
         *
         * @param {expression=} md-is-open A model bound to whether the sidenav is opened.
         * @param {string=} md-component-id componentId to use with $mdSidenav service.
         * @param {expression=} md-is-locked-open When this expression evalutes to true,
         * the sidenav 'locks open': it falls into the content's flow instead
         * of appearing over it. This overrides the `is-open` attribute.
         *
         * The $mdMedia() service is exposed to the is-locked-open attribute, which
         * can be given a media query or one of the `sm`, `gt-sm`, `md`, `gt-md`, `lg` or `gt-lg` presets.
         * Examples:
         *
         *   - `<md-sidenav md-is-locked-open="shouldLockOpen"></md-sidenav>`
         *   - `<md-sidenav md-is-locked-open="$mdMedia('min-width: 1000px')"></md-sidenav>`
         *   - `<md-sidenav md-is-locked-open="$mdMedia('sm')"></md-sidenav>` (locks open on small screens)
         */
        function SidenavDirective($mdMedia, $mdUtil, $mdConstant, $mdTheming, $animate, $compile, $parse, $log, $q, $document) {
            return {
                restrict: 'E',
                scope: {
                    isOpen: '=?mdIsOpen'
                },
                controller: '$mdSidenavController',
                compile: function(element) {
                    element.addClass('md-closed');
                    element.attr('tabIndex', '-1');
                    return postLink;
                }
            };

            /**
             * Directive Post Link function...
             */
            function postLink(scope, element, attr, sidenavCtrl) {
                var lastParentOverFlow;
                var triggeringElement = null;
                var promise = $q.when(true);

                var isLockedOpenParsed = $parse(attr.mdIsLockedOpen);
                var isLocked = function() {
                    return isLockedOpenParsed(scope.$parent, {
                        $media: function(arg) {
                            $log.warn("$media is deprecated for is-locked-open. Use $mdMedia instead.");
                            return $mdMedia(arg);
                        },
                        $mdMedia: $mdMedia
                    });
                };
                var backdrop = $mdUtil.createBackdrop(scope, "md-sidenav-backdrop md-opaque ng-enter");

                $mdTheming.inherit(backdrop, element);

                element.on('$destroy', function() {
                    backdrop.remove();
                    sidenavCtrl.destroy();
                });

                scope.$on('$destroy', function() {
                    backdrop.remove()
                });

                scope.$watch(isLocked, updateIsLocked);
                scope.$watch('isOpen', updateIsOpen);


                // Publish special accessor for the Controller instance
                sidenavCtrl.$toggleOpen = toggleOpen;

                /**
                 * Toggle the DOM classes to indicate `locked`
                 * @param isLocked
                 */
                function updateIsLocked(isLocked, oldValue) {
                    scope.isLockedOpen = isLocked;
                    if (isLocked === oldValue) {
                        element.toggleClass('md-locked-open', !!isLocked);
                    } else {
                        $animate[isLocked ? 'addClass' : 'removeClass'](element, 'md-locked-open');
                    }
                    backdrop.toggleClass('md-locked-open', !!isLocked);
                }

                /**
                 * Toggle the SideNav view and attach/detach listeners
                 * @param isOpen
                 */
                function updateIsOpen(isOpen) {
                    // Support deprecated md-sidenav-focus attribute as fallback
                    var focusEl = $mdUtil.findFocusTarget(element) || $mdUtil.findFocusTarget(element, '[md-sidenav-focus]') || element;
                    var parent = element.parent();

                    parent[isOpen ? 'on' : 'off']('keydown', onKeyDown);
                    backdrop[isOpen ? 'on' : 'off']('click', close);

                    if (isOpen) {
                        // Capture upon opening..
                        triggeringElement = $document[0].activeElement;
                    }

                    disableParentScroll(isOpen);

                    return promise = $q.all([
                            isOpen ? $animate.enter(backdrop, parent) : $animate.leave(backdrop),
                            $animate[isOpen ? 'removeClass' : 'addClass'](element, 'md-closed')
                        ])
                        .then(function() {
                            // Perform focus when animations are ALL done...
                            if (scope.isOpen) {
                                focusEl && focusEl.focus();
                            }
                        });
                }

                /**
                 * Prevent parent scrolling (when the SideNav is open)
                 */
                function disableParentScroll(disabled) {
                    var parent = element.parent();
                    if (disabled && !lastParentOverFlow) {

                        lastParentOverFlow = parent.css('overflow');
                        parent.css('overflow', 'hidden');

                    } else if (angular.isDefined(lastParentOverFlow)) {

                        parent.css('overflow', lastParentOverFlow);
                        lastParentOverFlow = undefined;

                    }
                }

                /**
                 * Toggle the sideNav view and publish a promise to be resolved when
                 * the view animation finishes.
                 *
                 * @param isOpen
                 * @returns {*}
                 */
                function toggleOpen(isOpen) {
                    if (scope.isOpen == isOpen) {

                        return $q.when(true);

                    } else {
                        return $q(function(resolve) {
                            // Toggle value to force an async `updateIsOpen()` to run
                            scope.isOpen = isOpen;

                            $mdUtil.nextTick(function() {
                                // When the current `updateIsOpen()` animation finishes
                                promise.then(function(result) {

                                    if (!scope.isOpen) {
                                        // reset focus to originating element (if available) upon close
                                        triggeringElement && triggeringElement.focus();
                                        triggeringElement = null;
                                    }

                                    resolve(result);
                                });
                            });

                        });

                    }
                }

                /**
                 * Auto-close sideNav when the `escape` key is pressed.
                 * @param evt
                 */
                function onKeyDown(ev) {
                    var isEscape = (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE);
                    return isEscape ? close(ev) : $q.when(true);
                }

                /**
                 * With backdrop `clicks` or `escape` key-press, immediately
                 * apply the CSS close transition... Then notify the controller
                 * to close() and perform its own actions.
                 */
                function close(ev) {
                    ev.preventDefault();

                    return sidenavCtrl.close();
                }

            }
        }
        SidenavDirective.$inject = ["$mdMedia", "$mdUtil", "$mdConstant", "$mdTheming", "$animate", "$compile", "$parse", "$log", "$q", "$document"];

        /*
         * @private
         * @ngdoc controller
         * @name SidenavController
         * @module material.components.sidenav
         *
         */
        function SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {

            var self = this;

            // Use Default internal method until overridden by directive postLink

            // Synchronous getters
            self.isOpen = function() {
                return !!$scope.isOpen;
            };
            self.isLockedOpen = function() {
                return !!$scope.isLockedOpen;
            };

            // Async actions
            self.open = function() {
                return self.$toggleOpen(true);
            };
            self.close = function() {
                return self.$toggleOpen(false);
            };
            self.toggle = function() {
                return self.$toggleOpen(!$scope.isOpen);
            };
            self.$toggleOpen = function(value) {
                return $q.when($scope.isOpen = value);
            };

            self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);
        }
        SidenavController.$inject = ["$scope", "$element", "$attrs", "$mdComponentRegistry", "$q"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.slider
         */
        angular.module('material.components.slider', [
                'material.core'
            ])
            .directive('mdSlider', SliderDirective);

        /**
         * @ngdoc directive
         * @name mdSlider
         * @module material.components.slider
         * @restrict E
         * @description
         * The `<md-slider>` component allows the user to choose from a range of
         * values.
         *
         * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
         * the slider is in the accent color by default. The primary color palette may be used with
         * the `md-primary` class.
         *
         * It has two modes: 'normal' mode, where the user slides between a wide range
         * of values, and 'discrete' mode, where the user slides between only a few
         * select values.
         *
         * To enable discrete mode, add the `md-discrete` attribute to a slider,
         * and use the `step` attribute to change the distance between
         * values the user is allowed to pick.
         *
         * @usage
         * <h4>Normal Mode</h4>
         * <hljs lang="html">
         * <md-slider ng-model="myValue" min="5" max="500">
         * </md-slider>
         * </hljs>
         * <h4>Discrete Mode</h4>
         * <hljs lang="html">
         * <md-slider md-discrete ng-model="myDiscreteValue" step="10" min="10" max="130">
         * </md-slider>
         * </hljs>
         *
         * @param {boolean=} md-discrete Whether to enable discrete mode.
         * @param {number=} step The distance between values the user is allowed to pick. Default 1.
         * @param {number=} min The minimum value the user is allowed to pick. Default 0.
         * @param {number=} max The maximum value the user is allowed to pick. Default 100.
         */
        function SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse, $log) {
            return {
                scope: {},
                require: '?ngModel',
                template: '<div class="md-slider-wrapper">' +
                    '<div class="md-track-container">' +
                    '<div class="md-track"></div>' +
                    '<div class="md-track md-track-fill"></div>' +
                    '<div class="md-track-ticks"></div>' +
                    '</div>' +
                    '<div class="md-thumb-container">' +
                    '<div class="md-thumb"></div>' +
                    '<div class="md-focus-thumb"></div>' +
                    '<div class="md-focus-ring"></div>' +
                    '<div class="md-sign">' +
                    '<span class="md-thumb-text"></span>' +
                    '</div>' +
                    '<div class="md-disabled-thumb"></div>' +
                    '</div>' +
                    '</div>',
                compile: compile
            };

            // **********************************************************
            // Private Methods
            // **********************************************************

            function compile(tElement, tAttrs) {
                tElement.attr({
                    tabIndex: 0,
                    role: 'slider'
                });

                $mdAria.expect(tElement, 'aria-label');

                return postLink;
            }

            function postLink(scope, element, attr, ngModelCtrl) {
                $mdTheming(element);
                ngModelCtrl = ngModelCtrl || {
                    // Mock ngModelController if it doesn't exist to give us
                    // the minimum functionality needed
                    $setViewValue: function(val) {
                        this.$viewValue = val;
                        this.$viewChangeListeners.forEach(function(cb) {
                            cb();
                        });
                    },
                    $parsers: [],
                    $formatters: [],
                    $viewChangeListeners: []
                };

                var isDisabledGetter = angular.noop;
                if (attr.disabled != null) {
                    isDisabledGetter = function() {
                        return true;
                    };
                } else if (attr.ngDisabled) {
                    isDisabledGetter = angular.bind(null, $parse(attr.ngDisabled), scope.$parent);
                }

                var thumb = angular.element(element[0].querySelector('.md-thumb'));
                var thumbText = angular.element(element[0].querySelector('.md-thumb-text'));
                var thumbContainer = thumb.parent();
                var trackContainer = angular.element(element[0].querySelector('.md-track-container'));
                var activeTrack = angular.element(element[0].querySelector('.md-track-fill'));
                var tickContainer = angular.element(element[0].querySelector('.md-track-ticks'));
                var throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5000);

                // Default values, overridable by attrs
                angular.isDefined(attr.min) ? attr.$observe('min', updateMin) : updateMin(0);
                angular.isDefined(attr.max) ? attr.$observe('max', updateMax) : updateMax(100);
                angular.isDefined(attr.step) ? attr.$observe('step', updateStep) : updateStep(1);

                // We have to manually stop the $watch on ngDisabled because it exists
                // on the parent scope, and won't be automatically destroyed when
                // the component is destroyed.
                var stopDisabledWatch = angular.noop;
                if (attr.ngDisabled) {
                    stopDisabledWatch = scope.$parent.$watch(attr.ngDisabled, updateAriaDisabled);
                }

                $mdGesture.register(element, 'drag');

                element
                    .on('keydown', keydownListener)
                    .on('$md.pressdown', onPressDown)
                    .on('$md.pressup', onPressUp)
                    .on('$md.dragstart', onDragStart)
                    .on('$md.drag', onDrag)
                    .on('$md.dragend', onDragEnd);

                // On resize, recalculate the slider's dimensions and re-render
                function updateAll() {
                    refreshSliderDimensions();
                    ngModelRender();
                    redrawTicks();
                }
                setTimeout(updateAll, 0);

                var debouncedUpdateAll = $$rAF.throttle(updateAll);
                angular.element($window).on('resize', debouncedUpdateAll);

                scope.$on('$destroy', function() {
                    angular.element($window).off('resize', debouncedUpdateAll);
                    stopDisabledWatch();
                });

                ngModelCtrl.$render = ngModelRender;
                ngModelCtrl.$viewChangeListeners.push(ngModelRender);
                ngModelCtrl.$formatters.push(minMaxValidator);
                ngModelCtrl.$formatters.push(stepValidator);

                /**
                 * Attributes
                 */
                var min;
                var max;
                var step;

                function updateMin(value) {
                    min = parseFloat(value);
                    element.attr('aria-valuemin', value);
                    updateAll();
                }

                function updateMax(value) {
                    max = parseFloat(value);
                    element.attr('aria-valuemax', value);
                    updateAll();
                }

                function updateStep(value) {
                    step = parseFloat(value);
                    redrawTicks();
                }

                function updateAriaDisabled(isDisabled) {
                    element.attr('aria-disabled', !!isDisabled);
                }

                // Draw the ticks with canvas.
                // The alternative to drawing ticks with canvas is to draw one element for each tick,
                // which could quickly become a performance bottleneck.
                var tickCanvas, tickCtx;

                function redrawTicks() {
                    if (!angular.isDefined(attr.mdDiscrete)) return;
                    if (angular.isUndefined(step)) return;

                    if (step <= 0) {
                        var msg = 'Slider step value must be greater than zero when in discrete mode';
                        $log.error(msg);
                        throw new Error(msg);
                    }

                    var numSteps = Math.floor((max - min) / step);
                    if (!tickCanvas) {
                        tickCanvas = angular.element('<canvas style="position:absolute;">');
                        tickContainer.append(tickCanvas);

                        var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);
                        tickCtx = tickCanvas[0].getContext('2d');
                        tickCtx.fillStyle = trackTicksStyle.backgroundColor || 'black';
                    }

                    var dimensions = getSliderDimensions();
                    tickCanvas[0].width = dimensions.width;
                    tickCanvas[0].height = dimensions.height;

                    var distance;
                    for (var i = 0; i <= numSteps; i++) {
                        distance = Math.floor(dimensions.width * (i / numSteps));
                        tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);
                    }
                }


                /**
                 * Refreshing Dimensions
                 */
                var sliderDimensions = {};
                refreshSliderDimensions();

                function refreshSliderDimensions() {
                    sliderDimensions = trackContainer[0].getBoundingClientRect();
                }

                function getSliderDimensions() {
                    throttledRefreshDimensions();
                    return sliderDimensions;
                }

                /**
                 * left/right arrow listener
                 */
                function keydownListener(ev) {
                    if (element[0].hasAttribute('disabled')) {
                        return;
                    }

                    var changeAmount;
                    if (ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW) {
                        changeAmount = -step;
                    } else if (ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW) {
                        changeAmount = step;
                    }
                    if (changeAmount) {
                        if (ev.metaKey || ev.ctrlKey || ev.altKey) {
                            changeAmount *= 4;
                        }
                        ev.preventDefault();
                        ev.stopPropagation();
                        scope.$evalAsync(function() {
                            setModelValue(ngModelCtrl.$viewValue + changeAmount);
                        });
                    }
                }

                /**
                 * ngModel setters and validators
                 */
                function setModelValue(value) {
                    ngModelCtrl.$setViewValue(minMaxValidator(stepValidator(value)));
                }

                function ngModelRender() {
                    if (isNaN(ngModelCtrl.$viewValue)) {
                        ngModelCtrl.$viewValue = ngModelCtrl.$modelValue;
                    }

                    var percent = (ngModelCtrl.$viewValue - min) / (max - min);
                    scope.modelValue = ngModelCtrl.$viewValue;
                    element.attr('aria-valuenow', ngModelCtrl.$viewValue);
                    setSliderPercent(percent);
                    thumbText.text(ngModelCtrl.$viewValue);
                }

                function minMaxValidator(value) {
                    if (angular.isNumber(value)) {
                        return Math.max(min, Math.min(max, value));
                    }
                }

                function stepValidator(value) {
                    if (angular.isNumber(value)) {
                        var formattedValue = (Math.round((value - min) / step) * step + min);
                        // Format to 3 digits after the decimal point - fixes #2015.
                        return (Math.round(formattedValue * 1000) / 1000);
                    }
                }

                /**
                 * @param percent 0-1
                 */
                function setSliderPercent(percent) {
                    var percentStr = (percent * 100) + '%';

                    activeTrack.css('width', percentStr);
                    thumbContainer.css('left', percentStr);

                    element.toggleClass('md-min', percent === 0);
                    element.toggleClass('md-max', percent === 1);
                }


                /**
                 * Slide listeners
                 */
                var isDragging = false;
                var isDiscrete = angular.isDefined(attr.mdDiscrete);

                function onPressDown(ev) {
                    if (isDisabledGetter()) return;

                    element.addClass('md-active');
                    element[0].focus();
                    refreshSliderDimensions();

                    var exactVal = percentToValue(positionToPercent(ev.pointer.x));
                    var closestVal = minMaxValidator(stepValidator(exactVal));
                    scope.$apply(function() {
                        setModelValue(closestVal);
                        setSliderPercent(valueToPercent(closestVal));
                    });
                }

                function onPressUp(ev) {
                    if (isDisabledGetter()) return;

                    element.removeClass('md-dragging md-active');

                    var exactVal = percentToValue(positionToPercent(ev.pointer.x));
                    var closestVal = minMaxValidator(stepValidator(exactVal));
                    scope.$apply(function() {
                        setModelValue(closestVal);
                        ngModelRender();
                    });
                }

                function onDragStart(ev) {
                    if (isDisabledGetter()) return;
                    isDragging = true;
                    ev.stopPropagation();

                    element.addClass('md-dragging');
                    setSliderFromEvent(ev);
                }

                function onDrag(ev) {
                    if (!isDragging) return;
                    ev.stopPropagation();
                    setSliderFromEvent(ev);
                }

                function onDragEnd(ev) {
                    if (!isDragging) return;
                    ev.stopPropagation();
                    isDragging = false;
                }

                function setSliderFromEvent(ev) {
                    // While panning discrete, update only the
                    // visual positioning but not the model value.
                    if (isDiscrete) adjustThumbPosition(ev.pointer.x);
                    else doSlide(ev.pointer.x);
                }

                /**
                 * Slide the UI by changing the model value
                 * @param x
                 */
                function doSlide(x) {
                    scope.$evalAsync(function() {
                        setModelValue(percentToValue(positionToPercent(x)));
                    });
                }

                /**
                 * Slide the UI without changing the model (while dragging/panning)
                 * @param x
                 */
                function adjustThumbPosition(x) {
                    var exactVal = percentToValue(positionToPercent(x));
                    var closestVal = minMaxValidator(stepValidator(exactVal));
                    setSliderPercent(positionToPercent(x));
                    thumbText.text(closestVal);
                }

                /**
                 * Convert horizontal position on slider to percentage value of offset from beginning...
                 * @param x
                 * @returns {number}
                 */
                function positionToPercent(x) {
                    return Math.max(0, Math.min(1, (x - sliderDimensions.left) / (sliderDimensions.width)));
                }

                /**
                 * Convert percentage offset on slide to equivalent model value
                 * @param percent
                 * @returns {*}
                 */
                function percentToValue(percent) {
                    return (min + percent * (max - min));
                }

                function valueToPercent(val) {
                    return (val - min) / (max - min);
                }
            }
        }
        SliderDirective.$inject = ["$$rAF", "$window", "$mdAria", "$mdUtil", "$mdConstant", "$mdTheming", "$mdGesture", "$parse", "$log"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.sticky
         * @description
         * Sticky effects for md
         *
         */
        angular
            .module('material.components.sticky', [
                'material.core',
                'material.components.content'
            ])
            .factory('$mdSticky', MdSticky);

        /**
         * @ngdoc service
         * @name $mdSticky
         * @module material.components.sticky
         *
         * @description
         * The `$mdSticky`service provides a mixin to make elements sticky.
         *
         * @returns A `$mdSticky` function that takes three arguments:
         *   - `scope`
         *   - `element`: The element that will be 'sticky'
         *   - `elementClone`: A clone of the element, that will be shown
         *     when the user starts scrolling past the original element.
         *     If not provided, it will use the result of `element.clone()`.
         */
        function MdSticky($document, $mdConstant, $$rAF, $mdUtil) {

            var browserStickySupport = checkStickySupport();

            /**
             * Registers an element as sticky, used internally by directives to register themselves
             */
            return function registerStickyElement(scope, element, stickyClone) {
                var contentCtrl = element.controller('mdContent');
                if (!contentCtrl) return;

                if (browserStickySupport) {
                    element.css({
                        position: browserStickySupport,
                        top: 0,
                        'z-index': 2
                    });
                } else {
                    var $$sticky = contentCtrl.$element.data('$$sticky');
                    if (!$$sticky) {
                        $$sticky = setupSticky(contentCtrl);
                        contentCtrl.$element.data('$$sticky', $$sticky);
                    }

                    var deregister = $$sticky.add(element, stickyClone || element.clone());
                    scope.$on('$destroy', deregister);
                }
            };

            function setupSticky(contentCtrl) {
                var contentEl = contentCtrl.$element;

                // Refresh elements is very expensive, so we use the debounced
                // version when possible.
                var debouncedRefreshElements = $$rAF.throttle(refreshElements);

                // setupAugmentedScrollEvents gives us `$scrollstart` and `$scroll`,
                // more reliable than `scroll` on android.
                setupAugmentedScrollEvents(contentEl);
                contentEl.on('$scrollstart', debouncedRefreshElements);
                contentEl.on('$scroll', onScroll);

                var self;
                return self = {
                    prev: null,
                    current: null, //the currently stickied item
                    next: null,
                    items: [],
                    add: add,
                    refreshElements: refreshElements
                };

                /***************
                 * Public
                 ***************/
                // Add an element and its sticky clone to this content's sticky collection
                function add(element, stickyClone) {
                    stickyClone.addClass('md-sticky-clone');

                    var item = {
                        element: element,
                        clone: stickyClone
                    };
                    self.items.push(item);

                    $mdUtil.nextTick(function() {
                        contentEl.prepend(item.clone);
                    });

                    debouncedRefreshElements();

                    return function remove() {
                        self.items.forEach(function(item, index) {
                            if (item.element[0] === element[0]) {
                                self.items.splice(index, 1);
                                item.clone.remove();
                            }
                        });
                        debouncedRefreshElements();
                    };
                }

                function refreshElements() {
                    // Sort our collection of elements by their current position in the DOM.
                    // We need to do this because our elements' order of being added may not
                    // be the same as their order of display.
                    self.items.forEach(refreshPosition);
                    self.items = self.items.sort(function(a, b) {
                        return a.top < b.top ? -1 : 1;
                    });

                    // Find which item in the list should be active, 
                    // based upon the content's current scroll position
                    var item;
                    var currentScrollTop = contentEl.prop('scrollTop');
                    for (var i = self.items.length - 1; i >= 0; i--) {
                        if (currentScrollTop > self.items[i].top) {
                            item = self.items[i];
                            break;
                        }
                    }
                    setCurrentItem(item);
                }

                /***************
                 * Private
                 ***************/

                // Find the `top` of an item relative to the content element,
                // and also the height.
                function refreshPosition(item) {
                    // Find the top of an item by adding to the offsetHeight until we reach the 
                    // content element.
                    var current = item.element[0];
                    item.top = 0;
                    item.left = 0;
                    while (current && current !== contentEl[0]) {
                        item.top += current.offsetTop;
                        item.left += current.offsetLeft;
                        current = current.offsetParent;
                    }
                    item.height = item.element.prop('offsetHeight');
                    item.clone.css('margin-left', item.left + 'px');
                    if ($mdUtil.floatingScrollbars()) {
                        item.clone.css('margin-right', '0');
                    }
                }

                // As we scroll, push in and select the correct sticky element.
                function onScroll() {
                    var scrollTop = contentEl.prop('scrollTop');
                    var isScrollingDown = scrollTop > (onScroll.prevScrollTop || 0);

                    // Store the previous scroll so we know which direction we are scrolling
                    onScroll.prevScrollTop = scrollTop;

                    //
                    // AT TOP (not scrolling)
                    //
                    if (scrollTop === 0) {
                        // If we're at the top, just clear the current item and return
                        setCurrentItem(null);
                        return;
                    }

                    //
                    // SCROLLING DOWN (going towards the next item)
                    //
                    if (isScrollingDown) {

                        // If we've scrolled down past the next item's position, sticky it and return
                        if (self.next && self.next.top <= scrollTop) {
                            setCurrentItem(self.next);
                            return;
                        }

                        // If the next item is close to the current one, push the current one up out of the way
                        if (self.current && self.next && self.next.top - scrollTop <= self.next.height) {
                            translate(self.current, scrollTop + (self.next.top - self.next.height - scrollTop));
                            return;
                        }
                    }

                    //
                    // SCROLLING UP (not at the top & not scrolling down; must be scrolling up)
                    //
                    if (!isScrollingDown) {

                        // If we've scrolled up past the previous item's position, sticky it and return
                        if (self.current && self.prev && scrollTop < self.current.top) {
                            setCurrentItem(self.prev);
                            return;
                        }

                        // If the next item is close to the current one, pull the current one down into view
                        if (self.next && self.current && (scrollTop >= (self.next.top - self.current.height))) {
                            translate(self.current, scrollTop + (self.next.top - scrollTop - self.current.height));
                            return;
                        }
                    }

                    //
                    // Otherwise, just move the current item to the proper place (scrolling up or down)
                    //
                    if (self.current) {
                        translate(self.current, scrollTop);
                    }
                }

                function setCurrentItem(item) {
                    if (self.current === item) return;
                    // Deactivate currently active item
                    if (self.current) {
                        translate(self.current, null);
                        setStickyState(self.current, null);
                    }

                    // Activate new item if given
                    if (item) {
                        setStickyState(item, 'active');
                    }

                    self.current = item;
                    var index = self.items.indexOf(item);
                    // If index === -1, index + 1 = 0. It works out.
                    self.next = self.items[index + 1];
                    self.prev = self.items[index - 1];
                    setStickyState(self.next, 'next');
                    setStickyState(self.prev, 'prev');
                }

                function setStickyState(item, state) {
                    if (!item || item.state === state) return;
                    if (item.state) {
                        item.clone.attr('sticky-prev-state', item.state);
                        item.element.attr('sticky-prev-state', item.state);
                    }
                    item.clone.attr('sticky-state', state);
                    item.element.attr('sticky-state', state);
                    item.state = state;
                }

                function translate(item, amount) {
                    if (!item) return;
                    if (amount === null || amount === undefined) {
                        if (item.translateY) {
                            item.translateY = null;
                            item.clone.css($mdConstant.CSS.TRANSFORM, '');
                        }
                    } else {
                        item.translateY = amount;
                        item.clone.css(
                            $mdConstant.CSS.TRANSFORM,
                            'translate3d(' + item.left + 'px,' + amount + 'px,0)'
                        );
                    }
                }
            }

            // Function to check for browser sticky support
            function checkStickySupport($el) {
                var stickyProp;
                var testEl = angular.element('<div>');
                $document[0].body.appendChild(testEl[0]);

                var stickyProps = ['sticky', '-webkit-sticky'];
                for (var i = 0; i < stickyProps.length; ++i) {
                    testEl.css({
                        position: stickyProps[i],
                        top: 0,
                        'z-index': 2
                    });
                    if (testEl.css('position') == stickyProps[i]) {
                        stickyProp = stickyProps[i];
                        break;
                    }
                }
                testEl.remove();
                return stickyProp;
            }

            // Android 4.4 don't accurately give scroll events.
            // To fix this problem, we setup a fake scroll event. We say:
            // > If a scroll or touchmove event has happened in the last DELAY milliseconds, 
            //   then send a `$scroll` event every animationFrame.
            // Additionally, we add $scrollstart and $scrollend events.
            function setupAugmentedScrollEvents(element) {
                var SCROLL_END_DELAY = 200;
                var isScrolling;
                var lastScrollTime;
                element.on('scroll touchmove', function() {
                    if (!isScrolling) {
                        isScrolling = true;
                        $$rAF.throttle(loopScrollEvent);
                        element.triggerHandler('$scrollstart');
                    }
                    element.triggerHandler('$scroll');
                    lastScrollTime = +$mdUtil.now();
                });

                function loopScrollEvent() {
                    if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {
                        isScrolling = false;
                        element.triggerHandler('$scrollend');
                    } else {
                        element.triggerHandler('$scroll');
                        $$rAF.throttle(loopScrollEvent);
                    }
                }
            }

        }
        MdSticky.$inject = ["$document", "$mdConstant", "$$rAF", "$mdUtil"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.subheader
         * @description
         * SubHeader module
         *
         *  Subheaders are special list tiles that delineate distinct sections of a
         *  list or grid list and are typically related to the current filtering or
         *  sorting criteria. Subheader tiles are either displayed inline with tiles or
         *  can be associated with content, for example, in an adjacent column.
         *
         *  Upon scrolling, subheaders remain pinned to the top of the screen and remain
         *  pinned until pushed on or off screen by the next subheader. @see [Material
         *  Design Specifications](https://www.google.com/design/spec/components/subheaders.html)
         *
         *  > To improve the visual grouping of content, use the system color for your subheaders.
         *
         */
        angular
            .module('material.components.subheader', [
                'material.core',
                'material.components.sticky'
            ])
            .directive('mdSubheader', MdSubheaderDirective);

        /**
         * @ngdoc directive
         * @name mdSubheader
         * @module material.components.subheader
         *
         * @restrict E
         *
         * @description
         * The `<md-subheader>` directive is a subheader for a section. By default it is sticky.
         * You can make it not sticky by applying the `md-no-sticky` class to the subheader.
         *
         *
         * @usage
         * <hljs lang="html">
         * <md-subheader>Online Friends</md-subheader>
         * </hljs>
         */

        function MdSubheaderDirective($mdSticky, $compile, $mdTheming, $mdUtil) {
            return {
                restrict: 'E',
                replace: true,
                transclude: true,
                template: (
                    '<div class="md-subheader">' +
                    '  <div class="md-subheader-inner">' +
                    '    <span class="md-subheader-content"></span>' +
                    '  </div>' +
                    '</div>'
                ),
                link: function postLink(scope, element, attr, controllers, transclude) {
                    $mdTheming(element);
                    var outerHTML = element[0].outerHTML;

                    function getContent(el) {
                        return angular.element(el[0].querySelector('.md-subheader-content'));
                    }

                    // Transclude the user-given contents of the subheader
                    // the conventional way.
                    transclude(scope, function(clone) {
                        getContent(element).append(clone);
                    });

                    // Create another clone, that uses the outer and inner contents
                    // of the element, that will be 'stickied' as the user scrolls.
                    if (!element.hasClass('md-no-sticky')) {
                        transclude(scope, function(clone) {
                            // If the user adds an ng-if or ng-repeat directly to the md-subheader element, the
                            // compiled clone below will only be a comment tag (since they replace their elements with
                            // a comment) which cannot be properly passed to the $mdSticky; so we wrap it in our own
                            // DIV to ensure we have something $mdSticky can use
                            var wrapperHtml = '<div class="md-subheader-wrapper">' + outerHTML + '</div>';
                            var stickyClone = $compile(wrapperHtml)(scope);

                            // Append the sticky
                            $mdSticky(scope, element, stickyClone);

                            // Delay initialization until after any `ng-if`/`ng-repeat`/etc has finished before
                            // attempting to create the clone
                            $mdUtil.nextTick(function() {
                                getContent(stickyClone).append(clone);
                            });
                        });
                    }
                }
            }
        }
        MdSubheaderDirective.$inject = ["$mdSticky", "$compile", "$mdTheming", "$mdUtil"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.swipe
         * @description Swipe module!
         */
        /**
         * @ngdoc directive
         * @module material.components.swipe
         * @name mdSwipeLeft
         *
         * @restrict A
         *
         * @description
         * The md-swipe-left directive allows you to specify custom behavior when an element is swiped
         * left.
         *
         * @usage
         * <hljs lang="html">
         * <div md-swipe-left="onSwipeLeft()">Swipe me left!</div>
         * </hljs>
         */
        /**
         * @ngdoc directive
         * @module material.components.swipe
         * @name mdSwipeRight
         *
         * @restrict A
         *
         * @description
         * The md-swipe-right directive allows you to specify custom behavior when an element is swiped
         * right.
         *
         * @usage
         * <hljs lang="html">
         * <div md-swipe-right="onSwipeRight()">Swipe me right!</div>
         * </hljs>
         */
        /**
         * @ngdoc directive
         * @module material.components.swipe
         * @name mdSwipeUp
         *
         * @restrict A
         *
         * @description
         * The md-swipe-up directive allows you to specify custom behavior when an element is swiped
         * up.
         *
         * @usage
         * <hljs lang="html">
         * <div md-swipe-up="onSwipeUp()">Swipe me up!</div>
         * </hljs>
         */
        /**
         * @ngdoc directive
         * @module material.components.swipe
         * @name mdSwipeDown
         *
         * @restrict A
         *
         * @description
         * The md-swipe-down directive allows you to specify custom behavior when an element is swiped
         * down.
         *
         * @usage
         * <hljs lang="html">
         * <div md-swipe-down="onSwipDown()">Swipe me down!</div>
         * </hljs>
         */

        angular.module('material.components.swipe', ['material.core'])
            .directive('mdSwipeLeft', getDirective('SwipeLeft'))
            .directive('mdSwipeRight', getDirective('SwipeRight'))
            .directive('mdSwipeUp', getDirective('SwipeUp'))
            .directive('mdSwipeDown', getDirective('SwipeDown'));

        function getDirective(name) {
            var directiveName = 'md' + name;
            var eventName = '$md.' + name.toLowerCase();

            DirectiveFactory.$inject = ["$parse"];
            return DirectiveFactory;

            /* @ngInject */
            function DirectiveFactory($parse) {
                return {
                    restrict: 'A',
                    link: postLink
                };

                function postLink(scope, element, attr) {
                    var fn = $parse(attr[directiveName]);
                    element.on(eventName, function(ev) {
                        scope.$apply(function() {
                            fn(scope, {
                                $event: ev
                            });
                        });
                    });
                }
            }
        }



    })();
    (function() {
        "use strict";

        /**
         * @private
         * @ngdoc module
         * @name material.components.switch
         */

        angular.module('material.components.switch', [
                'material.core',
                'material.components.checkbox'
            ])
            .directive('mdSwitch', MdSwitch);

        /**
         * @private
         * @ngdoc directive
         * @module material.components.switch
         * @name mdSwitch
         * @restrict E
         *
         * The switch directive is used very much like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
         *
         * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
         * the switch is in the accent color by default. The primary color palette may be used with
         * the `md-primary` class.
         *
         * @param {string} ng-model Assignable angular expression to data-bind to.
         * @param {string=} name Property name of the form under which the control is published.
         * @param {expression=} ng-true-value The value to which the expression should be set when selected.
         * @param {expression=} ng-false-value The value to which the expression should be set when not selected.
         * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
         * @param {expression=} ng-disabled En/Disable based on the expression.
         * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects.
         * @param {string=} aria-label Publish the button label used by screen-readers for accessibility. Defaults to the switch's text.
         *
         * @usage
         * <hljs lang="html">
         * <md-switch ng-model="isActive" aria-label="Finished?">
         *   Finished ?
         * </md-switch>
         *
         * <md-switch md-no-ink ng-model="hasInk" aria-label="No Ink Effects">
         *   No Ink Effects
         * </md-switch>
         *
         * <md-switch ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">
         *   Disabled
         * </md-switch>
         *
         * </hljs>
         */
        function MdSwitch(mdCheckboxDirective, $mdUtil, $mdConstant, $parse, $$rAF, $mdGesture) {
            var checkboxDirective = mdCheckboxDirective[0];

            return {
                restrict: 'E',
                priority: 210, // Run before ngAria
                transclude: true,
                template: '<div class="md-container">' +
                    '<div class="md-bar"></div>' +
                    '<div class="md-thumb-container">' +
                    '<div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div>' +
                    '</div>' +
                    '</div>' +
                    '<div ng-transclude class="md-label"></div>',
                require: '?ngModel',
                compile: mdSwitchCompile
            };

            function mdSwitchCompile(element, attr) {
                var checkboxLink = checkboxDirective.compile(element, attr);
                // No transition on initial load.
                element.addClass('md-dragging');

                return function(scope, element, attr, ngModel) {
                    ngModel = ngModel || $mdUtil.fakeNgModel();

                    var disabledGetter = null;
                    if (attr.disabled != null) {
                        disabledGetter = function() {
                            return true;
                        };
                    } else if (attr.ngDisabled) {
                        disabledGetter = $parse(attr.ngDisabled);
                    }

                    var thumbContainer = angular.element(element[0].querySelector('.md-thumb-container'));
                    var switchContainer = angular.element(element[0].querySelector('.md-container'));

                    // no transition on initial load
                    $$rAF(function() {
                        element.removeClass('md-dragging');
                    });

                    checkboxLink(scope, element, attr, ngModel);

                    if (disabledGetter) {
                        scope.$watch(disabledGetter, function(isDisabled) {
                            element.attr('tabindex', isDisabled ? -1 : 0);
                        });
                    }

                    // These events are triggered by setup drag
                    $mdGesture.register(switchContainer, 'drag');
                    switchContainer
                        .on('$md.dragstart', onDragStart)
                        .on('$md.drag', onDrag)
                        .on('$md.dragend', onDragEnd);

                    var drag;

                    function onDragStart(ev) {
                        // Don't go if the switch is disabled.
                        if (disabledGetter && disabledGetter(scope)) return;
                        ev.stopPropagation();

                        element.addClass('md-dragging');
                        drag = {
                            width: thumbContainer.prop('offsetWidth')
                        };
                        element.removeClass('transition');
                    }

                    function onDrag(ev) {
                        if (!drag) return;
                        ev.stopPropagation();
                        ev.srcEvent && ev.srcEvent.preventDefault();

                        var percent = ev.pointer.distanceX / drag.width;

                        //if checked, start from right. else, start from left
                        var translate = ngModel.$viewValue ? 1 + percent : percent;
                        // Make sure the switch stays inside its bounds, 0-1%
                        translate = Math.max(0, Math.min(1, translate));

                        thumbContainer.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + (100 * translate) + '%,0,0)');
                        drag.translate = translate;
                    }

                    function onDragEnd(ev) {
                        if (!drag) return;
                        ev.stopPropagation();

                        element.removeClass('md-dragging');
                        thumbContainer.css($mdConstant.CSS.TRANSFORM, '');

                        // We changed if there is no distance (this is a click a click),
                        // or if the drag distance is >50% of the total.
                        var isChanged = ngModel.$viewValue ? drag.translate > 0.5 : drag.translate < 0.5;
                        if (isChanged) {
                            applyModelValue(!ngModel.$viewValue);
                        }
                        drag = null;
                    }

                    function applyModelValue(newValue) {
                        scope.$apply(function() {
                            ngModel.$setViewValue(newValue);
                            ngModel.$render();
                        });
                    }

                };
            }


        }
        MdSwitch.$inject = ["mdCheckboxDirective", "$mdUtil", "$mdConstant", "$parse", "$$rAF", "$mdGesture"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.tabs
         * @description
         *
         *  Tabs, created with the `<md-tabs>` directive provide *tabbed* navigation with different styles.
         *  The Tabs component consists of clickable tabs that are aligned horizontally side-by-side.
         *
         *  Features include support for:
         *
         *  - static or dynamic tabs,
         *  - responsive designs,
         *  - accessibility support (ARIA),
         *  - tab pagination,
         *  - external or internal tab content,
         *  - focus indicators and arrow-key navigations,
         *  - programmatic lookup and access to tab controllers, and
         *  - dynamic transitions through different tab contents.
         *
         */
        /*
         * @see js folder for tabs implementation
         */
        angular.module('material.components.tabs', [
            'material.core',
            'material.components.icon'
        ]);

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.toast
         * @description
         * Toast
         */
        angular.module('material.components.toast', [
                'material.core',
                'material.components.button'
            ])
            .directive('mdToast', MdToastDirective)
            .provider('$mdToast', MdToastProvider);

        /* @ngInject */
        function MdToastDirective($mdToast) {
            return {
                restrict: 'E',
                link: function postLink(scope, element, attr) {
                    // When navigation force destroys an interimElement, then
                    // listen and $destroy() that interim instance...
                    scope.$on('$destroy', function() {
                        $mdToast.destroy();
                    });
                }
            };
        }
        MdToastDirective.$inject = ["$mdToast"];

        /**
         * @ngdoc service
         * @name $mdToast
         * @module material.components.toast
         *
         * @description
         * `$mdToast` is a service to build a toast notification on any position
         * on the screen with an optional duration, and provides a simple promise API.
         *
         *
         * ## Restrictions on custom toasts
         * - The toast's template must have an outer `<md-toast>` element.
         * - For a toast action, use element with class `md-action`.
         * - Add the class `md-capsule` for curved corners.
         *
         * ## Parent container notes
         *
         * The toast is positioned using absolute positioning relative to it's first non-static parent
         * container. Thus, if the requested parent container uses static positioning, we will temporarily
         * set it's positioning to `relative` while the toast is visible and reset it when the toast is
         * hidden.
         *
         * Because of this, it is usually best to ensure that the parent container has a fixed height and
         * prevents scrolling by setting the `overflow: hidden;` style. Since the position is based off of
         * the parent's height, the toast may be mispositioned if you allow the parent to scroll.
         *
         * You can, however, have a scrollable element inside of the container; just make sure the
         * container itself does not scroll.
         *
         * <hljs lang="html">
         * <div layout-fill id="toast-container">
         *   <md-content>
         *     I can have lots of content and scroll!
         *   </md-content>
         * </div>
         * </hljs>
         *
         * @usage
         * <hljs lang="html">
         * <div ng-controller="MyController">
         *   <md-button ng-click="openToast()">
         *     Open a Toast!
         *   </md-button>
         * </div>
         * </hljs>
         *
         * <hljs lang="js">
         * var app = angular.module('app', ['ngMaterial']);
         * app.controller('MyController', function($scope, $mdToast) {
         *   $scope.openToast = function($event) {
         *     $mdToast.show($mdToast.simple().textContent('Hello!'));
         *     // Could also do $mdToast.showSimple('Hello');
         *   };
         * });
         * </hljs>
         */

        /**
         * @ngdoc method
         * @name $mdToast#showSimple
         * 
         * @param {string} message The message to display inside the toast
         * @description
         * Convenience method which builds and shows a simple toast.
         *
         * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or
         * rejected with `$mdToast.cancel()`.
         *
         */

        /**
         * @ngdoc method
         * @name $mdToast#simple
         *
         * @description
         * Builds a preconfigured toast.
         *
         * @returns {obj} a `$mdToastPreset` with the following chainable configuration methods.
         *
         * _**Note:** These configuration methods are provided in addition to the methods provided by
         *   the `build()` and `show()` methods below._
         *
         * - `.textContent(string)` - Sets the toast content to the specified string.
         *
         * - `.action(string)` - Adds an action button. If clicked, the promise (returned from `show()`)
         * will resolve with the value `'ok'`; otherwise, it is resolved with `true` after a `hideDelay`
         * timeout.
         *
         * - `.highlightAction(boolean)` - Whether or not the action button will have an additional
         * highlight class.
         *
         * - `.capsule(boolean)` - Whether or not to add the `md-capsule` class to the toast to provide
         * rounded corners.
         *
         * - `.theme(string)` - Sets the theme on the toast to the requested theme. Default is
         * `$mdThemingProvider`'s default.
         */

        /**
         * @ngdoc method
         * @name $mdToast#updateTextContent
         *
         * @description
         * Updates the content of an existing toast. Useful for updating things like counts, etc.
         *
         */

        /**
         * @ngdoc method
         * @name $mdToast#build
         *
         * @description
         * Creates a custom `$mdToastPreset` that you can configure.
         *
         * @returns {obj} a `$mdToastPreset` with the chainable configuration methods for shows' options (see below).
         */

        /**
         * @ngdoc method
         * @name $mdToast#show
         *
         * @description Shows the toast.
         *
         * @param {object} optionsOrPreset Either provide an `$mdToastPreset` returned from `simple()`
         * and `build()`, or an options object with the following properties:
         *
         *   - `templateUrl` - `{string=}`: The url of an html template file that will
         *     be used as the content of the toast. Restrictions: the template must
         *     have an outer `md-toast` element.
         *   - `template` - `{string=}`: Same as templateUrl, except this is an actual
         *     template string.
         *   - `autoWrap` - `{boolean=}`: Whether or not to automatically wrap the template content with a
         *     `<div class="md-toast-content">` if one is not provided. Defaults to true. Can be disabled if you provide a
         *     custom toast directive.
         *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
         *     This scope will be destroyed when the toast is removed unless `preserveScope` is set to true.
         *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false
         *   - `hideDelay` - `{number=}`: How many milliseconds the toast should stay
         *     active before automatically closing.  Set to 0 or false to have the toast stay open until
         *     closed manually. Default: 3000.
         *   - `position` - `{string=}`: Where to place the toast. Available: any combination
         *     of 'bottom', 'left', 'top', 'right'. Default: 'bottom left'.
         *   - `controller` - `{string=}`: The controller to associate with this toast.
         *     The controller will be injected the local `$mdToast.hide( )`, which is a function
         *     used to hide the toast.
         *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will
         *     be used as names of values to inject into the controller. For example,
         *     `locals: {three: 3}` would inject `three` into the controller with the value
         *     of 3.
         *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.
         *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values
         *     and the toast will not open until the promises resolve.
         *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.
         *   - `parent` - `{element=}`: The element to append the toast to. Defaults to appending
         *     to the root element of the application.
         *
         * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or
         * rejected with `$mdToast.cancel()`. `$mdToast.hide()` will resolve either with a Boolean
         * value == 'true' or the value passed as an argument to `$mdToast.hide()`.
         * And `$mdToast.cancel()` will resolve the promise with a Boolean value == 'false'
         */

        /**
         * @ngdoc method
         * @name $mdToast#hide
         *
         * @description
         * Hide an existing toast and resolve the promise returned from `$mdToast.show()`.
         *
         * @param {*=} response An argument for the resolved promise.
         *
         * @returns {promise} a promise that is called when the existing element is removed from the DOM.
         * The promise is resolved with either a Boolean value == 'true' or the value passed as the
         * argument to `.hide()`.
         *
         */

        /**
         * @ngdoc method
         * @name $mdToast#cancel
         *
         * @description
         * `DEPRECATED` - The promise returned from opening a toast is used only to notify about the closing of the toast.
         * As such, there isn't any reason to also allow that promise to be rejected,
         * since it's not clear what the difference between resolve and reject would be.
         *
         * Hide the existing toast and reject the promise returned from
         * `$mdToast.show()`.
         *
         * @param {*=} response An argument for the rejected promise.
         *
         * @returns {promise} a promise that is called when the existing element is removed from the DOM
         * The promise is resolved with a Boolean value == 'false'.
         *
         */

        function MdToastProvider($$interimElementProvider) {
            // Differentiate promise resolves: hide timeout (value == true) and hide action clicks (value == ok).
            var ACTION_RESOLVE = 'ok';

            var activeToastContent;
            var $mdToast = $$interimElementProvider('$mdToast')
                .setDefaults({
                    methods: ['position', 'hideDelay', 'capsule', 'parent'],
                    options: toastDefaultOptions
                })
                .addPreset('simple', {
                    argOption: 'textContent',
                    methods: ['textContent', 'content', 'action', 'highlightAction', 'theme', 'parent'],
                    options: /* @ngInject */ ["$mdToast", "$mdTheming", function($mdToast, $mdTheming) {
                        var opts = {
                            template: '<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">' +
                                '  <div class="md-toast-content">' +
                                '    <span flex role="alert" aria-relevant="all" aria-atomic="true">' +
                                '      {{ toast.content }}' +
                                '    </span>' +
                                '    <md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">' +
                                '      {{ toast.action }}' +
                                '    </md-button>' +
                                '  </div>' +
                                '</md-toast>',
                            controller: /* @ngInject */ ["$scope", function mdToastCtrl($scope) {
                                var self = this;
                                $scope.$watch(function() {
                                    return activeToastContent;
                                }, function() {
                                    self.content = activeToastContent;
                                });
                                this.resolve = function() {
                                    $mdToast.hide(ACTION_RESOLVE);
                                };
                            }],
                            theme: $mdTheming.defaultTheme(),
                            controllerAs: 'toast',
                            bindToController: true
                        };
                        return opts;
                    }]
                })
                .addMethod('updateTextContent', updateTextContent)
                .addMethod('updateContent', updateTextContent);

            function updateTextContent(newContent) {
                activeToastContent = newContent;
            }

            toastDefaultOptions.$inject = ["$animate", "$mdToast", "$mdUtil", "$mdMedia"];
            return $mdToast;

            /* @ngInject */
            function toastDefaultOptions($animate, $mdToast, $mdUtil, $mdMedia) {
                var SWIPE_EVENTS = '$md.swipeleft $md.swiperight $md.swipeup $md.swipedown';
                return {
                    onShow: onShow,
                    onRemove: onRemove,
                    position: 'bottom left',
                    themable: true,
                    hideDelay: 3000,
                    autoWrap: true,
                    transformTemplate: function(template, options) {
                        var shouldAddWrapper = options.autoWrap && template && !/md-toast-content/g.test(template);

                        if (shouldAddWrapper) {
                            // Root element of template will be <md-toast>. We need to wrap all of its content inside of
                            // of <div class="md-toast-content">. All templates provided here should be static, developer-controlled
                            // content (meaning we're not attempting to guard against XSS).
                            var parsedTemplate = angular.element(template);
                            var wrappedContent = '<div class="md-toast-content">' + parsedTemplate.html() + '</div>';

                            parsedTemplate.empty().append(wrappedContent);

                            // Underlying interimElement expects a template string.
                            return parsedTemplate[0].outerHTML;
                        }

                        return shouldAddWrapper ?
                            '<div class="md-toast-content">' + template + '</div>' :
                            template || '';
                    }
                };

                function onShow(scope, element, options) {
                    activeToastContent = options.textContent || options.content; // support deprecated #content method

                    var isSmScreen = !$mdMedia('gt-sm');

                    element = $mdUtil.extractElementByName(element, 'md-toast', true);
                    options.onSwipe = function(ev, gesture) {
                        //Add the relevant swipe class to the element so it can animate correctly
                        var swipe = ev.type.replace('$md.', '');
                        var direction = swipe.replace('swipe', '');

                        // If the swipe direction is down/up but the toast came from top/bottom don't fade away
                        // Unless the screen is small, then the toast always on bottom
                        if ((direction === 'down' && options.position.indexOf('top') != -1 && !isSmScreen) ||
                            (direction === 'up' && (options.position.indexOf('bottom') != -1 || isSmScreen))) {
                            return;
                        }

                        if ((direction === 'left' || direction === 'right') && isSmScreen) {
                            return;
                        }

                        element.addClass('md-' + swipe);
                        $mdUtil.nextTick($mdToast.cancel);
                    };
                    options.openClass = toastOpenClass(options.position);


                    // 'top left' -> 'md-top md-left'
                    options.parent.addClass(options.openClass);

                    // static is the default position
                    if ($mdUtil.hasComputedStyle(options.parent, 'position', 'static')) {
                        options.parent.css('position', 'relative');
                    }

                    element.on(SWIPE_EVENTS, options.onSwipe);
                    element.addClass(isSmScreen ? 'md-bottom' : options.position.split(' ').map(function(pos) {
                        return 'md-' + pos;
                    }).join(' '));

                    if (options.parent) options.parent.addClass('md-toast-animating');
                    return $animate.enter(element, options.parent).then(function() {
                        if (options.parent) options.parent.removeClass('md-toast-animating');
                    });
                }

                function onRemove(scope, element, options) {
                    element.off(SWIPE_EVENTS, options.onSwipe);
                    if (options.parent) options.parent.addClass('md-toast-animating');
                    if (options.openClass) options.parent.removeClass(options.openClass);

                    return ((options.$destroy == true) ? element.remove() : $animate.leave(element))
                        .then(function() {
                            if (options.parent) options.parent.removeClass('md-toast-animating');
                            if ($mdUtil.hasComputedStyle(options.parent, 'position', 'static')) {
                                options.parent.css('position', '');
                            }
                        });
                }

                function toastOpenClass(position) {
                    if (!$mdMedia('gt-sm')) {
                        return 'md-toast-open-bottom';
                    }

                    return 'md-toast-open-' +
                        (position.indexOf('top') > -1 ? 'top' : 'bottom');
                }
            }

        }
        MdToastProvider.$inject = ["$$interimElementProvider"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.toolbar
         */
        angular.module('material.components.toolbar', [
                'material.core',
                'material.components.content'
            ])
            .directive('mdToolbar', mdToolbarDirective);

        /**
         * @ngdoc directive
         * @name mdToolbar
         * @module material.components.toolbar
         * @restrict E
         * @description
         * `md-toolbar` is used to place a toolbar in your app.
         *
         * Toolbars are usually used above a content area to display the title of the
         * current page, and show relevant action buttons for that page.
         *
         * You can change the height of the toolbar by adding either the
         * `md-medium-tall` or `md-tall` class to the toolbar.
         *
         * @usage
         * <hljs lang="html">
         * <div layout="column" layout-fill>
         *   <md-toolbar>
         *
         *     <div class="md-toolbar-tools">
         *       <span>My App's Title</span>
         *
         *       <!-- fill up the space between left and right area -->
         *       <span flex></span>
         *
         *       <md-button>
         *         Right Bar Button
         *       </md-button>
         *     </div>
         *
         *   </md-toolbar>
         *   <md-content>
         *     Hello!
         *   </md-content>
         * </div>
         * </hljs>
         *
         * @param {boolean=} md-scroll-shrink Whether the header should shrink away as
         * the user scrolls down, and reveal itself as the user scrolls up.
         *
         * _**Note (1):** for scrollShrink to work, the toolbar must be a sibling of a
         * `md-content` element, placed before it. See the scroll shrink demo._
         *
         * _**Note (2):** The `md-scroll-shrink` attribute is only parsed on component
         * initialization, it does not watch for scope changes._
         *
         *
         * @param {number=} md-shrink-speed-factor How much to change the speed of the toolbar's
         * shrinking by. For example, if 0.25 is given then the toolbar will shrink
         * at one fourth the rate at which the user scrolls down. Default 0.5.
         */

        function mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming, $animate) {
            var translateY = angular.bind(null, $mdUtil.supplant, 'translate3d(0,{0}px,0)');

            return {
                template: '',

                restrict: 'E',

                link: function(scope, element, attr) {

                    $mdTheming(element);

                    if (angular.isDefined(attr.mdScrollShrink)) {
                        setupScrollShrink();
                    }

                    function setupScrollShrink() {

                        var toolbarHeight;
                        var contentElement;
                        var disableScrollShrink = angular.noop;

                        // Current "y" position of scroll
                        // Store the last scroll top position
                        var y = 0;
                        var prevScrollTop = 0;
                        var shrinkSpeedFactor = attr.mdShrinkSpeedFactor || 0.5;

                        var debouncedContentScroll = $$rAF.throttle(onContentScroll);
                        var debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5 * 1000);

                        // Wait for $mdContentLoaded event from mdContent directive.
                        // If the mdContent element is a sibling of our toolbar, hook it up
                        // to scroll events.

                        scope.$on('$mdContentLoaded', onMdContentLoad);

                        // If the toolbar is used inside an ng-if statement, we may miss the
                        // $mdContentLoaded event, so we attempt to fake it if we have a
                        // md-content close enough.

                        attr.$observe('mdScrollShrink', onChangeScrollShrink);

                        // If the toolbar has ngShow or ngHide we need to update height immediately as it changed
                        // and not wait for $mdUtil.debounce to happen

                        if (attr.ngShow) {
                            scope.$watch(attr.ngShow, updateToolbarHeight);
                        }
                        if (attr.ngHide) {
                            scope.$watch(attr.ngHide, updateToolbarHeight);
                        }

                        // If the scope is destroyed (which could happen with ng-if), make sure
                        // to disable scroll shrinking again

                        scope.$on('$destroy', disableScrollShrink);

                        /**
                         *
                         */
                        function onChangeScrollShrink(shrinkWithScroll) {
                            var closestContent = element.parent().find('md-content');

                            // If we have a content element, fake the call; this might still fail
                            // if the content element isn't a sibling of the toolbar

                            if (!contentElement && closestContent.length) {
                                onMdContentLoad(null, closestContent);
                            }

                            // Evaluate the expression
                            shrinkWithScroll = scope.$eval(shrinkWithScroll);

                            // Disable only if the attribute's expression evaluates to false
                            if (shrinkWithScroll === false) {
                                disableScrollShrink();
                            } else {
                                disableScrollShrink = enableScrollShrink();
                            }
                        }

                        /**
                         *
                         */
                        function onMdContentLoad($event, newContentEl) {
                            // Toolbar and content must be siblings
                            if (newContentEl && element.parent()[0] === newContentEl.parent()[0]) {
                                // unhook old content event listener if exists
                                if (contentElement) {
                                    contentElement.off('scroll', debouncedContentScroll);
                                }

                                contentElement = newContentEl;
                                disableScrollShrink = enableScrollShrink();
                            }
                        }

                        /**
                         *
                         */
                        function onContentScroll(e) {
                            var scrollTop = e ? e.target.scrollTop : prevScrollTop;

                            debouncedUpdateHeight();

                            y = Math.min(
                                toolbarHeight / shrinkSpeedFactor,
                                Math.max(0, y + scrollTop - prevScrollTop)
                            );

                            element.css($mdConstant.CSS.TRANSFORM, translateY([-y * shrinkSpeedFactor]));
                            contentElement.css($mdConstant.CSS.TRANSFORM, translateY([(toolbarHeight - y) * shrinkSpeedFactor]));

                            prevScrollTop = scrollTop;

                            $mdUtil.nextTick(function() {
                                var hasWhiteFrame = element.hasClass('md-whiteframe-z1');

                                if (hasWhiteFrame && !y) {
                                    $animate.removeClass(element, 'md-whiteframe-z1');
                                } else if (!hasWhiteFrame && y) {
                                    $animate.addClass(element, 'md-whiteframe-z1');
                                }
                            });

                        }

                        /**
                         *
                         */
                        function enableScrollShrink() {
                            if (!contentElement) return angular.noop; // no md-content

                            contentElement.on('scroll', debouncedContentScroll);
                            contentElement.attr('scroll-shrink', 'true');

                            $$rAF(updateToolbarHeight);

                            return function disableScrollShrink() {
                                contentElement.off('scroll', debouncedContentScroll);
                                contentElement.attr('scroll-shrink', 'false');

                                $$rAF(updateToolbarHeight);
                            }
                        }

                        /**
                         *
                         */
                        function updateToolbarHeight() {
                            toolbarHeight = element.prop('offsetHeight');
                            // Add a negative margin-top the size of the toolbar to the content el.
                            // The content will start transformed down the toolbarHeight amount,
                            // so everything looks normal.
                            //
                            // As the user scrolls down, the content will be transformed up slowly
                            // to put the content underneath where the toolbar was.
                            var margin = (-toolbarHeight * shrinkSpeedFactor) + 'px';

                            contentElement.css({
                                "margin-top": margin,
                                "margin-bottom": margin
                            });

                            onContentScroll();
                        }

                    }

                }
            };

        }
        mdToolbarDirective.$inject = ["$$rAF", "$mdConstant", "$mdUtil", "$mdTheming", "$animate"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.tooltip
         */
        angular
            .module('material.components.tooltip', ['material.core'])
            .directive('mdTooltip', MdTooltipDirective);

        /**
         * @ngdoc directive
         * @name mdTooltip
         * @module material.components.tooltip
         * @description
         * Tooltips are used to describe elements that are interactive and primarily graphical (not textual).
         *
         * Place a `<md-tooltip>` as a child of the element it describes.
         *
         * A tooltip will activate when the user focuses, hovers over, or touches the parent.
         *
         * @usage
         * <hljs lang="html">
         * <md-button class="md-fab md-accent" aria-label="Play">
         *   <md-tooltip>
         *     Play Music
         *   </md-tooltip>
         *   <md-icon icon="img/icons/ic_play_arrow_24px.svg"></md-icon>
         * </md-button>
         * </hljs>
         *
         * @param {expression=} md-visible Boolean bound to whether the tooltip is currently visible.
         * @param {number=} md-delay How many milliseconds to wait to show the tooltip after the user focuses, hovers, or touches the parent. Defaults to 300ms.
         * @param {boolean=} md-autohide If present or provided with a boolean value, the tooltip will hide on mouse leave, regardless of focus
         * @param {string=} md-direction Which direction would you like the tooltip to go?  Supports left, right, top, and bottom.  Defaults to bottom.
         */
        function MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement,
            $animate, $q) {

            var TOOLTIP_SHOW_DELAY = 0;
            var TOOLTIP_WINDOW_EDGE_SPACE = 8;

            return {
                restrict: 'E',
                transclude: true,
                priority: 210, // Before ngAria
                template: '<div class="md-content" ng-transclude></div>',
                scope: {
                    delay: '=?mdDelay',
                    visible: '=?mdVisible',
                    autohide: '=?mdAutohide',
                    direction: '@?mdDirection' // only expect raw or interpolated string value; not expression
                },
                link: postLink
            };

            function postLink(scope, element, attr) {

                $mdTheming(element);

                var parent = $mdUtil.getParentWithPointerEvents(element),
                    content = angular.element(element[0].getElementsByClassName('md-content')[0]),
                    tooltipParent = angular.element(document.body),
                    debouncedOnResize = $$rAF.throttle(function() {
                        updatePosition();
                    });

                if ($animate.pin) $animate.pin(element, parent);

                // Initialize element

                setDefaults();
                manipulateElement();
                bindEvents();

                // Default origin transform point is 'center top'
                // positionTooltip() is always relative to center top
                updateContentOrigin();

                configureWatchers();
                addAriaLabel();


                function setDefaults() {
                    if (!angular.isDefined(attr.mdDelay)) scope.delay = TOOLTIP_SHOW_DELAY;
                }

                function updateContentOrigin() {
                    var origin = 'center top';
                    switch (scope.direction) {
                        case 'left':
                            origin = 'right center';
                            break;
                        case 'right':
                            origin = 'left center';
                            break;
                        case 'top':
                            origin = 'center bottom';
                            break;
                        case 'bottom':
                            origin = 'center top';
                            break;
                    }
                    content.css('transform-origin', origin);
                }

                function configureWatchers() {
                    scope.$on('$destroy', function() {
                        scope.visible = false;
                        element.remove();
                        angular.element($window).off('resize', debouncedOnResize);
                    });

                    scope.$watch('visible', function(isVisible) {
                        if (isVisible) showTooltip();
                        else hideTooltip();
                    });

                    scope.$watch('direction', updatePosition);
                }

                function addAriaLabel() {
                    if (!parent.attr('aria-label') && !parent.text().trim()) {
                        parent.attr('aria-label', element.text().trim());
                    }
                }

                function manipulateElement() {
                    element.detach();
                    element.attr('role', 'tooltip');
                }

                function bindEvents() {
                    var mouseActive = false;

                    var ngWindow = angular.element($window);

                    // add an mutationObserver when there is support for it
                    // and the need for it in the form of viable host(parent[0])
                    if (parent[0] && 'MutationObserver' in $window) {
                        // use an mutationObserver to tackle #2602
                        var attributeObserver = new MutationObserver(function(mutations) {
                            mutations
                                .forEach(function(mutation) {
                                    if (mutation.attributeName === 'disabled' && parent[0].disabled) {
                                        setVisible(false);
                                        scope.$digest(); // make sure the elements gets updated
                                    }
                                });
                        });

                        attributeObserver.observe(parent[0], {
                            attributes: true
                        });
                    }

                    // Store whether the element was focused when the window loses focus.
                    var windowBlurHandler = function() {
                        elementFocusedOnWindowBlur = document.activeElement === parent[0];
                    };
                    var elementFocusedOnWindowBlur = false;

                    function windowScrollHandler() {
                        setVisible(false);
                    }

                    ngWindow.on('blur', windowBlurHandler);
                    ngWindow.on('resize', debouncedOnResize);
                    document.addEventListener('scroll', windowScrollHandler, true);
                    scope.$on('$destroy', function() {
                        ngWindow.off('blur', windowBlurHandler);
                        ngWindow.off('resize', debouncedOnResize);
                        document.removeEventListener('scroll', windowScrollHandler, true);
                        attributeObserver && attributeObserver.disconnect();
                    });

                    var enterHandler = function(e) {
                        // Prevent the tooltip from showing when the window is receiving focus.
                        if (e.type === 'focus' && elementFocusedOnWindowBlur) {
                            elementFocusedOnWindowBlur = false;
                            return;
                        }
                        parent.on('blur mouseleave touchend touchcancel', leaveHandler);
                        setVisible(true);
                    };
                    var leaveHandler = function() {
                        var autohide = scope.hasOwnProperty('autohide') ? scope.autohide : attr.hasOwnProperty('mdAutohide');
                        if (autohide || mouseActive || ($document[0].activeElement !== parent[0])) {
                            parent.off('blur mouseleave touchend touchcancel', leaveHandler);
                            parent.triggerHandler("blur");
                            setVisible(false);
                        }
                        mouseActive = false;
                    };

                    // to avoid `synthetic clicks` we listen to mousedown instead of `click`
                    parent.on('mousedown', function() {
                        mouseActive = true;
                    });
                    parent.on('focus mouseenter touchstart', enterHandler);


                }

                function setVisible(value) {
                    setVisible.value = !!value;
                    if (!setVisible.queued) {
                        if (value) {
                            setVisible.queued = true;
                            $timeout(function() {
                                scope.visible = setVisible.value;
                                setVisible.queued = false;
                            }, scope.delay);
                        } else {
                            $mdUtil.nextTick(function() {
                                scope.visible = false;
                            });
                        }
                    }
                }

                function showTooltip() {
                    // Insert the element before positioning it, so we can get the position
                    // and check if we should display it
                    tooltipParent.append(element);

                    // Check if we should display it or not.
                    // This handles hide-* and show-* along with any user defined css
                    if ($mdUtil.hasComputedStyle(element, 'display', 'none')) {
                        scope.visible = false;
                        element.detach();
                        return;
                    }

                    updatePosition();

                    angular.forEach([element, content], function(element) {
                        $animate.addClass(element, 'md-show');
                    });
                }

                function hideTooltip() {
                    var promises = [];
                    angular.forEach([element, content], function(it) {
                        if (it.parent() && it.hasClass('md-show')) {
                            promises.push($animate.removeClass(it, 'md-show'));
                        }
                    });

                    $q.all(promises)
                        .then(function() {
                            if (!scope.visible) element.detach();
                        });
                }

                function updatePosition() {
                    if (!scope.visible) return;

                    updateContentOrigin();
                    positionTooltip();
                }

                function positionTooltip() {
                    var tipRect = $mdUtil.offsetRect(element, tooltipParent);
                    var parentRect = $mdUtil.offsetRect(parent, tooltipParent);
                    var newPosition = getPosition(scope.direction);
                    var offsetParent = element.prop('offsetParent');

                    // If the user provided a direction, just nudge the tooltip onto the screen
                    // Otherwise, recalculate based on 'top' since default is 'bottom'
                    if (scope.direction) {
                        newPosition = fitInParent(newPosition);
                    } else if (offsetParent && newPosition.top > offsetParent.scrollHeight - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE) {
                        newPosition = fitInParent(getPosition('top'));
                    }

                    element.css({
                        left: newPosition.left + 'px',
                        top: newPosition.top + 'px'
                    });

                    function fitInParent(pos) {
                        var newPosition = {
                            left: pos.left,
                            top: pos.top
                        };
                        newPosition.left = Math.min(newPosition.left, tooltipParent.prop('scrollWidth') - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE);
                        newPosition.left = Math.max(newPosition.left, TOOLTIP_WINDOW_EDGE_SPACE);
                        newPosition.top = Math.min(newPosition.top, tooltipParent.prop('scrollHeight') - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE);
                        newPosition.top = Math.max(newPosition.top, TOOLTIP_WINDOW_EDGE_SPACE);
                        return newPosition;
                    }

                    function getPosition(dir) {
                        return dir === 'left' ? {
                            left: parentRect.left - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE,
                            top: parentRect.top + parentRect.height / 2 - tipRect.height / 2
                        } : dir === 'right' ? {
                            left: parentRect.left + parentRect.width + TOOLTIP_WINDOW_EDGE_SPACE,
                            top: parentRect.top + parentRect.height / 2 - tipRect.height / 2
                        } : dir === 'top' ? {
                            left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
                            top: parentRect.top - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE
                        } : {
                            left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,
                            top: parentRect.top + parentRect.height + TOOLTIP_WINDOW_EDGE_SPACE
                        };
                    }
                }

            }

        }
        MdTooltipDirective.$inject = ["$timeout", "$window", "$$rAF", "$document", "$mdUtil", "$mdTheming", "$rootElement", "$animate", "$q"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.virtualRepeat
         */
        angular.module('material.components.virtualRepeat', [
                'material.core',
                'material.components.showHide'
            ])
            .directive('mdVirtualRepeatContainer', VirtualRepeatContainerDirective)
            .directive('mdVirtualRepeat', VirtualRepeatDirective);


        /**
         * @ngdoc directive
         * @name mdVirtualRepeatContainer
         * @module material.components.virtualRepeat
         * @restrict E
         * @description
         * `md-virtual-repeat-container` provides the scroll container for md-virtual-repeat.
         *
         * Virtual repeat is a limited substitute for ng-repeat that renders only
         * enough dom nodes to fill the container and recycling them as the user scrolls.
         *
         * @usage
         * <hljs lang="html">
         *
         * <md-virtual-repeat-container md-top-index="topIndex">
         *   <div md-virtual-repeat="i in items" md-item-size="20">Hello {{i}}!</div>
         * </md-virtual-repeat-container>
         * </hljs>
         *
         * @param {number=} md-top-index Binds the index of the item that is at the top of the scroll
         *     container to $scope. It can both read and set the scroll position.
         * @param {boolean=} md-orient-horizontal Whether the container should scroll horizontally
         *     (defaults to orientation and scrolling vertically).
         * @param {boolean=} md-auto-shrink When present, the container will shrink to fit
         *     the number of items when that number is less than its original size.
         * @param {number=} md-auto-shrink-min Minimum number of items that md-auto-shrink
         *     will shrink to (default: 0).
         */
        function VirtualRepeatContainerDirective() {
            return {
                controller: VirtualRepeatContainerController,
                template: virtualRepeatContainerTemplate,
                compile: function virtualRepeatContainerCompile($element, $attrs) {
                    $element
                        .addClass('md-virtual-repeat-container')
                        .addClass($attrs.hasOwnProperty('mdOrientHorizontal') ? 'md-orient-horizontal' : 'md-orient-vertical');
                }
            };
        }


        function virtualRepeatContainerTemplate($element) {
            return '<div class="md-virtual-repeat-scroller">' +
                '<div class="md-virtual-repeat-sizer"></div>' +
                '<div class="md-virtual-repeat-offsetter">' +
                $element[0].innerHTML +
                '</div></div>';
        }

        /**
         * Maximum size, in pixels, that can be explicitly set to an element. The actual value varies
         * between browsers, but IE11 has the very lowest size at a mere 1,533,917px. Ideally we could
         * *compute* this value, but Firefox always reports an element to have a size of zero if it
         * goes over the max, meaning that we'd have to binary search for the value.
         * @const {number}
         */
        var MAX_ELEMENT_SIZE = 1533917;

        /**
         * Number of additional elements to render above and below the visible area inside
         * of the virtual repeat container. A higher number results in less flicker when scrolling
         * very quickly in Safari, but comes with a higher rendering and dirty-checking cost.
         * @const {number}
         */
        var NUM_EXTRA = 3;

        /** @ngInject */
        function VirtualRepeatContainerController(
            $$rAF, $mdUtil, $parse, $rootScope, $window, $scope, $element, $attrs) {
            this.$rootScope = $rootScope;
            this.$scope = $scope;
            this.$element = $element;
            this.$attrs = $attrs;

            /** @type {number} The width or height of the container */
            this.size = 0;
            /** @type {number} The scroll width or height of the scroller */
            this.scrollSize = 0;
            /** @type {number} The scrollLeft or scrollTop of the scroller */
            this.scrollOffset = 0;
            /** @type {boolean} Whether the scroller is oriented horizontally */
            this.horizontal = this.$attrs.hasOwnProperty('mdOrientHorizontal');
            /** @type {!VirtualRepeatController} The repeater inside of this container */
            this.repeater = null;
            /** @type {boolean} Whether auto-shrink is enabled */
            this.autoShrink = this.$attrs.hasOwnProperty('mdAutoShrink');
            /** @type {number} Minimum number of items to auto-shrink to */
            this.autoShrinkMin = parseInt(this.$attrs.mdAutoShrinkMin, 10) || 0;
            /** @type {?number} Original container size when shrank */
            this.originalSize = null;
            /** @type {number} Amount to offset the total scroll size by. */
            this.offsetSize = parseInt(this.$attrs.mdOffsetSize, 10) || 0;

            if (this.$attrs.mdTopIndex) {
                /** @type {function(angular.Scope): number} Binds to topIndex on Angular scope */
                this.bindTopIndex = $parse(this.$attrs.mdTopIndex);
                /** @type {number} The index of the item that is at the top of the scroll container */
                this.topIndex = this.bindTopIndex(this.$scope);

                if (!angular.isDefined(this.topIndex)) {
                    this.topIndex = 0;
                    this.bindTopIndex.assign(this.$scope, 0);
                }

                this.$scope.$watch(this.bindTopIndex, angular.bind(this, function(newIndex) {
                    if (newIndex !== this.topIndex) {
                        this.scrollToIndex(newIndex);
                    }
                }));
            } else {
                this.topIndex = 0;
            }

            this.scroller = $element[0].getElementsByClassName('md-virtual-repeat-scroller')[0];
            this.sizer = this.scroller.getElementsByClassName('md-virtual-repeat-sizer')[0];
            this.offsetter = this.scroller.getElementsByClassName('md-virtual-repeat-offsetter')[0];

            // After the dom stablizes, measure the initial size of the container and
            // make a best effort at re-measuring as it changes.
            var boundUpdateSize = angular.bind(this, this.updateSize);

            $$rAF(angular.bind(this, function() {
                boundUpdateSize();

                var debouncedUpdateSize = $mdUtil.debounce(boundUpdateSize, 10, null, false);
                var jWindow = angular.element($window);

                // Make one more attempt to get the size if it is 0.
                // This is not by any means a perfect approach, but there's really no
                // silver bullet here.
                if (!this.size) {
                    debouncedUpdateSize();
                }

                jWindow.on('resize', debouncedUpdateSize);
                $scope.$on('$destroy', function() {
                    jWindow.off('resize', debouncedUpdateSize);
                });

                $scope.$emit('$md-resize-enable');
                $scope.$on('$md-resize', boundUpdateSize);
            }));
        }
        VirtualRepeatContainerController.$inject = ["$$rAF", "$mdUtil", "$parse", "$rootScope", "$window", "$scope", "$element", "$attrs"];


        /** Called by the md-virtual-repeat inside of the container at startup. */
        VirtualRepeatContainerController.prototype.register = function(repeaterCtrl) {
            this.repeater = repeaterCtrl;

            angular.element(this.scroller)
                .on('scroll wheel touchmove touchend', angular.bind(this, this.handleScroll_));
        };


        /** @return {boolean} Whether the container is configured for horizontal scrolling. */
        VirtualRepeatContainerController.prototype.isHorizontal = function() {
            return this.horizontal;
        };


        /** @return {number} The size (width or height) of the container. */
        VirtualRepeatContainerController.prototype.getSize = function() {
            return this.size;
        };


        /**
         * Resizes the container.
         * @private
         * @param {number} The new size to set.
         */
        VirtualRepeatContainerController.prototype.setSize_ = function(size) {
            this.size = size;
            this.$element[0].style[this.isHorizontal() ? 'width' : 'height'] = size + 'px';
        };


        /** Instructs the container to re-measure its size. */
        VirtualRepeatContainerController.prototype.updateSize = function() {
            if (this.originalSize) return;

            this.size = this.isHorizontal() ? this.$element[0].clientWidth : this.$element[0].clientHeight;

            this.repeater && this.repeater.containerUpdated();
        };


        /** @return {number} The container's scrollHeight or scrollWidth. */
        VirtualRepeatContainerController.prototype.getScrollSize = function() {
            return this.scrollSize;
        };


        /**
         * Sets the scroller element to the specified size.
         * @private
         * @param {number} size The new size.
         */
        VirtualRepeatContainerController.prototype.sizeScroller_ = function(size) {
            var dimension = this.isHorizontal() ? 'width' : 'height';
            var crossDimension = this.isHorizontal() ? 'height' : 'width';

            // Clear any existing dimensions.
            this.sizer.innerHTML = '';

            // If the size falls within the browser's maximum explicit size for a single element, we can
            // set the size and be done. Otherwise, we have to create children that add up the the desired
            // size.
            if (size < MAX_ELEMENT_SIZE) {
                this.sizer.style[dimension] = size + 'px';
            } else {
                this.sizer.style[dimension] = 'auto';
                this.sizer.style[crossDimension] = 'auto';

                // Divide the total size we have to render into N max-size pieces.
                var numChildren = Math.floor(size / MAX_ELEMENT_SIZE);

                // Element template to clone for each max-size piece.
                var sizerChild = document.createElement('div');
                sizerChild.style[dimension] = MAX_ELEMENT_SIZE + 'px';
                sizerChild.style[crossDimension] = '1px';

                for (var i = 0; i < numChildren; i++) {
                    this.sizer.appendChild(sizerChild.cloneNode(false));
                }

                // Re-use the element template for the remainder.
                sizerChild.style[dimension] = (size - (numChildren * MAX_ELEMENT_SIZE)) + 'px';
                this.sizer.appendChild(sizerChild);
            }
        };


        /**
         * If auto-shrinking is enabled, shrinks or unshrinks as appropriate.
         * @private
         * @param {number} size The new size.
         */
        VirtualRepeatContainerController.prototype.autoShrink_ = function(size) {
            var shrinkSize = Math.max(size, this.autoShrinkMin * this.repeater.getItemSize());
            if (this.autoShrink && shrinkSize !== this.size) {
                var currentSize = this.originalSize || this.size;
                if (!currentSize || shrinkSize < currentSize) {
                    if (!this.originalSize) {
                        this.originalSize = this.size;
                    }

                    this.setSize_(shrinkSize);
                } else if (this.originalSize) {
                    this.setSize_(this.originalSize);
                    this.originalSize = null;
                }

                this.repeater.containerUpdated();
            }
        };


        /**
         * Sets the scrollHeight or scrollWidth. Called by the repeater based on
         * its item count and item size.
         * @param {number} itemsSize The total size of the items.
         */
        VirtualRepeatContainerController.prototype.setScrollSize = function(itemsSize) {
            var size = itemsSize + this.offsetSize;
            if (this.scrollSize === size) return;

            this.sizeScroller_(size);
            this.autoShrink_(size);
            this.scrollSize = size;
        };


        /** @return {number} The container's current scroll offset. */
        VirtualRepeatContainerController.prototype.getScrollOffset = function() {
            return this.scrollOffset;
        };

        /**
         * Scrolls to a given scrollTop position.
         * @param {number} position
         */
        VirtualRepeatContainerController.prototype.scrollTo = function(position) {
            this.scroller[this.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = position;
            this.handleScroll_();
        };

        /**
         * Scrolls the item with the given index to the top of the scroll container.
         * @param {number} index
         */
        VirtualRepeatContainerController.prototype.scrollToIndex = function(index) {
            var itemSize = this.repeater.getItemSize();
            var itemsLength = this.repeater.itemsLength;
            if (index > itemsLength) {
                index = itemsLength - 1;
            }
            this.scrollTo(itemSize * index);
        };

        VirtualRepeatContainerController.prototype.resetScroll = function() {
            this.scrollTo(0);
        };


        VirtualRepeatContainerController.prototype.handleScroll_ = function() {
            var offset = this.isHorizontal() ? this.scroller.scrollLeft : this.scroller.scrollTop;
            if (offset === this.scrollOffset) return;

            var itemSize = this.repeater.getItemSize();
            if (!itemSize) return;

            var numItems = Math.max(0, Math.floor(offset / itemSize) - NUM_EXTRA);

            var transform = this.isHorizontal() ? 'translateX(' : 'translateY(';
            transform += (numItems * itemSize) + 'px)';

            this.scrollOffset = offset;
            this.offsetter.style.webkitTransform = transform;
            this.offsetter.style.transform = transform;

            if (this.bindTopIndex) {
                var topIndex = Math.floor(offset / itemSize);
                if (topIndex !== this.topIndex && topIndex < this.repeater.itemsLength) {
                    this.topIndex = topIndex;
                    this.bindTopIndex.assign(this.$scope, topIndex);
                    if (!this.$rootScope.$$phase) this.$scope.$digest();
                }
            }

            this.repeater.containerUpdated();
        };


        /**
         * @ngdoc directive
         * @name mdVirtualRepeat
         * @module material.components.virtualRepeat
         * @restrict A
         * @priority 1000
         * @description
         * `md-virtual-repeat` specifies an element to repeat using virtual scrolling.
         *
         * Virtual repeat is a limited substitute for ng-repeat that renders only
         * enough dom nodes to fill the container and recycling them as the user scrolls.
         * Arrays, but not objects are supported for iteration.
         * Track by, as alias, and (key, value) syntax are not supported.
         *
         * @usage
         * <hljs lang="html">
         * <md-virtual-repeat-container>
         *   <div md-virtual-repeat="i in items">Hello {{i}}!</div>
         * </md-virtual-repeat-container>
         *
         * <md-virtual-repeat-container md-orient-horizontal>
         *   <div md-virtual-repeat="i in items" md-item-size="20">Hello {{i}}!</div>
         * </md-virtual-repeat-container>
         * </hljs>
         *
         * @param {number=} md-item-size The height or width of the repeated elements (which must be
         *   identical for each element). Optional. Will attempt to read the size from the dom if missing,
         *   but still assumes that all repeated nodes have same height or width.
         * @param {string=} md-extra-name Evaluates to an additional name to which the current iterated item
         *   can be assigned on the repeated scope (needed for use in `md-autocomplete`).
         * @param {boolean=} md-on-demand When present, treats the md-virtual-repeat argument as an object
         *   that can fetch rows rather than an array.
         *
         *   **NOTE:** This object must implement the following interface with two (2) methods:
         *
         *   - `getItemAtIndex: function(index) [object]` The item at that index or null if it is not yet
         *     loaded (it should start downloading the item in that case).
         *   - `getLength: function() [number]` The data length to which the repeater container
         *     should be sized. Ideally, when the count is known, this method should return it.
         *     Otherwise, return a higher number than the currently loaded items to produce an
         *     infinite-scroll behavior.
         */
        function VirtualRepeatDirective($parse) {
            return {
                controller: VirtualRepeatController,
                priority: 1000,
                require: ['mdVirtualRepeat', '^^mdVirtualRepeatContainer'],
                restrict: 'A',
                terminal: true,
                transclude: 'element',
                compile: function VirtualRepeatCompile($element, $attrs) {
                    var expression = $attrs.mdVirtualRepeat;
                    var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)\s*$/);
                    var repeatName = match[1];
                    var repeatListExpression = $parse(match[2]);
                    var extraName = $attrs.mdExtraName && $parse($attrs.mdExtraName);

                    return function VirtualRepeatLink($scope, $element, $attrs, ctrl, $transclude) {
                        ctrl[0].link_(ctrl[1], $transclude, repeatName, repeatListExpression, extraName);
                    };
                }
            };
        }
        VirtualRepeatDirective.$inject = ["$parse"];


        /** @ngInject */
        function VirtualRepeatController($scope, $element, $attrs, $browser, $document, $rootScope,
            $$rAF) {
            this.$scope = $scope;
            this.$element = $element;
            this.$attrs = $attrs;
            this.$browser = $browser;
            this.$document = $document;
            this.$rootScope = $rootScope;
            this.$$rAF = $$rAF;

            /** @type {boolean} Whether we are in on-demand mode. */
            this.onDemand = $attrs.hasOwnProperty('mdOnDemand');
            /** @type {!Function} Backup reference to $browser.$$checkUrlChange */
            this.browserCheckUrlChange = $browser.$$checkUrlChange;
            /** @type {number} Most recent starting repeat index (based on scroll offset) */
            this.newStartIndex = 0;
            /** @type {number} Most recent ending repeat index (based on scroll offset) */
            this.newEndIndex = 0;
            /** @type {number} Most recent end visible index (based on scroll offset) */
            this.newVisibleEnd = 0;
            /** @type {number} Previous starting repeat index (based on scroll offset) */
            this.startIndex = 0;
            /** @type {number} Previous ending repeat index (based on scroll offset) */
            this.endIndex = 0;
            // TODO: measure width/height of first element from dom if not provided.
            // getComputedStyle?
            /** @type {?number} Height/width of repeated elements. */
            this.itemSize = $scope.$eval($attrs.mdItemSize) || null;

            /** @type {boolean} Whether this is the first time that items are rendered. */
            this.isFirstRender = true;

            /**
             * @private {boolean} Whether the items in the list are already being updated. Used to prevent
             *     nested calls to virtualRepeatUpdate_.
             */
            this.isVirtualRepeatUpdating_ = false;

            /** @type {number} Most recently seen length of items. */
            this.itemsLength = 0;

            /**
             * @type {!Function} Unwatch callback for item size (when md-items-size is
             *     not specified), or angular.noop otherwise.
             */
            this.unwatchItemSize_ = angular.noop;

            /**
             * Presently rendered blocks by repeat index.
             * @type {Object<number, !VirtualRepeatController.Block}
             */
            this.blocks = {};
            /** @type {Array<!VirtualRepeatController.Block>} A pool of presently unused blocks. */
            this.pooledBlocks = [];
        }
        VirtualRepeatController.$inject = ["$scope", "$element", "$attrs", "$browser", "$document", "$rootScope", "$$rAF"];


        /**
         * An object representing a repeated item.
         * @typedef {{element: !jqLite, new: boolean, scope: !angular.Scope}}
         */
        VirtualRepeatController.Block;


        /**
         * Called at startup by the md-virtual-repeat postLink function.
         * @param {!VirtualRepeatContainerController} container The container's controller.
         * @param {!Function} transclude The repeated element's bound transclude function.
         * @param {string} repeatName The left hand side of the repeat expression, indicating
         *     the name for each item in the array.
         * @param {!Function} repeatListExpression A compiled expression based on the right hand side
         *     of the repeat expression. Points to the array to repeat over.
         * @param {string|undefined} extraName The optional extra repeatName.
         */
        VirtualRepeatController.prototype.link_ =
            function(container, transclude, repeatName, repeatListExpression, extraName) {
                this.container = container;
                this.transclude = transclude;
                this.repeatName = repeatName;
                this.rawRepeatListExpression = repeatListExpression;
                this.extraName = extraName;
                this.sized = false;

                this.repeatListExpression = angular.bind(this, this.repeatListExpression_);

                this.container.register(this);
            };


        /** @private Attempts to set itemSize by measuring a repeated element in the dom */
        VirtualRepeatController.prototype.readItemSize_ = function() {
            if (this.itemSize) {
                // itemSize was successfully read in a different asynchronous call.
                return;
            }

            this.items = this.repeatListExpression(this.$scope);
            this.parentNode = this.$element[0].parentNode;
            var block = this.getBlock_(0);
            if (!block.element[0].parentNode) {
                this.parentNode.appendChild(block.element[0]);
            }

            this.itemSize = block.element[0][
                this.container.isHorizontal() ? 'offsetWidth' : 'offsetHeight'
            ] || null;

            this.blocks[0] = block;
            this.poolBlock_(0);

            if (this.itemSize) {
                this.containerUpdated();
            }
        };


        /**
         * Returns the user-specified repeat list, transforming it into an array-like
         * object in the case of infinite scroll/dynamic load mode.
         * @param {!angular.Scope} The scope.
         * @return {!Array|!Object} An array or array-like object for iteration.
         */
        VirtualRepeatController.prototype.repeatListExpression_ = function(scope) {
            var repeatList = this.rawRepeatListExpression(scope);

            if (this.onDemand && repeatList) {
                var virtualList = new VirtualRepeatModelArrayLike(repeatList);
                virtualList.$$includeIndexes(this.newStartIndex, this.newVisibleEnd);
                return virtualList;
            } else {
                return repeatList;
            }
        };


        /**
         * Called by the container. Informs us that the containers scroll or size has
         * changed.
         */
        VirtualRepeatController.prototype.containerUpdated = function() {
            // If itemSize is unknown, attempt to measure it.
            if (!this.itemSize) {
                this.unwatchItemSize_ = this.$scope.$watchCollection(
                    this.repeatListExpression,
                    angular.bind(this, function(items) {
                        if (items && items.length) {
                            this.$$rAF(angular.bind(this, this.readItemSize_));
                        }
                    }));
                if (!this.$rootScope.$$phase) this.$scope.$digest();

                return;
            } else if (!this.sized) {
                this.items = this.repeatListExpression(this.$scope);
            }

            if (!this.sized) {
                this.unwatchItemSize_();
                this.sized = true;
                this.$scope.$watchCollection(this.repeatListExpression,
                    angular.bind(this, function(items, oldItems) {
                        if (!this.isVirtualRepeatUpdating_) {
                            this.virtualRepeatUpdate_(items, oldItems);
                        }
                    }));
            }

            this.updateIndexes_();

            if (this.newStartIndex !== this.startIndex ||
                this.newEndIndex !== this.endIndex ||
                this.container.getScrollOffset() > this.container.getScrollSize()) {
                if (this.items instanceof VirtualRepeatModelArrayLike) {
                    this.items.$$includeIndexes(this.newStartIndex, this.newEndIndex);
                }
                this.virtualRepeatUpdate_(this.items, this.items);
            }
        };


        /**
         * Called by the container. Returns the size of a single repeated item.
         * @return {?number} Size of a repeated item.
         */
        VirtualRepeatController.prototype.getItemSize = function() {
            return this.itemSize;
        };


        /**
         * Updates the order and visible offset of repeated blocks in response to scrolling
         * or items updates.
         * @private
         */
        VirtualRepeatController.prototype.virtualRepeatUpdate_ = function(items, oldItems) {
            this.isVirtualRepeatUpdating_ = true;

            var itemsLength = items && items.length || 0;
            var lengthChanged = false;

            // If the number of items shrank, scroll up to the top.
            if (this.items && itemsLength < this.items.length && this.container.getScrollOffset() !== 0) {
                this.items = items;
                this.container.resetScroll();
                return;
            }

            if (itemsLength !== this.itemsLength) {
                lengthChanged = true;
                this.itemsLength = itemsLength;
            }

            this.items = items;
            if (items !== oldItems || lengthChanged) {
                this.updateIndexes_();
            }

            this.parentNode = this.$element[0].parentNode;

            if (lengthChanged) {
                this.container.setScrollSize(itemsLength * this.itemSize);
            }

            if (this.isFirstRender) {
                this.isFirstRender = false;
                var startIndex = this.$attrs.mdStartIndex ?
                    this.$scope.$eval(this.$attrs.mdStartIndex) :
                    this.container.topIndex;
                this.container.scrollToIndex(startIndex);
            }

            // Detach and pool any blocks that are no longer in the viewport.
            Object.keys(this.blocks).forEach(function(blockIndex) {
                var index = parseInt(blockIndex, 10);
                if (index < this.newStartIndex || index >= this.newEndIndex) {
                    this.poolBlock_(index);
                }
            }, this);

            // Add needed blocks.
            // For performance reasons, temporarily block browser url checks as we digest
            // the restored block scopes ($$checkUrlChange reads window.location to
            // check for changes and trigger route change, etc, which we don't need when
            // trying to scroll at 60fps).
            this.$browser.$$checkUrlChange = angular.noop;

            var i, block,
                newStartBlocks = [],
                newEndBlocks = [];

            // Collect blocks at the top.
            for (i = this.newStartIndex; i < this.newEndIndex && this.blocks[i] == null; i++) {
                block = this.getBlock_(i);
                this.updateBlock_(block, i);
                newStartBlocks.push(block);
            }

            // Update blocks that are already rendered.
            for (; this.blocks[i] != null; i++) {
                this.updateBlock_(this.blocks[i], i);
            }
            var maxIndex = i - 1;

            // Collect blocks at the end.
            for (; i < this.newEndIndex; i++) {
                block = this.getBlock_(i);
                this.updateBlock_(block, i);
                newEndBlocks.push(block);
            }

            // Attach collected blocks to the document.
            if (newStartBlocks.length) {
                this.parentNode.insertBefore(
                    this.domFragmentFromBlocks_(newStartBlocks),
                    this.$element[0].nextSibling);
            }
            if (newEndBlocks.length) {
                this.parentNode.insertBefore(
                    this.domFragmentFromBlocks_(newEndBlocks),
                    this.blocks[maxIndex] && this.blocks[maxIndex].element[0].nextSibling);
            }

            // Restore $$checkUrlChange.
            this.$browser.$$checkUrlChange = this.browserCheckUrlChange;

            this.startIndex = this.newStartIndex;
            this.endIndex = this.newEndIndex;

            this.isVirtualRepeatUpdating_ = false;
        };


        /**
         * @param {number} index Where the block is to be in the repeated list.
         * @return {!VirtualRepeatController.Block} A new or pooled block to place at the specified index.
         * @private
         */
        VirtualRepeatController.prototype.getBlock_ = function(index) {
            if (this.pooledBlocks.length) {
                return this.pooledBlocks.pop();
            }

            var block;
            this.transclude(angular.bind(this, function(clone, scope) {
                block = {
                    element: clone,
                    new: true,
                    scope: scope
                };

                this.updateScope_(scope, index);
                this.parentNode.appendChild(clone[0]);
            }));

            return block;
        };


        /**
         * Updates and if not in a digest cycle, digests the specified block's scope to the data
         * at the specified index.
         * @param {!VirtualRepeatController.Block} block The block whose scope should be updated.
         * @param {number} index The index to set.
         * @private
         */
        VirtualRepeatController.prototype.updateBlock_ = function(block, index) {
            this.blocks[index] = block;

            if (!block.new &&
                (block.scope.$index === index && block.scope[this.repeatName] === this.items[index])) {
                return;
            }
            block.new = false;

            // Update and digest the block's scope.
            this.updateScope_(block.scope, index);

            // Perform digest before reattaching the block.
            // Any resulting synchronous dom mutations should be much faster as a result.
            // This might break some directives, but I'm going to try it for now.
            if (!this.$rootScope.$$phase) {
                block.scope.$digest();
            }
        };


        /**
         * Updates scope to the data at the specified index.
         * @param {!angular.Scope} scope The scope which should be updated.
         * @param {number} index The index to set.
         * @private
         */
        VirtualRepeatController.prototype.updateScope_ = function(scope, index) {
            scope.$index = index;
            scope[this.repeatName] = this.items && this.items[index];
            if (this.extraName) scope[this.extraName(this.$scope)] = this.items[index];
        };


        /**
         * Pools the block at the specified index (Pulls its element out of the dom and stores it).
         * @param {number} index The index at which the block to pool is stored.
         * @private
         */
        VirtualRepeatController.prototype.poolBlock_ = function(index) {
            this.pooledBlocks.push(this.blocks[index]);
            this.parentNode.removeChild(this.blocks[index].element[0]);
            delete this.blocks[index];
        };


        /**
         * Produces a dom fragment containing the elements from the list of blocks.
         * @param {!Array<!VirtualRepeatController.Block>} blocks The blocks whose elements
         *     should be added to the document fragment.
         * @return {DocumentFragment}
         * @private
         */
        VirtualRepeatController.prototype.domFragmentFromBlocks_ = function(blocks) {
            var fragment = this.$document[0].createDocumentFragment();
            blocks.forEach(function(block) {
                fragment.appendChild(block.element[0]);
            });
            return fragment;
        };


        /**
         * Updates start and end indexes based on length of repeated items and container size.
         * @private
         */
        VirtualRepeatController.prototype.updateIndexes_ = function() {
            var itemsLength = this.items ? this.items.length : 0;
            var containerLength = Math.ceil(this.container.getSize() / this.itemSize);

            this.newStartIndex = Math.max(0, Math.min(
                itemsLength - containerLength,
                Math.floor(this.container.getScrollOffset() / this.itemSize)));
            this.newVisibleEnd = this.newStartIndex + containerLength + NUM_EXTRA;
            this.newEndIndex = Math.min(itemsLength, this.newVisibleEnd);
            this.newStartIndex = Math.max(0, this.newStartIndex - NUM_EXTRA);
        };

        /**
         * This VirtualRepeatModelArrayLike class enforces the interface requirements
         * for infinite scrolling within a mdVirtualRepeatContainer. An object with this
         * interface must implement the following interface with two (2) methods:
         *
         * getItemAtIndex: function(index) -> item at that index or null if it is not yet
         *     loaded (It should start downloading the item in that case).
         *
         * getLength: function() -> number The data legnth to which the repeater container
         *     should be sized. Ideally, when the count is known, this method should return it.
         *     Otherwise, return a higher number than the currently loaded items to produce an
         *     infinite-scroll behavior.
         *
         * @usage
         * <hljs lang="html">
         *  <md-virtual-repeat-container md-orient-horizontal>
         *    <div md-virtual-repeat="i in items" md-on-demand>
         *      Hello {{i}}!
         *    </div>
         *  </md-virtual-repeat-container>
         * </hljs>
         *
         */
        function VirtualRepeatModelArrayLike(model) {
            if (!angular.isFunction(model.getItemAtIndex) ||
                !angular.isFunction(model.getLength)) {
                throw Error('When md-on-demand is enabled, the Object passed to md-virtual-repeat must implement ' +
                    'functions getItemAtIndex() and getLength() ');
            }

            this.model = model;
        }


        VirtualRepeatModelArrayLike.prototype.$$includeIndexes = function(start, end) {
            for (var i = start; i < end; i++) {
                if (!this.hasOwnProperty(i)) {
                    this[i] = this.model.getItemAtIndex(i);
                }
            }
            this.length = this.model.getLength();
        };


        function abstractMethod() {
            throw Error('Non-overridden abstract method called.');
        }

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc module
         * @name material.components.whiteframe
         */
        angular.module('material.components.whiteframe', []);

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.autocomplete')
            .controller('MdAutocompleteCtrl', MdAutocompleteCtrl);

        var ITEM_HEIGHT = 41,
            MAX_HEIGHT = 5.5 * ITEM_HEIGHT,
            MENU_PADDING = 8,
            INPUT_PADDING = 2; // Padding provided by `md-input-container`

        function MdAutocompleteCtrl($scope, $element, $mdUtil, $mdConstant, $mdTheming, $window,
            $animate, $rootElement, $attrs, $q) {
            //-- private variables
            var ctrl = this,
                itemParts = $scope.itemsExpr.split(/ in /i),
                itemExpr = itemParts[1],
                elements = null,
                cache = {},
                noBlur = false,
                selectedItemWatchers = [],
                hasFocus = false,
                lastCount = 0;

            //-- public variables with handlers
            defineProperty('hidden', handleHiddenChange, true);

            //-- public variables
            ctrl.scope = $scope;
            ctrl.parent = $scope.$parent;
            ctrl.itemName = itemParts[0];
            ctrl.matches = [];
            ctrl.loading = false;
            ctrl.hidden = true;
            ctrl.index = null;
            ctrl.messages = [];
            ctrl.id = $mdUtil.nextUid();
            ctrl.isDisabled = null;
            ctrl.isRequired = null;
            ctrl.hasNotFound = false;

            //-- public methods
            ctrl.keydown = keydown;
            ctrl.blur = blur;
            ctrl.focus = focus;
            ctrl.clear = clearValue;
            ctrl.select = select;
            ctrl.listEnter = onListEnter;
            ctrl.listLeave = onListLeave;
            ctrl.mouseUp = onMouseup;
            ctrl.getCurrentDisplayValue = getCurrentDisplayValue;
            ctrl.registerSelectedItemWatcher = registerSelectedItemWatcher;
            ctrl.unregisterSelectedItemWatcher = unregisterSelectedItemWatcher;
            ctrl.notFoundVisible = notFoundVisible;
            ctrl.loadingIsVisible = loadingIsVisible;

            return init();

            //-- initialization methods

            /**
             * Initialize the controller, setup watchers, gather elements
             */
            function init() {
                $mdUtil.initOptionalProperties($scope, $attrs, {
                    searchText: null,
                    selectedItem: null
                });
                $mdTheming($element);
                configureWatchers();
                $mdUtil.nextTick(function() {
                    gatherElements();
                    moveDropdown();
                    focusElement();
                    $element.on('focus', focusElement);
                });
            }

            /**
             * Calculates the dropdown's position and applies the new styles to the menu element
             * @returns {*}
             */
            function positionDropdown() {
                if (!elements) return $mdUtil.nextTick(positionDropdown, false, $scope);
                var hrect = elements.wrap.getBoundingClientRect(),
                    vrect = elements.snap.getBoundingClientRect(),
                    root = elements.root.getBoundingClientRect(),
                    top = vrect.bottom - root.top,
                    bot = root.bottom - vrect.top,
                    left = hrect.left - root.left,
                    width = hrect.width,
                    offset = getVerticalOffset(),
                    styles;
                // Adjust the width to account for the padding provided by `md-input-container`
                if ($attrs.mdFloatingLabel) {
                    left += INPUT_PADDING;
                    width -= INPUT_PADDING * 2;
                }
                styles = {
                    left: left + 'px',
                    minWidth: width + 'px',
                    maxWidth: Math.max(hrect.right - root.left, root.right - hrect.left) - MENU_PADDING + 'px'
                };
                if (top > bot && root.height - hrect.bottom - MENU_PADDING < MAX_HEIGHT) {
                    styles.top = 'auto';
                    styles.bottom = bot + 'px';
                    styles.maxHeight = Math.min(MAX_HEIGHT, hrect.top - root.top - MENU_PADDING) + 'px';
                } else {
                    styles.top = (top - offset) + 'px';
                    styles.bottom = 'auto';
                    styles.maxHeight = Math.min(MAX_HEIGHT, root.bottom + $mdUtil.scrollTop() - hrect.bottom - MENU_PADDING) + 'px';
                }

                elements.$.scrollContainer.css(styles);
                $mdUtil.nextTick(correctHorizontalAlignment, false);

                /**
                 * Calculates the vertical offset for floating label examples to account for ngMessages
                 * @returns {number}
                 */
                function getVerticalOffset() {
                    var offset = 0;
                    var inputContainer = $element.find('md-input-container');
                    if (inputContainer.length) {
                        var input = inputContainer.find('input');
                        offset = inputContainer.prop('offsetHeight');
                        offset -= input.prop('offsetTop');
                        offset -= input.prop('offsetHeight');
                        // add in the height left up top for the floating label text
                        offset += inputContainer.prop('offsetTop');
                    }
                    return offset;
                }

                /**
                 * Makes sure that the menu doesn't go off of the screen on either side.
                 */
                function correctHorizontalAlignment() {
                    var dropdown = elements.scrollContainer.getBoundingClientRect(),
                        styles = {};
                    if (dropdown.right > root.right - MENU_PADDING) {
                        styles.left = (hrect.right - dropdown.width) + 'px';
                    }
                    elements.$.scrollContainer.css(styles);
                }
            }

            /**
             * Moves the dropdown menu to the body tag in order to avoid z-index and overflow issues.
             */
            function moveDropdown() {
                if (!elements.$.root.length) return;
                $mdTheming(elements.$.scrollContainer);
                elements.$.scrollContainer.detach();
                elements.$.root.append(elements.$.scrollContainer);
                if ($animate.pin) $animate.pin(elements.$.scrollContainer, $rootElement);
            }

            /**
             * Sends focus to the input element.
             */
            function focusElement() {
                if ($scope.autofocus) elements.input.focus();
            }

            /**
             * Sets up any watchers used by autocomplete
             */
            function configureWatchers() {
                var wait = parseInt($scope.delay, 10) || 0;
                $attrs.$observe('disabled', function(value) {
                    ctrl.isDisabled = !!value;
                });
                $attrs.$observe('required', function(value) {
                    ctrl.isRequired = !!value;
                });
                $scope.$watch('searchText', wait ? $mdUtil.debounce(handleSearchText, wait) : handleSearchText);
                $scope.$watch('selectedItem', selectedItemChange);
                angular.element($window).on('resize', positionDropdown);
                $scope.$on('$destroy', cleanup);
            }

            /**
             * Removes any events or leftover elements created by this controller
             */
            function cleanup() {
                angular.element($window).off('resize', positionDropdown);
                if (elements) {
                    var items = 'ul scroller scrollContainer input'.split(' ');
                    angular.forEach(items, function(key) {
                        elements.$[key].remove();
                    });
                }
            }

            /**
             * Gathers all of the elements needed for this controller
             */
            function gatherElements() {
                elements = {
                    main: $element[0],
                    scrollContainer: $element[0].getElementsByClassName('md-virtual-repeat-container')[0],
                    scroller: $element[0].getElementsByClassName('md-virtual-repeat-scroller')[0],
                    ul: $element.find('ul')[0],
                    input: $element.find('input')[0],
                    wrap: $element.find('md-autocomplete-wrap')[0],
                    root: document.body
                };
                elements.li = elements.ul.getElementsByTagName('li');
                elements.snap = getSnapTarget();
                elements.$ = getAngularElements(elements);
            }

            /**
             * Finds the element that the menu will base its position on
             * @returns {*}
             */
            function getSnapTarget() {
                for (var element = $element; element.length; element = element.parent()) {
                    if (angular.isDefined(element.attr('md-autocomplete-snap'))) return element[0];
                }
                return elements.wrap;
            }

            /**
             * Gathers angular-wrapped versions of each element
             * @param elements
             * @returns {{}}
             */
            function getAngularElements(elements) {
                var obj = {};
                for (var key in elements) {
                    if (elements.hasOwnProperty(key)) obj[key] = angular.element(elements[key]);
                }
                return obj;
            }

            //-- event/change handlers

            /**
             * Handles changes to the `hidden` property.
             * @param hidden
             * @param oldHidden
             */
            function handleHiddenChange(hidden, oldHidden) {
                if (!hidden && oldHidden) {
                    positionDropdown();

                    if (elements) {
                        $mdUtil.nextTick(function() {
                            $mdUtil.disableScrollAround(elements.ul);
                        }, false, $scope);
                    }
                } else if (hidden && !oldHidden) {
                    $mdUtil.nextTick(function() {
                        $mdUtil.enableScrolling();
                    }, false, $scope);
                }
            }

            /**
             * When the user mouses over the dropdown menu, ignore blur events.
             */
            function onListEnter() {
                noBlur = true;
            }

            /**
             * When the user's mouse leaves the menu, blur events may hide the menu again.
             */
            function onListLeave() {
                if (!hasFocus) elements.input.focus();
                noBlur = false;
                ctrl.hidden = shouldHide();
            }

            /**
             * When the mouse button is released, send focus back to the input field.
             */
            function onMouseup() {
                elements.input.focus();
            }

            /**
             * Handles changes to the selected item.
             * @param selectedItem
             * @param previousSelectedItem
             */
            function selectedItemChange(selectedItem, previousSelectedItem) {
                if (selectedItem) {
                    getDisplayValue(selectedItem).then(function(val) {
                        $scope.searchText = val;
                        handleSelectedItemChange(selectedItem, previousSelectedItem);
                    });
                }

                if (selectedItem !== previousSelectedItem) announceItemChange();
            }

            /**
             * Use the user-defined expression to announce changes each time a new item is selected
             */
            function announceItemChange() {
                angular.isFunction($scope.itemChange) && $scope.itemChange(getItemAsNameVal($scope.selectedItem));
            }

            /**
             * Use the user-defined expression to announce changes each time the search text is changed
             */
            function announceTextChange() {
                angular.isFunction($scope.textChange) && $scope.textChange();
            }

            /**
             * Calls any external watchers listening for the selected item.  Used in conjunction with
             * `registerSelectedItemWatcher`.
             * @param selectedItem
             * @param previousSelectedItem
             */
            function handleSelectedItemChange(selectedItem, previousSelectedItem) {
                selectedItemWatchers.forEach(function(watcher) {
                    watcher(selectedItem, previousSelectedItem);
                });
            }

            /**
             * Register a function to be called when the selected item changes.
             * @param cb
             */
            function registerSelectedItemWatcher(cb) {
                if (selectedItemWatchers.indexOf(cb) == -1) {
                    selectedItemWatchers.push(cb);
                }
            }

            /**
             * Unregister a function previously registered for selected item changes.
             * @param cb
             */
            function unregisterSelectedItemWatcher(cb) {
                var i = selectedItemWatchers.indexOf(cb);
                if (i != -1) {
                    selectedItemWatchers.splice(i, 1);
                }
            }

            /**
             * Handles changes to the searchText property.
             * @param searchText
             * @param previousSearchText
             */
            function handleSearchText(searchText, previousSearchText) {
                ctrl.index = getDefaultIndex();
                // do nothing on init
                if (searchText === previousSearchText) return;

                getDisplayValue($scope.selectedItem).then(function(val) {
                    // clear selected item if search text no longer matches it
                    if (searchText !== val) {
                        $scope.selectedItem = null;

                        // trigger change event if available
                        if (searchText !== previousSearchText) announceTextChange();

                        // cancel results if search text is not long enough
                        if (!isMinLengthMet()) {
                            ctrl.matches = [];
                            setLoading(false);
                            updateMessages();
                        } else {
                            handleQuery();
                        }
                    }
                });

            }

            /**
             * Handles input blur event, determines if the dropdown should hide.
             */
            function blur() {
                hasFocus = false;
                if (!noBlur) {
                    ctrl.hidden = shouldHide();
                }
            }

            /**
             * Force blur on input element
             * @param forceBlur
             */
            function doBlur(forceBlur) {
                if (forceBlur) {
                    noBlur = false;
                    hasFocus = false;
                }
                elements.input.blur();
            }

            /**
             * Handles input focus event, determines if the dropdown should show.
             */
            function focus() {
                hasFocus = true;
                //-- if searchText is null, let's force it to be a string
                if (!angular.isString($scope.searchText)) $scope.searchText = '';
                ctrl.hidden = shouldHide();
                if (!ctrl.hidden) handleQuery();
            }

            /**
             * Handles keyboard input.
             * @param event
             */
            function keydown(event) {
                switch (event.keyCode) {
                    case $mdConstant.KEY_CODE.DOWN_ARROW:
                        if (ctrl.loading) return;
                        event.stopPropagation();
                        event.preventDefault();
                        ctrl.index = Math.min(ctrl.index + 1, ctrl.matches.length - 1);
                        updateScroll();
                        updateMessages();
                        break;
                    case $mdConstant.KEY_CODE.UP_ARROW:
                        if (ctrl.loading) return;
                        event.stopPropagation();
                        event.preventDefault();
                        ctrl.index = ctrl.index < 0 ? ctrl.matches.length - 1 : Math.max(0, ctrl.index - 1);
                        updateScroll();
                        updateMessages();
                        break;
                    case $mdConstant.KEY_CODE.TAB:
                        // If we hit tab, assume that we've left the list so it will close
                        onListLeave();

                        if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;
                        select(ctrl.index);
                        break;
                    case $mdConstant.KEY_CODE.ENTER:
                        if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;
                        if (hasSelection()) return;
                        event.stopPropagation();
                        event.preventDefault();
                        select(ctrl.index);
                        break;
                    case $mdConstant.KEY_CODE.ESCAPE:
                        event.stopPropagation();
                        event.preventDefault();
                        clearValue();

                        // Force the component to blur if they hit escape
                        doBlur(true);

                        break;
                    default:
                }
            }

            //-- getters

            /**
             * Returns the minimum length needed to display the dropdown.
             * @returns {*}
             */
            function getMinLength() {
                return angular.isNumber($scope.minLength) ? $scope.minLength : 1;
            }

            /**
             * Returns the display value for an item.
             * @param item
             * @returns {*}
             */
            function getDisplayValue(item) {
                return $q.when(getItemText(item) || item);

                /**
                 * Getter function to invoke user-defined expression (in the directive)
                 * to convert your object to a single string.
                 */
                function getItemText(item) {
                    return (item && $scope.itemText) ? $scope.itemText(getItemAsNameVal(item)) : null;
                }
            }

            /**
             * Returns the locals object for compiling item templates.
             * @param item
             * @returns {{}}
             */
            function getItemAsNameVal(item) {
                if (!item) return undefined;

                var locals = {};
                if (ctrl.itemName) locals[ctrl.itemName] = item;

                return locals;
            }

            /**
             * Returns the default index based on whether or not autoselect is enabled.
             * @returns {number}
             */
            function getDefaultIndex() {
                return $scope.autoselect ? 0 : -1;
            }

            /**
             * Sets the loading parameter and updates the hidden state.
             * @param value {boolean} Whether or not the component is currently loading.
             */
            function setLoading(value) {
                if (ctrl.loading != value) {
                    ctrl.loading = value;
                }

                // Always refresh the hidden variable as something else might have changed
                ctrl.hidden = shouldHide();
            }

            /**
             * Determines if the menu should be hidden.
             * @returns {boolean}
             */
            function shouldHide() {
                if (ctrl.loading && !hasMatches()) return true; // Hide while loading initial matches
                else if (hasSelection()) return true; // Hide if there is already a selection
                else if (!hasFocus) return true; // Hide if the input does not have focus
                else return !shouldShow(); // Defer to standard show logic
            }

            /**
             * Determines if the menu should be shown.
             * @returns {boolean}
             */
            function shouldShow() {
                return (isMinLengthMet() && hasMatches()) || notFoundVisible();
            }

            /**
             * Returns true if the search text has matches.
             * @returns {boolean}
             */
            function hasMatches() {
                return ctrl.matches.length ? true : false;
            }

            /**
             * Returns true if the autocomplete has a valid selection.
             * @returns {boolean}
             */
            function hasSelection() {
                return ctrl.scope.selectedItem ? true : false;
            }

            /**
             * Returns true if the loading indicator is, or should be, visible.
             * @returns {boolean}
             */
            function loadingIsVisible() {
                return ctrl.loading && !hasSelection();
            }

            /**
             * Returns the display value of the current item.
             * @returns {*}
             */
            function getCurrentDisplayValue() {
                return getDisplayValue(ctrl.matches[ctrl.index]);
            }

            /**
             * Determines if the minimum length is met by the search text.
             * @returns {*}
             */
            function isMinLengthMet() {
                return ($scope.searchText || '').length >= getMinLength();
            }

            //-- actions

            /**
             * Defines a public property with a handler and a default value.
             * @param key
             * @param handler
             * @param value
             */
            function defineProperty(key, handler, value) {
                Object.defineProperty(ctrl, key, {
                    get: function() {
                        return value;
                    },
                    set: function(newValue) {
                        var oldValue = value;
                        value = newValue;
                        handler(newValue, oldValue);
                    }
                });
            }

            /**
             * Selects the item at the given index.
             * @param index
             */
            function select(index) {
                //-- force form to update state for validation
                $mdUtil.nextTick(function() {
                    getDisplayValue(ctrl.matches[index]).then(function(val) {
                        var ngModel = elements.$.input.controller('ngModel');
                        ngModel.$setViewValue(val);
                        ngModel.$render();
                    }).finally(function() {
                        $scope.selectedItem = ctrl.matches[index];
                        setLoading(false);
                    });
                }, false);
            }

            /**
             * Clears the searchText value and selected item.
             */
            function clearValue() {
                // Set the loading to true so we don't see flashes of content
                setLoading(true);

                // Reset our variables
                ctrl.index = 0;
                ctrl.matches = [];
                $scope.searchText = '';

                // Tell the select to fire and select nothing
                select(-1);

                // Per http://www.w3schools.com/jsref/event_oninput.asp
                var eventObj = document.createEvent('CustomEvent');
                eventObj.initCustomEvent('input', true, true, {
                    value: $scope.searchText
                });
                elements.input.dispatchEvent(eventObj);

                elements.input.focus();
            }

            /**
             * Fetches the results for the provided search text.
             * @param searchText
             */
            function fetchResults(searchText) {
                var items = $scope.$parent.$eval(itemExpr),
                    term = searchText.toLowerCase();
                if (angular.isArray(items)) {
                    handleResults(items);
                } else if (items) {
                    setLoading(true);
                    $mdUtil.nextTick(function() {
                        if (items.success) items.success(handleResults);
                        if (items.then) items.then(handleResults);
                        if (items.finally) items.finally(function() {
                            setLoading(false);
                        });
                    }, true, $scope);
                }

                function handleResults(matches) {
                    cache[term] = matches;
                    if ((searchText || '') !== ($scope.searchText || '')) return; //-- just cache the results if old request
                    ctrl.matches = matches;
                    ctrl.hidden = shouldHide();
                    if ($scope.selectOnMatch) selectItemOnMatch();
                    updateMessages();
                    positionDropdown();
                }
            }

            /**
             * Updates the ARIA messages
             */
            function updateMessages() {
                getCurrentDisplayValue().then(function(msg) {
                    ctrl.messages = [getCountMessage(), msg];
                });
            }

            /**
             * Returns the ARIA message for how many results match the current query.
             * @returns {*}
             */
            function getCountMessage() {
                if (lastCount === ctrl.matches.length) return '';
                lastCount = ctrl.matches.length;
                switch (ctrl.matches.length) {
                    case 0:
                        return 'There are no matches available.';
                    case 1:
                        return 'There is 1 match available.';
                    default:
                        return 'There are ' + ctrl.matches.length + ' matches available.';
                }
            }

            /**
             * Makes sure that the focused element is within view.
             */
            function updateScroll() {
                if (!elements.li[0]) return;
                var height = elements.li[0].offsetHeight,
                    top = height * ctrl.index,
                    bot = top + height,
                    hgt = elements.scroller.clientHeight,
                    scrollTop = elements.scroller.scrollTop;
                if (top < scrollTop) {
                    scrollTo(top);
                } else if (bot > scrollTop + hgt) {
                    scrollTo(bot - hgt);
                }
            }

            function scrollTo(offset) {
                elements.$.scrollContainer.controller('mdVirtualRepeatContainer').scrollTo(offset);
            }

            function notFoundVisible() {
                var textLength = (ctrl.scope.searchText || '').length;

                return ctrl.hasNotFound && !hasMatches() && !ctrl.loading && textLength >= getMinLength() && hasFocus && !hasSelection();
            }

            /**
             * Starts the query to gather the results for the current searchText.  Attempts to return cached
             * results first, then forwards the process to `fetchResults` if necessary.
             */
            function handleQuery() {
                var searchText = $scope.searchText || '',
                    term = searchText.toLowerCase();
                //-- if results are cached, pull in cached results
                if (!$scope.noCache && cache[term]) {
                    ctrl.matches = cache[term];
                    updateMessages();
                } else {
                    fetchResults(searchText);
                }

                ctrl.hidden = shouldHide();
            }

            /**
             * If there is only one matching item and the search text matches its display value exactly,
             * automatically select that item.  Note: This function is only called if the user uses the
             * `md-select-on-match` flag.
             */
            function selectItemOnMatch() {
                var searchText = $scope.searchText,
                    matches = ctrl.matches,
                    item = matches[0];
                if (matches.length === 1) getDisplayValue(item).then(function(displayValue) {
                    if (searchText == displayValue) select(0);
                });
            }

        }
        MdAutocompleteCtrl.$inject = ["$scope", "$element", "$mdUtil", "$mdConstant", "$mdTheming", "$window", "$animate", "$rootElement", "$attrs", "$q"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.autocomplete')
            .directive('mdAutocomplete', MdAutocomplete);

        /**
         * @ngdoc directive
         * @name mdAutocomplete
         * @module material.components.autocomplete
         *
         * @description
         * `<md-autocomplete>` is a special input component with a drop-down of all possible matches to a
         *     custom query. This component allows you to provide real-time suggestions as the user types
         *     in the input area.
         *
         * To start, you will need to specify the required parameters and provide a template for your
         *     results. The content inside `md-autocomplete` will be treated as a template.
         *
         * In more complex cases, you may want to include other content such as a message to display when
         *     no matches were found.  You can do this by wrapping your template in `md-item-template` and
         *     adding a tag for `md-not-found`.  An example of this is shown below.
         *
         * ### Validation
         *
         * You can use `ng-messages` to include validation the same way that you would normally validate;
         *     however, if you want to replicate a standard input with a floating label, you will have to
         *     do the following:
         *
         * - Make sure that your template is wrapped in `md-item-template`
         * - Add your `ng-messages` code inside of `md-autocomplete`
         * - Add your validation properties to `md-autocomplete` (ie. `required`)
         * - Add a `name` to `md-autocomplete` (to be used on the generated `input`)
         *
         * There is an example below of how this should look.
         *
         *
         * @param {expression} md-items An expression in the format of `item in items` to iterate over
         *     matches for your search.
         * @param {expression=} md-selected-item-change An expression to be run each time a new item is
         *     selected
         * @param {expression=} md-search-text-change An expression to be run each time the search text
         *     updates
         * @param {expression=} md-search-text A model to bind the search query text to
         * @param {object=} md-selected-item A model to bind the selected item to
         * @param {expression=} md-item-text An expression that will convert your object to a single string.
         * @param {string=} placeholder Placeholder text that will be forwarded to the input.
         * @param {boolean=} md-no-cache Disables the internal caching that happens in autocomplete
         * @param {boolean=} ng-disabled Determines whether or not to disable the input field
         * @param {number=} md-min-length Specifies the minimum length of text before autocomplete will
         *     make suggestions
         * @param {number=} md-delay Specifies the amount of time (in milliseconds) to wait before looking
         *     for results
         * @param {boolean=} md-autofocus If true, will immediately focus the input element
         * @param {boolean=} md-autoselect If true, the first item will be selected by default
         * @param {string=} md-menu-class This will be applied to the dropdown menu for styling
         * @param {string=} md-floating-label This will add a floating label to autocomplete and wrap it in
         *     `md-input-container`
         * @param {string=} md-input-name The name attribute given to the input element to be used with
         *     FormController
         * @param {string=} md-input-id An ID to be added to the input element
         * @param {number=} md-input-minlength The minimum length for the input's value for validation
         * @param {number=} md-input-maxlength The maximum length for the input's value for validation
         * @param {boolean=} md-select-on-match When set, autocomplete will automatically select exact
         *     the item if the search text is an exact match
         *
         * @usage
         * ### Basic Example
         * <hljs lang="html">
         *   <md-autocomplete
         *       md-selected-item="selectedItem"
         *       md-search-text="searchText"
         *       md-items="item in getMatches(searchText)"
         *       md-item-text="item.display">
         *     <span md-highlight-text="searchText">{{item.display}}</span>
         *   </md-autocomplete>
         * </hljs>
         *
         * ### Example with "not found" message
         * <hljs lang="html">
         * <md-autocomplete
         *     md-selected-item="selectedItem"
         *     md-search-text="searchText"
         *     md-items="item in getMatches(searchText)"
         *     md-item-text="item.display">
         *   <md-item-template>
         *     <span md-highlight-text="searchText">{{item.display}}</span>
         *   </md-item-template>
         *   <md-not-found>
         *     No matches found.
         *   </md-not-found>
         * </md-autocomplete>
         * </hljs>
         *
         * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the
         *     different parts that make up our component.
         *
         * ### Example with validation
         * <hljs lang="html">
         * <form name="autocompleteForm">
         *   <md-autocomplete
         *       required
         *       md-input-name="autocomplete"
         *       md-selected-item="selectedItem"
         *       md-search-text="searchText"
         *       md-items="item in getMatches(searchText)"
         *       md-item-text="item.display">
         *     <md-item-template>
         *       <span md-highlight-text="searchText">{{item.display}}</span>
         *     </md-item-template>
         *     <div ng-messages="autocompleteForm.autocomplete.$error">
         *       <div ng-message="required">This field is required</div>
         *     </div>
         *   </md-autocomplete>
         * </form>
         * </hljs>
         *
         * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the
         *     different parts that make up our component.
         */

        function MdAutocomplete() {
            var hasNotFoundTemplate = false;

            return {
                controller: 'MdAutocompleteCtrl',
                controllerAs: '$mdAutocompleteCtrl',
                scope: {
                    inputName: '@mdInputName',
                    inputMinlength: '@mdInputMinlength',
                    inputMaxlength: '@mdInputMaxlength',
                    searchText: '=?mdSearchText',
                    selectedItem: '=?mdSelectedItem',
                    itemsExpr: '@mdItems',
                    itemText: '&mdItemText',
                    placeholder: '@placeholder',
                    noCache: '=?mdNoCache',
                    selectOnMatch: '=?mdSelectOnMatch',
                    itemChange: '&?mdSelectedItemChange',
                    textChange: '&?mdSearchTextChange',
                    minLength: '=?mdMinLength',
                    delay: '=?mdDelay',
                    autofocus: '=?mdAutofocus',
                    floatingLabel: '@?mdFloatingLabel',
                    autoselect: '=?mdAutoselect',
                    menuClass: '@?mdMenuClass',
                    inputId: '@?mdInputId'
                },
                link: function(scope, element, attrs, controller) {
                    controller.hasNotFound = hasNotFoundTemplate;
                },
                template: function(element, attr) {
                    var noItemsTemplate = getNoItemsTemplate(),
                        itemTemplate = getItemTemplate(),
                        leftover = element.html(),
                        tabindex = attr.tabindex;

                    // Set our variable for the link function above which runs later
                    hasNotFoundTemplate = noItemsTemplate ? true : false;

                    if (!attr.hasOwnProperty('tabindex')) element.attr('tabindex', '-1');

                    return '\
        <md-autocomplete-wrap\
            layout="row"\
            ng-class="{ \'md-whiteframe-z1\': !floatingLabel, \'md-menu-showing\': !$mdAutocompleteCtrl.hidden }"\
            role="listbox">\
          ' + getInputElement() + '\
          <md-progress-linear\
              class="' + (attr.mdFloatingLabel ? 'md-inline' : '') + '"\
              ng-if="$mdAutocompleteCtrl.loadingIsVisible()"\
              md-mode="indeterminate"></md-progress-linear>\
          <md-virtual-repeat-container\
              md-auto-shrink\
              md-auto-shrink-min="1"\
              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"\
              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"\
              ng-mouseup="$mdAutocompleteCtrl.mouseUp()"\
              ng-hide="$mdAutocompleteCtrl.hidden"\
              class="md-autocomplete-suggestions-container md-whiteframe-z1"\
              ng-class="{ \'md-not-found\': $mdAutocompleteCtrl.notFoundVisible() }"\
              role="presentation">\
            <ul class="md-autocomplete-suggestions"\
                ng-class="::menuClass"\
                id="ul-{{$mdAutocompleteCtrl.id}}">\
              <li md-virtual-repeat="item in $mdAutocompleteCtrl.matches"\
                  ng-class="{ selected: $index === $mdAutocompleteCtrl.index }"\
                  ng-click="$mdAutocompleteCtrl.select($index)"\
                  md-extra-name="$mdAutocompleteCtrl.itemName">\
                  ' + itemTemplate + '\
                  </li>' + noItemsTemplate + '\
            </ul>\
          </md-virtual-repeat-container>\
        </md-autocomplete-wrap>\
        <aria-status\
            class="md-visually-hidden"\
            role="status"\
            aria-live="assertive">\
          <p ng-repeat="message in $mdAutocompleteCtrl.messages track by $index" ng-if="message">{{message}}</p>\
        </aria-status>';

                    function getItemTemplate() {
                        var templateTag = element.find('md-item-template').detach(),
                            html = templateTag.length ? templateTag.html() : element.html();
                        if (!templateTag.length) element.empty();
                        return '<md-autocomplete-parent-scope md-autocomplete-replace>' + html + '</md-autocomplete-parent-scope>';
                    }

                    function getNoItemsTemplate() {
                        var templateTag = element.find('md-not-found').detach(),
                            template = templateTag.length ? templateTag.html() : '';
                        return template ? '<li ng-if="$mdAutocompleteCtrl.notFoundVisible()"\
                         md-autocomplete-parent-scope>' + template + '</li>' : '';

                    }

                    function getInputElement() {
                        if (attr.mdFloatingLabel) {
                            return '\
            <md-input-container flex ng-if="floatingLabel">\
              <label>{{floatingLabel}}</label>\
              <input type="search"\
                  ' + (tabindex != null ? 'tabindex="' + tabindex + '"' : '') + '\
                  id="{{ inputId || \'fl-input-\' + $mdAutocompleteCtrl.id }}"\
                  name="{{inputName}}"\
                  autocomplete="off"\
                  ng-required="$mdAutocompleteCtrl.isRequired"\
                  ng-minlength="inputMinlength"\
                  ng-maxlength="inputMaxlength"\
                  ng-disabled="$mdAutocompleteCtrl.isDisabled"\
                  ng-model="$mdAutocompleteCtrl.scope.searchText"\
                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"\
                  ng-blur="$mdAutocompleteCtrl.blur()"\
                  ng-focus="$mdAutocompleteCtrl.focus()"\
                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"\
                  aria-label="{{floatingLabel}}"\
                  aria-autocomplete="list"\
                  aria-haspopup="true"\
                  aria-activedescendant=""\
                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>\
              <div md-autocomplete-parent-scope md-autocomplete-replace>' + leftover + '</div>\
            </md-input-container>';
                        } else {
                            return '\
            <input flex type="search"\
                ' + (tabindex != null ? 'tabindex="' + tabindex + '"' : '') + '\
                id="{{ inputId || \'input-\' + $mdAutocompleteCtrl.id }}"\
                name="{{inputName}}"\
                ng-if="!floatingLabel"\
                autocomplete="off"\
                ng-required="$mdAutocompleteCtrl.isRequired"\
                ng-disabled="$mdAutocompleteCtrl.isDisabled"\
                ng-model="$mdAutocompleteCtrl.scope.searchText"\
                ng-keydown="$mdAutocompleteCtrl.keydown($event)"\
                ng-blur="$mdAutocompleteCtrl.blur()"\
                ng-focus="$mdAutocompleteCtrl.focus()"\
                placeholder="{{placeholder}}"\
                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"\
                aria-label="{{placeholder}}"\
                aria-autocomplete="list"\
                aria-haspopup="true"\
                aria-activedescendant=""\
                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>\
            <button\
                type="button"\
                tabindex="-1"\
                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"\
                ng-click="$mdAutocompleteCtrl.clear()">\
              <md-icon md-svg-icon="md-close"></md-icon>\
              <span class="md-visually-hidden">Clear</span>\
            </button>\
                ';
                        }
                    }
                }
            };
        }

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.autocomplete')
            .directive('mdAutocompleteParentScope', MdAutocompleteItemScopeDirective);

        function MdAutocompleteItemScopeDirective($compile, $mdUtil) {
            return {
                restrict: 'AE',
                compile: compile,
                terminal: true,
                transclude: 'element'
            };

            function compile(tElement, tAttr, transclude) {
                return function postLink(scope, element, attr) {
                    var ctrl = scope.$mdAutocompleteCtrl;
                    var newScope = ctrl.parent.$new();
                    var itemName = ctrl.itemName;

                    // Watch for changes to our scope's variables and copy them to the new scope
                    watchVariable('$index', '$index');
                    watchVariable('item', itemName);

                    // Ensure that $digest calls on our scope trigger $digest on newScope.
                    connectScopes();

                    // Link the element against newScope.
                    transclude(newScope, function(clone) {
                        element.after(clone);
                    });

                    /**
                     * Creates a watcher for variables that are copied from the parent scope
                     * @param variable
                     * @param alias
                     */
                    function watchVariable(variable, alias) {
                        newScope[alias] = scope[variable];

                        scope.$watch(variable, function(value) {
                            $mdUtil.nextTick(function() {
                                newScope[alias] = value;
                            });
                        });
                    }

                    /**
                     * Creates watchers on scope and newScope that ensure that for any
                     * $digest of scope, newScope is also $digested.
                     */
                    function connectScopes() {
                        var scopeDigesting = false;
                        var newScopeDigesting = false;

                        scope.$watch(function() {
                            if (newScopeDigesting || scopeDigesting) {
                                return;
                            }

                            scopeDigesting = true;
                            scope.$$postDigest(function() {
                                if (!newScopeDigesting) {
                                    newScope.$digest();
                                }

                                scopeDigesting = newScopeDigesting = false;
                            });
                        });

                        newScope.$watch(function() {
                            newScopeDigesting = true;
                        });
                    }
                };
            }
        }
        MdAutocompleteItemScopeDirective.$inject = ["$compile", "$mdUtil"];
    })();
    (function() {
        "use strict";

        angular
            .module('material.components.autocomplete')
            .controller('MdHighlightCtrl', MdHighlightCtrl);

        function MdHighlightCtrl($scope, $element, $attrs) {
            this.init = init;

            function init(termExpr, unsafeTextExpr) {
                var text = null,
                    regex = null,
                    flags = $attrs.mdHighlightFlags || '',
                    watcher = $scope.$watch(function($scope) {
                        return {
                            term: termExpr($scope),
                            unsafeText: unsafeTextExpr($scope)
                        };
                    }, function(state, prevState) {
                        if (text === null || state.unsafeText !== prevState.unsafeText) {
                            text = angular.element('<div>').text(state.unsafeText).html()
                        }
                        if (regex === null || state.term !== prevState.term) {
                            regex = getRegExp(state.term, flags);
                        }

                        $element.html(text.replace(regex, '<span class="highlight">$&</span>'));
                    }, true);
                $element.on('$destroy', watcher);
            }

            function sanitize(term) {
                return term && term.replace(/[\\\^\$\*\+\?\.\(\)\|\{}\[\]]/g, '\\$&');
            }

            function getRegExp(text, flags) {
                var str = '';
                if (flags.indexOf('^') >= 1) str += '^';
                str += text;
                if (flags.indexOf('$') >= 1) str += '$';
                return new RegExp(sanitize(str), flags.replace(/[\$\^]/g, ''));
            }
        }
        MdHighlightCtrl.$inject = ["$scope", "$element", "$attrs"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.autocomplete')
            .directive('mdHighlightText', MdHighlight);

        /**
         * @ngdoc directive
         * @name mdHighlightText
         * @module material.components.autocomplete
         *
         * @description
         * The `md-highlight-text` directive allows you to specify text that should be highlighted within
         *     an element.  Highlighted text will be wrapped in `<span class="highlight"></span>` which can
         *     be styled through CSS.  Please note that child elements may not be used with this directive.
         *
         * @param {string} md-highlight-text A model to be searched for
         * @param {string=} md-highlight-flags A list of flags (loosely based on JavaScript RexExp flags).
         * #### **Supported flags**:
         * - `g`: Find all matches within the provided text
         * - `i`: Ignore case when searching for matches
         * - `$`: Only match if the text ends with the search term
         * - `^`: Only match if the text begins with the search term
         *
         * @usage
         * <hljs lang="html">
         * <input placeholder="Enter a search term..." ng-model="searchTerm" type="text" />
         * <ul>
         *   <li ng-repeat="result in results" md-highlight-text="searchTerm">
         *     {{result.text}}
         *   </li>
         * </ul>
         * </hljs>
         */

        function MdHighlight($interpolate, $parse) {
            return {
                terminal: true,
                controller: 'MdHighlightCtrl',
                compile: function mdHighlightCompile(tElement, tAttr) {
                    var termExpr = $parse(tAttr.mdHighlightText);
                    var unsafeTextExpr = $interpolate(tElement.html());

                    return function mdHighlightLink(scope, element, attr, ctrl) {
                        ctrl.init(termExpr, unsafeTextExpr);
                    };
                }
            };
        }
        MdHighlight.$inject = ["$interpolate", "$parse"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.chips')
            .directive('mdChip', MdChip);

        /**
         * @ngdoc directive
         * @name mdChip
         * @module material.components.chips
         *
         * @description
         * `<md-chip>` is a component used within `<md-chips>` and is responsible for rendering individual
         * chips.
         *
         *
         * @usage
         * <hljs lang="html">
         *   <md-chip>{{$chip}}</md-chip>
         * </hljs>
         *
         */

        // This hint text is hidden within a chip but used by screen readers to
        // inform the user how they can interact with a chip.
        var DELETE_HINT_TEMPLATE = '\
    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">\
      {{$mdChipsCtrl.deleteHint}}\
    </span>';

        /**
         * MDChip Directive Definition
         *
         * @param $mdTheming
         * @param $mdInkRipple
         * @ngInject
         */
        function MdChip($mdTheming, $mdUtil) {
            var hintTemplate = $mdUtil.processTemplate(DELETE_HINT_TEMPLATE);

            return {
                restrict: 'E',
                require: '^?mdChips',
                compile: compile
            };

            function compile(element, attr) {
                // Append the delete template
                element.append($mdUtil.processTemplate(hintTemplate));

                return function postLink(scope, element, attr, ctrl) {
                    element.addClass('md-chip');
                    $mdTheming(element);

                    if (ctrl) angular.element(element[0].querySelector('.md-chip-content'))
                        .on('blur', function() {
                            ctrl.selectedChip = -1;
                        });
                };
            }
        }
        MdChip.$inject = ["$mdTheming", "$mdUtil"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.chips')
            .directive('mdChipRemove', MdChipRemove);

        /**
         * @ngdoc directive
         * @name mdChipRemove
         * @module material.components.chips
         *
         * @description
         * `<md-chip-remove>`
         * Designates an element to be used as the delete button for a chip. This
         * element is passed as a child of the `md-chips` element.
         *
         * @usage
         * <hljs lang="html">
         *   <md-chips><button md-chip-remove>DEL</button></md-chips>
         * </hljs>
         */


        /**
         * MdChipRemove Directive Definition.
         * 
         * @param $compile
         * @param $timeout
         * @returns {{restrict: string, require: string[], link: Function, scope: boolean}}
         * @constructor
         */
        function MdChipRemove($timeout) {
            return {
                restrict: 'A',
                require: '^mdChips',
                scope: false,
                link: postLink
            };

            function postLink(scope, element, attr, ctrl) {
                element.on('click', function(event) {
                    scope.$apply(function() {
                        ctrl.removeChip(scope.$$replacedScope.$index);
                    });
                });

                // Child elements aren't available until after a $timeout tick as they are hidden by an
                // `ng-if`. see http://goo.gl/zIWfuw
                $timeout(function() {
                    element.attr({
                        tabindex: -1,
                        'aria-hidden': true
                    });
                    element.find('button').attr('tabindex', '-1');
                });
            }
        }
        MdChipRemove.$inject = ["$timeout"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.chips')
            .directive('mdChipTransclude', MdChipTransclude);

        function MdChipTransclude($compile) {
            return {
                restrict: 'EA',
                terminal: true,
                link: link,
                scope: false
            };

            function link(scope, element, attr) {
                var ctrl = scope.$parent.$mdChipsCtrl,
                    newScope = ctrl.parent.$new(false, ctrl.parent);
                newScope.$$replacedScope = scope;
                newScope.$chip = scope.$chip;
                newScope.$index = scope.$index;
                newScope.$mdChipsCtrl = ctrl;

                var newHtml = ctrl.$scope.$eval(attr.mdChipTransclude);

                element.html(newHtml);
                $compile(element.contents())(newScope);
            }
        }
        MdChipTransclude.$inject = ["$compile"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.chips')
            .controller('MdChipsCtrl', MdChipsCtrl);

        /**
         * Controller for the MdChips component. Responsible for adding to and
         * removing from the list of chips, marking chips as selected, and binding to
         * the models of various input components.
         *
         * @param $scope
         * @param $mdConstant
         * @param $log
         * @param $element
         * @constructor
         */
        function MdChipsCtrl($scope, $mdConstant, $log, $element, $timeout) {
            /** @type {$timeout} **/
            this.$timeout = $timeout;

            /** @type {Object} */
            this.$mdConstant = $mdConstant;

            /** @type {angular.$scope} */
            this.$scope = $scope;

            /** @type {angular.$scope} */
            this.parent = $scope.$parent;

            /** @type {$log} */
            this.$log = $log;

            /** @type {$element} */
            this.$element = $element;

            /** @type {angular.NgModelController} */
            this.ngModelCtrl = null;

            /** @type {angular.NgModelController} */
            this.userInputNgModelCtrl = null;

            /** @type {Element} */
            this.userInputElement = null;

            /** @type {Array.<Object>} */
            this.items = [];

            /** @type {number} */
            this.selectedChip = -1;

            /** @type {boolean} */
            this.hasAutocomplete = false;


            /**
             * Hidden hint text for how to delete a chip. Used to give context to screen readers.
             * @type {string}
             */
            this.deleteHint = 'Press delete to remove this chip.';

            /**
             * Hidden label for the delete button. Used to give context to screen readers.
             * @type {string}
             */
            this.deleteButtonLabel = 'Remove';

            /**
             * Model used by the input element.
             * @type {string}
             */
            this.chipBuffer = '';

            /**
             * Whether to use the onAppend expression to transform the chip buffer
             * before appending it to the list.
             * @type {boolean}
             *
             *
             * @deprecated Will remove in 1.0.
             */
            this.useOnAppend = false;

            /**
             * Whether to use the transformChip expression to transform the chip buffer
             * before appending it to the list.
             * @type {boolean}
             */
            this.useTransformChip = false;

            /**
             * Whether to use the onAdd expression to notify of chip additions.
             * @type {boolean}
             */
            this.useOnAdd = false;

            /**
             * Whether to use the onRemove expression to notify of chip removals.
             * @type {boolean}
             */
            this.useOnRemove = false;

            /**
             * Whether to use the onSelect expression to notify the component's user
             * after selecting a chip from the list.
             * @type {boolean}
             */
            this.useOnSelect = false;
        }
        MdChipsCtrl.$inject = ["$scope", "$mdConstant", "$log", "$element", "$timeout"];

        /**
         * Handles the keydown event on the input element: by default <enter> appends
         * the buffer to the chip list, while backspace removes the last chip in the
         * list if the current buffer is empty.
         * @param event
         */
        MdChipsCtrl.prototype.inputKeydown = function(event) {
            var chipBuffer = this.getChipBuffer();

            // If we have an autocomplete, and it handled the event, we have nothing to do
            if (this.hasAutocomplete && event.isDefaultPrevented && event.isDefaultPrevented()) {
                return;
            }

            if (event.keyCode === this.$mdConstant.KEY_CODE.BACKSPACE) {
                if (chipBuffer) return;
                event.preventDefault();
                event.stopPropagation();
                if (this.items.length) this.selectAndFocusChipSafe(this.items.length - 1);
                return;
            }

            // By default <enter> appends the buffer to the chip list.
            if (!this.separatorKeys || this.separatorKeys.length < 1) {
                this.separatorKeys = [this.$mdConstant.KEY_CODE.ENTER];
            }

            // Support additional separator key codes in an array of `md-separator-keys`.
            if (this.separatorKeys.indexOf(event.keyCode) !== -1) {
                if ((this.hasAutocomplete && this.requireMatch) || !chipBuffer) return;
                event.preventDefault();
                this.appendChip(chipBuffer);
                this.resetChipBuffer();
            }
        };

        /**
         * Handles the keydown event on the chip elements: backspace removes the selected chip, arrow
         * keys switch which chips is active
         * @param event
         */
        MdChipsCtrl.prototype.chipKeydown = function(event) {
            if (this.getChipBuffer()) return;
            switch (event.keyCode) {
                case this.$mdConstant.KEY_CODE.BACKSPACE:
                case this.$mdConstant.KEY_CODE.DELETE:
                    if (this.selectedChip < 0) return;
                    event.preventDefault();
                    this.removeAndSelectAdjacentChip(this.selectedChip);
                    break;
                case this.$mdConstant.KEY_CODE.LEFT_ARROW:
                    event.preventDefault();
                    if (this.selectedChip < 0) this.selectedChip = this.items.length;
                    if (this.items.length) this.selectAndFocusChipSafe(this.selectedChip - 1);
                    break;
                case this.$mdConstant.KEY_CODE.RIGHT_ARROW:
                    event.preventDefault();
                    this.selectAndFocusChipSafe(this.selectedChip + 1);
                    break;
                case this.$mdConstant.KEY_CODE.ESCAPE:
                case this.$mdConstant.KEY_CODE.TAB:
                    if (this.selectedChip < 0) return;
                    event.preventDefault();
                    this.onFocus();
                    break;
            }
        };

        /**
         * Get the input's placeholder - uses `placeholder` when list is empty and `secondary-placeholder`
         * when the list is non-empty. If `secondary-placeholder` is not provided, `placeholder` is used
         * always.
         */
        MdChipsCtrl.prototype.getPlaceholder = function() {
            // Allow `secondary-placeholder` to be blank.
            var useSecondary = (this.items.length &&
                (this.secondaryPlaceholder == '' || this.secondaryPlaceholder));
            return useSecondary ? this.placeholder : this.secondaryPlaceholder;
        };

        /**
         * Removes chip at {@code index} and selects the adjacent chip.
         * @param index
         */
        MdChipsCtrl.prototype.removeAndSelectAdjacentChip = function(index) {
            var selIndex = this.getAdjacentChipIndex(index);
            this.removeChip(index);
            this.$timeout(angular.bind(this, function() {
                this.selectAndFocusChipSafe(selIndex);
            }));
        };

        /**
         * Sets the selected chip index to -1.
         */
        MdChipsCtrl.prototype.resetSelectedChip = function() {
            this.selectedChip = -1;
        };

        /**
         * Gets the index of an adjacent chip to select after deletion. Adjacency is
         * determined as the next chip in the list, unless the target chip is the
         * last in the list, then it is the chip immediately preceding the target. If
         * there is only one item in the list, -1 is returned (select none).
         * The number returned is the index to select AFTER the target has been
         * removed.
         * If the current chip is not selected, then -1 is returned to select none.
         */
        MdChipsCtrl.prototype.getAdjacentChipIndex = function(index) {
            var len = this.items.length - 1;
            return (len == 0) ? -1 :
                (index == len) ? index - 1 : index;
        };

        /**
         * Append the contents of the buffer to the chip list. This method will first
         * call out to the md-transform-chip method, if provided.
         *
         * @param newChip
         */
        MdChipsCtrl.prototype.appendChip = function(newChip) {
            if (this.useTransformChip && this.transformChip) {
                var transformedChip = this.transformChip({
                    '$chip': newChip
                });

                // Check to make sure the chip is defined before assigning it, otherwise, we'll just assume
                // they want the string version.
                if (angular.isDefined(transformedChip)) {
                    newChip = transformedChip;
                }
            }

            // If items contains an identical object to newChip, do not append
            if (angular.isObject(newChip)) {
                var identical = this.items.some(function(item) {
                    return angular.equals(newChip, item);
                });
                if (identical) return;
            }

            // Check for a null (but not undefined), or existing chip and cancel appending
            if (newChip == null || this.items.indexOf(newChip) + 1) return;

            // Append the new chip onto our list
            var index = this.items.push(newChip);

            // If they provide the md-on-add attribute, notify them of the chip addition
            if (this.useOnAdd && this.onAdd) {
                this.onAdd({
                    '$chip': newChip,
                    '$index': index
                });
            }
        };

        /**
         * Sets whether to use the md-on-append expression. This expression is
         * bound to scope and controller in {@code MdChipsDirective} as
         * {@code onAppend}. Due to the nature of directive scope bindings, the
         * controller cannot know on its own/from the scope whether an expression was
         * actually provided.
         *
         * @deprecated
         *
         * TODO: Remove deprecated md-on-append functionality in 1.0
         */
        MdChipsCtrl.prototype.useOnAppendExpression = function() {
            this.$log.warn("md-on-append is deprecated; please use md-transform-chip or md-on-add instead");
            if (!this.useTransformChip || !this.transformChip) {
                this.useTransformChip = true;
                this.transformChip = this.onAppend;
            }
        };

        /**
         * Sets whether to use the md-transform-chip expression. This expression is
         * bound to scope and controller in {@code MdChipsDirective} as
         * {@code transformChip}. Due to the nature of directive scope bindings, the
         * controller cannot know on its own/from the scope whether an expression was
         * actually provided.
         */
        MdChipsCtrl.prototype.useTransformChipExpression = function() {
            this.useTransformChip = true;
        };

        /**
         * Sets whether to use the md-on-add expression. This expression is
         * bound to scope and controller in {@code MdChipsDirective} as
         * {@code onAdd}. Due to the nature of directive scope bindings, the
         * controller cannot know on its own/from the scope whether an expression was
         * actually provided.
         */
        MdChipsCtrl.prototype.useOnAddExpression = function() {
            this.useOnAdd = true;
        };

        /**
         * Sets whether to use the md-on-remove expression. This expression is
         * bound to scope and controller in {@code MdChipsDirective} as
         * {@code onRemove}. Due to the nature of directive scope bindings, the
         * controller cannot know on its own/from the scope whether an expression was
         * actually provided.
         */
        MdChipsCtrl.prototype.useOnRemoveExpression = function() {
            this.useOnRemove = true;
        };

        /*
         * Sets whether to use the md-on-select expression. This expression is
         * bound to scope and controller in {@code MdChipsDirective} as
         * {@code onSelect}. Due to the nature of directive scope bindings, the
         * controller cannot know on its own/from the scope whether an expression was
         * actually provided.
         */
        MdChipsCtrl.prototype.useOnSelectExpression = function() {
            this.useOnSelect = true;
        };

        /**
         * Gets the input buffer. The input buffer can be the model bound to the
         * default input item {@code this.chipBuffer}, the {@code selectedItem}
         * model of an {@code md-autocomplete}, or, through some magic, the model
         * bound to any inpput or text area element found within a
         * {@code md-input-container} element.
         * @return {Object|string}
         */
        MdChipsCtrl.prototype.getChipBuffer = function() {
            return !this.userInputElement ? this.chipBuffer :
                this.userInputNgModelCtrl ? this.userInputNgModelCtrl.$viewValue :
                this.userInputElement[0].value;
        };

        /**
         * Resets the input buffer for either the internal input or user provided input element.
         */
        MdChipsCtrl.prototype.resetChipBuffer = function() {
            if (this.userInputElement) {
                if (this.userInputNgModelCtrl) {
                    this.userInputNgModelCtrl.$setViewValue('');
                    this.userInputNgModelCtrl.$render();
                } else {
                    this.userInputElement[0].value = '';
                }
            } else {
                this.chipBuffer = '';
            }
        };

        /**
         * Removes the chip at the given index.
         * @param index
         */
        MdChipsCtrl.prototype.removeChip = function(index) {
            var removed = this.items.splice(index, 1);

            if (removed && removed.length && this.useOnRemove && this.onRemove) {
                this.onRemove({
                    '$chip': removed[0],
                    '$index': index
                });
            }
        };

        MdChipsCtrl.prototype.removeChipAndFocusInput = function(index) {
            this.removeChip(index);
            this.onFocus();
        };
        /**
         * Selects the chip at `index`,
         * @param index
         */
        MdChipsCtrl.prototype.selectAndFocusChipSafe = function(index) {
            if (!this.items.length) {
                this.selectChip(-1);
                this.onFocus();
                return;
            }
            if (index === this.items.length) return this.onFocus();
            index = Math.max(index, 0);
            index = Math.min(index, this.items.length - 1);
            this.selectChip(index);
            this.focusChip(index);
        };

        /**
         * Marks the chip at the given index as selected.
         * @param index
         */
        MdChipsCtrl.prototype.selectChip = function(index) {
            if (index >= -1 && index <= this.items.length) {
                this.selectedChip = index;

                // Fire the onSelect if provided
                if (this.useOnSelect && this.onSelect) {
                    this.onSelect({
                        '$chip': this.items[this.selectedChip]
                    });
                }
            } else {
                this.$log.warn('Selected Chip index out of bounds; ignoring.');
            }
        };

        /**
         * Selects the chip at `index` and gives it focus.
         * @param index
         */
        MdChipsCtrl.prototype.selectAndFocusChip = function(index) {
            this.selectChip(index);
            if (index != -1) {
                this.focusChip(index);
            }
        };

        /**
         * Call `focus()` on the chip at `index`
         */
        MdChipsCtrl.prototype.focusChip = function(index) {
            this.$element[0].querySelector('md-chip[index="' + index + '"] .md-chip-content').focus();
        };

        /**
         * Configures the required interactions with the ngModel Controller.
         * Specifically, set {@code this.items} to the {@code NgModelCtrl#$viewVale}.
         * @param ngModelCtrl
         */
        MdChipsCtrl.prototype.configureNgModel = function(ngModelCtrl) {
            this.ngModelCtrl = ngModelCtrl;

            var self = this;
            ngModelCtrl.$render = function() {
                // model is updated. do something.
                self.items = self.ngModelCtrl.$viewValue;
            };
        };

        MdChipsCtrl.prototype.onFocus = function() {
            var input = this.$element[0].querySelector('input');
            input && input.focus();
            this.resetSelectedChip();
        };

        MdChipsCtrl.prototype.onInputFocus = function() {
            this.inputHasFocus = true;
            this.resetSelectedChip();
        };

        MdChipsCtrl.prototype.onInputBlur = function() {
            this.inputHasFocus = false;
        };

        /**
         * Configure event bindings on a user-provided input element.
         * @param inputElement
         */
        MdChipsCtrl.prototype.configureUserInput = function(inputElement) {
            this.userInputElement = inputElement;

            // Find the NgModelCtrl for the input element
            var ngModelCtrl = inputElement.controller('ngModel');
            // `.controller` will look in the parent as well.
            if (ngModelCtrl != this.ngModelCtrl) {
                this.userInputNgModelCtrl = ngModelCtrl;
            }

            var scope = this.$scope;
            var ctrl = this;

            // Run all of the events using evalAsync because a focus may fire a blur in the same digest loop
            var scopeApplyFn = function(event, fn) {
                scope.$evalAsync(angular.bind(ctrl, fn, event));
            };

            // Bind to keydown and focus events of input
            inputElement
                .attr({
                    tabindex: 0
                })
                .on('keydown', function(event) {
                    scopeApplyFn(event, ctrl.inputKeydown)
                })
                .on('focus', function(event) {
                    scopeApplyFn(event, ctrl.onInputFocus)
                })
                .on('blur', function(event) {
                    scopeApplyFn(event, ctrl.onInputBlur)
                })
        };

        MdChipsCtrl.prototype.configureAutocomplete = function(ctrl) {
            if (ctrl) {
                this.hasAutocomplete = true;
                ctrl.registerSelectedItemWatcher(angular.bind(this, function(item) {
                    if (item) {
                        this.appendChip(item);
                        this.resetChipBuffer();
                    }
                }));

                this.$element.find('input')
                    .on('focus', angular.bind(this, this.onInputFocus))
                    .on('blur', angular.bind(this, this.onInputBlur));
            }
        };

        MdChipsCtrl.prototype.hasFocus = function() {
            return this.inputHasFocus || this.selectedChip >= 0;
        };

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.chips')
            .directive('mdChips', MdChips);

        /**
         * @ngdoc directive
         * @name mdChips
         * @module material.components.chips
         *
         * @description
         * `<md-chips>` is an input component for building lists of strings or objects. The list items are
         * displayed as 'chips'. This component can make use of an `<input>` element or an 
         * `<md-autocomplete>` element.
         *
         * ### Custom templates
         * A custom template may be provided to render the content of each chip. This is achieved by
         * specifying an `<md-chip-template>` element containing the custom content as a child of
         * `<md-chips>`.
         *
         * Note: Any attributes on
         * `<md-chip-template>` will be dropped as only the innerHTML is used for the chip template. The
         * variables `$chip` and `$index` are available in the scope of `<md-chip-template>`, representing
         * the chip object and its index in the list of chips, respectively.
         * To override the chip delete control, include an element (ideally a button) with the attribute
         * `md-chip-remove`. A click listener to remove the chip will be added automatically. The element
         * is also placed as a sibling to the chip content (on which there are also click listeners) to
         * avoid a nested ng-click situation.
         *
         * <h3> Pending Features </h3>
         * <ul style="padding-left:20px;">
         *
         *   <ul>Style
         *     <li>Colours for hover, press states (ripple?).</li>
         *   </ul>
         *
         *   <ul>Validation
         *     <li>allow a validation callback</li>
         *     <li>hilighting style for invalid chips</li>
         *   </ul>
         *
         *   <ul>Item mutation
         *     <li>Support `
         *       <md-chip-edit>` template, show/hide the edit element on tap/click? double tap/double
         *       click?
         *     </li>
         *   </ul>
         *
         *   <ul>Truncation and Disambiguation (?)
         *     <li>Truncate chip text where possible, but do not truncate entries such that two are
         *     indistinguishable.</li>
         *   </ul>
         *
         *   <ul>Drag and Drop
         *     <li>Drag and drop chips between related `<md-chips>` elements.
         *     </li>
         *   </ul>
         * </ul>
         *
         *  <span style="font-size:.8em;text-align:center">
         *    Warning: This component is a WORK IN PROGRESS. If you use it now,
         *    it will probably break on you in the future.
         *  </span>
         *
         * @param {string=|object=} ng-model A model to bind the list of items to
         * @param {string=} placeholder Placeholder text that will be forwarded to the input.
         * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,
         *    displayed when there is at least on item in the list
         * @param {boolean=} readonly Disables list manipulation (deleting or adding list items), hiding
         *    the input and delete buttons
         * @param {expression} md-transform-chip An expression of form `myFunction($chip)` that when called
         *    expects one of the following return values:
         *    - an object representing the `$chip` input string
         *    - `undefined` to simply add the `$chip` input string, or
         *    - `null` to prevent the chip from being appended
         * @param {expression=} md-on-add An expression which will be called when a chip has been
         *    added.
         * @param {expression=} md-on-remove An expression which will be called when a chip has been
         *    removed.
         * @param {expression=} md-on-select An expression which will be called when a chip is selected.
         * @param {boolean} md-require-match If true, and the chips template contains an autocomplete,
         *    only allow selection of pre-defined chips (i.e. you cannot add new ones).
         * @param {string=} delete-hint A string read by screen readers instructing users that pressing
         *    the delete key will remove the chip.
         * @param {string=} delete-button-label A label for the delete button. Also hidden and read by
         *    screen readers.
         * @param {expression=} md-separator-keys An array of key codes used to separate chips.
         *
         * @usage
         * <hljs lang="html">
         *   <md-chips
         *       ng-model="myItems"
         *       placeholder="Add an item"
         *       readonly="isReadOnly">
         *   </md-chips>
         * </hljs>
         *
         */


        var MD_CHIPS_TEMPLATE = '\
      <md-chips-wrap\
          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"\
          ng-keydown="$mdChipsCtrl.chipKeydown($event)"\
          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus(), \'md-readonly\': !$mdChipsCtrl.ngModelCtrl }"\
          class="md-chips">\
        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"\
            index="{{$index}}"\
            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index, \'md-readonly\': $mdChipsCtrl.readonly}">\
          <div class="md-chip-content"\
              tabindex="-1"\
              aria-hidden="true"\
              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"\
              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>\
          <div ng-if="!$mdChipsCtrl.readonly"\
               class="md-chip-remove-container"\
               md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>\
        </md-chip>\
        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"\
            class="md-chip-input-container"\
            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>\
        </div>\
      </md-chips-wrap>';

        var CHIP_INPUT_TEMPLATE = '\
        <input\
            class="md-input"\
            tabindex="0"\
            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"\
            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"\
            ng-model="$mdChipsCtrl.chipBuffer"\
            ng-focus="$mdChipsCtrl.onInputFocus()"\
            ng-blur="$mdChipsCtrl.onInputBlur()"\
            ng-keydown="$mdChipsCtrl.inputKeydown($event)">';

        var CHIP_DEFAULT_TEMPLATE = '\
      <span>{{$chip}}</span>';

        var CHIP_REMOVE_TEMPLATE = '\
      <button\
          class="md-chip-remove"\
          ng-if="!$mdChipsCtrl.readonly"\
          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"\
          type="button"\
          aria-hidden="true"\
          tabindex="-1">\
        <md-icon md-svg-icon="md-close"></md-icon>\
        <span class="md-visually-hidden">\
          {{$mdChipsCtrl.deleteButtonLabel}}\
        </span>\
      </button>';

        /**
         * MDChips Directive Definition
         */
        function MdChips($mdTheming, $mdUtil, $compile, $log, $timeout) {
            // Run our templates through $mdUtil.processTemplate() to allow custom start/end symbols
            var templates = getTemplates();

            return {
                template: function(element, attrs) {
                    // Clone the element into an attribute. By prepending the attribute
                    // name with '$', Angular won't write it into the DOM. The cloned
                    // element propagates to the link function via the attrs argument,
                    // where various contained-elements can be consumed.
                    attrs['$mdUserTemplate'] = element.clone();
                    return templates.chips;
                },
                require: ['mdChips'],
                restrict: 'E',
                controller: 'MdChipsCtrl',
                controllerAs: '$mdChipsCtrl',
                bindToController: true,
                compile: compile,
                scope: {
                    readonly: '=readonly',
                    placeholder: '@',
                    secondaryPlaceholder: '@',
                    transformChip: '&mdTransformChip',
                    onAppend: '&mdOnAppend',
                    onAdd: '&mdOnAdd',
                    onRemove: '&mdOnRemove',
                    onSelect: '&mdOnSelect',
                    deleteHint: '@',
                    deleteButtonLabel: '@',
                    separatorKeys: '=?mdSeparatorKeys',
                    requireMatch: '=?mdRequireMatch'
                }
            };

            /**
             * Builds the final template for `md-chips` and returns the postLink function.
             *
             * Building the template involves 3 key components:
             * static chips
             * chip template
             * input control
             *
             * If no `ng-model` is provided, only the static chip work needs to be done.
             *
             * If no user-passed `md-chip-template` exists, the default template is used. This resulting
             * template is appended to the chip content element.
             *
             * The remove button may be overridden by passing an element with an md-chip-remove attribute.
             *
             * If an `input` or `md-autocomplete` element is provided by the caller, it is set aside for
             * transclusion later. The transclusion happens in `postLink` as the parent scope is required.
             * If no user input is provided, a default one is appended to the input container node in the
             * template.
             *
             * Static Chips (i.e. `md-chip` elements passed from the caller) are gathered and set aside for
             * transclusion in the `postLink` function.
             *
             *
             * @param element
             * @param attr
             * @returns {Function}
             */
            function compile(element, attr) {
                // Grab the user template from attr and reset the attribute to null.
                var userTemplate = attr['$mdUserTemplate'];
                attr['$mdUserTemplate'] = null;

                // Set the chip remove, chip contents and chip input templates. The link function will put
                // them on the scope for transclusion later.
                var chipRemoveTemplate = getTemplateByQuery('md-chips>*[md-chip-remove]') || templates.remove,
                    chipContentsTemplate = getTemplateByQuery('md-chips>md-chip-template') || templates.default,
                    chipInputTemplate = getTemplateByQuery('md-chips>md-autocomplete') || getTemplateByQuery('md-chips>input') || templates.input,
                    staticChips = userTemplate.find('md-chip');

                // Warn of malformed template. See #2545
                if (userTemplate[0].querySelector('md-chip-template>*[md-chip-remove]')) {
                    $log.warn('invalid placement of md-chip-remove within md-chip-template.');
                }

                function getTemplateByQuery(query) {
                    if (!attr.ngModel) return;
                    var element = userTemplate[0].querySelector(query);
                    return element && element.outerHTML;
                }

                /**
                 * Configures controller and transcludes.
                 */
                return function postLink(scope, element, attrs, controllers) {
                    $mdUtil.initOptionalProperties(scope, attr);

                    $mdTheming(element);
                    var mdChipsCtrl = controllers[0];
                    mdChipsCtrl.chipContentsTemplate = chipContentsTemplate;
                    mdChipsCtrl.chipRemoveTemplate = chipRemoveTemplate;
                    mdChipsCtrl.chipInputTemplate = chipInputTemplate;

                    element
                        .attr({
                            'aria-hidden': true,
                            tabindex: -1
                        })
                        .on('focus', function() {
                            mdChipsCtrl.onFocus();
                        });

                    if (attr.ngModel) {
                        mdChipsCtrl.configureNgModel(element.controller('ngModel'));

                        // If an `md-transform-chip` attribute was set, tell the controller to use the expression
                        // before appending chips.
                        if (attrs.mdTransformChip) mdChipsCtrl.useTransformChipExpression();

                        // If an `md-on-append` attribute was set, tell the controller to use the expression
                        // when appending chips.
                        //
                        // DEPRECATED: Will remove in official 1.0 release
                        if (attrs.mdOnAppend) mdChipsCtrl.useOnAppendExpression();

                        // If an `md-on-add` attribute was set, tell the controller to use the expression
                        // when adding chips.
                        if (attrs.mdOnAdd) mdChipsCtrl.useOnAddExpression();

                        // If an `md-on-remove` attribute was set, tell the controller to use the expression
                        // when removing chips.
                        if (attrs.mdOnRemove) mdChipsCtrl.useOnRemoveExpression();

                        // If an `md-on-select` attribute was set, tell the controller to use the expression
                        // when selecting chips.
                        if (attrs.mdOnSelect) mdChipsCtrl.useOnSelectExpression();

                        // The md-autocomplete and input elements won't be compiled until after this directive
                        // is complete (due to their nested nature). Wait a tick before looking for them to
                        // configure the controller.
                        if (chipInputTemplate != templates.input) {
                            // The autocomplete will not appear until the readonly attribute is not true (i.e.
                            // false or undefined), so we have to watch the readonly and then on the next tick
                            // after the chip transclusion has run, we can configure the autocomplete and user
                            // input.
                            scope.$watch('$mdChipsCtrl.readonly', function(readonly) {
                                if (!readonly) {
                                    $mdUtil.nextTick(function() {
                                        if (chipInputTemplate.indexOf('<md-autocomplete') === 0)
                                            mdChipsCtrl
                                            .configureAutocomplete(element.find('md-autocomplete')
                                                .controller('mdAutocomplete'));
                                        mdChipsCtrl.configureUserInput(element.find('input'));
                                    });
                                }
                            });
                        }

                        // At the next tick, if we find an input, make sure it has the md-input class
                        $mdUtil.nextTick(function() {
                            var input = element.find('input');

                            input && input.toggleClass('md-input', true);
                        });
                    }

                    // Compile with the parent's scope and prepend any static chips to the wrapper.
                    if (staticChips.length > 0) {
                        var compiledStaticChips = $compile(staticChips.clone())(scope.$parent);
                        $timeout(function() {
                            element.find('md-chips-wrap').prepend(compiledStaticChips);
                        });
                    }
                };
            }

            function getTemplates() {
                return {
                    chips: $mdUtil.processTemplate(MD_CHIPS_TEMPLATE),
                    input: $mdUtil.processTemplate(CHIP_INPUT_TEMPLATE),
                    default: $mdUtil.processTemplate(CHIP_DEFAULT_TEMPLATE),
                    remove: $mdUtil.processTemplate(CHIP_REMOVE_TEMPLATE)
                };
            }
        }
        MdChips.$inject = ["$mdTheming", "$mdUtil", "$compile", "$log", "$timeout"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.chips')
            .controller('MdContactChipsCtrl', MdContactChipsCtrl);



        /**
         * Controller for the MdContactChips component
         * @constructor
         */
        function MdContactChipsCtrl() {
            /** @type {Object} */
            this.selectedItem = null;

            /** @type {string} */
            this.searchText = '';
        }


        MdContactChipsCtrl.prototype.queryContact = function(searchText) {
            var results = this.contactQuery({
                '$query': searchText
            });
            return this.filterSelected ?
                results.filter(angular.bind(this, this.filterSelectedContacts)) : results;
        };


        MdContactChipsCtrl.prototype.itemName = function(item) {
            return item[this.contactName];
        };


        MdContactChipsCtrl.prototype.filterSelectedContacts = function(contact) {
            return this.contacts.indexOf(contact) == -1;
        };

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.chips')
            .directive('mdContactChips', MdContactChips);

        /**
         * @ngdoc directive
         * @name mdContactChips
         * @module material.components.chips
         *
         * @description
         * `<md-contact-chips>` is an input component based on `md-chips` and makes use of an
         * `md-autocomplete` element. The component allows the caller to supply a query expression which
         * returns  a list of possible contacts. The user can select one of these and add it to the list of
         * chips.
         *
         * You may also use the `md-highlight-text` directive along with it's parameters to control the
         * appearance of the matched text inside of the contacts' autocomplete popup.
         *
         * @param {string=|object=} ng-model A model to bind the list of items to
         * @param {string=} placeholder Placeholder text that will be forwarded to the input.
         * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,
         *    displayed when there is at least on item in the list
         * @param {expression} md-contacts An expression expected to return contacts matching the search
         *    test, `$query`.
         * @param {string} md-contact-name The field name of the contact object representing the
         *    contact's name.
         * @param {string} md-contact-email The field name of the contact object representing the
         *    contact's email address.
         * @param {string} md-contact-image The field name of the contact object representing the
         *    contact's image.
         *
         *
         * // The following attribute has been removed but may come back.
         * @param {expression=} filter-selected Whether to filter selected contacts from the list of
         *    suggestions shown in the autocomplete.
         *
         *
         *
         * @usage
         * <hljs lang="html">
         *   <md-contact-chips
         *       ng-model="ctrl.contacts"
         *       md-contacts="ctrl.querySearch($query)"
         *       md-contact-name="name"
         *       md-contact-image="image"
         *       md-contact-email="email"
         *       placeholder="To">
         *   </md-contact-chips>
         * </hljs>
         *
         */


        var MD_CONTACT_CHIPS_TEMPLATE = '\
      <md-chips class="md-contact-chips"\
          ng-model="$mdContactChipsCtrl.contacts"\
          md-require-match="$mdContactChipsCtrl.requireMatch"\
          md-autocomplete-snap>\
          <md-autocomplete\
              md-menu-class="md-contact-chips-suggestions"\
              md-selected-item="$mdContactChipsCtrl.selectedItem"\
              md-search-text="$mdContactChipsCtrl.searchText"\
              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"\
              md-item-text="$mdContactChipsCtrl.itemName(item)"\
              md-no-cache="true"\
              md-autoselect\
              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?\
                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">\
            <div class="md-contact-suggestion">\
              <img \
                  ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"\
                  alt="{{item[$mdContactChipsCtrl.contactName]}}"\
                  ng-if="item[$mdContactChipsCtrl.contactImage]" />\
              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText"\
                    md-highlight-flags="{{$mdContactChipsCtrl.highlightFlags}}">\
                {{item[$mdContactChipsCtrl.contactName]}}\
              </span>\
              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>\
            </div>\
          </md-autocomplete>\
          <md-chip-template>\
            <div class="md-contact-avatar">\
              <img \
                  ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"\
                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}"\
                  ng-if="$chip[$mdContactChipsCtrl.contactImage]" />\
            </div>\
            <div class="md-contact-name">\
              {{$chip[$mdContactChipsCtrl.contactName]}}\
            </div>\
          </md-chip-template>\
      </md-chips>';


        /**
         * MDContactChips Directive Definition
         *
         * @param $mdTheming
         * @returns {*}
         * @ngInject
         */
        function MdContactChips($mdTheming, $mdUtil) {
            return {
                template: function(element, attrs) {
                    return MD_CONTACT_CHIPS_TEMPLATE;
                },
                restrict: 'E',
                controller: 'MdContactChipsCtrl',
                controllerAs: '$mdContactChipsCtrl',
                bindToController: true,
                compile: compile,
                scope: {
                    contactQuery: '&mdContacts',
                    placeholder: '@',
                    secondaryPlaceholder: '@',
                    contactName: '@mdContactName',
                    contactImage: '@mdContactImage',
                    contactEmail: '@mdContactEmail',
                    contacts: '=ngModel',
                    requireMatch: '=?mdRequireMatch',
                    highlightFlags: '@?mdHighlightFlags'
                }
            };

            function compile(element, attr) {
                return function postLink(scope, element, attrs, controllers) {

                    $mdUtil.initOptionalProperties(scope, attr);
                    $mdTheming(element);

                    element.attr('tabindex', '-1');
                };
            }
        }
        MdContactChips.$inject = ["$mdTheming", "$mdUtil"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.icon')
            .directive('mdIcon', ['$mdIcon', '$mdTheming', '$mdAria', mdIconDirective]);

        /**
         * @ngdoc directive
         * @name mdIcon
         * @module material.components.icon
         *
         * @restrict E
         *
         * @description
         * The `md-icon` directive makes it easier to use vector-based icons in your app (as opposed to
         * raster-based icons types like PNG). The directive supports both icon fonts and SVG icons.
         *
         * Icons should be consider view-only elements that should not be used directly as buttons; instead nest a `<md-icon>`
         * inside a `md-button` to add hover and click features.
         *
         * ### Icon fonts
         * Icon fonts are a technique in which you use a font where the glyphs in the font are
         * your icons instead of text. Benefits include a straightforward way to bundle everything into a
         * single HTTP request, simple scaling, easy color changing, and more.
         *
         * `md-icon` lets you consume an icon font by letting you reference specific icons in that font
         * by name rather than character code.
         *
         * ### SVG
         * For SVGs, the problem with using `<img>` or a CSS `background-image` is that you can't take
         * advantage of some SVG features, such as styling specific parts of the icon with CSS or SVG
         * animation.
         *
         * `md-icon` makes it easier to use SVG icons by *inlining* the SVG into an `<svg>` element in the
         * document. The most straightforward way of referencing an SVG icon is via URL, just like a
         * traditional `<img>`. `$mdIconProvider`, as a convenience, lets you _name_ an icon so you can
         * reference it by name instead of URL throughout your templates.
         *
         * Additionally, you may not want to make separate HTTP requests for every icon, so you can bundle
         * your SVG icons together and pre-load them with $mdIconProvider as an icon set. An icon set can
         * also be given a name, which acts as a namespace for individual icons, so you can reference them
         * like `"social:cake"`.
         *
         * When using SVGs, both external SVGs (via URLs) or sets of SVGs [from icon sets] can be
         * easily loaded and used.When use font-icons, developers must following three (3) simple steps:
         *
         * <ol>
         * <li>Load the font library. e.g.<br/>
         *    &lt;link href="https://fonts.googleapis.com/icon?family=Material+Icons"
         *    rel="stylesheet"&gt;
         * </li>
         * <li> Use either (a) font-icon class names or (b) font ligatures to render the font glyph by using its textual name</li>
         * <li> Use &lt;md-icon md-font-icon="classname" /&gt; or <br/>
         *     use &lt;md-icon md-font-set="font library classname or alias"&gt; textual_name &lt;/md-icon&gt; or <br/>
         *     use &lt;md-icon md-font-set="font library classname or alias"&gt; numerical_character_reference &lt;/md-icon&gt;
         * </li>
         * </ol>
         *
         * Full details for these steps can be found:
         *
         * <ul>
         * <li>http://google.github.io/material-design-icons/</li>
         * <li>http://google.github.io/material-design-icons/#icon-font-for-the-web</li>
         * </ul>
         *
         * The Material Design icon style <code>.material-icons</code> and the icon font references are published in
         * Material Design Icons:
         *
         * <ul>
         * <li>http://www.google.com/design/icons/</li>
         * <li>https://www.google.com/design/icons/#ic_accessibility</li>
         * </ul>
         *
         * <h2 id="material_design_icons">Material Design Icons</h2>
         * Using the Material Design Icon-Selector, developers can easily and quickly search for a Material Design font-icon and
         * determine its textual name and character reference code. Click on any icon to see the slide-up information
         * panel with details regarding a SVG download or information on the font-icon usage.
         *
         * <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank" style="border-bottom:none;">
         * <img src="https://cloud.githubusercontent.com/assets/210413/7902490/fe8dd14c-0780-11e5-98fb-c821cc6475e6.png"
         *      aria-label="Material Design Icon-Selector" style="max-width:75%;padding-left:10%">
         * </a>
         *
         * <span class="image_caption">
         *  Click on the image above to link to the
         *  <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank">Material Design Icon-Selector</a>.
         * </span>
         *
         * @param {string} md-font-icon String name of CSS icon associated with the font-face will be used
         * to render the icon. Requires the fonts and the named CSS styles to be preloaded.
         * @param {string} md-font-set CSS style name associated with the font library; which will be assigned as
         * the class for the font-icon ligature. This value may also be an alias that is used to lookup the classname;
         * internally use `$mdIconProvider.fontSet(<alias>)` to determine the style name.
         * @param {string} md-svg-src String URL (or expression) used to load, cache, and display an
         *     external SVG.
         * @param {string} md-svg-icon md-svg-icon String name used for lookup of the icon from the internal cache;
         *     interpolated strings or expressions may also be used. Specific set names can be used with
         *     the syntax `<set name>:<icon name>`.<br/><br/>
         * To use icon sets, developers are required to pre-register the sets using the `$mdIconProvider` service.
         * @param {string=} aria-label Labels icon for accessibility. If an empty string is provided, icon
         * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no aria-label on the icon
         * nor a label on the parent element, a warning will be logged to the console.
         * @param {string=} alt Labels icon for accessibility. If an empty string is provided, icon
         * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no alt on the icon
         * nor a label on the parent element, a warning will be logged to the console.
         *
         * @usage
         * When using SVGs:
         * <hljs lang="html">
         *
         *  <!-- Icon ID; may contain optional icon set prefix; icons must registered using $mdIconProvider -->
         *  <md-icon md-svg-icon="social:android"    aria-label="android " ></md-icon>
         *
         *  <!-- Icon urls; may be preloaded in templateCache -->
         *  <md-icon md-svg-src="/android.svg"       aria-label="android " ></md-icon>
         *  <md-icon md-svg-src="{{ getAndroid() }}" aria-label="android " ></md-icon>
         *
         * </hljs>
         *
         * Use the <code>$mdIconProvider</code> to configure your application with
         * svg iconsets.
         *
         * <hljs lang="js">
         *  angular.module('appSvgIconSets', ['ngMaterial'])
         *    .controller('DemoCtrl', function($scope) {})
         *    .config(function($mdIconProvider) {
         *      $mdIconProvider
         *         .iconSet('social', 'img/icons/sets/social-icons.svg', 24)
         *         .defaultIconSet('img/icons/sets/core-icons.svg', 24);
         *     });
         * </hljs>
         *
         *
         * When using Font Icons with classnames:
         * <hljs lang="html">
         *
         *  <md-icon md-font-icon="android" aria-label="android" ></md-icon>
         *  <md-icon class="icon_home"      aria-label="Home"    ></md-icon>
         *
         * </hljs>
         *
         * When using Material Font Icons with ligatures:
         * <hljs lang="html">
         *  <!-- For Material Design Icons -->
         *  <!-- The class '.material-icons' is auto-added if a style has NOT been specified -->
         *  <md-icon> face </md-icon>
         *  <md-icon md-font-set="material-icons"> face </md-icon>
         *  <md-icon> #xE87C; </md-icon>
         *  <!-- The class '.material-icons' must be manually added if other styles are also specified-->
         *  <md-icon class="material-icons md-light md-48"> face </md-icon>
         * </hljs>
         *
         * When using other Font-Icon libraries:
         *
         * <hljs lang="js">
         *  // Specify a font-icon style alias
         *  angular.config(function($mdIconProvider) {
         *    $mdIconProvider.fontSet('fa', 'fontawesome');
         *  });
         * </hljs>
         *
         * <hljs lang="html">
         *  <md-icon md-font-set="fa">email</md-icon>
         * </hljs>
         *
         */
        function mdIconDirective($mdIcon, $mdTheming, $mdAria) {

            return {
                scope: {
                    fontSet: '@mdFontSet',
                    fontIcon: '@mdFontIcon',
                    svgIcon: '@mdSvgIcon',
                    svgSrc: '@mdSvgSrc'
                },
                restrict: 'E',
                link: postLink
            };


            /**
             * Directive postLink
             * Supports embedded SVGs, font-icons, & external SVGs
             */
            function postLink(scope, element, attr) {
                $mdTheming(element);

                prepareForFontIcon();

                // If using a font-icon, then the textual name of the icon itself
                // provides the aria-label.

                var label = attr.alt || scope.fontIcon || scope.svgIcon || element.text();
                var attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || '');

                if (!attr['aria-label']) {

                    if (label != '' && !parentsHaveText()) {

                        $mdAria.expect(element, 'aria-label', label);
                        $mdAria.expect(element, 'role', 'img');

                    } else if (!element.text()) {
                        // If not a font-icon with ligature, then
                        // hide from the accessibility layer.

                        $mdAria.expect(element, 'aria-hidden', 'true');
                    }
                }

                if (attrName) {
                    // Use either pre-configured SVG or URL source, respectively.
                    attr.$observe(attrName, function(attrVal) {

                        element.empty();
                        if (attrVal) {
                            $mdIcon(attrVal).then(function(svg) {
                                element.append(svg);
                            });
                        }

                    });
                }

                function parentsHaveText() {
                    var parent = element.parent();
                    if (parent.attr('aria-label') || parent.text()) {
                        return true;
                    } else if (parent.parent().attr('aria-label') || parent.parent().text()) {
                        return true;
                    }
                    return false;
                }

                function prepareForFontIcon() {
                    if (!scope.svgIcon && !scope.svgSrc) {
                        if (scope.fontIcon) {
                            element.addClass('md-font ' + scope.fontIcon);
                        }
                        element.addClass($mdIcon.fontSet(scope.fontSet));
                    }
                }
            }
        }

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.icon')
            .provider('$mdIcon', MdIconProvider);

        /**
         * @ngdoc service
         * @name $mdIconProvider
         * @module material.components.icon
         *
         * @description
         * `$mdIconProvider` is used only to register icon IDs with URLs. These configuration features allow
         * icons and icon sets to be pre-registered and associated with source URLs **before** the `<md-icon />`
         * directives are compiled.
         *
         * If using font-icons, the developer is responsible for loading the fonts.
         *
         * If using SVGs, loading of the actual svg files are deferred to on-demand requests and are loaded
         * internally by the `$mdIcon` service using the `$http` service. When an SVG is requested by name/ID,
         * the `$mdIcon` service searches its registry for the associated source URL;
         * that URL is used to on-demand load and parse the SVG dynamically.
         *
         * @usage
         * <hljs lang="js">
         *   app.config(function($mdIconProvider) {
         *
         *     // Configure URLs for icons specified by [set:]id.
         *
         *     $mdIconProvider
         *          .defaultFontSet( 'fontawesome' )
         *          .defaultIconSet('my/app/icons.svg')       // Register a default set of SVG icons
         *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set of SVGs
         *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)
         *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set
         *   });
         * </hljs>
         *
         * SVG icons and icon sets can be easily pre-loaded and cached using either (a) a build process or (b) a runtime
         * **startup** process (shown below):
         *
         * <hljs lang="js">
         *   app.config(function($mdIconProvider) {
         *
         *     // Register a default set of SVG icon definitions
         *     $mdIconProvider.defaultIconSet('my/app/icons.svg')
         *
         *   })
         *   .run(function($http, $templateCache){
         *
         *     // Pre-fetch icons sources by URL and cache in the $templateCache...
         *     // subsequent $http calls will look there first.
         *
         *     var urls = [ 'imy/app/icons.svg', 'img/icons/android.svg'];
         *
         *     angular.forEach(urls, function(url) {
         *       $http.get(url, {cache: $templateCache});
         *     });
         *
         *   });
         *
         * </hljs>
         *
         * NOTE: the loaded SVG data is subsequently cached internally for future requests.
         *
         */

        /**
         * @ngdoc method
         * @name $mdIconProvider#icon
         *
         * @description
         * Register a source URL for a specific icon name; the name may include optional 'icon set' name prefix.
         * These icons  will later be retrieved from the cache using `$mdIcon( <icon name> )`
         *
         * @param {string} id Icon name/id used to register the icon
         * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
         * data or as part of the lookup in `$templateCache` if pre-loading was configured.
         * @param {number=} viewBoxSize Sets the width and height the icon's viewBox.
         * It is ignored for icons with an existing viewBox. Default size is 24.
         *
         * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
         *
         * @usage
         * <hljs lang="js">
         *   app.config(function($mdIconProvider) {
         *
         *     // Configure URLs for icons specified by [set:]id.
         *
         *     $mdIconProvider
         *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)
         *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set
         *   });
         * </hljs>
         *
         */
        /**
         * @ngdoc method
         * @name $mdIconProvider#iconSet
         *
         * @description
         * Register a source URL for a 'named' set of icons; group of SVG definitions where each definition
         * has an icon id. Individual icons can be subsequently retrieved from this cached set using
         * `$mdIcon(<icon set name>:<icon name>)`
         *
         * @param {string} id Icon name/id used to register the iconset
         * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
         * data or as part of the lookup in `$templateCache` if pre-loading was configured.
         * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set. 
         * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.
         * Default value is 24.
         *
         * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
         *
         *
         * @usage
         * <hljs lang="js">
         *   app.config(function($mdIconProvider) {
         *
         *     // Configure URLs for icons specified by [set:]id.
         *
         *     $mdIconProvider
         *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set
         *   });
         * </hljs>
         *
         */
        /**
         * @ngdoc method
         * @name $mdIconProvider#defaultIconSet
         *
         * @description
         * Register a source URL for the default 'named' set of icons. Unless explicitly registered,
         * subsequent lookups of icons will failover to search this 'default' icon set.
         * Icon can be retrieved from this cached, default set using `$mdIcon(<name>)`
         *
         * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the
         * data or as part of the lookup in `$templateCache` if pre-loading was configured.
         * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set. 
         * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.
         * Default value is 24.
         *
         * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
         *
         * @usage
         * <hljs lang="js">
         *   app.config(function($mdIconProvider) {
         *
         *     // Configure URLs for icons specified by [set:]id.
         *
         *     $mdIconProvider
         *          .defaultIconSet( 'my/app/social.svg' )   // Register a default icon set
         *   });
         * </hljs>
         *
         */
        /**
         * @ngdoc method
         * @name $mdIconProvider#defaultFontSet
         *
         * @description
         * When using Font-Icons, Angular Material assumes the the Material Design icons will be used and automatically
         * configures the default font-set == 'material-icons'. Note that the font-set references the font-icon library
         * class style that should be applied to the `<md-icon>`.
         *
         * Configuring the default means that the attributes
         * `md-font-set="material-icons"` or `class="material-icons"` do not need to be explicitly declared on the
         * `<md-icon>` markup. For example:
         *
         *  `<md-icon> face </md-icon>`
         *  will render as
         *  `<span class="material-icons"> face </span>`, and
         *
         *  `<md-icon md-font-set="fa"> face </md-icon>`
         *  will render as
         *  `<span class="fa"> face </span>`
         *
         * @param {string} name of the font-library style that should be applied to the md-icon DOM element
         *
         * @usage
         * <hljs lang="js">
         *   app.config(function($mdIconProvider) {
         *     $mdIconProvider.defaultFontSet( 'fontawesome' );
         *   });
         * </hljs>
         *
         */

        /**
         * @ngdoc method
         * @name $mdIconProvider#defaultViewBoxSize
         *
         * @description
         * While `<md-icon />` markup can also be style with sizing CSS, this method configures
         * the default width **and** height used for all icons; unless overridden by specific CSS.
         * The default sizing is (24px, 24px).
         * @param {number=} viewBoxSize Sets the width and height of the viewBox for an icon or an icon set.
         * All icons in a set should be the same size. The default value is 24.
         *
         * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API
         *
         * @usage
         * <hljs lang="js">
         *   app.config(function($mdIconProvider) {
         *
         *     // Configure URLs for icons specified by [set:]id.
         *
         *     $mdIconProvider
         *          .defaultViewBoxSize(36)   // Register a default icon size (width == height)
         *   });
         * </hljs>
         *
         */

        var config = {
            defaultViewBoxSize: 24,
            defaultFontSet: 'material-icons',
            fontSets: []
        };

        function MdIconProvider() {}

        MdIconProvider.prototype = {
            icon: function(id, url, viewBoxSize) {
                if (id.indexOf(':') == -1) id = '$default:' + id;

                config[id] = new ConfigurationItem(url, viewBoxSize);
                return this;
            },

            iconSet: function(id, url, viewBoxSize) {
                config[id] = new ConfigurationItem(url, viewBoxSize);
                return this;
            },

            defaultIconSet: function(url, viewBoxSize) {
                var setName = '$default';

                if (!config[setName]) {
                    config[setName] = new ConfigurationItem(url, viewBoxSize);
                }

                config[setName].viewBoxSize = viewBoxSize || config.defaultViewBoxSize;

                return this;
            },

            defaultViewBoxSize: function(viewBoxSize) {
                config.defaultViewBoxSize = viewBoxSize;
                return this;
            },

            /**
             * Register an alias name associated with a font-icon library style ;
             */
            fontSet: function fontSet(alias, className) {
                config.fontSets.push({
                    alias: alias,
                    fontSet: className || alias
                });
                return this;
            },

            /**
             * Specify a default style name associated with a font-icon library
             * fallback to Material Icons.
             *
             */
            defaultFontSet: function defaultFontSet(className) {
                config.defaultFontSet = !className ? '' : className;
                return this;
            },

            defaultIconSize: function defaultIconSize(iconSize) {
                config.defaultIconSize = iconSize;
                return this;
            },

            preloadIcons: function($templateCache) {
                var iconProvider = this;
                var svgRegistry = [{
                    id: 'md-tabs-arrow',
                    url: 'md-tabs-arrow.svg',
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'
                }, {
                    id: 'md-close',
                    url: 'md-close.svg',
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'
                }, {
                    id: 'md-cancel',
                    url: 'md-cancel.svg',
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'
                }, {
                    id: 'md-menu',
                    url: 'md-menu.svg',
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><path d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z" /></svg>'
                }, {
                    id: 'md-toggle-arrow',
                    url: 'md-toggle-arrow-svg',
                    svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 48 48"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>'
                }, {
                    id: 'md-calendar',
                    url: 'md-calendar.svg',
                    svg: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/></svg>'
                }];

                svgRegistry.forEach(function(asset) {
                    iconProvider.icon(asset.id, asset.url);
                    $templateCache.put(asset.url, asset.svg);
                });

            },

            $get: ['$http', '$q', '$log', '$templateCache', function($http, $q, $log, $templateCache) {
                this.preloadIcons($templateCache);
                return MdIconService(config, $http, $q, $log, $templateCache);
            }]
        };

        /**
         *  Configuration item stored in the Icon registry; used for lookups
         *  to load if not already cached in the `loaded` cache
         */
        function ConfigurationItem(url, viewBoxSize) {
            this.url = url;
            this.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;
        }

        /**
         * @ngdoc service
         * @name $mdIcon
         * @module material.components.icon
         *
         * @description
         * The `$mdIcon` service is a function used to lookup SVG icons.
         *
         * @param {string} id Query value for a unique Id or URL. If the argument is a URL, then the service will retrieve the icon element
         * from its internal cache or load the icon and cache it first. If the value is not a URL-type string, then an ID lookup is
         * performed. The Id may be a unique icon ID or may include an iconSet ID prefix.
         *
         * For the **id** query to work properly, this means that all id-to-URL mappings must have been previously configured
         * using the `$mdIconProvider`.
         *
         * @returns {obj} Clone of the initial SVG DOM element; which was created from the SVG markup in the SVG data file.
         *
         * @usage
         * <hljs lang="js">
         * function SomeDirective($mdIcon) {
         *
         *   // See if the icon has already been loaded, if not
         *   // then lookup the icon from the registry cache, load and cache
         *   // it for future requests.
         *   // NOTE: ID queries require configuration with $mdIconProvider
         *
         *   $mdIcon('android').then(function(iconEl)    { element.append(iconEl); });
         *   $mdIcon('work:chair').then(function(iconEl) { element.append(iconEl); });
         *
         *   // Load and cache the external SVG using a URL
         *
         *   $mdIcon('img/icons/android.svg').then(function(iconEl) {
         *     element.append(iconEl);
         *   });
         * };
         * </hljs>
         *
         * NOTE: The `<md-icon />  ` directive internally uses the `$mdIcon` service to query, loaded, and instantiate
         * SVG DOM elements.
         */

        /* @ngInject */
        function MdIconService(config, $http, $q, $log, $templateCache) {
            var iconCache = {};
            var urlRegex = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/i;

            Icon.prototype = {
                clone: cloneSVG,
                prepare: prepareAndStyle
            };
            getIcon.fontSet = findRegisteredFontSet;

            // Publish service...
            return getIcon;

            /**
             * Actual $mdIcon service is essentially a lookup function
             */
            function getIcon(id) {
                id = id || '';

                // If already loaded and cached, use a clone of the cached icon.
                // Otherwise either load by URL, or lookup in the registry and then load by URL, and cache.

                if (iconCache[id]) return $q.when(iconCache[id].clone());
                if (urlRegex.test(id)) return loadByURL(id).then(cacheIcon(id));
                if (id.indexOf(':') == -1) id = '$default:' + id;

                var load = config[id] ? loadByID : loadFromIconSet;
                return load(id)
                    .then(cacheIcon(id));
            }

            /**
             * Lookup registered fontSet style using its alias...
             * If not found,
             */
            function findRegisteredFontSet(alias) {
                var useDefault = angular.isUndefined(alias) || !(alias && alias.length);
                if (useDefault) return config.defaultFontSet;

                var result = alias;
                angular.forEach(config.fontSets, function(it) {
                    if (it.alias == alias) result = it.fontSet || result;
                });

                return result;
            }

            /**
             * Prepare and cache the loaded icon for the specified `id`
             */
            function cacheIcon(id) {

                return function updateCache(icon) {
                    iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);

                    return iconCache[id].clone();
                };
            }

            /**
             * Lookup the configuration in the registry, if !registered throw an error
             * otherwise load the icon [on-demand] using the registered URL.
             *
             */
            function loadByID(id) {
                var iconConfig = config[id];
                return loadByURL(iconConfig.url).then(function(icon) {
                    return new Icon(icon, iconConfig);
                });
            }

            /**
             *    Loads the file as XML and uses querySelector( <id> ) to find
             *    the desired node...
             */
            function loadFromIconSet(id) {
                var setName = id.substring(0, id.lastIndexOf(':')) || '$default';
                var iconSetConfig = config[setName];

                return !iconSetConfig ? announceIdNotFound(id) : loadByURL(iconSetConfig.url).then(extractFromSet);

                function extractFromSet(set) {
                    var iconName = id.slice(id.lastIndexOf(':') + 1);
                    var icon = set.querySelector('#' + iconName);
                    return !icon ? announceIdNotFound(id) : new Icon(icon, iconSetConfig);
                }

                function announceIdNotFound(id) {
                    var msg = 'icon ' + id + ' not found';
                    $log.warn(msg);

                    return $q.reject(msg || id);
                }
            }

            /**
             * Load the icon by URL (may use the $templateCache).
             * Extract the data for later conversion to Icon
             */
            function loadByURL(url) {
                return $http
                    .get(url, {
                        cache: $templateCache
                    })
                    .then(function(response) {
                        return angular.element('<div>').append(response.data).find('svg')[0];
                    }).catch(announceNotFound);
            }

            /**
             * Catch HTTP or generic errors not related to incorrect icon IDs.
             */
            function announceNotFound(err) {
                var msg = angular.isString(err) ? err : (err.message || err.data || err.statusText);
                $log.warn(msg);

                return $q.reject(msg);
            }

            /**
             * Check target signature to see if it is an Icon instance.
             */
            function isIcon(target) {
                return angular.isDefined(target.element) && angular.isDefined(target.config);
            }

            /**
             *  Define the Icon class
             */
            function Icon(el, config) {
                if (el && el.tagName != 'svg') {
                    el = angular.element('<svg xmlns="http://www.w3.org/2000/svg">').append(el)[0];
                }

                // Inject the namespace if not available...
                if (!el.getAttribute('xmlns')) {
                    el.setAttribute('xmlns', "http://www.w3.org/2000/svg");
                }

                this.element = el;
                this.config = config;
                this.prepare();
            }

            /**
             *  Prepare the DOM element that will be cached in the
             *  loaded iconCache store.
             */
            function prepareAndStyle() {
                var viewBoxSize = this.config ? this.config.viewBoxSize : config.defaultViewBoxSize;
                angular.forEach({
                    'fit': '',
                    'height': '100%',
                    'width': '100%',
                    'preserveAspectRatio': 'xMidYMid meet',
                    'viewBox': this.element.getAttribute('viewBox') || ('0 0 ' + viewBoxSize + ' ' + viewBoxSize)
                }, function(val, attr) {
                    this.element.setAttribute(attr, val);
                }, this);

                angular.forEach({
                    'pointer-events': 'none',
                    'display': 'block'
                }, function(val, style) {
                    this.element.style[style] = val;
                }, this);
            }

            /**
             * Clone the Icon DOM element.
             */
            function cloneSVG() {
                return this.element.cloneNode(true);
            }

        }
        MdIconService.$inject = ["config", "$http", "$q", "$log", "$templateCache"];

    })();
    (function() {
        "use strict";



        angular
            .module('material.components.menu')
            .controller('mdMenuCtrl', MenuController);

        /**
         * @ngInject
         */
        function MenuController($mdMenu, $attrs, $element, $scope, $mdUtil, $timeout, $rootScope, $q) {

            var menuContainer;
            var self = this;
            var triggerElement;

            this.nestLevel = parseInt($attrs.mdNestLevel, 10) || 0;

            /**
             * Called by our linking fn to provide access to the menu-content
             * element removed during link
             */
            this.init = function init(setMenuContainer, opts) {
                opts = opts || {};
                menuContainer = setMenuContainer;
                // Default element for ARIA attributes has the ngClick or ngMouseenter expression
                triggerElement = $element[0].querySelector('[ng-click],[ng-mouseenter]');
                triggerElement.setAttribute('aria-expanded', 'false');

                this.isInMenuBar = opts.isInMenuBar;
                this.nestedMenus = $mdUtil.nodesToArray(menuContainer[0].querySelectorAll('.md-nested-menu'));

                menuContainer.on('$mdInterimElementRemove', function() {
                    self.isOpen = false;
                });

                var menuContainerId = 'menu_container_' + $mdUtil.nextUid();
                menuContainer.attr('id', menuContainerId);
                angular.element(triggerElement).attr({
                    'aria-owns': menuContainerId,
                    'aria-haspopup': 'true'
                });

                $scope.$on('$destroy', this.disableHoverListener);
            };

            var openMenuTimeout, menuItems, deregisterScopeListeners = [];
            this.enableHoverListener = function() {
                deregisterScopeListeners.push($rootScope.$on('$mdMenuOpen', function(event, el) {
                    if (menuContainer[0].contains(el[0])) {
                        self.currentlyOpenMenu = el.controller('mdMenu');
                        self.isAlreadyOpening = false;
                        self.currentlyOpenMenu.registerContainerProxy(self.triggerContainerProxy.bind(self));
                    }
                }));
                deregisterScopeListeners.push($rootScope.$on('$mdMenuClose', function(event, el) {
                    if (menuContainer[0].contains(el[0])) {
                        self.currentlyOpenMenu = undefined;
                    }
                }));
                menuItems = angular.element($mdUtil.nodesToArray(menuContainer[0].children[0].children));
                menuItems.on('mouseenter', self.handleMenuItemHover);
                menuItems.on('mouseleave', self.handleMenuItemMouseLeave);
            };

            this.disableHoverListener = function() {
                while (deregisterScopeListeners.length) {
                    deregisterScopeListeners.shift()();
                }
                menuItems && menuItems.off('mouseenter', self.handleMenuItemHover);
                menuItems && menuItems.off('mouseleave', self.handleMenuMouseLeave);
            };

            this.handleMenuItemHover = function(event) {
                if (self.isAlreadyOpening) return;
                var nestedMenu = (
                    event.target.querySelector('md-menu') || $mdUtil.getClosest(event.target, 'MD-MENU')
                );
                openMenuTimeout = $timeout(function() {
                    if (nestedMenu) {
                        nestedMenu = angular.element(nestedMenu).controller('mdMenu');
                    }

                    if (self.currentlyOpenMenu && self.currentlyOpenMenu != nestedMenu) {
                        var closeTo = self.nestLevel + 1;
                        self.currentlyOpenMenu.close(true, {
                            closeTo: closeTo
                        });
                    } else if (nestedMenu && !nestedMenu.isOpen && nestedMenu.open) {
                        self.isAlreadyOpening = true;
                        nestedMenu.open();
                    }
                }, nestedMenu ? 100 : 250);
                var focusableTarget = event.currentTarget.querySelector('button:not([disabled])');
                focusableTarget && focusableTarget.focus();
            };

            this.handleMenuItemMouseLeave = function() {
                if (openMenuTimeout) {
                    $timeout.cancel(openMenuTimeout);
                    openMenuTimeout = undefined;
                }
            };


            /**
             * Uses the $mdMenu interim element service to open the menu contents
             */
            this.open = function openMenu(ev) {
                ev && ev.stopPropagation();
                ev && ev.preventDefault();
                if (self.isOpen) return;
                self.enableHoverListener();
                self.isOpen = true;
                triggerElement = triggerElement || (ev ? ev.target : $element[0]);
                triggerElement.setAttribute('aria-expanded', 'true');
                $scope.$emit('$mdMenuOpen', $element);
                $mdMenu.show({
                    scope: $scope,
                    mdMenuCtrl: self,
                    nestLevel: self.nestLevel,
                    element: menuContainer,
                    target: triggerElement,
                    preserveElement: true,
                    parent: 'body'
                }).finally(function() {
                    triggerElement.setAttribute('aria-expanded', 'false');
                    self.disableHoverListener();
                });
            };

            // Expose a open function to the child scope for html to use
            $scope.$mdOpenMenu = this.open;

            $scope.$watch(function() {
                return self.isOpen;
            }, function(isOpen) {
                if (isOpen) {
                    menuContainer.attr('aria-hidden', 'false');
                    $element[0].classList.add('md-open');
                    angular.forEach(self.nestedMenus, function(el) {
                        el.classList.remove('md-open');
                    });
                } else {
                    menuContainer.attr('aria-hidden', 'true');
                    $element[0].classList.remove('md-open');
                }
                $scope.$mdMenuIsOpen = self.isOpen;
            });

            this.focusMenuContainer = function focusMenuContainer() {
                var focusTarget = menuContainer[0].querySelector('[md-menu-focus-target]');
                if (!focusTarget) focusTarget = menuContainer[0].querySelector('.md-button');
                focusTarget.focus();
            };

            this.registerContainerProxy = function registerContainerProxy(handler) {
                this.containerProxy = handler;
            };

            this.triggerContainerProxy = function triggerContainerProxy(ev) {
                this.containerProxy && this.containerProxy(ev);
            };

            this.destroy = function() {
                return self.isOpen ? $mdMenu.destroy() : $q.when(false);
            };

            // Use the $mdMenu interim element service to close the menu contents
            this.close = function closeMenu(skipFocus, closeOpts) {
                if (!self.isOpen) return;
                self.isOpen = false;

                var eventDetails = angular.extend({}, closeOpts, {
                    skipFocus: skipFocus
                });
                $scope.$emit('$mdMenuClose', $element, eventDetails);
                $mdMenu.hide(null, closeOpts);

                if (!skipFocus) {
                    var el = self.restoreFocusTo || $element.find('button')[0];
                    if (el instanceof angular.element) el = el[0];
                    if (el) el.focus();
                }
            };

            /**
             * Build a nice object out of our string attribute which specifies the
             * target mode for left and top positioning
             */
            this.positionMode = function positionMode() {
                var attachment = ($attrs.mdPositionMode || 'target').split(' ');

                // If attachment is a single item, duplicate it for our second value.
                // ie. 'target' -> 'target target'
                if (attachment.length == 1) {
                    attachment.push(attachment[0]);
                }

                return {
                    left: attachment[0],
                    top: attachment[1]
                };
            };

            /**
             * Build a nice object out of our string attribute which specifies
             * the offset of top and left in pixels.
             */
            this.offsets = function offsets() {
                var position = ($attrs.mdOffset || '0 0').split(' ').map(parseFloat);
                if (position.length == 2) {
                    return {
                        left: position[0],
                        top: position[1]
                    };
                } else if (position.length == 1) {
                    return {
                        top: position[0],
                        left: position[0]
                    };
                } else {
                    throw Error('Invalid offsets specified. Please follow format <x, y> or <n>');
                }
            };
        }
        MenuController.$inject = ["$mdMenu", "$attrs", "$element", "$scope", "$mdUtil", "$timeout", "$rootScope", "$q"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc directive
         * @name mdMenu
         * @module material.components.menu
         * @restrict E
         * @description
         *
         * Menus are elements that open when clicked. They are useful for displaying
         * additional options within the context of an action.
         *
         * Every `md-menu` must specify exactly two child elements. The first element is what is
         * left in the DOM and is used to open the menu. This element is called the trigger element.
         * The trigger element's scope has access to `$mdOpenMenu($event)`
         * which it may call to open the menu. By passing $event as argument, the
         * corresponding event is stopped from propagating up the DOM-tree.
         *
         * The second element is the `md-menu-content` element which represents the
         * contents of the menu when it is open. Typically this will contain `md-menu-item`s,
         * but you can do custom content as well.
         *
         * <hljs lang="html">
         * <md-menu>
         *  <!-- Trigger element is a md-button with an icon -->
         *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu">
         *    <md-icon md-svg-icon="call:phone"></md-icon>
         *  </md-button>
         *  <md-menu-content>
         *    <md-menu-item><md-button ng-click="doSomething()">Do Something</md-button></md-menu-item>
         *  </md-menu-content>
         * </md-menu>
         * </hljs>

         * ## Sizing Menus
         *
         * The width of the menu when it is open may be specified by specifying a `width`
         * attribute on the `md-menu-content` element.
         * See the [Material Design Spec](http://www.google.com/design/spec/components/menus.html#menus-specs)
         * for more information.
         *
         *
         * ## Aligning Menus
         *
         * When a menu opens, it is important that the content aligns with the trigger element.
         * Failure to align menus can result in jarring experiences for users as content
         * suddenly shifts. To help with this, `md-menu` provides serveral APIs to help
         * with alignment.
         *
         * ### Target Mode
         *
         * By default, `md-menu` will attempt to align the `md-menu-content` by aligning
         * designated child elements in both the trigger and the menu content.
         *
         * To specify the alignment element in the `trigger` you can use the `md-menu-origin`
         * attribute on a child element. If no `md-menu-origin` is specified, the `md-menu`
         * will be used as the origin element.
         *
         * Similarly, the `md-menu-content` may specify a `md-menu-align-target` for a
         * `md-menu-item` to specify the node that it should try and align with.
         *
         * In this example code, we specify an icon to be our origin element, and an
         * icon in our menu content to be our alignment target. This ensures that both
         * icons are aligned when the menu opens.
         *
         * <hljs lang="html">
         * <md-menu>
         *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open some menu">
         *    <md-icon md-menu-origin md-svg-icon="call:phone"></md-icon>
         *  </md-button>
         *  <md-menu-content>
         *    <md-menu-item>
         *      <md-button ng-click="doSomething()" aria-label="Do something">
         *        <md-icon md-menu-align-target md-svg-icon="call:phone"></md-icon>
         *        Do Something
         *      </md-button>
         *    </md-menu-item>
         *  </md-menu-content>
         * </md-menu>
         * </hljs>
         *
         * Sometimes we want to specify alignment on the right side of an element, for example
         * if we have a menu on the right side a toolbar, we want to right align our menu content.
         *
         * We can specify the origin by using the `md-position-mode` attribute on both
         * the `x` and `y` axis. Right now only the `x-axis` has more than one option.
         * You may specify the default mode of `target target` or
         * `target-right target` to specify a right-oriented alignment target. See the
         * position section of the demos for more examples.
         *
         * ### Menu Offsets
         *
         * It is sometimes unavoidable to need to have a deeper level of control for
         * the positioning of a menu to ensure perfect alignment. `md-menu` provides
         * the `md-offset` attribute to allow pixel level specificty of adjusting the
         * exact positioning.
         *
         * This offset is provided in the format of `x y` or `n` where `n` will be used
         * in both the `x` and `y` axis.
         *
         * For example, to move a menu by `2px` from the top, we can use:
         * <hljs lang="html">
         * <md-menu md-offset="2 0">
         *   <!-- menu-content -->
         * </md-menu>
         * </hljs>

         * ### Preventing close
         *
         * Sometimes you would like to be able to click on a menu item without having the menu
         * close. To do this, ngMaterial exposes the `md-prevent-menu-close` attribute which
         * can be added to a button inside a menu to stop the menu from automatically closing.
         * You can then close the menu programatically by injecting `$mdMenu` and calling 
         * `$mdMenu.hide()`.
         *
         * <hljs lang="html">
         * <md-menu-item>
         *   <md-button ng-click="doSomething()" aria-label="Do something" md-prevent-menu-close="md-prevent-menu-close">
         *     <md-icon md-menu-align-target md-svg-icon="call:phone"></md-icon>
         *     Do Something
         *   </md-button>
         * </md-menu-item>
         * </hljs>
         *
         * @usage
         * <hljs lang="html">
         * <md-menu>
         *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button">
         *    <md-icon md-svg-icon="call:phone"></md-icon>
         *  </md-button>
         *  <md-menu-content>
         *    <md-menu-item><md-button ng-click="doSomething()">Do Something</md-button></md-menu-item>
         *  </md-menu-content>
         * </md-menu>
         * </hljs>
         *
         * @param {string} md-position-mode The position mode in the form of
         *           `x`, `y`. Default value is `target`,`target`. Right now the `x` axis
         *           also suppports `target-right`.
         * @param {string} md-offset An offset to apply to the dropdown after positioning
         *           `x`, `y`. Default value is `0`,`0`.
         *
         */

        angular
            .module('material.components.menu')
            .directive('mdMenu', MenuDirective);

        /**
         * @ngInject
         */
        function MenuDirective($mdUtil) {
            var INVALID_PREFIX = 'Invalid HTML for md-menu: ';
            return {
                restrict: 'E',
                require: ['mdMenu', '?^mdMenuBar'],
                controller: 'mdMenuCtrl', // empty function to be built by link
                scope: true,
                compile: compile
            };

            function compile(templateElement) {
                templateElement.addClass('md-menu');
                var triggerElement = templateElement.children()[0];
                if (!triggerElement.hasAttribute('ng-click')) {
                    triggerElement = triggerElement.querySelector('[ng-click],[ng-mouseenter]') || triggerElement;
                }
                if (triggerElement && (
                        triggerElement.nodeName == 'MD-BUTTON' ||
                        triggerElement.nodeName == 'BUTTON'
                    ) && !triggerElement.hasAttribute('type')) {
                    triggerElement.setAttribute('type', 'button');
                }

                if (templateElement.children().length != 2) {
                    throw Error(INVALID_PREFIX + 'Expected two children elements.');
                }

                // Default element for ARIA attributes has the ngClick or ngMouseenter expression
                triggerElement && triggerElement.setAttribute('aria-haspopup', 'true');

                var nestedMenus = templateElement[0].querySelectorAll('md-menu');
                var nestingDepth = parseInt(templateElement[0].getAttribute('md-nest-level'), 10) || 0;
                if (nestedMenus) {
                    angular.forEach($mdUtil.nodesToArray(nestedMenus), function(menuEl) {
                        if (!menuEl.hasAttribute('md-position-mode')) {
                            menuEl.setAttribute('md-position-mode', 'cascade');
                        }
                        menuEl.classList.add('md-nested-menu');
                        menuEl.setAttribute('md-nest-level', nestingDepth + 1);
                    });
                }
                return link;
            }

            function link(scope, element, attrs, ctrls) {
                var mdMenuCtrl = ctrls[0];
                var isInMenuBar = ctrls[1] != undefined;
                // Move everything into a md-menu-container and pass it to the controller
                var menuContainer = angular.element(
                    '<div class="md-open-menu-container md-whiteframe-z2"></div>'
                );
                var menuContents = element.children()[1];
                if (!menuContents.hasAttribute('role')) {
                    menuContents.setAttribute('role', 'menu');
                }
                menuContainer.append(menuContents);

                element.on('$destroy', function() {
                    menuContainer.remove();
                });

                element.append(menuContainer);
                menuContainer[0].style.display = 'none';
                mdMenuCtrl.init(menuContainer, {
                    isInMenuBar: isInMenuBar
                });
            }
        }
        MenuDirective.$inject = ["$mdUtil"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.menu')
            .provider('$mdMenu', MenuProvider);

        /*
         * Interim element provider for the menu.
         * Handles behavior for a menu while it is open, including:
         *    - handling animating the menu opening/closing
         *    - handling key/mouse events on the menu element
         *    - handling enabling/disabling scroll while the menu is open
         *    - handling redrawing during resizes and orientation changes
         *
         */

        function MenuProvider($$interimElementProvider) {
            var MENU_EDGE_MARGIN = 8;

            menuDefaultOptions.$inject = ["$mdUtil", "$mdTheming", "$mdConstant", "$document", "$window", "$q", "$$rAF", "$animateCss", "$animate"];
            return $$interimElementProvider('$mdMenu')
                .setDefaults({
                    methods: ['target'],
                    options: menuDefaultOptions
                });

            /* @ngInject */
            function menuDefaultOptions($mdUtil, $mdTheming, $mdConstant, $document, $window, $q, $$rAF, $animateCss, $animate) {
                var animator = $mdUtil.dom.animator;

                return {
                    parent: 'body',
                    onShow: onShow,
                    onRemove: onRemove,
                    hasBackdrop: true,
                    disableParentScroll: true,
                    skipCompile: true,
                    preserveScope: true,
                    skipHide: true,
                    themable: true
                };

                /**
                 * Show modal backdrop element...
                 * @returns {function(): void} A function that removes this backdrop
                 */
                function showBackdrop(scope, element, options) {
                    if (options.nestLevel) return angular.noop;

                    // If we are not within a dialog...
                    if (options.disableParentScroll && !$mdUtil.getClosest(options.target, 'MD-DIALOG')) {
                        // !! DO this before creating the backdrop; since disableScrollAround()
                        //    configures the scroll offset; which is used by mdBackDrop postLink()
                        options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent);
                    } else {
                        options.disableParentScroll = false;
                    }

                    if (options.hasBackdrop) {
                        options.backdrop = $mdUtil.createBackdrop(scope, "md-menu-backdrop md-click-catcher");

                        $animate.enter(options.backdrop, $document[0].body);
                    }

                    /**
                     * Hide and destroys the backdrop created by showBackdrop()
                     */
                    return function hideBackdrop() {
                        if (options.backdrop) options.backdrop.remove();
                        if (options.disableParentScroll) options.restoreScroll();
                    };
                }

                /**
                 * Removing the menu element from the DOM and remove all associated evetn listeners
                 * and backdrop
                 */
                function onRemove(scope, element, opts) {
                    opts.cleanupInteraction();
                    opts.cleanupResizing();
                    opts.hideBackdrop();

                    // For navigation $destroy events, do a quick, non-animated removal,
                    // but for normal closes (from clicks, etc) animate the removal

                    return (opts.$destroy === true) ? detachAndClean() : animateRemoval().then(detachAndClean);

                    /**
                     * For normal closes, animate the removal.
                     * For forced closes (like $destroy events), skip the animations
                     */
                    function animateRemoval() {
                        return $animateCss(element, {
                            addClass: 'md-leave'
                        }).start();
                    }

                    /**
                     * Detach the element
                     */
                    function detachAndClean() {
                        element.removeClass('md-active');
                        detachElement(element, opts);
                        opts.alreadyOpen = false;
                    }

                }

                /**
                 * Inserts and configures the staged Menu element into the DOM, positioning it,
                 * and wiring up various interaction events
                 */
                function onShow(scope, element, opts) {
                    sanitizeAndConfigure(opts);

                    // Wire up theming on our menu element
                    $mdTheming.inherit(opts.menuContentEl, opts.target);

                    // Register various listeners to move menu on resize/orientation change
                    opts.cleanupResizing = startRepositioningOnResize();
                    opts.hideBackdrop = showBackdrop(scope, element, opts);

                    // Return the promise for when our menu is done animating in
                    return showMenu()
                        .then(function(response) {
                            opts.alreadyOpen = true;
                            opts.cleanupInteraction = activateInteraction();
                            return response;
                        });

                    /**
                     * Place the menu into the DOM and call positioning related functions
                     */
                    function showMenu() {
                        opts.parent.append(element);
                        element[0].style.display = '';

                        return $q(function(resolve) {
                            var position = calculateMenuPosition(element, opts);

                            element.removeClass('md-leave');

                            // Animate the menu scaling, and opacity [from its position origin (default == top-left)]
                            // to normal scale.
                            $animateCss(element, {
                                    addClass: 'md-active',
                                    from: animator.toCss(position),
                                    to: animator.toCss({
                                        transform: ''
                                    })
                                })
                                .start()
                                .then(resolve);

                        });
                    }

                    /**
                     * Check for valid opts and set some sane defaults
                     */
                    function sanitizeAndConfigure() {
                        if (!opts.target) {
                            throw Error(
                                '$mdMenu.show() expected a target to animate from in options.target'
                            );
                        }
                        angular.extend(opts, {
                            alreadyOpen: false,
                            isRemoved: false,
                            target: angular.element(opts.target), //make sure it's not a naked dom node
                            parent: angular.element(opts.parent),
                            menuContentEl: angular.element(element[0].querySelector('md-menu-content'))
                        });
                    }

                    /**
                     * Configure various resize listeners for screen changes
                     */
                    function startRepositioningOnResize() {

                        var repositionMenu = (function(target, options) {
                            return $$rAF.throttle(function() {
                                if (opts.isRemoved) return;
                                var position = calculateMenuPosition(target, options);

                                target.css(animator.toCss(position));
                            });
                        })(element, opts);

                        $window.addEventListener('resize', repositionMenu);
                        $window.addEventListener('orientationchange', repositionMenu);

                        return function stopRepositioningOnResize() {

                            // Disable resizing handlers
                            $window.removeEventListener('resize', repositionMenu);
                            $window.removeEventListener('orientationchange', repositionMenu);

                        }
                    }

                    /**
                     * Activate interaction on the menu. Wire up keyboard listerns for
                     * clicks, keypresses, backdrop closing, etc.
                     */
                    function activateInteraction() {
                        element.addClass('md-clickable');

                        // close on backdrop click
                        if (opts.backdrop) opts.backdrop.on('click', onBackdropClick);

                        // Wire up keyboard listeners.
                        // - Close on escape,
                        // - focus next item on down arrow,
                        // - focus prev item on up
                        opts.menuContentEl.on('keydown', onMenuKeyDown);
                        opts.menuContentEl[0].addEventListener('click', captureClickListener, true);

                        // kick off initial focus in the menu on the first element
                        var focusTarget = opts.menuContentEl[0].querySelector('[md-menu-focus-target]');
                        if (!focusTarget) {
                            var firstChild = opts.menuContentEl[0].firstElementChild;

                            focusTarget = firstChild && (firstChild.querySelector('.md-button:not([disabled])') || firstChild.firstElementChild);
                        }

                        focusTarget && focusTarget.focus();

                        return function cleanupInteraction() {
                            element.removeClass('md-clickable');
                            if (opts.backdrop) opts.backdrop.off('click', onBackdropClick);
                            opts.menuContentEl.off('keydown', onMenuKeyDown);
                            opts.menuContentEl[0].removeEventListener('click', captureClickListener, true);
                        };

                        // ************************************
                        // internal functions
                        // ************************************

                        function onMenuKeyDown(ev) {
                            var handled;
                            switch (ev.keyCode) {
                                case $mdConstant.KEY_CODE.ESCAPE:
                                    opts.mdMenuCtrl.close(false, {
                                        closeAll: true
                                    });
                                    handled = true;
                                    break;
                                case $mdConstant.KEY_CODE.UP_ARROW:
                                    if (!focusMenuItem(ev, opts.menuContentEl, opts, -1) && !opts.nestLevel) {
                                        opts.mdMenuCtrl.triggerContainerProxy(ev);
                                    }
                                    handled = true;
                                    break;
                                case $mdConstant.KEY_CODE.DOWN_ARROW:
                                    if (!focusMenuItem(ev, opts.menuContentEl, opts, 1) && !opts.nestLevel) {
                                        opts.mdMenuCtrl.triggerContainerProxy(ev);
                                    }
                                    handled = true;
                                    break;
                                case $mdConstant.KEY_CODE.LEFT_ARROW:
                                    if (opts.nestLevel) {
                                        opts.mdMenuCtrl.close();
                                    } else {
                                        opts.mdMenuCtrl.triggerContainerProxy(ev);
                                    }
                                    handled = true;
                                    break;
                                case $mdConstant.KEY_CODE.RIGHT_ARROW:
                                    var parentMenu = $mdUtil.getClosest(ev.target, 'MD-MENU');
                                    if (parentMenu && parentMenu != opts.parent[0]) {
                                        ev.target.click();
                                    } else {
                                        opts.mdMenuCtrl.triggerContainerProxy(ev);
                                    }
                                    handled = true;
                                    break;
                            }
                            if (handled) {
                                ev.preventDefault();
                                ev.stopImmediatePropagation();
                            }
                        }

                        function onBackdropClick(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            scope.$apply(function() {
                                opts.mdMenuCtrl.close(true, {
                                    closeAll: true
                                });
                            });
                        }

                        // Close menu on menu item click, if said menu-item is not disabled
                        function captureClickListener(e) {
                            var target = e.target;
                            // Traverse up the event until we get to the menuContentEl to see if
                            // there is an ng-click and that the ng-click is not disabled
                            do {
                                if (target == opts.menuContentEl[0]) return;
                                if ((hasAnyAttribute(target, ['ng-click', 'ng-href', 'ui-sref']) ||
                                        target.nodeName == 'BUTTON' || target.nodeName == 'MD-BUTTON') && !hasAnyAttribute(target, ['md-prevent-menu-close'])) {
                                    var closestMenu = $mdUtil.getClosest(target, 'MD-MENU');
                                    if (!target.hasAttribute('disabled') && (!closestMenu || closestMenu == opts.parent[0])) {
                                        close();
                                    }
                                    break;
                                }
                            } while (target = target.parentNode)

                            function close() {
                                scope.$apply(function() {
                                    opts.mdMenuCtrl.close(true, {
                                        closeAll: true
                                    });
                                });
                            }

                            function hasAnyAttribute(target, attrs) {
                                if (!target) return false;
                                for (var i = 0, attr; attr = attrs[i]; ++i) {
                                    var altForms = [attr, 'data-' + attr, 'x-' + attr];
                                    for (var j = 0, rawAttr; rawAttr = altForms[j]; ++j) {
                                        if (target.hasAttribute(rawAttr)) {
                                            return true;
                                        }
                                    }
                                }
                                return false;
                            }
                        }

                        opts.menuContentEl[0].addEventListener('click', captureClickListener, true);

                        return function cleanupInteraction() {
                            element.removeClass('md-clickable');
                            opts.menuContentEl.off('keydown');
                            opts.menuContentEl[0].removeEventListener('click', captureClickListener, true);
                        };
                    }
                }

                /**
                 * Takes a keypress event and focuses the next/previous menu
                 * item from the emitting element
                 * @param {event} e - The origin keypress event
                 * @param {angular.element} menuEl - The menu element
                 * @param {object} opts - The interim element options for the mdMenu
                 * @param {number} direction - The direction to move in (+1 = next, -1 = prev)
                 */
                function focusMenuItem(e, menuEl, opts, direction) {
                    var currentItem = $mdUtil.getClosest(e.target, 'MD-MENU-ITEM');

                    var items = $mdUtil.nodesToArray(menuEl[0].children);
                    var currentIndex = items.indexOf(currentItem);

                    // Traverse through our elements in the specified direction (+/-1) and try to
                    // focus them until we find one that accepts focus
                    var didFocus;
                    for (var i = currentIndex + direction; i >= 0 && i < items.length; i = i + direction) {
                        var focusTarget = items[i].querySelector('.md-button');
                        didFocus = attemptFocus(focusTarget);
                        if (didFocus) {
                            break;
                        }
                    }
                    return didFocus;
                }

                /**
                 * Attempts to focus an element. Checks whether that element is the currently
                 * focused element after attempting.
                 * @param {HTMLElement} el - the element to attempt focus on
                 * @returns {bool} - whether the element was successfully focused
                 */
                function attemptFocus(el) {
                    if (el && el.getAttribute('tabindex') != -1) {
                        el.focus();
                        return ($document[0].activeElement == el);
                    }
                }

                /**
                 * Use browser to remove this element without triggering a $destroy event
                 */
                function detachElement(element, opts) {
                    if (!opts.preserveElement) {
                        if (toNode(element).parentNode === toNode(opts.parent)) {
                            toNode(opts.parent).removeChild(toNode(element));
                        }
                    } else {
                        toNode(element).style.display = 'none';
                    }
                }

                /**
                 * Computes menu position and sets the style on the menu container
                 * @param {HTMLElement} el - the menu container element
                 * @param {object} opts - the interim element options object
                 */
                function calculateMenuPosition(el, opts) {

                    var containerNode = el[0],
                        openMenuNode = el[0].firstElementChild,
                        openMenuNodeRect = openMenuNode.getBoundingClientRect(),
                        boundryNode = $document[0].body,
                        boundryNodeRect = boundryNode.getBoundingClientRect();

                    var menuStyle = $window.getComputedStyle(openMenuNode);

                    var originNode = opts.target[0].querySelector('[md-menu-origin]') || opts.target[0],
                        originNodeRect = originNode.getBoundingClientRect();

                    var bounds = {
                        left: boundryNodeRect.left + MENU_EDGE_MARGIN,
                        top: Math.max(boundryNodeRect.top, 0) + MENU_EDGE_MARGIN,
                        bottom: Math.max(boundryNodeRect.bottom, Math.max(boundryNodeRect.top, 0) + boundryNodeRect.height) - MENU_EDGE_MARGIN,
                        right: boundryNodeRect.right - MENU_EDGE_MARGIN
                    };

                    var alignTarget, alignTargetRect = {
                            top: 0,
                            left: 0,
                            right: 0,
                            bottom: 0
                        },
                        existingOffsets = {
                            top: 0,
                            left: 0,
                            right: 0,
                            bottom: 0
                        };
                    var positionMode = opts.mdMenuCtrl.positionMode();

                    if (positionMode.top == 'target' || positionMode.left == 'target' || positionMode.left == 'target-right') {
                        alignTarget = firstVisibleChild();
                        if (alignTarget) {
                            // TODO: Allow centering on an arbitrary node, for now center on first menu-item's child
                            alignTarget = alignTarget.firstElementChild || alignTarget;
                            alignTarget = alignTarget.querySelector('[md-menu-align-target]') || alignTarget;
                            alignTargetRect = alignTarget.getBoundingClientRect();

                            existingOffsets = {
                                top: parseFloat(containerNode.style.top || 0),
                                left: parseFloat(containerNode.style.left || 0)
                            };
                        }
                    }

                    var position = {};
                    var transformOrigin = 'top ';

                    switch (positionMode.top) {
                        case 'target':
                            position.top = existingOffsets.top + originNodeRect.top - alignTargetRect.top;
                            break;
                        case 'cascade':
                            position.top = originNodeRect.top - parseFloat(menuStyle.paddingTop) - originNode.style.top;
                            break;
                        case 'bottom':
                            position.top = originNodeRect.top + originNodeRect.height;
                            break;
                        default:
                            throw new Error('Invalid target mode "' + positionMode.top + '" specified for md-menu on Y axis.');
                    }

                    switch (positionMode.left) {
                        case 'target':
                            position.left = existingOffsets.left + originNodeRect.left - alignTargetRect.left;
                            transformOrigin += 'left';
                            break;
                        case 'target-right':
                            position.left = originNodeRect.right - openMenuNodeRect.width + (openMenuNodeRect.right - alignTargetRect.right);
                            transformOrigin += 'right';
                            break;
                        case 'cascade':
                            var willFitRight = (originNodeRect.right + openMenuNodeRect.width) < bounds.right;
                            position.left = willFitRight ? originNodeRect.right - originNode.style.left : originNodeRect.left - originNode.style.left - openMenuNodeRect.width;
                            transformOrigin += willFitRight ? 'left' : 'right';
                            break;
                        case 'left':
                            position.left = originNodeRect.left;
                            transformOrigin += 'left';
                            break;
                        default:
                            throw new Error('Invalid target mode "' + positionMode.left + '" specified for md-menu on X axis.');
                    }

                    var offsets = opts.mdMenuCtrl.offsets();
                    position.top += offsets.top;
                    position.left += offsets.left;

                    clamp(position);

                    var scaleX = Math.round(100 * Math.min(originNodeRect.width / containerNode.offsetWidth, 1.0)) / 100;
                    var scaleY = Math.round(100 * Math.min(originNodeRect.height / containerNode.offsetHeight, 1.0)) / 100;

                    return {
                        top: Math.round(position.top),
                        left: Math.round(position.left),
                        // Animate a scale out if we aren't just repositioning
                        transform: !opts.alreadyOpen ? $mdUtil.supplant('scale({0},{1})', [scaleX, scaleY]) : undefined,
                        transformOrigin: transformOrigin
                    };

                    /**
                     * Clamps the repositioning of the menu within the confines of
                     * bounding element (often the screen/body)
                     */
                    function clamp(pos) {
                        pos.top = Math.max(Math.min(pos.top, bounds.bottom - containerNode.offsetHeight), bounds.top);
                        pos.left = Math.max(Math.min(pos.left, bounds.right - containerNode.offsetWidth), bounds.left);
                    }

                    /**
                     * Gets the first visible child in the openMenuNode
                     * Necessary incase menu nodes are being dynamically hidden
                     */
                    function firstVisibleChild() {
                        for (var i = 0; i < openMenuNode.children.length; ++i) {
                            if ($window.getComputedStyle(openMenuNode.children[i]).display != 'none') {
                                return openMenuNode.children[i];
                            }
                        }
                    }
                }
            }

            function toNode(el) {
                if (el instanceof angular.element) {
                    el = el[0];
                }
                return el;
            }
        }
        MenuProvider.$inject = ["$$interimElementProvider"];

    })();
    (function() {
        "use strict";


        angular
            .module('material.components.menuBar')
            .controller('MenuBarController', MenuBarController);

        var BOUND_MENU_METHODS = ['handleKeyDown', 'handleMenuHover', 'scheduleOpenHoveredMenu', 'cancelScheduledOpen'];

        /**
         * @ngInject
         */
        function MenuBarController($scope, $rootScope, $element, $attrs, $mdConstant, $document, $mdUtil, $timeout) {
            this.$element = $element;
            this.$attrs = $attrs;
            this.$mdConstant = $mdConstant;
            this.$mdUtil = $mdUtil;
            this.$document = $document;
            this.$scope = $scope;
            this.$rootScope = $rootScope;
            this.$timeout = $timeout;

            var self = this;
            angular.forEach(BOUND_MENU_METHODS, function(methodName) {
                self[methodName] = angular.bind(self, self[methodName]);
            });
        }
        MenuBarController.$inject = ["$scope", "$rootScope", "$element", "$attrs", "$mdConstant", "$document", "$mdUtil", "$timeout"];

        MenuBarController.prototype.init = function() {
            var $element = this.$element;
            var $mdUtil = this.$mdUtil;
            var $scope = this.$scope;

            var self = this;
            var deregisterFns = [];
            $element.on('keydown', this.handleKeyDown);
            this.parentToolbar = $mdUtil.getClosest($element, 'MD-TOOLBAR');

            deregisterFns.push(this.$rootScope.$on('$mdMenuOpen', function(event, el) {
                if (self.getMenus().indexOf(el[0]) != -1) {
                    $element[0].classList.add('md-open');
                    el[0].classList.add('md-open');
                    self.currentlyOpenMenu = el.controller('mdMenu');
                    self.currentlyOpenMenu.registerContainerProxy(self.handleKeyDown);
                    self.enableOpenOnHover();
                }
            }));

            deregisterFns.push(this.$rootScope.$on('$mdMenuClose', function(event, el, opts) {
                var rootMenus = self.getMenus();
                if (rootMenus.indexOf(el[0]) != -1) {
                    $element[0].classList.remove('md-open');
                    el[0].classList.remove('md-open');
                }

                if ($element[0].contains(el[0])) {
                    var parentMenu = el[0];
                    while (parentMenu && rootMenus.indexOf(parentMenu) == -1) {
                        parentMenu = $mdUtil.getClosest(parentMenu, 'MD-MENU', true);
                    }
                    if (parentMenu) {
                        if (!opts.skipFocus) parentMenu.querySelector('button:not([disabled])').focus();
                        self.currentlyOpenMenu = undefined;
                        self.disableOpenOnHover();
                        self.setKeyboardMode(true);
                    }
                }
            }));

            $scope.$on('$destroy', function() {
                while (deregisterFns.length) {
                    deregisterFns.shift()();
                }
            });


            this.setKeyboardMode(true);
        };

        MenuBarController.prototype.setKeyboardMode = function(enabled) {
            if (enabled) this.$element[0].classList.add('md-keyboard-mode');
            else this.$element[0].classList.remove('md-keyboard-mode');
        };

        MenuBarController.prototype.enableOpenOnHover = function() {
            if (this.openOnHoverEnabled) return;
            this.openOnHoverEnabled = true;

            var parentToolbar;
            if (parentToolbar = this.parentToolbar) {
                parentToolbar.dataset.mdRestoreStyle = parentToolbar.getAttribute('style');
                parentToolbar.style.position = 'relative';
                parentToolbar.style.zIndex = 100;
            }
            angular
                .element(this.getMenus())
                .on('mouseenter', this.handleMenuHover);
        };

        MenuBarController.prototype.handleMenuHover = function(e) {
            this.setKeyboardMode(false);
            if (this.openOnHoverEnabled) {
                this.scheduleOpenHoveredMenu(e);
            }
        };


        MenuBarController.prototype.disableOpenOnHover = function() {
            if (!this.openOnHoverEnabled) return;
            this.openOnHoverEnabled = false;
            var parentToolbar;
            if (parentToolbar = this.parentToolbar) {
                parentToolbar.setAttribute('style', parentToolbar.dataset.mdRestoreStyle || '');
            }
            angular
                .element(this.getMenus())
                .off('mouseenter', this.handleMenuHover);
        };

        MenuBarController.prototype.scheduleOpenHoveredMenu = function(e) {
            var menuEl = angular.element(e.currentTarget);
            var menuCtrl = menuEl.controller('mdMenu');
            this.setKeyboardMode(false);
            this.scheduleOpenMenu(menuCtrl);
        };

        MenuBarController.prototype.scheduleOpenMenu = function(menuCtrl) {
            var self = this;
            var $timeout = this.$timeout;
            if (menuCtrl != self.currentlyOpenMenu) {
                $timeout.cancel(self.pendingMenuOpen);
                self.pendingMenuOpen = $timeout(function() {
                    self.pendingMenuOpen = undefined;
                    if (self.currentlyOpenMenu) {
                        self.currentlyOpenMenu.close(true, {
                            closeAll: true
                        });
                    }
                    menuCtrl.open();
                }, 200, false);
            }
        };

        MenuBarController.prototype.handleKeyDown = function(e) {
            var keyCodes = this.$mdConstant.KEY_CODE;
            var currentMenu = this.currentlyOpenMenu;
            var wasOpen = currentMenu && currentMenu.isOpen;
            this.setKeyboardMode(true);
            var handled, newMenu, newMenuCtrl;
            switch (e.keyCode) {
                case keyCodes.DOWN_ARROW:
                    if (currentMenu) {
                        currentMenu.focusMenuContainer();
                    } else {
                        this.openFocusedMenu();
                    }
                    handled = true;
                    break;
                case keyCodes.UP_ARROW:
                    currentMenu && currentMenu.close();
                    handled = true;
                    break;
                case keyCodes.LEFT_ARROW:
                    newMenu = this.focusMenu(-1);
                    if (wasOpen) {
                        newMenuCtrl = angular.element(newMenu).controller('mdMenu');
                        this.scheduleOpenMenu(newMenuCtrl);
                    }
                    handled = true;
                    break;
                case keyCodes.RIGHT_ARROW:
                    newMenu = this.focusMenu(+1);
                    if (wasOpen) {
                        newMenuCtrl = angular.element(newMenu).controller('mdMenu');
                        this.scheduleOpenMenu(newMenuCtrl);
                    }
                    handled = true;
                    break;
            }
            if (handled) {
                e && e.preventDefault && e.preventDefault();
                e && e.stopImmediatePropagation && e.stopImmediatePropagation();
            }
        };

        MenuBarController.prototype.focusMenu = function(direction) {
            var menus = this.getMenus();
            var focusedIndex = this.getFocusedMenuIndex();

            if (focusedIndex == -1) {
                focusedIndex = this.getOpenMenuIndex();
            }

            var changed = false;

            if (focusedIndex == -1) {
                focusedIndex = 0;
            } else if (
                direction < 0 && focusedIndex > 0 ||
                direction > 0 && focusedIndex < menus.length - direction
            ) {
                focusedIndex += direction;
                changed = true;
            }
            if (changed) {
                menus[focusedIndex].querySelector('button').focus();
                return menus[focusedIndex];
            }
        };

        MenuBarController.prototype.openFocusedMenu = function() {
            var menu = this.getFocusedMenu();
            menu && angular.element(menu).controller('mdMenu').open();
        };

        MenuBarController.prototype.getMenus = function() {
            var $element = this.$element;
            return this.$mdUtil.nodesToArray($element[0].children)
                .filter(function(el) {
                    return el.nodeName == 'MD-MENU';
                });
        };

        MenuBarController.prototype.getFocusedMenu = function() {
            return this.getMenus()[this.getFocusedMenuIndex()];
        };

        MenuBarController.prototype.getFocusedMenuIndex = function() {
            var $mdUtil = this.$mdUtil;
            var focusedEl = $mdUtil.getClosest(
                this.$document[0].activeElement,
                'MD-MENU'
            );
            if (!focusedEl) return -1;

            var focusedIndex = this.getMenus().indexOf(focusedEl);
            return focusedIndex;

        };

        MenuBarController.prototype.getOpenMenuIndex = function() {
            var menus = this.getMenus();
            for (var i = 0; i < menus.length; ++i) {
                if (menus[i].classList.contains('md-open')) return i;
            }
            return -1;
        };









    })();
    (function() {
        "use strict";

        /**
         * @ngdoc directive
         * @name mdMenuBar
         * @module material.components.menu-bar
         * @restrict E
         * @description
         *
         * Menu bars are containers that hold multiple menus. They change the behavior and appearence
         * of the `md-menu` directive to behave similar to an operating system provided menu.
         *
         * @usage
         * <hljs lang="html">
         * <md-menu-bar>
         *   <md-menu>
         *     <button ng-click="$mdOpenMenu()">
         *       File
         *     </button>
         *     <md-menu-content>
         *       <md-menu-item>
         *         <md-button ng-click="ctrl.sampleAction('share', $event)">
         *           Share...
         *         </md-button>
         *       </md-menu-item>
         *       <md-menu-divider></md-menu-divider>
         *       <md-menu-item>
         *       <md-menu-item>
         *         <md-menu>
         *           <md-button ng-click="$mdOpenMenu()">New</md-button>
         *           <md-menu-content>
         *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Document', $event)">Document</md-button></md-menu-item>
         *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Spreadsheet', $event)">Spreadsheet</md-button></md-menu-item>
         *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Presentation', $event)">Presentation</md-button></md-menu-item>
         *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Form', $event)">Form</md-button></md-menu-item>
         *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Drawing', $event)">Drawing</md-button></md-menu-item>
         *           </md-menu-content>
         *         </md-menu>
         *       </md-menu-item>
         *     </md-menu-content>
         *   </md-menu>
         * </md-menu-bar>
         * </hljs>
         *
         * ## Menu Bar Controls
         *
         * You may place `md-menu-items` that function as controls within menu bars.
         * There are two modes that are exposed via the `type` attribute of the `md-menu-item`.
         * `type="checkbox"` will function as a boolean control for the `ng-model` attribute of the
         * `md-menu-item`. `type="radio"` will function like a radio button, setting the `ngModel`
         * to the `string` value of the `value` attribute. If you need non-string values, you can use
         * `ng-value` to provide an expression (this is similar to how angular's native `input[type=radio]` works.
         *
         * <hljs lang="html">
         * <md-menu-bar>
         *  <md-menu>
         *    <button ng-click="$mdOpenMenu()">
         *      Sample Menu
         *    </button>
         *    <md-menu-content>
         *      <md-menu-item type="checkbox" ng-model="settings.allowChanges">Allow changes</md-menu-item>
         *      <md-menu-divider></md-menu-divider>
         *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 1</md-menu-item>
         *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 2</md-menu-item>
         *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 3</md-menu-item>
         *    </md-menu-content>
         *  </md-menu>
         * </md-menu-bar>
         * </hljs>
         *
         *
         * ### Nesting Menus
         *
         * Menus may be nested within menu bars. This is commonly called cascading menus.
         * To nest a menu place the nested menu inside the content of the `md-menu-item`.
         * <hljs lang="html">
         * <md-menu-item>
         *   <md-menu>
         *     <button ng-click="$mdOpenMenu()">New</md-button>
         *     <md-menu-content>
         *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Document', $event)">Document</md-button></md-menu-item>
         *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Spreadsheet', $event)">Spreadsheet</md-button></md-menu-item>
         *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Presentation', $event)">Presentation</md-button></md-menu-item>
         *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Form', $event)">Form</md-button></md-menu-item>
         *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Drawing', $event)">Drawing</md-button></md-menu-item>
         *     </md-menu-content>
         *   </md-menu>
         * </md-menu-item>
         * </hljs>
         *
         */

        angular
            .module('material.components.menuBar')
            .directive('mdMenuBar', MenuBarDirective);

        /**
         *
         * @ngInjdect
         */
        function MenuBarDirective($mdUtil, $mdTheming) {
            return {
                restrict: 'E',
                require: 'mdMenuBar',
                controller: 'MenuBarController',

                compile: function compile(templateEl, templateAttrs) {
                    if (!templateAttrs.ariaRole) {
                        templateEl[0].setAttribute('role', 'menubar');
                    }
                    angular.forEach(templateEl[0].children, function(menuEl) {
                        if (menuEl.nodeName == 'MD-MENU') {
                            if (!menuEl.hasAttribute('md-position-mode')) {
                                menuEl.setAttribute('md-position-mode', 'left bottom');
                                menuEl.querySelector('button,a').setAttribute('role', 'menuitem');
                            }
                            var contentEls = $mdUtil.nodesToArray(menuEl.querySelectorAll('md-menu-content'));
                            angular.forEach(contentEls, function(contentEl) {
                                contentEl.classList.add('md-menu-bar-menu');
                                contentEl.classList.add('md-dense');
                                if (!contentEl.hasAttribute('width')) {
                                    contentEl.setAttribute('width', 5);
                                }
                            });
                        }
                    });

                    return function postLink(scope, el, attrs, ctrl) {
                        $mdTheming(scope, el);
                        ctrl.init();
                    };
                }
            };

        }
        MenuBarDirective.$inject = ["$mdUtil", "$mdTheming"];

    })();
    (function() {
        "use strict";


        angular
            .module('material.components.menuBar')
            .directive('mdMenuDivider', MenuDividerDirective);


        function MenuDividerDirective() {
            return {
                restrict: 'E',
                compile: function(templateEl, templateAttrs) {
                    if (!templateAttrs.role) {
                        templateEl[0].setAttribute('role', 'separator');
                    }
                }
            };
        }

    })();
    (function() {
        "use strict";


        angular
            .module('material.components.menuBar')
            .controller('MenuItemController', MenuItemController);


        /**
         * @ngInject
         */
        function MenuItemController($scope, $element, $attrs) {
            this.$element = $element;
            this.$attrs = $attrs;
            this.$scope = $scope;
        }
        MenuItemController.$inject = ["$scope", "$element", "$attrs"];

        MenuItemController.prototype.init = function(ngModel) {
            var $element = this.$element;
            var $attrs = this.$attrs;

            this.ngModel = ngModel;
            if ($attrs.type == 'checkbox' || $attrs.type == 'radio') {
                this.mode = $attrs.type;
                this.iconEl = $element[0].children[0];
                this.buttonEl = $element[0].children[1];
                if (ngModel) {
                    // Clear ngAria set attributes
                    this.initClickListeners();
                }
            }
        };

        // ngAria auto sets attributes on a menu-item with a ngModel.
        // We don't want this because our content (buttons) get the focus
        // and set their own aria attributes appropritately. Having both
        // breaks NVDA / JAWS. This undeoes ngAria's attrs.
        MenuItemController.prototype.clearNgAria = function() {
            var el = this.$element[0];
            var clearAttrs = ['role', 'tabindex', 'aria-invalid', 'aria-checked'];
            angular.forEach(clearAttrs, function(attr) {
                el.removeAttribute(attr);
            });
        };

        MenuItemController.prototype.initClickListeners = function() {
            var self = this;
            var ngModel = this.ngModel;
            var $scope = this.$scope;
            var $attrs = this.$attrs;
            var $element = this.$element;
            var mode = this.mode;

            this.handleClick = angular.bind(this, this.handleClick);

            var icon = this.iconEl;
            var button = angular.element(this.buttonEl);
            var handleClick = this.handleClick;

            $attrs.$observe('disabled', setDisabled);
            setDisabled($attrs.disabled);

            ngModel.$render = function render() {
                self.clearNgAria();
                if (isSelected()) {
                    icon.style.display = '';
                    button.attr('aria-checked', 'true');
                } else {
                    icon.style.display = 'none';
                    button.attr('aria-checked', 'false');
                }
            };

            $scope.$$postDigest(ngModel.$render);

            function isSelected() {
                if (mode == 'radio') {
                    var val = $attrs.ngValue ? $scope.$eval($attrs.ngValue) : $attrs.value;
                    return ngModel.$modelValue == val;
                } else {
                    return ngModel.$modelValue;
                }
            }

            function setDisabled(disabled) {
                if (disabled) {
                    button.off('click', handleClick);
                } else {
                    button.on('click', handleClick);
                }
            }
        };

        MenuItemController.prototype.handleClick = function(e) {
            var mode = this.mode;
            var ngModel = this.ngModel;
            var $attrs = this.$attrs;
            var newVal;
            if (mode == 'checkbox') {
                newVal = !ngModel.$modelValue;
            } else if (mode == 'radio') {
                newVal = $attrs.ngValue ? this.$scope.$eval($attrs.ngValue) : $attrs.value;
            }
            ngModel.$setViewValue(newVal);
            ngModel.$render();
        };

    })();
    (function() {
        "use strict";


        angular
            .module('material.components.menuBar')
            .directive('mdMenuItem', MenuItemDirective);

        /**
         *
         * @ngInjdect
         */
        function MenuItemDirective() {
            return {
                require: ['mdMenuItem', '?ngModel'],
                priority: 210, // ensure that our post link runs after ngAria
                compile: function(templateEl, templateAttrs) {
                    if (templateAttrs.type == 'checkbox' || templateAttrs.type == 'radio') {
                        var text = templateEl[0].textContent;
                        var buttonEl = angular.element('<md-button type="button"></md-button>');
                        buttonEl.html(text);
                        buttonEl.attr('tabindex', '0');

                        templateEl.html('');
                        templateEl.append(angular.element('<md-icon md-svg-icon="check"></md-icon>'));
                        templateEl.append(buttonEl);
                        templateEl[0].classList.add('md-indent');

                        setDefault('role', (templateAttrs.type == 'checkbox') ? 'menuitemcheckbox' : 'menuitemradio', buttonEl);
                        angular.forEach(['ng-disabled'], moveAttrToButton);

                    } else {
                        setDefault('role', 'menuitem', templateEl[0].querySelector('md-button,button,a'));
                    }


                    return function(scope, el, attrs, ctrls) {
                        var ctrl = ctrls[0];
                        var ngModel = ctrls[1];
                        ctrl.init(ngModel);
                    };

                    function setDefault(attr, val, el) {
                        el = el || templateEl;
                        if (el instanceof angular.element) {
                            el = el[0];
                        }
                        if (!el.hasAttribute(attr)) {
                            el.setAttribute(attr, val);
                        }
                    }

                    function moveAttrToButton(attr) {
                        if (templateEl[0].hasAttribute(attr)) {
                            var val = templateEl[0].getAttribute(attr);
                            buttonEl[0].setAttribute(attr, val);
                            templateEl[0].removeAttribute(attr);
                        }
                    }
                },
                controller: 'MenuItemController'
            };
        }

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc directive
         * @name mdTab
         * @module material.components.tabs
         *
         * @restrict E
         *
         * @description
         * Use the `<md-tab>` a nested directive used within `<md-tabs>` to specify a tab with a **label** and optional *view content*.
         *
         * If the `label` attribute is not specified, then an optional `<md-tab-label>` tag can be used to specify more
         * complex tab header markup. If neither the **label** nor the **md-tab-label** are specified, then the nested
         * markup of the `<md-tab>` is used as the tab header markup.
         *
         * Please note that if you use `<md-tab-label>`, your content **MUST** be wrapped in the `<md-tab-body>` tag.  This
         * is to define a clear separation between the tab content and the tab label.
         *
         * This container is used by the TabsController to show/hide the active tab's content view. This synchronization is
         * automatically managed by the internal TabsController whenever the tab selection changes. Selection changes can
         * be initiated via data binding changes, programmatic invocation, or user gestures.
         *
         * @param {string=} label Optional attribute to specify a simple string as the tab label
         * @param {boolean=} ng-disabled If present, disabled tab selection.
         * @param {expression=} md-on-deselect Expression to be evaluated after the tab has been de-selected.
         * @param {expression=} md-on-select Expression to be evaluated after the tab has been selected.
         * @param {boolean=} md-active When true, sets the active tab.  Note: There can only be one active tab at a time.
         *
         *
         * @usage
         *
         * <hljs lang="html">
         * <md-tab label="" disabled="" md-on-select="" md-on-deselect="" >
         *   <h3>My Tab content</h3>
         * </md-tab>
         *
         * <md-tab >
         *   <md-tab-label>
         *     <h3>My Tab content</h3>
         *   </md-tab-label>
         *   <md-tab-body>
         *     <p>
         *       Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,
         *       totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae
         *       dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,
         *       sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.
         *     </p>
         *   </md-tab-body>
         * </md-tab>
         * </hljs>
         *
         */
        angular
            .module('material.components.tabs')
            .directive('mdTab', MdTab);

        function MdTab() {
            return {
                require: '^?mdTabs',
                terminal: true,
                compile: function(element, attr) {
                    var label = firstChild(element, 'md-tab-label'),
                        body = firstChild(element, 'md-tab-body');

                    if (label.length == 0) {
                        label = angular.element('<md-tab-label></md-tab-label>');
                        if (attr.label) label.text(attr.label);
                        else label.append(element.contents());

                        if (body.length == 0) {
                            var contents = element.contents().detach();
                            body = angular.element('<md-tab-body></md-tab-body>');
                            body.append(contents);
                        }
                    }

                    element.append(label);
                    if (body.html()) element.append(body);

                    return postLink;
                },
                scope: {
                    active: '=?mdActive',
                    disabled: '=?ngDisabled',
                    select: '&?mdOnSelect',
                    deselect: '&?mdOnDeselect'
                }
            };

            function postLink(scope, element, attr, ctrl) {
                if (!ctrl) return;
                var index = ctrl.getTabElementIndex(element),
                    body = firstChild(element, 'md-tab-body').remove(),
                    label = firstChild(element, 'md-tab-label').remove(),
                    data = ctrl.insertTab({
                        scope: scope,
                        parent: scope.$parent,
                        index: index,
                        element: element,
                        template: body.html(),
                        label: label.html()
                    }, index);

                scope.select = scope.select || angular.noop;
                scope.deselect = scope.deselect || angular.noop;

                scope.$watch('active', function(active) {
                    if (active) ctrl.select(data.getIndex());
                });
                scope.$watch('disabled', function() {
                    ctrl.refreshIndex();
                });
                scope.$watch(
                    function() {
                        return ctrl.getTabElementIndex(element);
                    },
                    function(newIndex) {
                        data.index = newIndex;
                        ctrl.updateTabOrder();
                    }
                );
                scope.$on('$destroy', function() {
                    ctrl.removeTab(data);
                });
            }

            function firstChild(element, tagName) {
                var children = element[0].children;
                for (var i = 0, len = children.length; i < len; i++) {
                    var child = children[i];
                    if (child.tagName === tagName.toUpperCase()) return angular.element(child);
                }
                return angular.element();
            }
        }

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.tabs')
            .directive('mdTabItem', MdTabItem);

        function MdTabItem() {
            return {
                require: '^?mdTabs',
                link: function link(scope, element, attr, ctrl) {
                    if (!ctrl) return;
                    ctrl.attachRipple(scope, element);
                }
            };
        }

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.tabs')
            .directive('mdTabLabel', MdTabLabel);

        function MdTabLabel() {
            return {
                terminal: true
            };
        }


    })();
    (function() {
        "use strict";

        angular.module('material.components.tabs')
            .directive('mdTabScroll', MdTabScroll);

        function MdTabScroll($parse) {
            return {
                restrict: 'A',
                compile: function($element, attr) {
                    var fn = $parse(attr.mdTabScroll, null, true);
                    return function ngEventHandler(scope, element) {
                        element.on('mousewheel', function(event) {
                            scope.$apply(function() {
                                fn(scope, {
                                    $event: event
                                });
                            });
                        });
                    };
                }
            }
        }
        MdTabScroll.$inject = ["$parse"];

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.tabs')
            .controller('MdTabsController', MdTabsController);

        /**
         * @ngInject
         */
        function MdTabsController($scope, $element, $window, $mdConstant, $mdTabInkRipple,
            $mdUtil, $animateCss, $attrs, $compile, $mdTheming) {
            // define private properties
            var ctrl = this,
                locked = false,
                elements = getElements(),
                queue = [],
                destroyed = false,
                loaded = false;

            // define one-way bindings
            defineOneWayBinding('stretchTabs', handleStretchTabs);

            // define public properties with change handlers
            defineProperty('focusIndex', handleFocusIndexChange, ctrl.selectedIndex || 0);
            defineProperty('offsetLeft', handleOffsetChange, 0);
            defineProperty('hasContent', handleHasContent, false);
            defineProperty('maxTabWidth', handleMaxTabWidth, getMaxTabWidth());
            defineProperty('shouldPaginate', handleShouldPaginate, false);

            // define boolean attributes
            defineBooleanAttribute('noInkBar', handleInkBar);
            defineBooleanAttribute('dynamicHeight', handleDynamicHeight);
            defineBooleanAttribute('noPagination');
            defineBooleanAttribute('swipeContent');
            defineBooleanAttribute('noDisconnect');
            defineBooleanAttribute('autoselect');
            defineBooleanAttribute('centerTabs', handleCenterTabs, false);
            defineBooleanAttribute('enableDisconnect');

            // define public properties
            ctrl.scope = $scope;
            ctrl.parent = $scope.$parent;
            ctrl.tabs = [];
            ctrl.lastSelectedIndex = null;
            ctrl.hasFocus = false;
            ctrl.lastClick = true;
            ctrl.shouldCenterTabs = shouldCenterTabs();

            // define public methods
            ctrl.updatePagination = $mdUtil.debounce(updatePagination, 100);
            ctrl.redirectFocus = redirectFocus;
            ctrl.attachRipple = attachRipple;
            ctrl.insertTab = insertTab;
            ctrl.removeTab = removeTab;
            ctrl.select = select;
            ctrl.scroll = scroll;
            ctrl.nextPage = nextPage;
            ctrl.previousPage = previousPage;
            ctrl.keydown = keydown;
            ctrl.canPageForward = canPageForward;
            ctrl.canPageBack = canPageBack;
            ctrl.refreshIndex = refreshIndex;
            ctrl.incrementIndex = incrementIndex;
            ctrl.getTabElementIndex = getTabElementIndex;
            ctrl.updateInkBarStyles = $mdUtil.debounce(updateInkBarStyles, 100);
            ctrl.updateTabOrder = $mdUtil.debounce(updateTabOrder, 100);

            init();

            /**
             * Perform initialization for the controller, setup events and watcher(s)
             */
            function init() {
                ctrl.selectedIndex = ctrl.selectedIndex || 0;
                compileTemplate();
                configureWatchers();
                bindEvents();
                $mdTheming($element);
                $mdUtil.nextTick(function() {
                    updateHeightFromContent();
                    adjustOffset();
                    updateInkBarStyles();
                    ctrl.tabs[ctrl.selectedIndex] && ctrl.tabs[ctrl.selectedIndex].scope.select();
                    loaded = true;
                    updatePagination();
                });
            }

            /**
             * Compiles the template provided by the user.  This is passed as an attribute from the tabs
             * directive's template function.
             */
            function compileTemplate() {
                var template = $attrs.$mdTabsTemplate,
                    element = angular.element(elements.data);
                element.html(template);
                $compile(element.contents())(ctrl.parent);
                delete $attrs.$mdTabsTemplate;
            }

            /**
             * Binds events used by the tabs component.
             */
            function bindEvents() {
                angular.element($window).on('resize', handleWindowResize);
                $scope.$on('$destroy', cleanup);
            }

            /**
             * Configure watcher(s) used by Tabs
             */
            function configureWatchers() {
                $scope.$watch('$mdTabsCtrl.selectedIndex', handleSelectedIndexChange);
            }

            /**
             * Creates a one-way binding manually rather than relying on Angular's isolated scope
             * @param key
             * @param handler
             */
            function defineOneWayBinding(key, handler) {
                var attr = $attrs.$normalize('md-' + key);
                if (handler) defineProperty(key, handler);
                $attrs.$observe(attr, function(newValue) {
                    ctrl[key] = newValue;
                });
            }

            /**
             * Defines boolean attributes with default value set to true.  (ie. md-stretch-tabs with no value
             * will be treated as being truthy)
             * @param key
             * @param handler
             */
            function defineBooleanAttribute(key, handler) {
                var attr = $attrs.$normalize('md-' + key);
                if (handler) defineProperty(key, handler);
                if ($attrs.hasOwnProperty(attr)) updateValue($attrs[attr]);
                $attrs.$observe(attr, updateValue);

                function updateValue(newValue) {
                    ctrl[key] = newValue !== 'false';
                }
            }

            /**
             * Remove any events defined by this controller
             */
            function cleanup() {
                destroyed = true;
                angular.element($window).off('resize', handleWindowResize);
            }

            // Change handlers

            /**
             * Toggles stretch tabs class and updates inkbar when tab stretching changes
             * @param stretchTabs
             */
            function handleStretchTabs(stretchTabs) {
                angular.element(elements.wrapper).toggleClass('md-stretch-tabs', shouldStretchTabs());
                updateInkBarStyles();
            }

            function handleCenterTabs(newValue) {
                ctrl.shouldCenterTabs = shouldCenterTabs();
            }

            function handleMaxTabWidth(newWidth, oldWidth) {
                if (newWidth !== oldWidth) {
                    $mdUtil.nextTick(ctrl.updateInkBarStyles);
                }
            }

            function handleShouldPaginate(newValue, oldValue) {
                if (newValue !== oldValue) {
                    ctrl.maxTabWidth = getMaxTabWidth();
                    ctrl.shouldCenterTabs = shouldCenterTabs();
                    $mdUtil.nextTick(function() {
                        ctrl.maxTabWidth = getMaxTabWidth();
                        adjustOffset(ctrl.selectedIndex);
                    });
                }
            }

            /**
             * Add/remove the `md-no-tab-content` class depending on `ctrl.hasContent`
             * @param hasContent
             */
            function handleHasContent(hasContent) {
                $element[hasContent ? 'removeClass' : 'addClass']('md-no-tab-content');
            }

            /**
             * Apply ctrl.offsetLeft to the paging element when it changes
             * @param left
             */
            function handleOffsetChange(left) {
                var newValue = ctrl.shouldCenterTabs ? '' : '-' + left + 'px';
                angular.element(elements.paging).css($mdConstant.CSS.TRANSFORM, 'translate3d(' + newValue + ', 0, 0)');
                $scope.$broadcast('$mdTabsPaginationChanged');
            }

            /**
             * Update the UI whenever `ctrl.focusIndex` is updated
             * @param newIndex
             * @param oldIndex
             */
            function handleFocusIndexChange(newIndex, oldIndex) {
                if (newIndex === oldIndex) return;
                if (!elements.tabs[newIndex]) return;
                adjustOffset();
                redirectFocus();
            }

            /**
             * Update the UI whenever the selected index changes. Calls user-defined select/deselect methods.
             * @param newValue
             * @param oldValue
             */
            function handleSelectedIndexChange(newValue, oldValue) {
                if (newValue === oldValue) return;

                ctrl.selectedIndex = getNearestSafeIndex(newValue);
                ctrl.lastSelectedIndex = oldValue;
                ctrl.updateInkBarStyles();
                updateHeightFromContent();
                adjustOffset(newValue);
                $scope.$broadcast('$mdTabsChanged');
                ctrl.tabs[oldValue] && ctrl.tabs[oldValue].scope.deselect();
                ctrl.tabs[newValue] && ctrl.tabs[newValue].scope.select();
            }

            function getTabElementIndex(tabEl) {
                var tabs = $element[0].getElementsByTagName('md-tab');
                return Array.prototype.indexOf.call(tabs, tabEl[0]);
            }

            /**
             * Queues up a call to `handleWindowResize` when a resize occurs while the tabs component is
             * hidden.
             */
            function handleResizeWhenVisible() {
                // if there is already a watcher waiting for resize, do nothing
                if (handleResizeWhenVisible.watcher) return;
                // otherwise, we will abuse the $watch function to check for visible
                handleResizeWhenVisible.watcher = $scope.$watch(function() {
                    // since we are checking for DOM size, we use $mdUtil.nextTick() to wait for after the DOM updates
                    $mdUtil.nextTick(function() {
                        // if the watcher has already run (ie. multiple digests in one cycle), do nothing
                        if (!handleResizeWhenVisible.watcher) return;

                        if ($element.prop('offsetParent')) {
                            handleResizeWhenVisible.watcher();
                            handleResizeWhenVisible.watcher = null;

                            handleWindowResize();
                        }
                    }, false);
                });
            }

            // Event handlers / actions

            /**
             * Handle user keyboard interactions
             * @param event
             */
            function keydown(event) {
                switch (event.keyCode) {
                    case $mdConstant.KEY_CODE.LEFT_ARROW:
                        event.preventDefault();
                        incrementIndex(-1, true);
                        break;
                    case $mdConstant.KEY_CODE.RIGHT_ARROW:
                        event.preventDefault();
                        incrementIndex(1, true);
                        break;
                    case $mdConstant.KEY_CODE.SPACE:
                    case $mdConstant.KEY_CODE.ENTER:
                        event.preventDefault();
                        if (!locked) ctrl.selectedIndex = ctrl.focusIndex;
                        break;
                }
                ctrl.lastClick = false;
            }

            /**
             * Update the selected index and trigger a click event on the original `md-tab` element in order
             * to fire user-added click events.
             * @param index
             */
            function select(index) {
                if (!locked) ctrl.focusIndex = ctrl.selectedIndex = index;
                ctrl.lastClick = true;
                // nextTick is required to prevent errors in user-defined click events
                $mdUtil.nextTick(function() {
                    ctrl.tabs[index].element.triggerHandler('click');
                }, false);
            }

            /**
             * When pagination is on, this makes sure the selected index is in view.
             * @param event
             */
            function scroll(event) {
                if (!ctrl.shouldPaginate) return;
                event.preventDefault();
                ctrl.offsetLeft = fixOffset(ctrl.offsetLeft - event.wheelDelta);
            }

            /**
             * Slides the tabs over approximately one page forward.
             */
            function nextPage() {
                var viewportWidth = elements.canvas.clientWidth,
                    totalWidth = viewportWidth + ctrl.offsetLeft,
                    i, tab;
                for (i = 0; i < elements.tabs.length; i++) {
                    tab = elements.tabs[i];
                    if (tab.offsetLeft + tab.offsetWidth > totalWidth) break;
                }
                ctrl.offsetLeft = fixOffset(tab.offsetLeft);
            }

            /**
             * Slides the tabs over approximately one page backward.
             */
            function previousPage() {
                var i, tab;
                for (i = 0; i < elements.tabs.length; i++) {
                    tab = elements.tabs[i];
                    if (tab.offsetLeft + tab.offsetWidth >= ctrl.offsetLeft) break;
                }
                ctrl.offsetLeft = fixOffset(tab.offsetLeft + tab.offsetWidth - elements.canvas.clientWidth);
            }

            /**
             * Update size calculations when the window is resized.
             */
            function handleWindowResize() {
                ctrl.lastSelectedIndex = ctrl.selectedIndex;
                ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);
                $mdUtil.nextTick(function() {
                    ctrl.updateInkBarStyles();
                    updatePagination();
                });
            }

            function handleInkBar(hide) {
                angular.element(elements.inkBar).toggleClass('ng-hide', hide);
            }

            /**
             * Toggle dynamic height class when value changes
             * @param value
             */
            function handleDynamicHeight(value) {
                $element.toggleClass('md-dynamic-height', value);
            }

            /**
             * Remove a tab from the data and select the nearest valid tab.
             * @param tabData
             */
            function removeTab(tabData) {
                if (destroyed) return;
                var selectedIndex = ctrl.selectedIndex,
                    tab = ctrl.tabs.splice(tabData.getIndex(), 1)[0];
                refreshIndex();
                // when removing a tab, if the selected index did not change, we have to manually trigger the
                //   tab select/deselect events
                if (ctrl.selectedIndex === selectedIndex) {
                    tab.scope.deselect();
                    ctrl.tabs[ctrl.selectedIndex] && ctrl.tabs[ctrl.selectedIndex].scope.select();
                }
                $mdUtil.nextTick(function() {
                    updatePagination();
                    ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);
                });
            }

            /**
             * Create an entry in the tabs array for a new tab at the specified index.
             * @param tabData
             * @param index
             * @returns {*}
             */
            function insertTab(tabData, index) {
                var hasLoaded = loaded;
                var proto = {
                        getIndex: function() {
                            return ctrl.tabs.indexOf(tab);
                        },
                        isActive: function() {
                            return this.getIndex() === ctrl.selectedIndex;
                        },
                        isLeft: function() {
                            return this.getIndex() < ctrl.selectedIndex;
                        },
                        isRight: function() {
                            return this.getIndex() > ctrl.selectedIndex;
                        },
                        shouldRender: function() {
                            return !ctrl.noDisconnect || this.isActive();
                        },
                        hasFocus: function() {
                            return !ctrl.lastClick && ctrl.hasFocus && this.getIndex() === ctrl.focusIndex;
                        },
                        id: $mdUtil.nextUid()
                    },
                    tab = angular.extend(proto, tabData);
                if (angular.isDefined(index)) {
                    ctrl.tabs.splice(index, 0, tab);
                } else {
                    ctrl.tabs.push(tab);
                }
                processQueue();
                updateHasContent();
                $mdUtil.nextTick(function() {
                    updatePagination();
                    // if autoselect is enabled, select the newly added tab
                    if (hasLoaded && ctrl.autoselect) $mdUtil.nextTick(function() {
                        $mdUtil.nextTick(function() {
                            select(ctrl.tabs.indexOf(tab));
                        });
                    });
                });
                return tab;
            }

            // Getter methods

            /**
             * Gathers references to all of the DOM elements used by this controller.
             * @returns {{}}
             */
            function getElements() {
                var elements = {};

                // gather tab bar elements
                elements.wrapper = $element[0].getElementsByTagName('md-tabs-wrapper')[0];
                elements.data = $element[0].getElementsByTagName('md-tab-data')[0];
                elements.canvas = elements.wrapper.getElementsByTagName('md-tabs-canvas')[0];
                elements.paging = elements.canvas.getElementsByTagName('md-pagination-wrapper')[0];
                elements.tabs = elements.paging.getElementsByTagName('md-tab-item');
                elements.dummies = elements.canvas.getElementsByTagName('md-dummy-tab');
                elements.inkBar = elements.paging.getElementsByTagName('md-ink-bar')[0];

                // gather tab content elements
                elements.contentsWrapper = $element[0].getElementsByTagName('md-tabs-content-wrapper')[0];
                elements.contents = elements.contentsWrapper.getElementsByTagName('md-tab-content');

                return elements;
            }

            /**
             * Determines whether or not the left pagination arrow should be enabled.
             * @returns {boolean}
             */
            function canPageBack() {
                return ctrl.offsetLeft > 0;
            }

            /**
             * Determines whether or not the right pagination arrow should be enabled.
             * @returns {*|boolean}
             */
            function canPageForward() {
                var lastTab = elements.tabs[elements.tabs.length - 1];
                return lastTab && lastTab.offsetLeft + lastTab.offsetWidth > elements.canvas.clientWidth +
                    ctrl.offsetLeft;
            }

            /**
             * Determines if the UI should stretch the tabs to fill the available space.
             * @returns {*}
             */
            function shouldStretchTabs() {
                switch (ctrl.stretchTabs) {
                    case 'always':
                        return true;
                    case 'never':
                        return false;
                    default:
                        return !ctrl.shouldPaginate && $window.matchMedia('(max-width: 600px)').matches;
                }
            }

            /**
             * Determines if the tabs should appear centered.
             * @returns {string|boolean}
             */
            function shouldCenterTabs() {
                return ctrl.centerTabs && !ctrl.shouldPaginate;
            }

            /**
             * Determines if pagination is necessary to display the tabs within the available space.
             * @returns {boolean}
             */
            function shouldPaginate() {
                if (ctrl.noPagination || !loaded) return false;
                var canvasWidth = $element.prop('clientWidth');
                angular.forEach(getElements().dummies, function(tab) {
                    canvasWidth -= tab.offsetWidth;
                });
                return canvasWidth < 0;
            }

            /**
             * Finds the nearest tab index that is available.  This is primarily used for when the active
             * tab is removed.
             * @param newIndex
             * @returns {*}
             */
            function getNearestSafeIndex(newIndex) {
                if (newIndex === -1) return -1;
                var maxOffset = Math.max(ctrl.tabs.length - newIndex, newIndex),
                    i, tab;
                for (i = 0; i <= maxOffset; i++) {
                    tab = ctrl.tabs[newIndex + i];
                    if (tab && (tab.scope.disabled !== true)) return tab.getIndex();
                    tab = ctrl.tabs[newIndex - i];
                    if (tab && (tab.scope.disabled !== true)) return tab.getIndex();
                }
                return newIndex;
            }

            // Utility methods

            /**
             * Defines a property using a getter and setter in order to trigger a change handler without
             * using `$watch` to observe changes.
             * @param key
             * @param handler
             * @param value
             */
            function defineProperty(key, handler, value) {
                Object.defineProperty(ctrl, key, {
                    get: function() {
                        return value;
                    },
                    set: function(newValue) {
                        var oldValue = value;
                        value = newValue;
                        handler && handler(newValue, oldValue);
                    }
                });
            }

            /**
             * Updates whether or not pagination should be displayed.
             */
            function updatePagination() {
                if (!shouldStretchTabs()) updatePagingWidth();
                ctrl.maxTabWidth = getMaxTabWidth();
                ctrl.shouldPaginate = shouldPaginate();
            }

            function updatePagingWidth() {
                var width = 1;
                angular.forEach(getElements().dummies, function(element) {
                    width += Math.ceil(element.offsetWidth);
                });
                angular.element(elements.paging).css('width', width + 'px');
            }

            function getMaxTabWidth() {
                return $element.prop('clientWidth');
            }

            /**
             * Re-orders the tabs and updates the selected and focus indexes to their new positions.
             * This is triggered by `tabDirective.js` when the user's tabs have been re-ordered.
             */
            function updateTabOrder() {
                var selectedItem = ctrl.tabs[ctrl.selectedIndex],
                    focusItem = ctrl.tabs[ctrl.focusIndex];
                ctrl.tabs = ctrl.tabs.sort(function(a, b) {
                    return a.index - b.index;
                });
                ctrl.selectedIndex = ctrl.tabs.indexOf(selectedItem);
                ctrl.focusIndex = ctrl.tabs.indexOf(focusItem);
            }

            /**
             * This moves the selected or focus index left or right.  This is used by the keydown handler.
             * @param inc
             */
            function incrementIndex(inc, focus) {
                var newIndex,
                    key = focus ? 'focusIndex' : 'selectedIndex',
                    index = ctrl[key];
                for (newIndex = index + inc; ctrl.tabs[newIndex] && ctrl.tabs[newIndex].scope.disabled; newIndex += inc) {}
                if (ctrl.tabs[newIndex]) {
                    ctrl[key] = newIndex;
                }
            }

            /**
             * This is used to forward focus to dummy elements.  This method is necessary to avoid animation
             * issues when attempting to focus an item that is out of view.
             */
            function redirectFocus() {
                getElements().dummies[ctrl.focusIndex].focus();
            }

            /**
             * Forces the pagination to move the focused tab into view.
             */
            function adjustOffset(index) {
                if (index == null) index = ctrl.focusIndex;
                if (!elements.tabs[index]) return;
                if (ctrl.shouldCenterTabs) return;
                var tab = elements.tabs[index],
                    left = tab.offsetLeft,
                    right = tab.offsetWidth + left;
                ctrl.offsetLeft = Math.max(ctrl.offsetLeft, fixOffset(right - elements.canvas.clientWidth + 32 * 2));
                ctrl.offsetLeft = Math.min(ctrl.offsetLeft, fixOffset(left));
            }

            /**
             * Iterates through all queued functions and clears the queue.  This is used for functions that
             * are called before the UI is ready, such as size calculations.
             */
            function processQueue() {
                queue.forEach(function(func) {
                    $mdUtil.nextTick(func);
                });
                queue = [];
            }

            /**
             * Determines if the tab content area is needed.
             */
            function updateHasContent() {
                var hasContent = false;
                angular.forEach(ctrl.tabs, function(tab) {
                    if (tab.template) hasContent = true;
                });
                ctrl.hasContent = hasContent;
            }

            /**
             * Moves the indexes to their nearest valid values.
             */
            function refreshIndex() {
                ctrl.selectedIndex = getNearestSafeIndex(ctrl.selectedIndex);
                ctrl.focusIndex = getNearestSafeIndex(ctrl.focusIndex);
            }

            /**
             * Calculates the content height of the current tab.
             * @returns {*}
             */
            function updateHeightFromContent() {
                if (!ctrl.dynamicHeight) return $element.css('height', '');
                if (!ctrl.tabs.length) return queue.push(updateHeightFromContent);

                var tabContent = elements.contents[ctrl.selectedIndex],
                    contentHeight = tabContent ? tabContent.offsetHeight : 0,
                    tabsHeight = elements.wrapper.offsetHeight,
                    newHeight = contentHeight + tabsHeight,
                    currentHeight = $element.prop('clientHeight');

                if (currentHeight === newHeight) return;

                // Adjusts calculations for when the buttons are bottom-aligned since this relies on absolute
                // positioning.  This should probably be cleaned up if a cleaner solution is possible.
                if ($element.attr('md-align-tabs') === 'bottom') {
                    currentHeight -= tabsHeight;
                    newHeight -= tabsHeight;
                    // Need to include bottom border in these calculations
                    if ($element.attr('md-border-bottom') !== undefined) ++currentHeight;
                }

                // Lock during animation so the user can't change tabs
                locked = true;

                var fromHeight = {
                        height: currentHeight + 'px'
                    },
                    toHeight = {
                        height: newHeight + 'px'
                    };

                // Set the height to the current, specific pixel height to fix a bug on iOS where the height
                // first animates to 0, then back to the proper height causing a visual glitch
                $element.css(fromHeight);

                // Animate the height from the old to the new
                $animateCss($element, {
                    from: fromHeight,
                    to: toHeight,
                    easing: 'cubic-bezier(0.35, 0, 0.25, 1)',
                    duration: 0.5
                }).start().done(function() {
                    // Then (to fix the same iOS issue as above), disable transitions and remove the specific
                    // pixel height so the height can size with browser width/content changes, etc.
                    $element.css({
                        transition: 'none',
                        height: ''
                    });

                    // In the next tick, re-allow transitions (if we do it all at once, $element.css is "smart"
                    // enough to batch it for us instead of doing it immediately, which undoes the original
                    // transition: none)
                    $mdUtil.nextTick(function() {
                        $element.css('transition', '');
                    });

                    // And unlock so tab changes can occur
                    locked = false;
                });
            }

            /**
             * Repositions the ink bar to the selected tab.
             * @returns {*}
             */
            function updateInkBarStyles() {
                if (!elements.tabs[ctrl.selectedIndex]) {
                    angular.element(elements.inkBar).css({
                        left: 'auto',
                        right: 'auto'
                    });
                    return;
                }
                if (!ctrl.tabs.length) return queue.push(ctrl.updateInkBarStyles);
                // if the element is not visible, we will not be able to calculate sizes until it is
                // we should treat that as a resize event rather than just updating the ink bar
                if (!$element.prop('offsetParent')) return handleResizeWhenVisible();
                var index = ctrl.selectedIndex,
                    totalWidth = elements.paging.offsetWidth,
                    tab = elements.tabs[index],
                    left = tab.offsetLeft,
                    right = totalWidth - left - tab.offsetWidth,
                    tabWidth;
                if (ctrl.shouldCenterTabs) {
                    tabWidth = Array.prototype.slice.call(elements.tabs).reduce(function(value, element) {
                        return value + element.offsetWidth;
                    }, 0);
                    if (totalWidth > tabWidth) $mdUtil.nextTick(updateInkBarStyles, false);
                }
                updateInkBarClassName();
                angular.element(elements.inkBar).css({
                    left: left + 'px',
                    right: right + 'px'
                });
            }

            /**
             * Adds left/right classes so that the ink bar will animate properly.
             */
            function updateInkBarClassName() {
                var newIndex = ctrl.selectedIndex,
                    oldIndex = ctrl.lastSelectedIndex,
                    ink = angular.element(elements.inkBar);
                if (!angular.isNumber(oldIndex)) return;
                ink
                    .toggleClass('md-left', newIndex < oldIndex)
                    .toggleClass('md-right', newIndex > oldIndex);
            }

            /**
             * Takes an offset value and makes sure that it is within the min/max allowed values.
             * @param value
             * @returns {*}
             */
            function fixOffset(value) {
                if (!elements.tabs.length || !ctrl.shouldPaginate) return 0;
                var lastTab = elements.tabs[elements.tabs.length - 1],
                    totalWidth = lastTab.offsetLeft + lastTab.offsetWidth;
                value = Math.max(0, value);
                value = Math.min(totalWidth - elements.canvas.clientWidth, value);
                return value;
            }

            /**
             * Attaches a ripple to the tab item element.
             * @param scope
             * @param element
             */
            function attachRipple(scope, element) {
                var options = {
                    colorElement: angular.element(elements.inkBar)
                };
                $mdTabInkRipple.attach(scope, element, options);
            }
        }
        MdTabsController.$inject = ["$scope", "$element", "$window", "$mdConstant", "$mdTabInkRipple", "$mdUtil", "$animateCss", "$attrs", "$compile", "$mdTheming"];

    })();
    (function() {
        "use strict";

        /**
         * @ngdoc directive
         * @name mdTabs
         * @module material.components.tabs
         *
         * @restrict E
         *
         * @description
         * The `<md-tabs>` directive serves as the container for 1..n `<md-tab>` child directives to produces a Tabs components.
         * In turn, the nested `<md-tab>` directive is used to specify a tab label for the **header button** and a [optional] tab view
         * content that will be associated with each tab button.
         *
         * Below is the markup for its simplest usage:
         *
         *  <hljs lang="html">
         *  <md-tabs>
         *    <md-tab label="Tab #1"></md-tab>
         *    <md-tab label="Tab #2"></md-tab>
         *    <md-tab label="Tab #3"></md-tab>
         *  </md-tabs>
         *  </hljs>
         *
         * Tabs supports three (3) usage scenarios:
         *
         *  1. Tabs (buttons only)
         *  2. Tabs with internal view content
         *  3. Tabs with external view content
         *
         * **Tab-only** support is useful when tab buttons are used for custom navigation regardless of any other components, content, or views.
         * **Tabs with internal views** are the traditional usages where each tab has associated view content and the view switching is managed internally by the Tabs component.
         * **Tabs with external view content** is often useful when content associated with each tab is independently managed and data-binding notifications announce tab selection changes.
         *
         * Additional features also include:
         *
         * *  Content can include any markup.
         * *  If a tab is disabled while active/selected, then the next tab will be auto-selected.
         *
         * ### Explanation of tab stretching
         *
         * Initially, tabs will have an inherent size.  This size will either be defined by how much space is needed to accommodate their text or set by the user through CSS.  Calculations will be based on this size.
         *
         * On mobile devices, tabs will be expanded to fill the available horizontal space.  When this happens, all tabs will become the same size.
         *
         * On desktops, by default, stretching will never occur.
         *
         * This default behavior can be overridden through the `md-stretch-tabs` attribute.  Here is a table showing when stretching will occur:
         *
         * `md-stretch-tabs` | mobile    | desktop
         * ------------------|-----------|--------
         * `auto`            | stretched | ---
         * `always`          | stretched | stretched
         * `never`           | ---       | ---
         *
         * @param {integer=} md-selected Index of the active/selected tab
         * @param {boolean=} md-no-ink If present, disables ink ripple effects.
         * @param {boolean=} md-no-ink-bar If present, disables the selection ink bar.
         * @param {string=}  md-align-tabs Attribute to indicate position of tab buttons: `bottom` or `top`; default is `top`
         * @param {string=} md-stretch-tabs Attribute to indicate whether or not to stretch tabs: `auto`, `always`, or `never`; default is `auto`
         * @param {boolean=} md-dynamic-height When enabled, the tab wrapper will resize based on the contents of the selected tab
         * @param {boolean=} md-center-tabs When enabled, tabs will be centered provided there is no need for pagination
         * @param {boolean=} md-no-pagination When enabled, pagination will remain off
         * @param {boolean=} md-swipe-content When enabled, swipe gestures will be enabled for the content area to jump between tabs
         * @param {boolean=} md-enable-disconnect When enabled, scopes will be disconnected for tabs that are not being displayed.  This provides a performance boost, but may also cause unexpected issues and is not recommended for most users.
         * @param {boolean=} md-autoselect When present, any tabs added after the initial load will be automatically selected
         *
         * @usage
         * <hljs lang="html">
         * <md-tabs md-selected="selectedIndex" >
         *   <img ng-src="img/angular.png" class="centered">
         *   <md-tab
         *       ng-repeat="tab in tabs | orderBy:predicate:reversed"
         *       md-on-select="onTabSelected(tab)"
         *       md-on-deselect="announceDeselected(tab)"
         *       ng-disabled="tab.disabled">
         *     <md-tab-label>
         *       {{tab.title}}
         *       <img src="img/removeTab.png" ng-click="removeTab(tab)" class="delete">
         *     </md-tab-label>
         *     <md-tab-body>
         *       {{tab.content}}
         *     </md-tab-body>
         *   </md-tab>
         * </md-tabs>
         * </hljs>
         *
         */
        angular
            .module('material.components.tabs')
            .directive('mdTabs', MdTabs);

        function MdTabs() {
            return {
                scope: {
                    selectedIndex: '=?mdSelected'
                },
                template: function(element, attr) {
                    attr["$mdTabsTemplate"] = element.html();
                    return '' +
                        '<md-tabs-wrapper> ' +
                        '<md-tab-data></md-tab-data> ' +
                        '<md-prev-button ' +
                        'tabindex="-1" ' +
                        'role="button" ' +
                        'aria-label="Previous Page" ' +
                        'aria-disabled="{{!$mdTabsCtrl.canPageBack()}}" ' +
                        'ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }" ' +
                        'ng-if="$mdTabsCtrl.shouldPaginate" ' +
                        'ng-click="$mdTabsCtrl.previousPage()"> ' +
                        '<md-icon md-svg-icon="md-tabs-arrow"></md-icon> ' +
                        '</md-prev-button> ' +
                        '<md-next-button ' +
                        'tabindex="-1" ' +
                        'role="button" ' +
                        'aria-label="Next Page" ' +
                        'aria-disabled="{{!$mdTabsCtrl.canPageForward()}}" ' +
                        'ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }" ' +
                        'ng-if="$mdTabsCtrl.shouldPaginate" ' +
                        'ng-click="$mdTabsCtrl.nextPage()"> ' +
                        '<md-icon md-svg-icon="md-tabs-arrow"></md-icon> ' +
                        '</md-next-button> ' +
                        '<md-tabs-canvas ' +
                        'tabindex="{{ $mdTabsCtrl.hasFocus ? -1 : 0 }}" ' +
                        'aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}" ' +
                        'ng-focus="$mdTabsCtrl.redirectFocus()" ' +
                        'ng-class="{ ' +
                        '\'md-paginated\': $mdTabsCtrl.shouldPaginate, ' +
                        '\'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs ' +
                        '}" ' +
                        'ng-keydown="$mdTabsCtrl.keydown($event)" ' +
                        'role="tablist"> ' +
                        '<md-pagination-wrapper ' +
                        'ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }" ' +
                        'md-tab-scroll="$mdTabsCtrl.scroll($event)"> ' +
                        '<md-tab-item ' +
                        'tabindex="-1" ' +
                        'class="md-tab" ' +
                        'style="max-width: {{ $mdTabsCtrl.maxTabWidth + \'px\' }}" ' +
                        'ng-repeat="tab in $mdTabsCtrl.tabs" ' +
                        'role="tab" ' +
                        'aria-controls="tab-content-{{::tab.id}}" ' +
                        'aria-selected="{{tab.isActive()}}" ' +
                        'aria-disabled="{{tab.scope.disabled || \'false\'}}" ' +
                        'ng-click="$mdTabsCtrl.select(tab.getIndex())" ' +
                        'ng-class="{ ' +
                        '\'md-active\':    tab.isActive(), ' +
                        '\'md-focused\':   tab.hasFocus(), ' +
                        '\'md-disabled\':  tab.scope.disabled ' +
                        '}" ' +
                        'ng-disabled="tab.scope.disabled" ' +
                        'md-swipe-left="$mdTabsCtrl.nextPage()" ' +
                        'md-swipe-right="$mdTabsCtrl.previousPage()" ' +
                        'md-tabs-template="::tab.label" ' +
                        'md-scope="::tab.parent"></md-tab-item> ' +
                        '<md-ink-bar></md-ink-bar> ' +
                        '</md-pagination-wrapper> ' +
                        '<div class="md-visually-hidden md-dummy-wrapper"> ' +
                        '<md-dummy-tab ' +
                        'class="md-tab" ' +
                        'tabindex="-1" ' +
                        'id="tab-item-{{::tab.id}}" ' +
                        'role="tab" ' +
                        'aria-controls="tab-content-{{::tab.id}}" ' +
                        'aria-selected="{{tab.isActive()}}" ' +
                        'aria-disabled="{{tab.scope.disabled || \'false\'}}" ' +
                        'ng-focus="$mdTabsCtrl.hasFocus = true" ' +
                        'ng-blur="$mdTabsCtrl.hasFocus = false" ' +
                        'ng-repeat="tab in $mdTabsCtrl.tabs" ' +
                        'md-tabs-template="::tab.label" ' +
                        'md-scope="::tab.parent"></md-dummy-tab> ' +
                        '</div> ' +
                        '</md-tabs-canvas> ' +
                        '</md-tabs-wrapper> ' +
                        '<md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent && $mdTabsCtrl.selectedIndex >= 0"> ' +
                        '<md-tab-content ' +
                        'id="tab-content-{{::tab.id}}" ' +
                        'role="tabpanel" ' +
                        'aria-labelledby="tab-item-{{::tab.id}}" ' +
                        'md-swipe-left="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(1)" ' +
                        'md-swipe-right="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(-1)" ' +
                        'ng-if="$mdTabsCtrl.hasContent" ' +
                        'ng-repeat="(index, tab) in $mdTabsCtrl.tabs" ' +
                        'ng-class="{ ' +
                        '\'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null, ' +
                        '\'md-active\':        tab.isActive(), ' +
                        '\'md-left\':          tab.isLeft(), ' +
                        '\'md-right\':         tab.isRight(), ' +
                        '\'md-no-scroll\':     $mdTabsCtrl.dynamicHeight ' +
                        '}"> ' +
                        '<div ' +
                        'md-tabs-template="::tab.template" ' +
                        'md-connected-if="tab.isActive()" ' +
                        'md-scope="::tab.parent" ' +
                        'ng-if="$mdTabsCtrl.enableDisconnect || tab.shouldRender()"></div> ' +
                        '</md-tab-content> ' +
                        '</md-tabs-content-wrapper>';
                },
                controller: 'MdTabsController',
                controllerAs: '$mdTabsCtrl',
                bindToController: true
            };
        }

    })();
    (function() {
        "use strict";

        angular
            .module('material.components.tabs')
            .directive('mdTabsTemplate', MdTabsTemplate);

        function MdTabsTemplate($compile, $mdUtil) {
            return {
                restrict: 'A',
                link: link,
                scope: {
                    template: '=mdTabsTemplate',
                    connected: '=?mdConnectedIf',
                    compileScope: '=mdScope'
                },
                require: '^?mdTabs'
            };

            function link(scope, element, attr, ctrl) {
                if (!ctrl) return;
                var compileScope = ctrl.enableDisconnect ? scope.compileScope.$new() : scope.compileScope;
                element.html(scope.template);
                $compile(element.contents())(compileScope);
                element.on('DOMSubtreeModified', function() {
                    ctrl.updatePagination();
                    ctrl.updateInkBarStyles();
                });
                return $mdUtil.nextTick(handleScope);

                function handleScope() {
                    scope.$watch('connected', function(value) {
                        value === false ? disconnect() : reconnect();
                    });
                    scope.$on('$destroy', reconnect);
                }

                function disconnect() {
                    if (ctrl.enableDisconnect) $mdUtil.disconnectScope(compileScope);
                }

                function reconnect() {
                    if (ctrl.enableDisconnect) $mdUtil.reconnectScope(compileScope);
                }
            }
        }
        MdTabsTemplate.$inject = ["$compile", "$mdUtil"];

    })();
    (function() {
        angular.module("material.core").constant("$MD_THEME_CSS", "md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions-container.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions-container.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions-container.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-backdrop {  background-color: '{{background-900-0.0}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme {    background-color: '{{background-900-1.0}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]):hover,.md-button.md-THEME_NAME-theme:not([disabled]):hover {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused,.md-button.md-THEME_NAME-theme:not([disabled]).md-focused {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover,.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {  background-color: transparent; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab md-icon,  .md-button.md-THEME_NAME-theme.md-fab md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-primary,.md-button.md-THEME_NAME-theme.md-primary {  color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab,  .md-button.md-THEME_NAME-theme.md-primary.md-raised,  .md-button.md-THEME_NAME-theme.md-primary.md-fab {    color: '{{primary-contrast}}';    background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {      color: '{{primary-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {      background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {      background-color: '{{primary-600}}'; }  a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {    color: '{{primary-color}}'; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-raised,.md-button.md-THEME_NAME-theme.md-raised {  color: '{{background-900}}';  background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon {    color: '{{background-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {    background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {    background-color: '{{background-200}}'; }a.md-button.md-THEME_NAME-theme.md-warn,.md-button.md-THEME_NAME-theme.md-warn {  color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab,  .md-button.md-THEME_NAME-theme.md-warn.md-raised,  .md-button.md-THEME_NAME-theme.md-warn.md-fab {    color: '{{warn-contrast}}';    background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {      color: '{{warn-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {      background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {      background-color: '{{warn-700}}'; }  a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {    color: '{{warn-color}}'; }a.md-button.md-THEME_NAME-theme.md-accent,.md-button.md-THEME_NAME-theme.md-accent {  color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab,  .md-button.md-THEME_NAME-theme.md-accent.md-raised,  .md-button.md-THEME_NAME-theme.md-accent.md-fab {    color: '{{accent-contrast}}';    background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {      background-color: '{{accent-700}}'; }  a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {    color: '{{accent-color}}'; }a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled],.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-accent[disabled],.md-button.md-THEME_NAME-theme.md-warn[disabled] {  color: '{{foreground-3}}' !important;  cursor: default; }  a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon,  .md-button.md-THEME_NAME-theme[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {    color: '{{foreground-3}}'; }a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled] {  background-color: '{{foreground-4}}'; }a.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme[disabled] {  background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }  md-card.md-THEME_NAME-theme md-card-header md-card-avatar md-icon {    color: '{{background-color}}';    background-color: '{{foreground-3}}'; }  md-card.md-THEME_NAME-theme md-card-header md-card-header-text .md-subhead {    color: '{{foreground-2}}'; }  md-card.md-THEME_NAME-theme md-card-title md-card-title-text:not(:only-child) .md-subhead {    color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{accent-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{primary-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-content.md-THEME_NAME-theme {  color: '{{foreground-1}}';  background-color: '{{background-color}}'; }/** Theme styles for mdCalendar. */.md-calendar.md-THEME_NAME-theme {  color: '{{foreground-1}}'; }  .md-calendar.md-THEME_NAME-theme tr:last-child td {    border-bottom-color: '{{background-200}}'; }.md-THEME_NAME-theme .md-calendar-day-header {  background: '{{background-hue-1}}';  color: '{{foreground-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today .md-calendar-date-selection-indicator {  border: 1px solid '{{primary-500}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today.md-calendar-date-disabled {  color: '{{primary-500-0.6}}'; }.md-THEME_NAME-theme .md-calendar-date.md-focus .md-calendar-date-selection-indicator {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date-selection-indicator:hover {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-selected-date .md-calendar-date-selection-indicator,.md-THEME_NAME-theme .md-calendar-date.md-focus.md-calendar-selected-date .md-calendar-date-selection-indicator {  background: '{{primary-500}}';  color: '{{primary-500-contrast}}';  border-color: transparent; }.md-THEME_NAME-theme .md-calendar-date-disabled,.md-THEME_NAME-theme .md-calendar-month-label-disabled {  color: '{{foreground-3}}'; }/** Theme styles for mdDatepicker. */md-datepicker.md-THEME_NAME-theme {  background: '{{background-color}}'; }.md-THEME_NAME-theme .md-datepicker-input {  color: '{{background-contrast}}';  background: '{{background-color}}'; }  .md-THEME_NAME-theme .md-datepicker-input::-webkit-input-placeholder, .md-THEME_NAME-theme .md-datepicker-input::-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }.md-THEME_NAME-theme .md-datepicker-input-container {  border-bottom-color: '{{background-300}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-focused {    border-bottom-color: '{{primary-500}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-invalid {    border-bottom-color: '{{warn-A700}}'; }.md-THEME_NAME-theme .md-datepicker-calendar-pane {  border-color: '{{background-300}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button .md-datepicker-expand-triangle {  border-top-color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button:hover .md-datepicker-expand-triangle {  border-top-color: '{{foreground-2}}'; }.md-THEME_NAME-theme .md-datepicker-open .md-datepicker-calendar-icon {  fill: '{{primary-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar,.md-THEME_NAME-theme .md-datepicker-input-mask-opaque {  background: '{{background-color}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions, md-dialog.md-THEME_NAME-theme.md-content-overflow md-dialog-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }.layout-row > md-divider.md-THEME_NAME-theme {  border-right-color: '{{foreground-4}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label,md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-messages] :not(.md-char-counter),md-input-container.md-THEME_NAME-theme ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme data-ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme x-ng-message :not(.md-char-counter),md-input-container.md-THEME_NAME-theme [ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message] :not(.md-char-counter),md-input-container.md-THEME_NAME-theme [ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message-exp] :not(.md-char-counter) {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message,md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message],md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message-exp],md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled],md-input-container.md-THEME_NAME-theme .md-input [disabled] {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > .md-avatar-icon {  background-color: '{{foreground-3}}';  color: '{{background-color}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-menu-bar.md-THEME_NAME-theme > button.md-button {  color: '{{foreground-2}}';  border-radius: 2px; }md-menu-bar.md-THEME_NAME-theme md-menu.md-open > button, md-menu-bar.md-THEME_NAME-theme md-menu > button:focus {  outline: none;  background: '{{background-200}}'; }md-menu-bar.md-THEME_NAME-theme.md-open:not(.md-keyboard-mode) md-menu:hover > button {  background-color: '{{ background-500-0.2}}'; }md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:hover,md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:focus {  background: transparent; }md-menu-content.md-THEME_NAME-theme .md-menu > .md-button:after {  color: '{{foreground-2}}'; }md-menu-content.md-THEME_NAME-theme .md-menu.md-open > .md-button {  background-color: '{{ background-500-0.2}}'; }md-toolbar.md-THEME_NAME-theme.md-menu-toolbar {  background-color: '{{background-color}}';  color: '{{foreground-1}}'; }  md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler {    background-color: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler md-icon {      color: '{{primary-contrast}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient(\"{{warn-100}}\" 0%, \"{{warn-100}}\" 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient(\"{{accent-100}}\" 0%, \"{{accent-100}}\" 16%, transparent 42%); }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled],md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme .md-checked .md-ink-ripple {  color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-primary .md-checked:not([disabled]) .md-ink-ripple, md-radio-group.md-THEME_NAME-theme .md-checked:not([disabled]).md-primary .md-ink-ripple {  color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme .md-checked.md-primary .md-ink-ripple {  color: '{{warn-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-primary .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-warn .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-warn .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  border-bottom-color: transparent;  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-select.md-THEME_NAME-theme .md-select-value {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-value {  color: '{{warn-A700}}' !important;  border-bottom-color: '{{warn-A700}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value.md-select-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-value {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-value {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-option[disabled] {  color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([disabled]):not([selected]) {  background: '{{background-200}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-focus-ring {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-focus-ring {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-ink-ripple {  color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-ink-ripple {  color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-ink-ripple {  color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled], md-tabs.md-THEME_NAME-theme .md-tab[disabled] md-icon {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-active md-icon, md-tabs.md-THEME_NAME-theme .md-tab.md-focused, md-tabs.md-THEME_NAME-theme .md-tab.md-focused md-icon {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toast.md-THEME_NAME-theme .md-toast-content {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-toast-content .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) .md-button:not(.md-raised) {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-content {    background-color: '{{foreground-2}}'; }");
    })();


})(window, window.angular);;
window.ngMaterial = {
    version: {
        full: "1.0.1"
    }
};
/**
 * @license AngularJS v1.4.8
 * (c) 2010-2015 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {
    'use strict';

    /* jshint ignore:start */
    // this code is in the core, but not in angular-messages.js
    var isArray = angular.isArray;
    var forEach = angular.forEach;
    var isString = angular.isString;
    var jqLite = angular.element;
    /* jshint ignore:end */

    /**
     * @ngdoc module
     * @name ngMessages
     * @description
     *
     * The `ngMessages` module provides enhanced support for displaying messages within templates
     * (typically within forms or when rendering message objects that return key/value data).
     * Instead of relying on JavaScript code and/or complex ng-if statements within your form template to
     * show and hide error messages specific to the state of an input field, the `ngMessages` and
     * `ngMessage` directives are designed to handle the complexity, inheritance and priority
     * sequencing based on the order of how the messages are defined in the template.
     *
     * Currently, the ngMessages module only contains the code for the `ngMessages`, `ngMessagesInclude`
     * `ngMessage` and `ngMessageExp` directives.
     *
     * # Usage
     * The `ngMessages` directive listens on a key/value collection which is set on the ngMessages attribute.
     * Since the {@link ngModel ngModel} directive exposes an `$error` object, this error object can be
     * used with `ngMessages` to display control error messages in an easier way than with just regular angular
     * template directives.
     *
     * ```html
     * <form name="myForm">
     *   <label>
     *     Enter text:
     *     <input type="text" ng-model="field" name="myField" required minlength="5" />
     *   </label>
     *   <div ng-messages="myForm.myField.$error" role="alert">
     *     <div ng-message="required">You did not enter a field</div>
     *     <div ng-message="minlength, maxlength">
     *       Your email must be between 5 and 100 characters long
     *     </div>
     *   </div>
     * </form>
     * ```
     *
     * Now whatever key/value entries are present within the provided object (in this case `$error`) then
     * the ngMessages directive will render the inner first ngMessage directive (depending if the key values
     * match the attribute value present on each ngMessage directive). In other words, if your errors
     * object contains the following data:
     *
     * ```javascript
     * <!-- keep in mind that ngModel automatically sets these error flags -->
     * myField.$error = { minlength : true, required : true };
     * ```
     *
     * Then the `required` message will be displayed first. When required is false then the `minlength` message
     * will be displayed right after (since these messages are ordered this way in the template HTML code).
     * The prioritization of each message is determined by what order they're present in the DOM.
     * Therefore, instead of having custom JavaScript code determine the priority of what errors are
     * present before others, the presentation of the errors are handled within the template.
     *
     * By default, ngMessages will only display one error at a time. However, if you wish to display all
     * messages then the `ng-messages-multiple` attribute flag can be used on the element containing the
     * ngMessages directive to make this happen.
     *
     * ```html
     * <!-- attribute-style usage -->
     * <div ng-messages="myForm.myField.$error" ng-messages-multiple>...</div>
     *
     * <!-- element-style usage -->
     * <ng-messages for="myForm.myField.$error" multiple>...</ng-messages>
     * ```
     *
     * ## Reusing and Overriding Messages
     * In addition to prioritization, ngMessages also allows for including messages from a remote or an inline
     * template. This allows for generic collection of messages to be reused across multiple parts of an
     * application.
     *
     * ```html
     * <script type="text/ng-template" id="error-messages">
     *   <div ng-message="required">This field is required</div>
     *   <div ng-message="minlength">This field is too short</div>
     * </script>
     *
     * <div ng-messages="myForm.myField.$error" role="alert">
     *   <div ng-messages-include="error-messages"></div>
     * </div>
     * ```
     *
     * However, including generic messages may not be useful enough to match all input fields, therefore,
     * `ngMessages` provides the ability to override messages defined in the remote template by redefining
     * them within the directive container.
     *
     * ```html
     * <!-- a generic template of error messages known as "my-custom-messages" -->
     * <script type="text/ng-template" id="my-custom-messages">
     *   <div ng-message="required">This field is required</div>
     *   <div ng-message="minlength">This field is too short</div>
     * </script>
     *
     * <form name="myForm">
     *   <label>
     *     Email address
     *     <input type="email"
     *            id="email"
     *            name="myEmail"
     *            ng-model="email"
     *            minlength="5"
     *            required />
     *   </label>
     *   <!-- any ng-message elements that appear BEFORE the ng-messages-include will
     *        override the messages present in the ng-messages-include template -->
     *   <div ng-messages="myForm.myEmail.$error" role="alert">
     *     <!-- this required message has overridden the template message -->
     *     <div ng-message="required">You did not enter your email address</div>
     *
     *     <!-- this is a brand new message and will appear last in the prioritization -->
     *     <div ng-message="email">Your email address is invalid</div>
     *
     *     <!-- and here are the generic error messages -->
     *     <div ng-messages-include="my-custom-messages"></div>
     *   </div>
     * </form>
     * ```
     *
     * In the example HTML code above the message that is set on required will override the corresponding
     * required message defined within the remote template. Therefore, with particular input fields (such
     * email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied
     * while more generic messages can be used to handle other, more general input errors.
     *
     * ## Dynamic Messaging
     * ngMessages also supports using expressions to dynamically change key values. Using arrays and
     * repeaters to list messages is also supported. This means that the code below will be able to
     * fully adapt itself and display the appropriate message when any of the expression data changes:
     *
     * ```html
     * <form name="myForm">
     *   <label>
     *     Email address
     *     <input type="email"
     *            name="myEmail"
     *            ng-model="email"
     *            minlength="5"
     *            required />
     *   </label>
     *   <div ng-messages="myForm.myEmail.$error" role="alert">
     *     <div ng-message="required">You did not enter your email address</div>
     *     <div ng-repeat="errorMessage in errorMessages">
     *       <!-- use ng-message-exp for a message whose key is given by an expression -->
     *       <div ng-message-exp="errorMessage.type">{{ errorMessage.text }}</div>
     *     </div>
     *   </div>
     * </form>
     * ```
     *
     * The `errorMessage.type` expression can be a string value or it can be an array so
     * that multiple errors can be associated with a single error message:
     *
     * ```html
     *   <label>
     *     Email address
     *     <input type="email"
     *            ng-model="data.email"
     *            name="myEmail"
     *            ng-minlength="5"
     *            ng-maxlength="100"
     *            required />
     *   </label>
     *   <div ng-messages="myForm.myEmail.$error" role="alert">
     *     <div ng-message-exp="'required'">You did not enter your email address</div>
     *     <div ng-message-exp="['minlength', 'maxlength']">
     *       Your email must be between 5 and 100 characters long
     *     </div>
     *   </div>
     * ```
     *
     * Feel free to use other structural directives such as ng-if and ng-switch to further control
     * what messages are active and when. Be careful, if you place ng-message on the same element
     * as these structural directives, Angular may not be able to determine if a message is active
     * or not. Therefore it is best to place the ng-message on a child element of the structural
     * directive.
     *
     * ```html
     * <div ng-messages="myForm.myEmail.$error" role="alert">
     *   <div ng-if="showRequiredError">
     *     <div ng-message="required">Please enter something</div>
     *   </div>
     * </div>
     * ```
     *
     * ## Animations
     * If the `ngAnimate` module is active within the application then the `ngMessages`, `ngMessage` and
     * `ngMessageExp` directives will trigger animations whenever any messages are added and removed from
     * the DOM by the `ngMessages` directive.
     *
     * Whenever the `ngMessages` directive contains one or more visible messages then the `.ng-active` CSS
     * class will be added to the element. The `.ng-inactive` CSS class will be applied when there are no
     * messages present. Therefore, CSS transitions and keyframes as well as JavaScript animations can
     * hook into the animations whenever these classes are added/removed.
     *
     * Let's say that our HTML code for our messages container looks like so:
     *
     * ```html
     * <div ng-messages="myMessages" class="my-messages" role="alert">
     *   <div ng-message="alert" class="some-message">...</div>
     *   <div ng-message="fail" class="some-message">...</div>
     * </div>
     * ```
     *
     * Then the CSS animation code for the message container looks like so:
     *
     * ```css
     * .my-messages {
     *   transition:1s linear all;
     * }
     * .my-messages.ng-active {
     *   // messages are visible
     * }
     * .my-messages.ng-inactive {
     *   // messages are hidden
     * }
     * ```
     *
     * Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter
     * and leave animation is triggered for each particular element bound to the `ngMessage` directive.
     *
     * Therefore, the CSS code for the inner messages looks like so:
     *
     * ```css
     * .some-message {
     *   transition:1s linear all;
     * }
     *
     * .some-message.ng-enter {}
     * .some-message.ng-enter.ng-enter-active {}
     *
     * .some-message.ng-leave {}
     * .some-message.ng-leave.ng-leave-active {}
     * ```
     *
     * {@link ngAnimate Click here} to learn how to use JavaScript animations or to learn more about ngAnimate.
     */
    angular.module('ngMessages', [])

    /**
     * @ngdoc directive
     * @module ngMessages
     * @name ngMessages
     * @restrict AE
     *
     * @description
     * `ngMessages` is a directive that is designed to show and hide messages based on the state
     * of a key/value object that it listens on. The directive itself complements error message
     * reporting with the `ngModel` $error object (which stores a key/value state of validation errors).
     *
     * `ngMessages` manages the state of internal messages within its container element. The internal
     * messages use the `ngMessage` directive and will be inserted/removed from the page depending
     * on if they're present within the key/value object. By default, only one message will be displayed
     * at a time and this depends on the prioritization of the messages within the template. (This can
     * be changed by using the `ng-messages-multiple` or `multiple` attribute on the directive container.)
     *
     * A remote template can also be used to promote message reusability and messages can also be
     * overridden.
     *
     * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
     *
     * @usage
     * ```html
     * <!-- using attribute directives -->
     * <ANY ng-messages="expression" role="alert">
     *   <ANY ng-message="stringValue">...</ANY>
     *   <ANY ng-message="stringValue1, stringValue2, ...">...</ANY>
     *   <ANY ng-message-exp="expressionValue">...</ANY>
     * </ANY>
     *
     * <!-- or by using element directives -->
     * <ng-messages for="expression" role="alert">
     *   <ng-message when="stringValue">...</ng-message>
     *   <ng-message when="stringValue1, stringValue2, ...">...</ng-message>
     *   <ng-message when-exp="expressionValue">...</ng-message>
     * </ng-messages>
     * ```
     *
     * @param {string} ngMessages an angular expression evaluating to a key/value object
     *                 (this is typically the $error object on an ngModel instance).
     * @param {string=} ngMessagesMultiple|multiple when set, all messages will be displayed with true
     *
     * @example
     * <example name="ngMessages-directive" module="ngMessagesExample"
     *          deps="angular-messages.js"
     *          animations="true" fixBase="true">
     *   <file name="index.html">
     *     <form name="myForm">
     *       <label>
     *         Enter your name:
     *         <input type="text"
     *                name="myName"
     *                ng-model="name"
     *                ng-minlength="5"
     *                ng-maxlength="20"
     *                required />
     *       </label>
     *       <pre>myForm.myName.$error = {{ myForm.myName.$error | json }}</pre>
     *
     *       <div ng-messages="myForm.myName.$error" style="color:maroon" role="alert">
     *         <div ng-message="required">You did not enter a field</div>
     *         <div ng-message="minlength">Your field is too short</div>
     *         <div ng-message="maxlength">Your field is too long</div>
     *       </div>
     *     </form>
     *   </file>
     *   <file name="script.js">
     *     angular.module('ngMessagesExample', ['ngMessages']);
     *   </file>
     * </example>
     */
    .directive('ngMessages', ['$animate', function($animate) {
        var ACTIVE_CLASS = 'ng-active';
        var INACTIVE_CLASS = 'ng-inactive';

        return {
            require: 'ngMessages',
            restrict: 'AE',
            controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {
                var ctrl = this;
                var latestKey = 0;
                var nextAttachId = 0;

                this.getAttachId = function getAttachId() {
                    return nextAttachId++;
                };

                var messages = this.messages = {};
                var renderLater, cachedCollection;

                this.render = function(collection) {
                    collection = collection || {};

                    renderLater = false;
                    cachedCollection = collection;

                    // this is true if the attribute is empty or if the attribute value is truthy
                    var multiple = isAttrTruthy($scope, $attrs.ngMessagesMultiple) ||
                        isAttrTruthy($scope, $attrs.multiple);

                    var unmatchedMessages = [];
                    var matchedKeys = {};
                    var messageItem = ctrl.head;
                    var messageFound = false;
                    var totalMessages = 0;

                    // we use != instead of !== to allow for both undefined and null values
                    while (messageItem != null) {
                        totalMessages++;
                        var messageCtrl = messageItem.message;

                        var messageUsed = false;
                        if (!messageFound) {
                            forEach(collection, function(value, key) {
                                if (!messageUsed && truthy(value) && messageCtrl.test(key)) {
                                    // this is to prevent the same error name from showing up twice
                                    if (matchedKeys[key]) return;
                                    matchedKeys[key] = true;

                                    messageUsed = true;
                                    messageCtrl.attach();
                                }
                            });
                        }

                        if (messageUsed) {
                            // unless we want to display multiple messages then we should
                            // set a flag here to avoid displaying the next message in the list
                            messageFound = !multiple;
                        } else {
                            unmatchedMessages.push(messageCtrl);
                        }

                        messageItem = messageItem.next;
                    }

                    forEach(unmatchedMessages, function(messageCtrl) {
                        messageCtrl.detach();
                    });

                    unmatchedMessages.length !== totalMessages ? $animate.setClass($element, ACTIVE_CLASS, INACTIVE_CLASS) : $animate.setClass($element, INACTIVE_CLASS, ACTIVE_CLASS);
                };

                $scope.$watchCollection($attrs.ngMessages || $attrs['for'], ctrl.render);

                this.reRender = function() {
                    if (!renderLater) {
                        renderLater = true;
                        $scope.$evalAsync(function() {
                            if (renderLater) {
                                cachedCollection && ctrl.render(cachedCollection);
                            }
                        });
                    }
                };

                this.register = function(comment, messageCtrl) {
                    var nextKey = latestKey.toString();
                    messages[nextKey] = {
                        message: messageCtrl
                    };
                    insertMessageNode($element[0], comment, nextKey);
                    comment.$$ngMessageNode = nextKey;
                    latestKey++;

                    ctrl.reRender();
                };

                this.deregister = function(comment) {
                    var key = comment.$$ngMessageNode;
                    delete comment.$$ngMessageNode;
                    removeMessageNode($element[0], comment, key);
                    delete messages[key];
                    ctrl.reRender();
                };

                function findPreviousMessage(parent, comment) {
                    var prevNode = comment;
                    var parentLookup = [];
                    while (prevNode && prevNode !== parent) {
                        var prevKey = prevNode.$$ngMessageNode;
                        if (prevKey && prevKey.length) {
                            return messages[prevKey];
                        }

                        // dive deeper into the DOM and examine its children for any ngMessage
                        // comments that may be in an element that appears deeper in the list
                        if (prevNode.childNodes.length && parentLookup.indexOf(prevNode) == -1) {
                            parentLookup.push(prevNode);
                            prevNode = prevNode.childNodes[prevNode.childNodes.length - 1];
                        } else {
                            prevNode = prevNode.previousSibling || prevNode.parentNode;
                        }
                    }
                }

                function insertMessageNode(parent, comment, key) {
                    var messageNode = messages[key];
                    if (!ctrl.head) {
                        ctrl.head = messageNode;
                    } else {
                        var match = findPreviousMessage(parent, comment);
                        if (match) {
                            messageNode.next = match.next;
                            match.next = messageNode;
                        } else {
                            messageNode.next = ctrl.head;
                            ctrl.head = messageNode;
                        }
                    }
                }

                function removeMessageNode(parent, comment, key) {
                    var messageNode = messages[key];

                    var match = findPreviousMessage(parent, comment);
                    if (match) {
                        match.next = messageNode.next;
                    } else {
                        ctrl.head = messageNode.next;
                    }
                }
            }]
        };

        function isAttrTruthy(scope, attr) {
            return (isString(attr) && attr.length === 0) || //empty attribute
                truthy(scope.$eval(attr));
        }

        function truthy(val) {
            return isString(val) ? val.length : !!val;
        }
    }])

    /**
     * @ngdoc directive
     * @name ngMessagesInclude
     * @restrict AE
     * @scope
     *
     * @description
     * `ngMessagesInclude` is a directive with the purpose to import existing ngMessage template
     * code from a remote template and place the downloaded template code into the exact spot
     * that the ngMessagesInclude directive is placed within the ngMessages container. This allows
     * for a series of pre-defined messages to be reused and also allows for the developer to
     * determine what messages are overridden due to the placement of the ngMessagesInclude directive.
     *
     * @usage
     * ```html
     * <!-- using attribute directives -->
     * <ANY ng-messages="expression" role="alert">
     *   <ANY ng-messages-include="remoteTplString">...</ANY>
     * </ANY>
     *
     * <!-- or by using element directives -->
     * <ng-messages for="expression" role="alert">
     *   <ng-messages-include src="expressionValue1">...</ng-messages-include>
     * </ng-messages>
     * ```
     *
     * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
     *
     * @param {string} ngMessagesInclude|src a string value corresponding to the remote template.
     */
    .directive('ngMessagesInclude', ['$templateRequest', '$document', '$compile', function($templateRequest, $document, $compile) {

        return {
            restrict: 'AE',
            require: '^^ngMessages', // we only require this for validation sake
            link: function($scope, element, attrs) {
                var src = attrs.ngMessagesInclude || attrs.src;
                $templateRequest(src).then(function(html) {
                    $compile(html)($scope, function(contents) {
                        element.after(contents);

                        // the anchor is placed for debugging purposes
                        var anchor = jqLite($document[0].createComment(' ngMessagesInclude: ' + src + ' '));
                        element.after(anchor);

                        // we don't want to pollute the DOM anymore by keeping an empty directive element
                        element.remove();
                    });
                });
            }
        };
    }])

    /**
     * @ngdoc directive
     * @name ngMessage
     * @restrict AE
     * @scope
     *
     * @description
     * `ngMessage` is a directive with the purpose to show and hide a particular message.
     * For `ngMessage` to operate, a parent `ngMessages` directive on a parent DOM element
     * must be situated since it determines which messages are visible based on the state
     * of the provided key/value map that `ngMessages` listens on.
     *
     * More information about using `ngMessage` can be found in the
     * {@link module:ngMessages `ngMessages` module documentation}.
     *
     * @usage
     * ```html
     * <!-- using attribute directives -->
     * <ANY ng-messages="expression" role="alert">
     *   <ANY ng-message="stringValue">...</ANY>
     *   <ANY ng-message="stringValue1, stringValue2, ...">...</ANY>
     * </ANY>
     *
     * <!-- or by using element directives -->
     * <ng-messages for="expression" role="alert">
     *   <ng-message when="stringValue">...</ng-message>
     *   <ng-message when="stringValue1, stringValue2, ...">...</ng-message>
     * </ng-messages>
     * ```
     *
     * @param {expression} ngMessage|when a string value corresponding to the message key.
     */
    .directive('ngMessage', ngMessageDirectiveFactory('AE'))


    /**
     * @ngdoc directive
     * @name ngMessageExp
     * @restrict AE
     * @scope
     *
     * @description
     * `ngMessageExp` is a directive with the purpose to show and hide a particular message.
     * For `ngMessageExp` to operate, a parent `ngMessages` directive on a parent DOM element
     * must be situated since it determines which messages are visible based on the state
     * of the provided key/value map that `ngMessages` listens on.
     *
     * @usage
     * ```html
     * <!-- using attribute directives -->
     * <ANY ng-messages="expression">
     *   <ANY ng-message-exp="expressionValue">...</ANY>
     * </ANY>
     *
     * <!-- or by using element directives -->
     * <ng-messages for="expression">
     *   <ng-message when-exp="expressionValue">...</ng-message>
     * </ng-messages>
     * ```
     *
     * {@link module:ngMessages Click here} to learn more about `ngMessages` and `ngMessage`.
     *
     * @param {expression} ngMessageExp|whenExp an expression value corresponding to the message key.
     */
    .directive('ngMessageExp', ngMessageDirectiveFactory('A'));

    function ngMessageDirectiveFactory(restrict) {
        return ['$animate', function($animate) {
            return {
                restrict: 'AE',
                transclude: 'element',
                terminal: true,
                require: '^^ngMessages',
                link: function(scope, element, attrs, ngMessagesCtrl, $transclude) {
                    var commentNode = element[0];

                    var records;
                    var staticExp = attrs.ngMessage || attrs.when;
                    var dynamicExp = attrs.ngMessageExp || attrs.whenExp;
                    var assignRecords = function(items) {
                        records = items ? (isArray(items) ? items : items.split(/[\s,]+/)) : null;
                        ngMessagesCtrl.reRender();
                    };

                    if (dynamicExp) {
                        assignRecords(scope.$eval(dynamicExp));
                        scope.$watchCollection(dynamicExp, assignRecords);
                    } else {
                        assignRecords(staticExp);
                    }

                    var currentElement, messageCtrl;
                    ngMessagesCtrl.register(commentNode, messageCtrl = {
                        test: function(name) {
                            return contains(records, name);
                        },
                        attach: function() {
                            if (!currentElement) {
                                $transclude(scope, function(elm) {
                                    $animate.enter(elm, null, element);
                                    currentElement = elm;

                                    // Each time we attach this node to a message we get a new id that we can match
                                    // when we are destroying the node later.
                                    var $$attachId = currentElement.$$attachId = ngMessagesCtrl.getAttachId();

                                    // in the event that the parent element is destroyed
                                    // by any other structural directive then it's time
                                    // to deregister the message from the controller
                                    currentElement.on('$destroy', function() {
                                        if (currentElement && currentElement.$$attachId === $$attachId) {
                                            ngMessagesCtrl.deregister(commentNode);
                                            messageCtrl.detach();
                                        }
                                    });
                                });
                            }
                        },
                        detach: function() {
                            if (currentElement) {
                                var elm = currentElement;
                                currentElement = null;
                                $animate.leave(elm);
                            }
                        }
                    });
                }
            };
        }];

        function contains(collection, key) {
            if (collection) {
                return isArray(collection) ? collection.indexOf(key) >= 0 : collection.hasOwnProperty(key);
            }
        }
    }


})(window, window.angular);

/**
 * State-based routing for AngularJS
 * @version v0.2.15
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports) {
    module.exports = 'ui.router';
}

(function(window, angular, undefined) {
    /*jshint globalstrict:true*/
    /*global angular:false*/
    'use strict';

    var isDefined = angular.isDefined,
        isFunction = angular.isFunction,
        isString = angular.isString,
        isObject = angular.isObject,
        isArray = angular.isArray,
        forEach = angular.forEach,
        extend = angular.extend,
        copy = angular.copy;

    function inherit(parent, extra) {
        return extend(new(extend(function() {}, {
            prototype: parent
        }))(), extra);
    }

    function merge(dst) {
        forEach(arguments, function(obj) {
            if (obj !== dst) {
                forEach(obj, function(value, key) {
                    if (!dst.hasOwnProperty(key)) dst[key] = value;
                });
            }
        });
        return dst;
    }

    /**
     * Finds the common ancestor path between two states.
     *
     * @param {Object} first The first state.
     * @param {Object} second The second state.
     * @return {Array} Returns an array of state names in descending order, not including the root.
     */
    function ancestors(first, second) {
        var path = [];

        for (var n in first.path) {
            if (first.path[n] !== second.path[n]) break;
            path.push(first.path[n]);
        }
        return path;
    }

    /**
     * IE8-safe wrapper for `Object.keys()`.
     *
     * @param {Object} object A JavaScript object.
     * @return {Array} Returns the keys of the object as an array.
     */
    function objectKeys(object) {
        if (Object.keys) {
            return Object.keys(object);
        }
        var result = [];

        forEach(object, function(val, key) {
            result.push(key);
        });
        return result;
    }

    /**
     * IE8-safe wrapper for `Array.prototype.indexOf()`.
     *
     * @param {Array} array A JavaScript array.
     * @param {*} value A value to search the array for.
     * @return {Number} Returns the array index value of `value`, or `-1` if not present.
     */
    function indexOf(array, value) {
        if (Array.prototype.indexOf) {
            return array.indexOf(value, Number(arguments[2]) || 0);
        }
        var len = array.length >>> 0,
            from = Number(arguments[2]) || 0;
        from = (from < 0) ? Math.ceil(from) : Math.floor(from);

        if (from < 0) from += len;

        for (; from < len; from++) {
            if (from in array && array[from] === value) return from;
        }
        return -1;
    }

    /**
     * Merges a set of parameters with all parameters inherited between the common parents of the
     * current state and a given destination state.
     *
     * @param {Object} currentParams The value of the current state parameters ($stateParams).
     * @param {Object} newParams The set of parameters which will be composited with inherited params.
     * @param {Object} $current Internal definition of object representing the current state.
     * @param {Object} $to Internal definition of object representing state to transition to.
     */
    function inheritParams(currentParams, newParams, $current, $to) {
        var parents = ancestors($current, $to),
            parentParams, inherited = {},
            inheritList = [];

        for (var i in parents) {
            if (!parents[i].params) continue;
            parentParams = objectKeys(parents[i].params);
            if (!parentParams.length) continue;

            for (var j in parentParams) {
                if (indexOf(inheritList, parentParams[j]) >= 0) continue;
                inheritList.push(parentParams[j]);
                inherited[parentParams[j]] = currentParams[parentParams[j]];
            }
        }
        return extend({}, inherited, newParams);
    }

    /**
     * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
     *
     * @param {Object} a The first object.
     * @param {Object} b The second object.
     * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
     *                     it defaults to the list of keys in `a`.
     * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
     */
    function equalForKeys(a, b, keys) {
        if (!keys) {
            keys = [];
            for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
        }

        for (var i = 0; i < keys.length; i++) {
            var k = keys[i];
            if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
        }
        return true;
    }

    /**
     * Returns the subset of an object, based on a list of keys.
     *
     * @param {Array} keys
     * @param {Object} values
     * @return {Boolean} Returns a subset of `values`.
     */
    function filterByKeys(keys, values) {
        var filtered = {};

        forEach(keys, function(name) {
            filtered[name] = values[name];
        });
        return filtered;
    }

    // like _.indexBy
    // when you know that your index values will be unique, or you want last-one-in to win
    function indexBy(array, propName) {
        var result = {};
        forEach(array, function(item) {
            result[item[propName]] = item;
        });
        return result;
    }

    // extracted from underscore.js
    // Return a copy of the object only containing the whitelisted properties.
    function pick(obj) {
        var copy = {};
        var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        forEach(keys, function(key) {
            if (key in obj) copy[key] = obj[key];
        });
        return copy;
    }

    // extracted from underscore.js
    // Return a copy of the object omitting the blacklisted properties.
    function omit(obj) {
        var copy = {};
        var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
        for (var key in obj) {
            if (indexOf(keys, key) == -1) copy[key] = obj[key];
        }
        return copy;
    }

    function pluck(collection, key) {
        var result = isArray(collection) ? [] : {};

        forEach(collection, function(val, i) {
            result[i] = isFunction(key) ? key(val) : val[key];
        });
        return result;
    }

    function filter(collection, callback) {
        var array = isArray(collection);
        var result = array ? [] : {};
        forEach(collection, function(val, i) {
            if (callback(val, i)) {
                result[array ? result.length : i] = val;
            }
        });
        return result;
    }

    function map(collection, callback) {
        var result = isArray(collection) ? [] : {};

        forEach(collection, function(val, i) {
            result[i] = callback(val, i);
        });
        return result;
    }

    /**
     * @ngdoc overview
     * @name ui.router.util
     *
     * @description
     * # ui.router.util sub-module
     *
     * This module is a dependency of other sub-modules. Do not include this module as a dependency
     * in your angular app (use {@link ui.router} module instead).
     *
     */
    angular.module('ui.router.util', ['ng']);

    /**
     * @ngdoc overview
     * @name ui.router.router
     * 
     * @requires ui.router.util
     *
     * @description
     * # ui.router.router sub-module
     *
     * This module is a dependency of other sub-modules. Do not include this module as a dependency
     * in your angular app (use {@link ui.router} module instead).
     */
    angular.module('ui.router.router', ['ui.router.util']);

    /**
     * @ngdoc overview
     * @name ui.router.state
     * 
     * @requires ui.router.router
     * @requires ui.router.util
     *
     * @description
     * # ui.router.state sub-module
     *
     * This module is a dependency of the main ui.router module. Do not include this module as a dependency
     * in your angular app (use {@link ui.router} module instead).
     * 
     */
    angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

    /**
     * @ngdoc overview
     * @name ui.router
     *
     * @requires ui.router.state
     *
     * @description
     * # ui.router
     * 
     * ## The main module for ui.router 
     * There are several sub-modules included with the ui.router module, however only this module is needed
     * as a dependency within your angular app. The other modules are for organization purposes. 
     *
     * The modules are:
     * * ui.router - the main "umbrella" module
     * * ui.router.router - 
     * 
     * *You'll need to include **only** this module as the dependency within your angular app.*
     * 
     * <pre>
     * <!doctype html>
     * <html ng-app="myApp">
     * <head>
     *   <script src="js/angular.js"></script>
     *   <!-- Include the ui-router script -->
     *   <script src="js/angular-ui-router.min.js"></script>
     *   <script>
     *     // ...and add 'ui.router' as a dependency
     *     var myApp = angular.module('myApp', ['ui.router']);
     *   </script>
     * </head>
     * <body>
     * </body>
     * </html>
     * </pre>
     */
    angular.module('ui.router', ['ui.router.state']);

    angular.module('ui.router.compat', ['ui.router']);

    /**
     * @ngdoc object
     * @name ui.router.util.$resolve
     *
     * @requires $q
     * @requires $injector
     *
     * @description
     * Manages resolution of (acyclic) graphs of promises.
     */
    $Resolve.$inject = ['$q', '$injector'];

    function $Resolve($q, $injector) {

        var VISIT_IN_PROGRESS = 1,
            VISIT_DONE = 2,
            NOTHING = {},
            NO_DEPENDENCIES = [],
            NO_LOCALS = NOTHING,
            NO_PARENT = extend($q.when(NOTHING), {
                $$promises: NOTHING,
                $$values: NOTHING
            });


        /**
         * @ngdoc function
         * @name ui.router.util.$resolve#study
         * @methodOf ui.router.util.$resolve
         *
         * @description
         * Studies a set of invocables that are likely to be used multiple times.
         * <pre>
         * $resolve.study(invocables)(locals, parent, self)
         * </pre>
         * is equivalent to
         * <pre>
         * $resolve.resolve(invocables, locals, parent, self)
         * </pre>
         * but the former is more efficient (in fact `resolve` just calls `study` 
         * internally).
         *
         * @param {object} invocables Invocable objects
         * @return {function} a function to pass in locals, parent and self
         */
        this.study = function(invocables) {
            if (!isObject(invocables)) throw new Error("'invocables' must be an object");
            var invocableKeys = objectKeys(invocables || {});

            // Perform a topological sort of invocables to build an ordered plan
            var plan = [],
                cycle = [],
                visited = {};

            function visit(value, key) {
                if (visited[key] === VISIT_DONE) return;

                cycle.push(key);
                if (visited[key] === VISIT_IN_PROGRESS) {
                    cycle.splice(0, indexOf(cycle, key));
                    throw new Error("Cyclic dependency: " + cycle.join(" -> "));
                }
                visited[key] = VISIT_IN_PROGRESS;

                if (isString(value)) {
                    plan.push(key, [function() {
                        return $injector.get(value);
                    }], NO_DEPENDENCIES);
                } else {
                    var params = $injector.annotate(value);
                    forEach(params, function(param) {
                        if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
                    });
                    plan.push(key, value, params);
                }

                cycle.pop();
                visited[key] = VISIT_DONE;
            }
            forEach(invocables, visit);
            invocables = cycle = visited = null; // plan is all that's required

            function isResolve(value) {
                return isObject(value) && value.then && value.$$promises;
            }

            return function(locals, parent, self) {
                if (isResolve(locals) && self === undefined) {
                    self = parent;
                    parent = locals;
                    locals = null;
                }
                if (!locals) locals = NO_LOCALS;
                else if (!isObject(locals)) {
                    throw new Error("'locals' must be an object");
                }
                if (!parent) parent = NO_PARENT;
                else if (!isResolve(parent)) {
                    throw new Error("'parent' must be a promise returned by $resolve.resolve()");
                }

                // To complete the overall resolution, we have to wait for the parent
                // promise and for the promise for each invokable in our plan.
                var resolution = $q.defer(),
                    result = resolution.promise,
                    promises = result.$$promises = {},
                    values = extend({}, locals),
                    wait = 1 + plan.length / 3,
                    merged = false;

                function done() {
                    // Merge parent values we haven't got yet and publish our own $$values
                    if (!--wait) {
                        if (!merged) merge(values, parent.$$values);
                        result.$$values = values;
                        result.$$promises = result.$$promises || true; // keep for isResolve()
                        delete result.$$inheritedValues;
                        resolution.resolve(values);
                    }
                }

                function fail(reason) {
                    result.$$failure = reason;
                    resolution.reject(reason);
                }

                // Short-circuit if parent has already failed
                if (isDefined(parent.$$failure)) {
                    fail(parent.$$failure);
                    return result;
                }

                if (parent.$$inheritedValues) {
                    merge(values, omit(parent.$$inheritedValues, invocableKeys));
                }

                // Merge parent values if the parent has already resolved, or merge
                // parent promises and wait if the parent resolve is still in progress.
                extend(promises, parent.$$promises);
                if (parent.$$values) {
                    merged = merge(values, omit(parent.$$values, invocableKeys));
                    result.$$inheritedValues = omit(parent.$$values, invocableKeys);
                    done();
                } else {
                    if (parent.$$inheritedValues) {
                        result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
                    }
                    parent.then(done, fail);
                }

                // Process each invocable in the plan, but ignore any where a local of the same name exists.
                for (var i = 0, ii = plan.length; i < ii; i += 3) {
                    if (locals.hasOwnProperty(plan[i])) done();
                    else invoke(plan[i], plan[i + 1], plan[i + 2]);
                }

                function invoke(key, invocable, params) {
                    // Create a deferred for this invocation. Failures will propagate to the resolution as well.
                    var invocation = $q.defer(),
                        waitParams = 0;

                    function onfailure(reason) {
                        invocation.reject(reason);
                        fail(reason);
                    }
                    // Wait for any parameter that we have a promise for (either from parent or from this
                    // resolve; in that case study() will have made sure it's ordered before us in the plan).
                    forEach(params, function(dep) {
                        if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
                            waitParams++;
                            promises[dep].then(function(result) {
                                values[dep] = result;
                                if (!(--waitParams)) proceed();
                            }, onfailure);
                        }
                    });
                    if (!waitParams) proceed();

                    function proceed() {
                        if (isDefined(result.$$failure)) return;
                        try {
                            invocation.resolve($injector.invoke(invocable, self, values));
                            invocation.promise.then(function(result) {
                                values[key] = result;
                                done();
                            }, onfailure);
                        } catch (e) {
                            onfailure(e);
                        }
                    }
                    // Publish promise synchronously; invocations further down in the plan may depend on it.
                    promises[key] = invocation.promise;
                }

                return result;
            };
        };

        /**
         * @ngdoc function
         * @name ui.router.util.$resolve#resolve
         * @methodOf ui.router.util.$resolve
         *
         * @description
         * Resolves a set of invocables. An invocable is a function to be invoked via 
         * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
         * An invocable can either return a value directly,
         * or a `$q` promise. If a promise is returned it will be resolved and the 
         * resulting value will be used instead. Dependencies of invocables are resolved 
         * (in this order of precedence)
         *
         * - from the specified `locals`
         * - from another invocable that is part of this `$resolve` call
         * - from an invocable that is inherited from a `parent` call to `$resolve` 
         *   (or recursively
         * - from any ancestor `$resolve` of that parent).
         *
         * The return value of `$resolve` is a promise for an object that contains 
         * (in this order of precedence)
         *
         * - any `locals` (if specified)
         * - the resolved return values of all injectables
         * - any values inherited from a `parent` call to `$resolve` (if specified)
         *
         * The promise will resolve after the `parent` promise (if any) and all promises 
         * returned by injectables have been resolved. If any invocable 
         * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
         * invocable is rejected, the `$resolve` promise is immediately rejected with the 
         * same error. A rejection of a `parent` promise (if specified) will likewise be 
         * propagated immediately. Once the `$resolve` promise has been rejected, no 
         * further invocables will be called.
         * 
         * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
         * to throw an error. As a special case, an injectable can depend on a parameter 
         * with the same name as the injectable, which will be fulfilled from the `parent` 
         * injectable of the same name. This allows inherited values to be decorated. 
         * Note that in this case any other injectable in the same `$resolve` with the same
         * dependency would see the decorated value, not the inherited value.
         *
         * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
         * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
         * exception.
         *
         * Invocables are invoked eagerly as soon as all dependencies are available. 
         * This is true even for dependencies inherited from a `parent` call to `$resolve`.
         *
         * As a special case, an invocable can be a string, in which case it is taken to 
         * be a service name to be passed to `$injector.get()`. This is supported primarily 
         * for backwards-compatibility with the `resolve` property of `$routeProvider` 
         * routes.
         *
         * @param {object} invocables functions to invoke or 
         * `$injector` services to fetch.
         * @param {object} locals  values to make available to the injectables
         * @param {object} parent  a promise returned by another call to `$resolve`.
         * @param {object} self  the `this` for the invoked methods
         * @return {object} Promise for an object that contains the resolved return value
         * of all invocables, as well as any inherited and local values.
         */
        this.resolve = function(invocables, locals, parent, self) {
            return this.study(invocables)(locals, parent, self);
        };
    }

    angular.module('ui.router.util').service('$resolve', $Resolve);


    /**
     * @ngdoc object
     * @name ui.router.util.$templateFactory
     *
     * @requires $http
     * @requires $templateCache
     * @requires $injector
     *
     * @description
     * Service. Manages loading of templates.
     */
    $TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];

    function $TemplateFactory($http, $templateCache, $injector) {

        /**
         * @ngdoc function
         * @name ui.router.util.$templateFactory#fromConfig
         * @methodOf ui.router.util.$templateFactory
         *
         * @description
         * Creates a template from a configuration object. 
         *
         * @param {object} config Configuration object for which to load a template. 
         * The following properties are search in the specified order, and the first one 
         * that is defined is used to create the template:
         *
         * @param {string|object} config.template html string template or function to 
         * load via {@link ui.router.util.$templateFactory#fromString fromString}.
         * @param {string|object} config.templateUrl url to load or a function returning 
         * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
         * @param {Function} config.templateProvider function to invoke via 
         * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
         * @param {object} params  Parameters to pass to the template function.
         * @param {object} locals Locals to pass to `invoke` if the template is loaded 
         * via a `templateProvider`. Defaults to `{ params: params }`.
         *
         * @return {string|object}  The template html as a string, or a promise for 
         * that string,or `null` if no template is configured.
         */
        this.fromConfig = function(config, params, locals) {
            return (
                isDefined(config.template) ? this.fromString(config.template, params) :
                isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
                isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
                null
            );
        };

        /**
         * @ngdoc function
         * @name ui.router.util.$templateFactory#fromString
         * @methodOf ui.router.util.$templateFactory
         *
         * @description
         * Creates a template from a string or a function returning a string.
         *
         * @param {string|object} template html template as a string or function that 
         * returns an html template as a string.
         * @param {object} params Parameters to pass to the template function.
         *
         * @return {string|object} The template html as a string, or a promise for that 
         * string.
         */
        this.fromString = function(template, params) {
            return isFunction(template) ? template(params) : template;
        };

        /**
         * @ngdoc function
         * @name ui.router.util.$templateFactory#fromUrl
         * @methodOf ui.router.util.$templateFactory
         * 
         * @description
         * Loads a template from the a URL via `$http` and `$templateCache`.
         *
         * @param {string|Function} url url of the template to load, or a function 
         * that returns a url.
         * @param {Object} params Parameters to pass to the url function.
         * @return {string|Promise.<string>} The template html as a string, or a promise 
         * for that string.
         */
        this.fromUrl = function(url, params) {
            if (isFunction(url)) url = url(params);
            if (url == null) return null;
            else return $http
                .get(url, {
                    cache: $templateCache,
                    headers: {
                        Accept: 'text/html'
                    }
                })
                .then(function(response) {
                    return response.data;
                });
        };

        /**
         * @ngdoc function
         * @name ui.router.util.$templateFactory#fromProvider
         * @methodOf ui.router.util.$templateFactory
         *
         * @description
         * Creates a template by invoking an injectable provider function.
         *
         * @param {Function} provider Function to invoke via `$injector.invoke`
         * @param {Object} params Parameters for the template.
         * @param {Object} locals Locals to pass to `invoke`. Defaults to 
         * `{ params: params }`.
         * @return {string|Promise.<string>} The template html as a string, or a promise 
         * for that string.
         */
        this.fromProvider = function(provider, params, locals) {
            return $injector.invoke(provider, null, locals || {
                params: params
            });
        };
    }

    angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

    var $$UMFP; // reference to $UrlMatcherFactoryProvider

    /**
     * @ngdoc object
     * @name ui.router.util.type:UrlMatcher
     *
     * @description
     * Matches URLs against patterns and extracts named parameters from the path or the search
     * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
     * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
     * do not influence whether or not a URL is matched, but their values are passed through into
     * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
     *
     * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
     * syntax, which optionally allows a regular expression for the parameter to be specified:
     *
     * * `':'` name - colon placeholder
     * * `'*'` name - catch-all placeholder
     * * `'{' name '}'` - curly placeholder
     * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
     *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
     *
     * Parameter names may contain only word characters (latin letters, digits, and underscore) and
     * must be unique within the pattern (across both path and search parameters). For colon
     * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
     * number of characters other than '/'. For catch-all placeholders the path parameter matches
     * any number of characters.
     *
     * Examples:
     *
     * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
     *   trailing slashes, and patterns have to match the entire path, not just a prefix.
     * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
     *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
     * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
     * * `'/user/{id:[^/]*}'` - Same as the previous example.
     * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
     *   parameter consists of 1 to 8 hex digits.
     * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
     *   path into the parameter 'path'.
     * * `'/files/*path'` - ditto.
     * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
     *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
     *
     * @param {string} pattern  The pattern to compile into a matcher.
     * @param {Object} config  A configuration object hash:
     * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
     *   an existing UrlMatcher
     *
     * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
     * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
     *
     * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
     *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
     *   non-null) will start with this prefix.
     *
     * @property {string} source  The pattern that was passed into the constructor
     *
     * @property {string} sourcePath  The path portion of the source property
     *
     * @property {string} sourceSearch  The search portion of the source property
     *
     * @property {string} regex  The constructed regex that will be used to match against the url when
     *   it is time to determine which url will match.
     *
     * @returns {Object}  New `UrlMatcher` object
     */
    function UrlMatcher(pattern, config, parentMatcher) {
        config = extend({
            params: {}
        }, isObject(config) ? config : {});

        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
        //   '*' name
        //   ':' name
        //   '{' name '}'
        //   '{' name ':' regexp '}'
        // The regular expression is somewhat complicated due to the need to allow curly braces
        // inside the regular expression. The placeholder regexp breaks down as follows:
        //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
        //    \{([\w\[\]]+)(?:\:( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
        //    [^{}\\]+                       - anything other than curly braces or backslash
        //    \\.                            - a backslash escape
        //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
        var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
            searchPlaceholder = /([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
            compiled = '^',
            last = 0,
            m,
            segments = this.segments = [],
            parentParams = parentMatcher ? parentMatcher.params : {},
            params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
            paramNames = [];

        function addParameter(id, type, config, location) {
            paramNames.push(id);
            if (parentParams[id]) return parentParams[id];
            if (!/^\w+(-+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
            if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
            params[id] = new $$UMFP.Param(id, type, config, location);
            return params[id];
        }

        function quoteRegExp(string, pattern, squash, optional) {
            var surroundPattern = ['', ''],
                result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
            if (!pattern) return result;
            switch (squash) {
                case false:
                    surroundPattern = ['(', ')' + (optional ? "?" : "")];
                    break;
                case true:
                    surroundPattern = ['?(', ')?'];
                    break;
                default:
                    surroundPattern = ['(' + squash + "|", ')?'];
                    break;
            }
            return result + surroundPattern[0] + pattern + surroundPattern[1];
        }

        this.source = pattern;

        // Split into static segments separated by path parameter placeholders.
        // The number of segments is always 1 more than the number of parameters.
        function matchDetails(m, isSearch) {
            var id, regexp, segment, type, cfg, arrayMode;
            id = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
            cfg = config.params[id];
            segment = pattern.substring(last, m.index);
            regexp = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
            type = $$UMFP.type(regexp || "string") || inherit($$UMFP.type("string"), {
                pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined)
            });
            return {
                id: id,
                regexp: regexp,
                segment: segment,
                type: type,
                cfg: cfg
            };
        }

        var p, param, segment;
        while ((m = placeholder.exec(pattern))) {
            p = matchDetails(m, false);
            if (p.segment.indexOf('?') >= 0) break; // we're into the search part

            param = addParameter(p.id, p.type, p.cfg, "path");
            compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
            segments.push(p.segment);
            last = placeholder.lastIndex;
        }
        segment = pattern.substring(last);

        // Find any search parameter names and remove them from the last segment
        var i = segment.indexOf('?');

        if (i >= 0) {
            var search = this.sourceSearch = segment.substring(i);
            segment = segment.substring(0, i);
            this.sourcePath = pattern.substring(0, last + i);

            if (search.length > 0) {
                last = 0;
                while ((m = searchPlaceholder.exec(search))) {
                    p = matchDetails(m, true);
                    param = addParameter(p.id, p.type, p.cfg, "search");
                    last = placeholder.lastIndex;
                    // check if ?&
                }
            }
        } else {
            this.sourcePath = pattern;
            this.sourceSearch = '';
        }

        compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
        segments.push(segment);

        this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
        this.prefix = segments[0];
        this.$$paramNames = paramNames;
    }

    /**
     * @ngdoc function
     * @name ui.router.util.type:UrlMatcher#concat
     * @methodOf ui.router.util.type:UrlMatcher
     *
     * @description
     * Returns a new matcher for a pattern constructed by appending the path part and adding the
     * search parameters of the specified pattern to this pattern. The current pattern is not
     * modified. This can be understood as creating a pattern for URLs that are relative to (or
     * suffixes of) the current pattern.
     *
     * @example
     * The following two matchers are equivalent:
     * <pre>
     * new UrlMatcher('/user/{id}?q').concat('/details?date');
     * new UrlMatcher('/user/{id}/details?q&date');
     * </pre>
     *
     * @param {string} pattern  The pattern to append.
     * @param {Object} config  An object hash of the configuration for the matcher.
     * @returns {UrlMatcher}  A matcher for the concatenated pattern.
     */
    UrlMatcher.prototype.concat = function(pattern, config) {
        // Because order of search parameters is irrelevant, we can add our own search
        // parameters to the end of the new pattern. Parse the new pattern by itself
        // and then join the bits together, but it's much easier to do this on a string level.
        var defaultConfig = {
            caseInsensitive: $$UMFP.caseInsensitive(),
            strict: $$UMFP.strictMode(),
            squash: $$UMFP.defaultSquashPolicy()
        };
        return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
    };

    UrlMatcher.prototype.toString = function() {
        return this.source;
    };

    /**
     * @ngdoc function
     * @name ui.router.util.type:UrlMatcher#exec
     * @methodOf ui.router.util.type:UrlMatcher
     *
     * @description
     * Tests the specified path against this matcher, and returns an object containing the captured
     * parameter values, or null if the path does not match. The returned object contains the values
     * of any search parameters that are mentioned in the pattern, but their value may be null if
     * they are not present in `searchParams`. This means that search parameters are always treated
     * as optional.
     *
     * @example
     * <pre>
     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
     *   x: '1', q: 'hello'
     * });
     * // returns { id: 'bob', q: 'hello', r: null }
     * </pre>
     *
     * @param {string} path  The URL path to match, e.g. `$location.path()`.
     * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
     * @returns {Object}  The captured parameter values.
     */
    UrlMatcher.prototype.exec = function(path, searchParams) {
        var m = this.regexp.exec(path);
        if (!m) return null;
        searchParams = searchParams || {};

        var paramNames = this.parameters(),
            nTotal = paramNames.length,
            nPath = this.segments.length - 1,
            values = {},
            i, j, cfg, paramName;

        if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

        function decodePathArray(string) {
            function reverseString(str) {
                return str.split("").reverse().join("");
            }

            function unquoteDashes(str) {
                return str.replace(/\\-/g, "-");
            }

            var split = reverseString(string).split(/-(?!\\)/);
            var allReversed = map(split, reverseString);
            return map(allReversed, unquoteDashes).reverse();
        }

        for (i = 0; i < nPath; i++) {
            paramName = paramNames[i];
            var param = this.params[paramName];
            var paramVal = m[i + 1];
            // if the param value matches a pre-replace pair, replace the value before decoding.
            for (j = 0; j < param.replace; j++) {
                if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
            }
            if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
            values[paramName] = param.value(paramVal);
        }
        for ( /**/ ; i < nTotal; i++) {
            paramName = paramNames[i];
            values[paramName] = this.params[paramName].value(searchParams[paramName]);
        }

        return values;
    };

    /**
     * @ngdoc function
     * @name ui.router.util.type:UrlMatcher#parameters
     * @methodOf ui.router.util.type:UrlMatcher
     *
     * @description
     * Returns the names of all path and search parameters of this pattern in an unspecified order.
     *
     * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
     *    pattern has no parameters, an empty array is returned.
     */
    UrlMatcher.prototype.parameters = function(param) {
        if (!isDefined(param)) return this.$$paramNames;
        return this.params[param] || null;
    };

    /**
     * @ngdoc function
     * @name ui.router.util.type:UrlMatcher#validate
     * @methodOf ui.router.util.type:UrlMatcher
     *
     * @description
     * Checks an object hash of parameters to validate their correctness according to the parameter
     * types of this `UrlMatcher`.
     *
     * @param {Object} params The object hash of parameters to validate.
     * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
     */
    UrlMatcher.prototype.validates = function(params) {
        return this.params.$$validates(params);
    };

    /**
     * @ngdoc function
     * @name ui.router.util.type:UrlMatcher#format
     * @methodOf ui.router.util.type:UrlMatcher
     *
     * @description
     * Creates a URL that matches this pattern by substituting the specified values
     * for the path and search parameters. Null values for path parameters are
     * treated as empty strings.
     *
     * @example
     * <pre>
     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
     * // returns '/user/bob?q=yes'
     * </pre>
     *
     * @param {Object} values  the values to substitute for the parameters in this pattern.
     * @returns {string}  the formatted URL (path and optionally search part).
     */
    UrlMatcher.prototype.format = function(values) {
        values = values || {};
        var segments = this.segments,
            params = this.parameters(),
            paramset = this.params;
        if (!this.validates(values)) return null;

        var i, search = false,
            nPath = segments.length - 1,
            nTotal = params.length,
            result = segments[0];

        function encodeDashes(str) { // Replace dashes with encoded "\-"
            return encodeURIComponent(str).replace(/-/g, function(c) {
                return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase();
            });
        }

        for (i = 0; i < nTotal; i++) {
            var isPathParam = i < nPath;
            var name = params[i],
                param = paramset[name],
                value = param.value(values[name]);
            var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
            var squash = isDefaultValue ? param.squash : false;
            var encoded = param.type.encode(value);

            if (isPathParam) {
                var nextSegment = segments[i + 1];
                if (squash === false) {
                    if (encoded != null) {
                        if (isArray(encoded)) {
                            result += map(encoded, encodeDashes).join("-");
                        } else {
                            result += encodeURIComponent(encoded);
                        }
                    }
                    result += nextSegment;
                } else if (squash === true) {
                    var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
                    result += nextSegment.match(capture)[1];
                } else if (isString(squash)) {
                    result += squash + nextSegment;
                }
            } else {
                if (encoded == null || (isDefaultValue && squash !== false)) continue;
                if (!isArray(encoded)) encoded = [encoded];
                encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
                result += (search ? '&' : '?') + (name + '=' + encoded);
                search = true;
            }
        }

        return result;
    };

    /**
     * @ngdoc object
     * @name ui.router.util.type:Type
     *
     * @description
     * Implements an interface to define custom parameter types that can be decoded from and encoded to
     * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
     * objects when matching or formatting URLs, or comparing or validating parameter values.
     *
     * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
     * information on registering custom types.
     *
     * @param {Object} config  A configuration object which contains the custom type definition.  The object's
     *        properties will override the default methods and/or pattern in `Type`'s public interface.
     * @example
     * <pre>
     * {
     *   decode: function(val) { return parseInt(val, 10); },
     *   encode: function(val) { return val && val.toString(); },
     *   equals: function(a, b) { return this.is(a) && a === b; },
     *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
     *   pattern: /\d+/
     * }
     * </pre>
     *
     * @property {RegExp} pattern The regular expression pattern used to match values of this type when
     *           coming from a substring of a URL.
     *
     * @returns {Object}  Returns a new `Type` object.
     */
    function Type(config) {
        extend(this, config);
    }

    /**
     * @ngdoc function
     * @name ui.router.util.type:Type#is
     * @methodOf ui.router.util.type:Type
     *
     * @description
     * Detects whether a value is of a particular type. Accepts a native (decoded) value
     * and determines whether it matches the current `Type` object.
     *
     * @param {*} val  The value to check.
     * @param {string} key  Optional. If the type check is happening in the context of a specific
     *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
     *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
     * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
     */
    Type.prototype.is = function(val, key) {
        return true;
    };

    /**
     * @ngdoc function
     * @name ui.router.util.type:Type#encode
     * @methodOf ui.router.util.type:Type
     *
     * @description
     * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
     * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
     * only needs to be a representation of `val` that has been coerced to a string.
     *
     * @param {*} val  The value to encode.
     * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
     *        meta-programming of `Type` objects.
     * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
     */
    Type.prototype.encode = function(val, key) {
        return val;
    };

    /**
     * @ngdoc function
     * @name ui.router.util.type:Type#decode
     * @methodOf ui.router.util.type:Type
     *
     * @description
     * Converts a parameter value (from URL string or transition param) to a custom/native value.
     *
     * @param {string} val  The URL parameter value to decode.
     * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
     *        meta-programming of `Type` objects.
     * @returns {*}  Returns a custom representation of the URL parameter value.
     */
    Type.prototype.decode = function(val, key) {
        return val;
    };

    /**
     * @ngdoc function
     * @name ui.router.util.type:Type#equals
     * @methodOf ui.router.util.type:Type
     *
     * @description
     * Determines whether two decoded values are equivalent.
     *
     * @param {*} a  A value to compare against.
     * @param {*} b  A value to compare against.
     * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
     */
    Type.prototype.equals = function(a, b) {
        return a == b;
    };

    Type.prototype.$subPattern = function() {
        var sub = this.pattern.toString();
        return sub.substr(1, sub.length - 2);
    };

    Type.prototype.pattern = /.*/;

    Type.prototype.toString = function() {
        return "{Type:" + this.name + "}";
    };

    /** Given an encoded string, or a decoded object, returns a decoded object */
    Type.prototype.$normalize = function(val) {
        return this.is(val) ? val : this.decode(val);
    };

    /*
     * Wraps an existing custom Type as an array of Type, depending on 'mode'.
     * e.g.:
     * - urlmatcher pattern "/path?{queryParam[]:int}"
     * - url: "/path?queryParam=1&queryParam=2
     * - $stateParams.queryParam will be [1, 2]
     * if `mode` is "auto", then
     * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
     * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
     */
    Type.prototype.$asArray = function(mode, isSearch) {
        if (!mode) return this;
        if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");

        function ArrayType(type, mode) {
            function bindTo(type, callbackName) {
                return function() {
                    return type[callbackName].apply(type, arguments);
                };
            }

            // Wrap non-array value as array
            function arrayWrap(val) {
                return isArray(val) ? val : (isDefined(val) ? [val] : []);
            }
            // Unwrap array value for "auto" mode. Return undefined for empty array.
            function arrayUnwrap(val) {
                switch (val.length) {
                    case 0:
                        return undefined;
                    case 1:
                        return mode === "auto" ? val[0] : val;
                    default:
                        return val;
                }
            }

            function falsey(val) {
                return !val;
            }

            // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
            function arrayHandler(callback, allTruthyMode) {
                return function handleArray(val) {
                    val = arrayWrap(val);
                    var result = map(val, callback);
                    if (allTruthyMode === true)
                        return filter(result, falsey).length === 0;
                    return arrayUnwrap(result);
                };
            }

            // Wraps type (.equals) functions to operate on each value of an array
            function arrayEqualsHandler(callback) {
                return function handleArray(val1, val2) {
                    var left = arrayWrap(val1),
                        right = arrayWrap(val2);
                    if (left.length !== right.length) return false;
                    for (var i = 0; i < left.length; i++) {
                        if (!callback(left[i], right[i])) return false;
                    }
                    return true;
                };
            }

            this.encode = arrayHandler(bindTo(type, 'encode'));
            this.decode = arrayHandler(bindTo(type, 'decode'));
            this.is = arrayHandler(bindTo(type, 'is'), true);
            this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
            this.pattern = type.pattern;
            this.$normalize = arrayHandler(bindTo(type, '$normalize'));
            this.name = type.name;
            this.$arrayMode = mode;
        }

        return new ArrayType(this, mode);
    };



    /**
     * @ngdoc object
     * @name ui.router.util.$urlMatcherFactory
     *
     * @description
     * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
     * is also available to providers under the name `$urlMatcherFactoryProvider`.
     */
    function $UrlMatcherFactory() {
        $$UMFP = this;

        var isCaseInsensitive = false,
            isStrictMode = true,
            defaultSquashPolicy = false;

        function valToString(val) {
            return val != null ? val.toString().replace(/\//g, "%2F") : val;
        }

        function valFromString(val) {
            return val != null ? val.toString().replace(/%2F/g, "/") : val;
        }

        var $types = {},
            enqueue = true,
            typeQueue = [],
            injector, defaultTypes = {
                string: {
                    encode: valToString,
                    decode: valFromString,
                    // TODO: in 1.0, make string .is() return false if value is undefined/null by default.
                    // In 0.2.x, string params are optional by default for backwards compat
                    is: function(val) {
                        return val == null || !isDefined(val) || typeof val === "string";
                    },
                    pattern: /[^/]*/
                },
                int: {
                    encode: valToString,
                    decode: function(val) {
                        return parseInt(val, 10);
                    },
                    is: function(val) {
                        return isDefined(val) && this.decode(val.toString()) === val;
                    },
                    pattern: /\d+/
                },
                bool: {
                    encode: function(val) {
                        return val ? 1 : 0;
                    },
                    decode: function(val) {
                        return parseInt(val, 10) !== 0;
                    },
                    is: function(val) {
                        return val === true || val === false;
                    },
                    pattern: /0|1/
                },
                date: {
                    encode: function(val) {
                        if (!this.is(val))
                            return undefined;
                        return [val.getFullYear(), ('0' + (val.getMonth() + 1)).slice(-2), ('0' + val.getDate()).slice(-2)].join("-");
                    },
                    decode: function(val) {
                        if (this.is(val)) return val;
                        var match = this.capture.exec(val);
                        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
                    },
                    is: function(val) {
                        return val instanceof Date && !isNaN(val.valueOf());
                    },
                    equals: function(a, b) {
                        return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();
                    },
                    pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
                    capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
                },
                json: {
                    encode: angular.toJson,
                    decode: angular.fromJson,
                    is: angular.isObject,
                    equals: angular.equals,
                    pattern: /[^/]*/
                },
                any: { // does not encode/decode
                    encode: angular.identity,
                    decode: angular.identity,
                    equals: angular.equals,
                    pattern: /.*/
                }
            };

        function getDefaultConfig() {
            return {
                strict: isStrictMode,
                caseInsensitive: isCaseInsensitive
            };
        }

        function isInjectable(value) {
            return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
        }

        /**
         * [Internal] Get the default value of a parameter, which may be an injectable function.
         */
        $UrlMatcherFactory.$$getDefaultValue = function(config) {
            if (!isInjectable(config.value)) return config.value;
            if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
            return injector.invoke(config.value);
        };

        /**
         * @ngdoc function
         * @name ui.router.util.$urlMatcherFactory#caseInsensitive
         * @methodOf ui.router.util.$urlMatcherFactory
         *
         * @description
         * Defines whether URL matching should be case sensitive (the default behavior), or not.
         *
         * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
         * @returns {boolean} the current value of caseInsensitive
         */
        this.caseInsensitive = function(value) {
            if (isDefined(value))
                isCaseInsensitive = value;
            return isCaseInsensitive;
        };

        /**
         * @ngdoc function
         * @name ui.router.util.$urlMatcherFactory#strictMode
         * @methodOf ui.router.util.$urlMatcherFactory
         *
         * @description
         * Defines whether URLs should match trailing slashes, or not (the default behavior).
         *
         * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
         * @returns {boolean} the current value of strictMode
         */
        this.strictMode = function(value) {
            if (isDefined(value))
                isStrictMode = value;
            return isStrictMode;
        };

        /**
         * @ngdoc function
         * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
         * @methodOf ui.router.util.$urlMatcherFactory
         *
         * @description
         * Sets the default behavior when generating or matching URLs with default parameter values.
         *
         * @param {string} value A string that defines the default parameter URL squashing behavior.
         *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
         *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
         *             parameter is surrounded by slashes, squash (remove) one slash from the URL
         *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
         *             the parameter value from the URL and replace it with this string.
         */
        this.defaultSquashPolicy = function(value) {
            if (!isDefined(value)) return defaultSquashPolicy;
            if (value !== true && value !== false && !isString(value))
                throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
            defaultSquashPolicy = value;
            return value;
        };

        /**
         * @ngdoc function
         * @name ui.router.util.$urlMatcherFactory#compile
         * @methodOf ui.router.util.$urlMatcherFactory
         *
         * @description
         * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
         *
         * @param {string} pattern  The URL pattern.
         * @param {Object} config  The config object hash.
         * @returns {UrlMatcher}  The UrlMatcher.
         */
        this.compile = function(pattern, config) {
            return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
        };

        /**
         * @ngdoc function
         * @name ui.router.util.$urlMatcherFactory#isMatcher
         * @methodOf ui.router.util.$urlMatcherFactory
         *
         * @description
         * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
         *
         * @param {Object} object  The object to perform the type check against.
         * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
         *          implementing all the same methods.
         */
        this.isMatcher = function(o) {
            if (!isObject(o)) return false;
            var result = true;

            forEach(UrlMatcher.prototype, function(val, name) {
                if (isFunction(val)) {
                    result = result && (isDefined(o[name]) && isFunction(o[name]));
                }
            });
            return result;
        };

        /**
         * @ngdoc function
         * @name ui.router.util.$urlMatcherFactory#type
         * @methodOf ui.router.util.$urlMatcherFactory
         *
         * @description
         * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
         * generate URLs with typed parameters.
         *
         * @param {string} name  The type name.
         * @param {Object|Function} definition   The type definition. See
         *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
         * @param {Object|Function} definitionFn (optional) A function that is injected before the app
         *        runtime starts.  The result of this function is merged into the existing `definition`.
         *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
         *
         * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
         *
         * @example
         * This is a simple example of a custom type that encodes and decodes items from an
         * array, using the array index as the URL-encoded value:
         *
         * <pre>
         * var list = ['John', 'Paul', 'George', 'Ringo'];
         *
         * $urlMatcherFactoryProvider.type('listItem', {
         *   encode: function(item) {
         *     // Represent the list item in the URL using its corresponding index
         *     return list.indexOf(item);
         *   },
         *   decode: function(item) {
         *     // Look up the list item by index
         *     return list[parseInt(item, 10)];
         *   },
         *   is: function(item) {
         *     // Ensure the item is valid by checking to see that it appears
         *     // in the list
         *     return list.indexOf(item) > -1;
         *   }
         * });
         *
         * $stateProvider.state('list', {
         *   url: "/list/{item:listItem}",
         *   controller: function($scope, $stateParams) {
         *     console.log($stateParams.item);
         *   }
         * });
         *
         * // ...
         *
         * // Changes URL to '/list/3', logs "Ringo" to the console
         * $state.go('list', { item: "Ringo" });
         * </pre>
         *
         * This is a more complex example of a type that relies on dependency injection to
         * interact with services, and uses the parameter name from the URL to infer how to
         * handle encoding and decoding parameter values:
         *
         * <pre>
         * // Defines a custom type that gets a value from a service,
         * // where each service gets different types of values from
         * // a backend API:
         * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
         *
         *   // Matches up services to URL parameter names
         *   var services = {
         *     user: Users,
         *     post: Posts
         *   };
         *
         *   return {
         *     encode: function(object) {
         *       // Represent the object in the URL using its unique ID
         *       return object.id;
         *     },
         *     decode: function(value, key) {
         *       // Look up the object by ID, using the parameter
         *       // name (key) to call the correct service
         *       return services[key].findById(value);
         *     },
         *     is: function(object, key) {
         *       // Check that object is a valid dbObject
         *       return angular.isObject(object) && object.id && services[key];
         *     }
         *     equals: function(a, b) {
         *       // Check the equality of decoded objects by comparing
         *       // their unique IDs
         *       return a.id === b.id;
         *     }
         *   };
         * });
         *
         * // In a config() block, you can then attach URLs with
         * // type-annotated parameters:
         * $stateProvider.state('users', {
         *   url: "/users",
         *   // ...
         * }).state('users.item', {
         *   url: "/{user:dbObject}",
         *   controller: function($scope, $stateParams) {
         *     // $stateParams.user will now be an object returned from
         *     // the Users service
         *   },
         *   // ...
         * });
         * </pre>
         */
        this.type = function(name, definition, definitionFn) {
            if (!isDefined(definition)) return $types[name];
            if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

            $types[name] = new Type(extend({
                name: name
            }, definition));
            if (definitionFn) {
                typeQueue.push({
                    name: name,
                    def: definitionFn
                });
                if (!enqueue) flushTypeQueue();
            }
            return this;
        };

        // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
        function flushTypeQueue() {
            while (typeQueue.length) {
                var type = typeQueue.shift();
                if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
                angular.extend($types[type.name], injector.invoke(type.def));
            }
        }

        // Register default types. Store them in the prototype of $types.
        forEach(defaultTypes, function(type, name) {
            $types[name] = new Type(extend({
                name: name
            }, type));
        });
        $types = inherit($types, {});

        /* No need to document $get, since it returns this */
        this.$get = ['$injector', function($injector) {
            injector = $injector;
            enqueue = false;
            flushTypeQueue();

            forEach(defaultTypes, function(type, name) {
                if (!$types[name]) $types[name] = new Type(type);
            });
            return this;
        }];

        this.Param = function Param(id, type, config, location) {
            var self = this;
            config = unwrapShorthand(config);
            type = getType(config, type, location);
            var arrayMode = getArrayMode();
            type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
            if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
                config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
            var isOptional = config.value !== undefined;
            var squash = getSquashPolicy(config, isOptional);
            var replace = getReplace(config, arrayMode, isOptional, squash);

            function unwrapShorthand(config) {
                var keys = isObject(config) ? objectKeys(config) : [];
                var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
                    indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
                if (isShorthand) config = {
                    value: config
                };
                config.$$fn = isInjectable(config.value) ? config.value : function() {
                    return config.value;
                };
                return config;
            }

            function getType(config, urlType, location) {
                if (config.type && urlType) throw new Error("Param '" + id + "' has two type configurations.");
                if (urlType) return urlType;
                if (!config.type) return (location === "config" ? $types.any : $types.string);
                return config.type instanceof Type ? config.type : new Type(config.type);
            }

            // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
            function getArrayMode() {
                var arrayDefaults = {
                    array: (location === "search" ? "auto" : false)
                };
                var arrayParamNomenclature = id.match(/\[\]$/) ? {
                    array: true
                } : {};
                return extend(arrayDefaults, arrayParamNomenclature, config).array;
            }

            /**
             * returns false, true, or the squash value to indicate the "default parameter url squash policy".
             */
            function getSquashPolicy(config, isOptional) {
                var squash = config.squash;
                if (!isOptional || squash === false) return false;
                if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
                if (squash === true || isString(squash)) return squash;
                throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
            }

            function getReplace(config, arrayMode, isOptional, squash) {
                var replace, configuredKeys, defaultPolicy = [{
                    from: "",
                    to: (isOptional || arrayMode ? undefined : "")
                }, {
                    from: null,
                    to: (isOptional || arrayMode ? undefined : "")
                }];
                replace = isArray(config.replace) ? config.replace : [];
                if (isString(squash))
                    replace.push({
                        from: squash,
                        to: undefined
                    });
                configuredKeys = map(replace, function(item) {
                    return item.from;
                });
                return filter(defaultPolicy, function(item) {
                    return indexOf(configuredKeys, item.from) === -1;
                }).concat(replace);
            }

            /**
             * [Internal] Get the default value of a parameter, which may be an injectable function.
             */
            function $$getDefaultValue() {
                if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
                var defaultValue = injector.invoke(config.$$fn);
                if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))
                    throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
                return defaultValue;
            }

            /**
             * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
             * default value, which may be the result of an injectable function.
             */
            function $value(value) {
                function hasReplaceVal(val) {
                    return function(obj) {
                        return obj.from === val;
                    };
                }

                function $replace(value) {
                    var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) {
                        return obj.to;
                    });
                    return replacement.length ? replacement[0] : value;
                }
                value = $replace(value);
                return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
            }

            function toString() {
                return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}";
            }

            extend(this, {
                id: id,
                type: type,
                location: location,
                array: arrayMode,
                squash: squash,
                replace: replace,
                isOptional: isOptional,
                value: $value,
                dynamic: undefined,
                config: config,
                toString: toString
            });
        };

        function ParamSet(params) {
            extend(this, params || {});
        }

        ParamSet.prototype = {
            $$new: function() {
                return inherit(this, extend(new ParamSet(), {
                    $$parent: this
                }));
            },
            $$keys: function() {
                var keys = [],
                    chain = [],
                    parent = this,
                    ignore = objectKeys(ParamSet.prototype);
                while (parent) {
                    chain.push(parent);
                    parent = parent.$$parent;
                }
                chain.reverse();
                forEach(chain, function(paramset) {
                    forEach(objectKeys(paramset), function(key) {
                        if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
                    });
                });
                return keys;
            },
            $$values: function(paramValues) {
                var values = {},
                    self = this;
                forEach(self.$$keys(), function(key) {
                    values[key] = self[key].value(paramValues && paramValues[key]);
                });
                return values;
            },
            $$equals: function(paramValues1, paramValues2) {
                var equal = true,
                    self = this;
                forEach(self.$$keys(), function(key) {
                    var left = paramValues1 && paramValues1[key],
                        right = paramValues2 && paramValues2[key];
                    if (!self[key].type.equals(left, right)) equal = false;
                });
                return equal;
            },
            $$validates: function $$validate(paramValues) {
                var keys = this.$$keys(),
                    i, param, rawVal, normalized, encoded;
                for (i = 0; i < keys.length; i++) {
                    param = this[keys[i]];
                    rawVal = paramValues[keys[i]];
                    if ((rawVal === undefined || rawVal === null) && param.isOptional)
                        break; // There was no parameter value, but the param is optional
                    normalized = param.type.$normalize(rawVal);
                    if (!param.type.is(normalized))
                        return false; // The value was not of the correct Type, and could not be decoded to the correct Type
                    encoded = param.type.encode(normalized);
                    if (angular.isString(encoded) && !param.type.pattern.exec(encoded))
                        return false; // The value was of the correct type, but when encoded, did not match the Type's regexp
                }
                return true;
            },
            $$parent: undefined
        };

        this.ParamSet = ParamSet;
    }

    // Register as a provider so it's available to other providers
    angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
    angular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) {}]);

    /**
     * @ngdoc object
     * @name ui.router.router.$urlRouterProvider
     *
     * @requires ui.router.util.$urlMatcherFactoryProvider
     * @requires $locationProvider
     *
     * @description
     * `$urlRouterProvider` has the responsibility of watching `$location`. 
     * When `$location` changes it runs through a list of rules one by one until a 
     * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
     * a url in a state configuration. All urls are compiled into a UrlMatcher object.
     *
     * There are several methods on `$urlRouterProvider` that make it useful to use directly
     * in your module config.
     */
    $UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];

    function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
        var rules = [],
            otherwise = null,
            interceptDeferred = false,
            listener;

        // Returns a string that is a prefix of all strings matching the RegExp
        function regExpPrefix(re) {
            var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
            return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
        }

        // Interpolates matched values into a String.replace()-style pattern
        function interpolate(pattern, match) {
            return pattern.replace(/\$(\$|\d{1,2})/, function(m, what) {
                return match[what === '$' ? 0 : Number(what)];
            });
        }

        /**
         * @ngdoc function
         * @name ui.router.router.$urlRouterProvider#rule
         * @methodOf ui.router.router.$urlRouterProvider
         *
         * @description
         * Defines rules that are used by `$urlRouterProvider` to find matches for
         * specific URLs.
         *
         * @example
         * <pre>
         * var app = angular.module('app', ['ui.router.router']);
         *
         * app.config(function ($urlRouterProvider) {
         *   // Here's an example of how you might allow case insensitive urls
         *   $urlRouterProvider.rule(function ($injector, $location) {
         *     var path = $location.path(),
         *         normalized = path.toLowerCase();
         *
         *     if (path !== normalized) {
         *       return normalized;
         *     }
         *   });
         * });
         * </pre>
         *
         * @param {object} rule Handler function that takes `$injector` and `$location`
         * services as arguments. You can use them to return a valid path as a string.
         *
         * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
         */
        this.rule = function(rule) {
            if (!isFunction(rule)) throw new Error("'rule' must be a function");
            rules.push(rule);
            return this;
        };

        /**
         * @ngdoc object
         * @name ui.router.router.$urlRouterProvider#otherwise
         * @methodOf ui.router.router.$urlRouterProvider
         *
         * @description
         * Defines a path that is used when an invalid route is requested.
         *
         * @example
         * <pre>
         * var app = angular.module('app', ['ui.router.router']);
         *
         * app.config(function ($urlRouterProvider) {
         *   // if the path doesn't match any of the urls you configured
         *   // otherwise will take care of routing the user to the
         *   // specified url
         *   $urlRouterProvider.otherwise('/index');
         *
         *   // Example of using function rule as param
         *   $urlRouterProvider.otherwise(function ($injector, $location) {
         *     return '/a/valid/url';
         *   });
         * });
         * </pre>
         *
         * @param {string|object} rule The url path you want to redirect to or a function 
         * rule that returns the url path. The function version is passed two params: 
         * `$injector` and `$location` services, and must return a url string.
         *
         * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
         */
        this.otherwise = function(rule) {
            if (isString(rule)) {
                var redirect = rule;
                rule = function() {
                    return redirect;
                };
            } else if (!isFunction(rule)) throw new Error("'rule' must be a function");
            otherwise = rule;
            return this;
        };


        function handleIfMatch($injector, handler, match) {
            if (!match) return false;
            var result = $injector.invoke(handler, handler, {
                $match: match
            });
            return isDefined(result) ? result : true;
        }

        /**
         * @ngdoc function
         * @name ui.router.router.$urlRouterProvider#when
         * @methodOf ui.router.router.$urlRouterProvider
         *
         * @description
         * Registers a handler for a given url matching. if handle is a string, it is
         * treated as a redirect, and is interpolated according to the syntax of match
         * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
         *
         * If the handler is a function, it is injectable. It gets invoked if `$location`
         * matches. You have the option of inject the match object as `$match`.
         *
         * The handler can return
         *
         * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
         *   will continue trying to find another one that matches.
         * - **string** which is treated as a redirect and passed to `$location.url()`
         * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
         *
         * @example
         * <pre>
         * var app = angular.module('app', ['ui.router.router']);
         *
         * app.config(function ($urlRouterProvider) {
         *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
         *     if ($state.$current.navigable !== state ||
         *         !equalForKeys($match, $stateParams) {
         *      $state.transitionTo(state, $match, false);
         *     }
         *   });
         * });
         * </pre>
         *
         * @param {string|object} what The incoming path that you want to redirect.
         * @param {string|object} handler The path you want to redirect your user to.
         */
        this.when = function(what, handler) {
            var redirect, handlerIsString = isString(handler);
            if (isString(what)) what = $urlMatcherFactory.compile(what);

            if (!handlerIsString && !isFunction(handler) && !isArray(handler))
                throw new Error("invalid 'handler' in when()");

            var strategies = {
                matcher: function(what, handler) {
                    if (handlerIsString) {
                        redirect = $urlMatcherFactory.compile(handler);
                        handler = ['$match', function($match) {
                            return redirect.format($match);
                        }];
                    }
                    return extend(function($injector, $location) {
                        return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
                    }, {
                        prefix: isString(what.prefix) ? what.prefix : ''
                    });
                },
                regex: function(what, handler) {
                    if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

                    if (handlerIsString) {
                        redirect = handler;
                        handler = ['$match', function($match) {
                            return interpolate(redirect, $match);
                        }];
                    }
                    return extend(function($injector, $location) {
                        return handleIfMatch($injector, handler, what.exec($location.path()));
                    }, {
                        prefix: regExpPrefix(what)
                    });
                }
            };

            var check = {
                matcher: $urlMatcherFactory.isMatcher(what),
                regex: what instanceof RegExp
            };

            for (var n in check) {
                if (check[n]) return this.rule(strategies[n](what, handler));
            }

            throw new Error("invalid 'what' in when()");
        };

        /**
         * @ngdoc function
         * @name ui.router.router.$urlRouterProvider#deferIntercept
         * @methodOf ui.router.router.$urlRouterProvider
         *
         * @description
         * Disables (or enables) deferring location change interception.
         *
         * If you wish to customize the behavior of syncing the URL (for example, if you wish to
         * defer a transition but maintain the current URL), call this method at configuration time.
         * Then, at run time, call `$urlRouter.listen()` after you have configured your own
         * `$locationChangeSuccess` event handler.
         *
         * @example
         * <pre>
         * var app = angular.module('app', ['ui.router.router']);
         *
         * app.config(function ($urlRouterProvider) {
         *
         *   // Prevent $urlRouter from automatically intercepting URL changes;
         *   // this allows you to configure custom behavior in between
         *   // location changes and route synchronization:
         *   $urlRouterProvider.deferIntercept();
         *
         * }).run(function ($rootScope, $urlRouter, UserService) {
         *
         *   $rootScope.$on('$locationChangeSuccess', function(e) {
         *     // UserService is an example service for managing user state
         *     if (UserService.isLoggedIn()) return;
         *
         *     // Prevent $urlRouter's default handler from firing
         *     e.preventDefault();
         *
         *     UserService.handleLogin().then(function() {
         *       // Once the user has logged in, sync the current URL
         *       // to the router:
         *       $urlRouter.sync();
         *     });
         *   });
         *
         *   // Configures $urlRouter's listener *after* your custom listener
         *   $urlRouter.listen();
         * });
         * </pre>
         *
         * @param {boolean} defer Indicates whether to defer location change interception. Passing
                  no parameter is equivalent to `true`.
         */
        this.deferIntercept = function(defer) {
            if (defer === undefined) defer = true;
            interceptDeferred = defer;
        };

        /**
         * @ngdoc object
         * @name ui.router.router.$urlRouter
         *
         * @requires $location
         * @requires $rootScope
         * @requires $injector
         * @requires $browser
         *
         * @description
         *
         */
        this.$get = $get;
        $get.$inject = ['$location', '$rootScope', '$injector', '$browser'];

        function $get($location, $rootScope, $injector, $browser) {

            var baseHref = $browser.baseHref(),
                location = $location.url(),
                lastPushedUrl;

            function appendBasePath(url, isHtml5, absolute) {
                if (baseHref === '/') return url;
                if (isHtml5) return baseHref.slice(0, -1) + url;
                if (absolute) return baseHref.slice(1) + url;
                return url;
            }

            // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
            function update(evt) {
                if (evt && evt.defaultPrevented) return;
                var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
                lastPushedUrl = undefined;
                // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
                //if (ignoreUpdate) return true;

                function check(rule) {
                    var handled = rule($injector, $location);

                    if (!handled) return false;
                    if (isString(handled)) $location.replace().url(handled);
                    return true;
                }
                var n = rules.length,
                    i;

                for (i = 0; i < n; i++) {
                    if (check(rules[i])) return;
                }
                // always check otherwise last to allow dynamic updates to the set of rules
                if (otherwise) check(otherwise);
            }

            function listen() {
                listener = listener || $rootScope.$on('$locationChangeSuccess', update);
                return listener;
            }

            if (!interceptDeferred) listen();

            return {
                /**
                 * @ngdoc function
                 * @name ui.router.router.$urlRouter#sync
                 * @methodOf ui.router.router.$urlRouter
                 *
                 * @description
                 * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
                 * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
                 * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
                 * with the transition by calling `$urlRouter.sync()`.
                 *
                 * @example
                 * <pre>
                 * angular.module('app', ['ui.router'])
                 *   .run(function($rootScope, $urlRouter) {
                 *     $rootScope.$on('$locationChangeSuccess', function(evt) {
                 *       // Halt state change from even starting
                 *       evt.preventDefault();
                 *       // Perform custom logic
                 *       var meetsRequirement = ...
                 *       // Continue with the update and state transition if logic allows
                 *       if (meetsRequirement) $urlRouter.sync();
                 *     });
                 * });
                 * </pre>
                 */
                sync: function() {
                    update();
                },

                listen: function() {
                    return listen();
                },

                update: function(read) {
                    if (read) {
                        location = $location.url();
                        return;
                    }
                    if ($location.url() === location) return;

                    $location.url(location);
                    $location.replace();
                },

                push: function(urlMatcher, params, options) {
                    var url = urlMatcher.format(params || {});

                    // Handle the special hash param, if needed
                    if (url !== null && params && params['#']) {
                        url += '#' + params['#'];
                    }

                    $location.url(url);
                    lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
                    if (options && options.replace) $location.replace();
                },

                /**
                 * @ngdoc function
                 * @name ui.router.router.$urlRouter#href
                 * @methodOf ui.router.router.$urlRouter
                 *
                 * @description
                 * A URL generation method that returns the compiled URL for a given
                 * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
                 *
                 * @example
                 * <pre>
                 * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
                 *   person: "bob"
                 * });
                 * // $bob == "/about/bob";
                 * </pre>
                 *
                 * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
                 * @param {object=} params An object of parameter values to fill the matcher's required parameters.
                 * @param {object=} options Options object. The options are:
                 *
                 * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
                 *
                 * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
                 */
                href: function(urlMatcher, params, options) {
                    if (!urlMatcher.validates(params)) return null;

                    var isHtml5 = $locationProvider.html5Mode();
                    if (angular.isObject(isHtml5)) {
                        isHtml5 = isHtml5.enabled;
                    }

                    var url = urlMatcher.format(params);
                    options = options || {};

                    if (!isHtml5 && url !== null) {
                        url = "#" + $locationProvider.hashPrefix() + url;
                    }

                    // Handle special hash param, if needed
                    if (url !== null && params && params['#']) {
                        url += '#' + params['#'];
                    }

                    url = appendBasePath(url, isHtml5, options.absolute);

                    if (!options.absolute || !url) {
                        return url;
                    }

                    var slash = (!isHtml5 && url ? '/' : ''),
                        port = $location.port();
                    port = (port === 80 || port === 443 ? '' : ':' + port);

                    return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
                }
            };
        }
    }

    angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

    /**
     * @ngdoc object
     * @name ui.router.state.$stateProvider
     *
     * @requires ui.router.router.$urlRouterProvider
     * @requires ui.router.util.$urlMatcherFactoryProvider
     *
     * @description
     * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
     * on state.
     *
     * A state corresponds to a "place" in the application in terms of the overall UI and
     * navigation. A state describes (via the controller / template / view properties) what
     * the UI looks like and does at that place.
     *
     * States often have things in common, and the primary way of factoring out these
     * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
     * nested states.
     *
     * The `$stateProvider` provides interfaces to declare these states for your app.
     */
    $StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];

    function $StateProvider($urlRouterProvider, $urlMatcherFactory) {

        var root, states = {},
            $state, queue = {},
            abstractKey = 'abstract';

        // Builds state properties from definition passed to registerState()
        var stateBuilder = {

            // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
            // state.children = [];
            // if (parent) parent.children.push(state);
            parent: function(state) {
                if (isDefined(state.parent) && state.parent) return findState(state.parent);
                // regex matches any valid composite state name
                // would match "contact.list" but not "contacts"
                var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
                return compositeName ? findState(compositeName[1]) : root;
            },

            // inherit 'data' from parent and override by own values (if any)
            data: function(state) {
                if (state.parent && state.parent.data) {
                    state.data = state.self.data = extend({}, state.parent.data, state.data);
                }
                return state.data;
            },

            // Build a URLMatcher if necessary, either via a relative or absolute URL
            url: function(state) {
                var url = state.url,
                    config = {
                        params: state.params || {}
                    };

                if (isString(url)) {
                    if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
                    return (state.parent.navigable || root).url.concat(url, config);
                }

                if (!url || $urlMatcherFactory.isMatcher(url)) return url;
                throw new Error("Invalid url '" + url + "' in state '" + state + "'");
            },

            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
            navigable: function(state) {
                return state.url ? state : (state.parent ? state.parent.navigable : null);
            },

            // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
            ownParams: function(state) {
                var params = state.url && state.url.params || new $$UMFP.ParamSet();
                forEach(state.params || {}, function(config, id) {
                    if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
                });
                return params;
            },

            // Derive parameters for this state and ensure they're a super-set of parent's parameters
            params: function(state) {
                return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();
            },

            // If there is no explicit multi-view configuration, make one up so we don't have
            // to handle both cases in the view directive later. Note that having an explicit
            // 'views' property will mean the default unnamed view properties are ignored. This
            // is also a good time to resolve view names to absolute names, so everything is a
            // straight lookup at link time.
            views: function(state) {
                var views = {};

                forEach(isDefined(state.views) ? state.views : {
                    '': state
                }, function(view, name) {
                    if (name.indexOf('@') < 0) name += '@' + state.parent.name;
                    views[name] = view;
                });
                return views;
            },

            // Keep a full path from the root down to this state as this is needed for state activation.
            path: function(state) {
                return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
            },

            // Speed up $state.contains() as it's used a lot
            includes: function(state) {
                var includes = state.parent ? extend({}, state.parent.includes) : {};
                includes[state.name] = true;
                return includes;
            },

            $delegates: {}
        };

        function isRelative(stateName) {
            return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
        }

        function findState(stateOrName, base) {
            if (!stateOrName) return undefined;

            var isStr = isString(stateOrName),
                name = isStr ? stateOrName : stateOrName.name,
                path = isRelative(name);

            if (path) {
                if (!base) throw new Error("No reference point given for path '" + name + "'");
                base = findState(base);

                var rel = name.split("."),
                    i = 0,
                    pathLength = rel.length,
                    current = base;

                for (; i < pathLength; i++) {
                    if (rel[i] === "" && i === 0) {
                        current = base;
                        continue;
                    }
                    if (rel[i] === "^") {
                        if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
                        current = current.parent;
                        continue;
                    }
                    break;
                }
                rel = rel.slice(i).join(".");
                name = current.name + (current.name && rel ? "." : "") + rel;
            }
            var state = states[name];

            if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
                return state;
            }
            return undefined;
        }

        function queueState(parentName, state) {
            if (!queue[parentName]) {
                queue[parentName] = [];
            }
            queue[parentName].push(state);
        }

        function flushQueuedChildren(parentName) {
            var queued = queue[parentName] || [];
            while (queued.length) {
                registerState(queued.shift());
            }
        }

        function registerState(state) {
            // Wrap a new object around the state so we can store our private details easily.
            state = inherit(state, {
                self: state,
                resolve: state.resolve || {},
                toString: function() {
                    return this.name;
                }
            });

            var name = state.name;
            if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
            if (states.hasOwnProperty(name)) throw new Error("State '" + name + "'' is already defined");

            // Get parent name
            var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.')) : (isString(state.parent)) ? state.parent : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name : '';

            // If parent is not registered yet, add state to queue and register later
            if (parentName && !states[parentName]) {
                return queueState(parentName, state.self);
            }

            for (var key in stateBuilder) {
                if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
            }
            states[name] = state;

            // Register the state in the global state list and with $urlRouter if necessary.
            if (!state[abstractKey] && state.url) {
                $urlRouterProvider.when(state.url, ['$match', '$stateParams', function($match, $stateParams) {
                    if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
                        $state.transitionTo(state, $match, {
                            inherit: true,
                            location: false
                        });
                    }
                }]);
            }

            // Register any queued children
            flushQueuedChildren(name);

            return state;
        }

        // Checks text to see if it looks like a glob.
        function isGlob(text) {
            return text.indexOf('*') > -1;
        }

        // Returns true if glob matches current $state name.
        function doesStateMatchGlob(glob) {
            var globSegments = glob.split('.'),
                segments = $state.$current.name.split('.');

            //match single stars
            for (var i = 0, l = globSegments.length; i < l; i++) {
                if (globSegments[i] === '*') {
                    segments[i] = '*';
                }
            }

            //match greedy starts
            if (globSegments[0] === '**') {
                segments = segments.slice(indexOf(segments, globSegments[1]));
                segments.unshift('**');
            }
            //match greedy ends
            if (globSegments[globSegments.length - 1] === '**') {
                segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
                segments.push('**');
            }

            if (globSegments.length != segments.length) {
                return false;
            }

            return segments.join('') === globSegments.join('');
        }


        // Implicit root state that is always active
        root = registerState({
            name: '',
            url: '^',
            views: null,
            'abstract': true
        });
        root.navigable = null;


        /**
         * @ngdoc function
         * @name ui.router.state.$stateProvider#decorator
         * @methodOf ui.router.state.$stateProvider
         *
         * @description
         * Allows you to extend (carefully) or override (at your own peril) the 
         * `stateBuilder` object used internally by `$stateProvider`. This can be used 
         * to add custom functionality to ui-router, for example inferring templateUrl 
         * based on the state name.
         *
         * When passing only a name, it returns the current (original or decorated) builder
         * function that matches `name`.
         *
         * The builder functions that can be decorated are listed below. Though not all
         * necessarily have a good use case for decoration, that is up to you to decide.
         *
         * In addition, users can attach custom decorators, which will generate new 
         * properties within the state's internal definition. There is currently no clear 
         * use-case for this beyond accessing internal states (i.e. $state.$current), 
         * however, expect this to become increasingly relevant as we introduce additional 
         * meta-programming features.
         *
         * **Warning**: Decorators should not be interdependent because the order of 
         * execution of the builder functions in non-deterministic. Builder functions 
         * should only be dependent on the state definition object and super function.
         *
         *
         * Existing builder functions and current return values:
         *
         * - **parent** `{object}` - returns the parent state object.
         * - **data** `{object}` - returns state data, including any inherited data that is not
         *   overridden by own values (if any).
         * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
         *   or `null`.
         * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
         *   navigable).
         * - **params** `{object}` - returns an array of state params that are ensured to 
         *   be a super-set of parent's params.
         * - **views** `{object}` - returns a views object where each key is an absolute view 
         *   name (i.e. "viewName@stateName") and each value is the config object 
         *   (template, controller) for the view. Even when you don't use the views object 
         *   explicitly on a state config, one is still created for you internally.
         *   So by decorating this builder function you have access to decorating template 
         *   and controller properties.
         * - **ownParams** `{object}` - returns an array of params that belong to the state, 
         *   not including any params defined by ancestor states.
         * - **path** `{string}` - returns the full path from the root down to this state. 
         *   Needed for state activation.
         * - **includes** `{object}` - returns an object that includes every state that 
         *   would pass a `$state.includes()` test.
         *
         * @example
         * <pre>
         * // Override the internal 'views' builder with a function that takes the state
         * // definition, and a reference to the internal function being overridden:
         * $stateProvider.decorator('views', function (state, parent) {
         *   var result = {},
         *       views = parent(state);
         *
         *   angular.forEach(views, function (config, name) {
         *     var autoName = (state.name + '.' + name).replace('.', '/');
         *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
         *     result[name] = config;
         *   });
         *   return result;
         * });
         *
         * $stateProvider.state('home', {
         *   views: {
         *     'contact.list': { controller: 'ListController' },
         *     'contact.item': { controller: 'ItemController' }
         *   }
         * });
         *
         * // ...
         *
         * $state.go('home');
         * // Auto-populates list and item views with /partials/home/contact/list.html,
         * // and /partials/home/contact/item.html, respectively.
         * </pre>
         *
         * @param {string} name The name of the builder function to decorate. 
         * @param {object} func A function that is responsible for decorating the original 
         * builder function. The function receives two parameters:
         *
         *   - `{object}` - state - The state config object.
         *   - `{object}` - super - The original builder function.
         *
         * @return {object} $stateProvider - $stateProvider instance
         */
        this.decorator = decorator;

        function decorator(name, func) {
            /*jshint validthis: true */
            if (isString(name) && !isDefined(func)) {
                return stateBuilder[name];
            }
            if (!isFunction(func) || !isString(name)) {
                return this;
            }
            if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
                stateBuilder.$delegates[name] = stateBuilder[name];
            }
            stateBuilder[name] = func;
            return this;
        }

        /**
         * @ngdoc function
         * @name ui.router.state.$stateProvider#state
         * @methodOf ui.router.state.$stateProvider
         *
         * @description
         * Registers a state configuration under a given state name. The stateConfig object
         * has the following acceptable properties.
         *
         * @param {string} name A unique state name, e.g. "home", "about", "contacts".
         * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
         * @param {object} stateConfig State configuration object.
         * @param {string|function=} stateConfig.template
         * <a id='template'></a>
         *   html template as a string or a function that returns
         *   an html template as a string which should be used by the uiView directives. This property 
         *   takes precedence over templateUrl.
         *   
         *   If `template` is a function, it will be called with the following parameters:
         *
         *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
         *     applying the current state
         *
         * <pre>template:
         *   "<h1>inline template definition</h1>" +
         *   "<div ui-view></div>"</pre>
         * <pre>template: function(params) {
         *       return "<h1>generated template</h1>"; }</pre>
         * </div>
         *
         * @param {string|function=} stateConfig.templateUrl
         * <a id='templateUrl'></a>
         *
         *   path or function that returns a path to an html
         *   template that should be used by uiView.
         *   
         *   If `templateUrl` is a function, it will be called with the following parameters:
         *
         *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
         *     applying the current state
         *
         * <pre>templateUrl: "home.html"</pre>
         * <pre>templateUrl: function(params) {
         *     return myTemplates[params.pageId]; }</pre>
         *
         * @param {function=} stateConfig.templateProvider
         * <a id='templateProvider'></a>
         *    Provider function that returns HTML content string.
         * <pre> templateProvider:
         *       function(MyTemplateService, params) {
         *         return MyTemplateService.getTemplate(params.pageId);
         *       }</pre>
         *
         * @param {string|function=} stateConfig.controller
         * <a id='controller'></a>
         *
         *  Controller fn that should be associated with newly
         *   related scope or the name of a registered controller if passed as a string.
         *   Optionally, the ControllerAs may be declared here.
         * <pre>controller: "MyRegisteredController"</pre>
         * <pre>controller:
         *     "MyRegisteredController as fooCtrl"}</pre>
         * <pre>controller: function($scope, MyService) {
         *     $scope.data = MyService.getData(); }</pre>
         *
         * @param {function=} stateConfig.controllerProvider
         * <a id='controllerProvider'></a>
         *
         * Injectable provider function that returns the actual controller or string.
         * <pre>controllerProvider:
         *   function(MyResolveData) {
         *     if (MyResolveData.foo)
         *       return "FooCtrl"
         *     else if (MyResolveData.bar)
         *       return "BarCtrl";
         *     else return function($scope) {
         *       $scope.baz = "Qux";
         *     }
         *   }</pre>
         *
         * @param {string=} stateConfig.controllerAs
         * <a id='controllerAs'></a>
         * 
         * A controller alias name. If present the controller will be
         *   published to scope under the controllerAs name.
         * <pre>controllerAs: "myCtrl"</pre>
         *
         * @param {string|object=} stateConfig.parent
         * <a id='parent'></a>
         * Optionally specifies the parent state of this state.
         *
         * <pre>parent: 'parentState'</pre>
         * <pre>parent: parentState // JS variable</pre>
         *
         * @param {object=} stateConfig.resolve
         * <a id='resolve'></a>
         *
         * An optional map&lt;string, function&gt; of dependencies which
         *   should be injected into the controller. If any of these dependencies are promises, 
         *   the router will wait for them all to be resolved before the controller is instantiated.
         *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
         *   and the values of the resolved promises are injected into any controllers that reference them.
         *   If any  of the promises are rejected the $stateChangeError event is fired.
         *
         *   The map object is:
         *   
         *   - key - {string}: name of dependency to be injected into controller
         *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
         *     it is injected and return value it treated as dependency. If result is a promise, it is 
         *     resolved before its value is injected into controller.
         *
         * <pre>resolve: {
         *     myResolve1:
         *       function($http, $stateParams) {
         *         return $http.get("/api/foos/"+stateParams.fooID);
         *       }
         *     }</pre>
         *
         * @param {string=} stateConfig.url
         * <a id='url'></a>
         *
         *   A url fragment with optional parameters. When a state is navigated or
         *   transitioned to, the `$stateParams` service will be populated with any 
         *   parameters that were passed.
         *
         *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
         *   more details on acceptable patterns )
         *
         * examples:
         * <pre>url: "/home"
         * url: "/users/:userid"
         * url: "/books/{bookid:[a-zA-Z_-]}"
         * url: "/books/{categoryid:int}"
         * url: "/books/{publishername:string}/{categoryid:int}"
         * url: "/messages?before&after"
         * url: "/messages?{before:date}&{after:date}"
         * url: "/messages/:mailboxid?{before:date}&{after:date}"
         * </pre>
         *
         * @param {object=} stateConfig.views
         * <a id='views'></a>
         * an optional map&lt;string, object&gt; which defined multiple views, or targets views
         * manually/explicitly.
         *
         * Examples:
         *
         * Targets three named `ui-view`s in the parent state's template
         * <pre>views: {
         *     header: {
         *       controller: "headerCtrl",
         *       templateUrl: "header.html"
         *     }, body: {
         *       controller: "bodyCtrl",
         *       templateUrl: "body.html"
         *     }, footer: {
         *       controller: "footCtrl",
         *       templateUrl: "footer.html"
         *     }
         *   }</pre>
         *
         * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
         * <pre>views: {
         *     'header@top': {
         *       controller: "msgHeaderCtrl",
         *       templateUrl: "msgHeader.html"
         *     }, 'body': {
         *       controller: "messagesCtrl",
         *       templateUrl: "messages.html"
         *     }
         *   }</pre>
         *
         * @param {boolean=} [stateConfig.abstract=false]
         * <a id='abstract'></a>
         * An abstract state will never be directly activated,
         *   but can provide inherited properties to its common children states.
         * <pre>abstract: true</pre>
         *
         * @param {function=} stateConfig.onEnter
         * <a id='onEnter'></a>
         *
         * Callback function for when a state is entered. Good way
         *   to trigger an action or dispatch an event, such as opening a dialog.
         * If minifying your scripts, make sure to explictly annotate this function,
         * because it won't be automatically annotated by your build tools.
         *
         * <pre>onEnter: function(MyService, $stateParams) {
         *     MyService.foo($stateParams.myParam);
         * }</pre>
         *
         * @param {function=} stateConfig.onExit
         * <a id='onExit'></a>
         *
         * Callback function for when a state is exited. Good way to
         *   trigger an action or dispatch an event, such as opening a dialog.
         * If minifying your scripts, make sure to explictly annotate this function,
         * because it won't be automatically annotated by your build tools.
         *
         * <pre>onExit: function(MyService, $stateParams) {
         *     MyService.cleanup($stateParams.myParam);
         * }</pre>
         *
         * @param {boolean=} [stateConfig.reloadOnSearch=true]
         * <a id='reloadOnSearch'></a>
         *
         * If `false`, will not retrigger the same state
         *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
         *   Useful for when you'd like to modify $location.search() without triggering a reload.
         * <pre>reloadOnSearch: false</pre>
         *
         * @param {object=} stateConfig.data
         * <a id='data'></a>
         *
         * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
         *   prototypally inherited.  In other words, adding a data property to a state adds it to
         *   the entire subtree via prototypal inheritance.
         *
         * <pre>data: {
         *     requiredRole: 'foo'
         * } </pre>
         *
         * @param {object=} stateConfig.params
         * <a id='params'></a>
         *
         * A map which optionally configures parameters declared in the `url`, or
         *   defines additional non-url parameters.  For each parameter being
         *   configured, add a configuration object keyed to the name of the parameter.
         *
         *   Each parameter configuration object may contain the following properties:
         *
         *   - ** value ** - {object|function=}: specifies the default value for this
         *     parameter.  This implicitly sets this parameter as optional.
         *
         *     When UI-Router routes to a state and no value is
         *     specified for this parameter in the URL or transition, the
         *     default value will be used instead.  If `value` is a function,
         *     it will be injected and invoked, and the return value used.
         *
         *     *Note*: `undefined` is treated as "no default value" while `null`
         *     is treated as "the default value is `null`".
         *
         *     *Shorthand*: If you only need to configure the default value of the
         *     parameter, you may use a shorthand syntax.   In the **`params`**
         *     map, instead mapping the param name to a full parameter configuration
         *     object, simply set map it to the default parameter value, e.g.:
         *
         * <pre>// define a parameter's default value
         * params: {
         *     param1: { value: "defaultValue" }
         * }
         * // shorthand default values
         * params: {
         *     param1: "defaultValue",
         *     param2: "param2Default"
         * }</pre>
         *
         *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
         *     treated as an array of values.  If you specified a Type, the value will be
         *     treated as an array of the specified Type.  Note: query parameter values
         *     default to a special `"auto"` mode.
         *
         *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
         *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
         *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
         *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
         *     value (e.g.: `{ foo: '1' }`).
         *
         * <pre>params: {
         *     param1: { array: true }
         * }</pre>
         *
         *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
         *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
         *     configured default squash policy.
         *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
         *
         *   There are three squash settings:
         *
         *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
         *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
         *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
         *       This can allow for cleaner looking URLs.
         *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
         *
         * <pre>params: {
         *     param1: {
         *       value: "defaultId",
         *       squash: true
         * } }
         * // squash "defaultValue" to "~"
         * params: {
         *     param1: {
         *       value: "defaultValue",
         *       squash: "~"
         * } }
         * </pre>
         *
         *
         * @example
         * <pre>
         * // Some state name examples
         *
         * // stateName can be a single top-level name (must be unique).
         * $stateProvider.state("home", {});
         *
         * // Or it can be a nested state name. This state is a child of the
         * // above "home" state.
         * $stateProvider.state("home.newest", {});
         *
         * // Nest states as deeply as needed.
         * $stateProvider.state("home.newest.abc.xyz.inception", {});
         *
         * // state() returns $stateProvider, so you can chain state declarations.
         * $stateProvider
         *   .state("home", {})
         *   .state("about", {})
         *   .state("contacts", {});
         * </pre>
         *
         */
        this.state = state;

        function state(name, definition) {
            /*jshint validthis: true */
            if (isObject(name)) definition = name;
            else definition.name = name;
            registerState(definition);
            return this;
        }

        /**
         * @ngdoc object
         * @name ui.router.state.$state
         *
         * @requires $rootScope
         * @requires $q
         * @requires ui.router.state.$view
         * @requires $injector
         * @requires ui.router.util.$resolve
         * @requires ui.router.state.$stateParams
         * @requires ui.router.router.$urlRouter
         *
         * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
         * you'd like to test against the current active state.
         * @property {object} current A reference to the state's config object. However 
         * you passed it in. Useful for accessing custom data.
         * @property {object} transition Currently pending transition. A promise that'll 
         * resolve or reject.
         *
         * @description
         * `$state` service is responsible for representing states as well as transitioning
         * between them. It also provides interfaces to ask for current state or even states
         * you're coming from.
         */
        this.$get = $get;
        $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];

        function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {

            var TransitionSuperseded = $q.reject(new Error('transition superseded'));
            var TransitionPrevented = $q.reject(new Error('transition prevented'));
            var TransitionAborted = $q.reject(new Error('transition aborted'));
            var TransitionFailed = $q.reject(new Error('transition failed'));

            // Handles the case where a state which is the target of a transition is not found, and the user
            // can optionally retry or defer the transition
            function handleRedirect(redirect, state, params, options) {
                /**
                 * @ngdoc event
                 * @name ui.router.state.$state#$stateNotFound
                 * @eventOf ui.router.state.$state
                 * @eventType broadcast on root scope
                 * @description
                 * Fired when a requested state **cannot be found** using the provided state name during transition.
                 * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
                 * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
                 * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
                 * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
                 *
                 * @param {Object} event Event object.
                 * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
                 * @param {State} fromState Current state object.
                 * @param {Object} fromParams Current state params.
                 *
                 * @example
                 *
                 * <pre>
                 * // somewhere, assume lazy.state has not been defined
                 * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
                 *
                 * // somewhere else
                 * $scope.$on('$stateNotFound',
                 * function(event, unfoundState, fromState, fromParams){
                 *     console.log(unfoundState.to); // "lazy.state"
                 *     console.log(unfoundState.toParams); // {a:1, b:2}
                 *     console.log(unfoundState.options); // {inherit:false} + default options
                 * })
                 * </pre>
                 */
                var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

                if (evt.defaultPrevented) {
                    $urlRouter.update();
                    return TransitionAborted;
                }

                if (!evt.retry) {
                    return null;
                }

                // Allow the handler to return a promise to defer state lookup retry
                if (options.$retry) {
                    $urlRouter.update();
                    return TransitionFailed;
                }
                var retryTransition = $state.transition = $q.when(evt.retry);

                retryTransition.then(function() {
                    if (retryTransition !== $state.transition) return TransitionSuperseded;
                    redirect.options.$retry = true;
                    return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
                }, function() {
                    return TransitionAborted;
                });
                $urlRouter.update();

                return retryTransition;
            }

            root.locals = {
                resolve: null,
                globals: {
                    $stateParams: {}
                }
            };

            $state = {
                params: {},
                current: root.self,
                $current: root,
                transition: null
            };

            /**
             * @ngdoc function
             * @name ui.router.state.$state#reload
             * @methodOf ui.router.state.$state
             *
             * @description
             * A method that force reloads the current state. All resolves are re-resolved,
             * controllers reinstantiated, and events re-fired.
             *
             * @example
             * <pre>
             * var app angular.module('app', ['ui.router']);
             *
             * app.controller('ctrl', function ($scope, $state) {
             *   $scope.reload = function(){
             *     $state.reload();
             *   }
             * });
             * </pre>
             *
             * `reload()` is just an alias for:
             * <pre>
             * $state.transitionTo($state.current, $stateParams, { 
             *   reload: true, inherit: false, notify: true
             * });
             * </pre>
             *
             * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
             * @example
             * <pre>
             * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' 
             * //and current state is 'contacts.detail.item'
             * var app angular.module('app', ['ui.router']);
             *
             * app.controller('ctrl', function ($scope, $state) {
             *   $scope.reload = function(){
             *     //will reload 'contact.detail' and 'contact.detail.item' states
             *     $state.reload('contact.detail');
             *   }
             * });
             * </pre>
             *
             * `reload()` is just an alias for:
             * <pre>
             * $state.transitionTo($state.current, $stateParams, { 
             *   reload: true, inherit: false, notify: true
             * });
             * </pre>

             * @returns {promise} A promise representing the state of the new transition. See
             * {@link ui.router.state.$state#methods_go $state.go}.
             */
            $state.reload = function reload(state) {
                return $state.transitionTo($state.current, $stateParams, {
                    reload: state || true,
                    inherit: false,
                    notify: true
                });
            };

            /**
             * @ngdoc function
             * @name ui.router.state.$state#go
             * @methodOf ui.router.state.$state
             *
             * @description
             * Convenience method for transitioning to a new state. `$state.go` calls 
             * `$state.transitionTo` internally but automatically sets options to 
             * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
             * This allows you to easily use an absolute or relative to path and specify 
             * only the parameters you'd like to update (while letting unspecified parameters 
             * inherit from the currently active ancestor states).
             *
             * @example
             * <pre>
             * var app = angular.module('app', ['ui.router']);
             *
             * app.controller('ctrl', function ($scope, $state) {
             *   $scope.changeState = function () {
             *     $state.go('contact.detail');
             *   };
             * });
             * </pre>
             * <img src='../ngdoc_assets/StateGoExamples.png'/>
             *
             * @param {string} to Absolute state name or relative state path. Some examples:
             *
             * - `$state.go('contact.detail')` - will go to the `contact.detail` state
             * - `$state.go('^')` - will go to a parent state
             * - `$state.go('^.sibling')` - will go to a sibling state
             * - `$state.go('.child.grandchild')` - will go to grandchild state
             *
             * @param {object=} params A map of the parameters that will be sent to the state, 
             * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
             * defined parameters. This allows, for example, going to a sibling state that shares parameters
             * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
             * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
             * will get you all current parameters, etc.
             * @param {object=} options Options object. The options are:
             *
             * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
             *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
             * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
             * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
             *    defines which state to be relative from.
             * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
             * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
             *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
             *    use this when you want to force a reload when *everything* is the same, including search params.
             *
             * @returns {promise} A promise representing the state of the new transition.
             *
             * Possible success values:
             *
             * - $state.current
             *
             * <br/>Possible rejection values:
             *
             * - 'transition superseded' - when a newer transition has been started after this one
             * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
             * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
             *   when a `$stateNotFound` `event.retry` promise errors.
             * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
             * - *resolve error* - when an error has occurred with a `resolve`
             *
             */
            $state.go = function go(to, params, options) {
                return $state.transitionTo(to, params, extend({
                    inherit: true,
                    relative: $state.$current
                }, options));
            };

            /**
             * @ngdoc function
             * @name ui.router.state.$state#transitionTo
             * @methodOf ui.router.state.$state
             *
             * @description
             * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
             * uses `transitionTo` internally. `$state.go` is recommended in most situations.
             *
             * @example
             * <pre>
             * var app = angular.module('app', ['ui.router']);
             *
             * app.controller('ctrl', function ($scope, $state) {
             *   $scope.changeState = function () {
             *     $state.transitionTo('contact.detail');
             *   };
             * });
             * </pre>
             *
             * @param {string} to State name.
             * @param {object=} toParams A map of the parameters that will be sent to the state,
             * will populate $stateParams.
             * @param {object=} options Options object. The options are:
             *
             * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
             *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
             * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
             * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
             *    defines which state to be relative from.
             * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
             * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params 
             *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
             *    use this when you want to force a reload when *everything* is the same, including search params.
             *    if String, then will reload the state with the name given in reload, and any children.
             *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
             *
             * @returns {promise} A promise representing the state of the new transition. See
             * {@link ui.router.state.$state#methods_go $state.go}.
             */
            $state.transitionTo = function transitionTo(to, toParams, options) {
                toParams = toParams || {};
                options = extend({
                    location: true,
                    inherit: false,
                    relative: null,
                    notify: true,
                    reload: false,
                    $retry: false
                }, options || {});

                var from = $state.$current,
                    fromParams = $state.params,
                    fromPath = from.path;
                var evt, toState = findState(to, options.relative);

                // Store the hash param for later (since it will be stripped out by various methods)
                var hash = toParams['#'];

                if (!isDefined(toState)) {
                    var redirect = {
                        to: to,
                        toParams: toParams,
                        options: options
                    };
                    var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

                    if (redirectResult) {
                        return redirectResult;
                    }

                    // Always retry once if the $stateNotFound was not prevented
                    // (handles either redirect changed or state lazy-definition)
                    to = redirect.to;
                    toParams = redirect.toParams;
                    options = redirect.options;
                    toState = findState(to, options.relative);

                    if (!isDefined(toState)) {
                        if (!options.relative) throw new Error("No such state '" + to + "'");
                        throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
                    }
                }
                if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
                if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
                if (!toState.params.$$validates(toParams)) return TransitionFailed;

                toParams = toState.params.$$values(toParams);
                to = toState;

                var toPath = to.path;

                // Starting from the root of the path, keep all levels that haven't changed
                var keep = 0,
                    state = toPath[keep],
                    locals = root.locals,
                    toLocals = [];

                if (!options.reload) {
                    while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
                        locals = toLocals[keep] = state.locals;
                        keep++;
                        state = toPath[keep];
                    }
                } else if (isString(options.reload) || isObject(options.reload)) {
                    if (isObject(options.reload) && !options.reload.name) {
                        throw new Error('Invalid reload state object');
                    }

                    var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
                    if (options.reload && !reloadState) {
                        throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
                    }

                    while (state && state === fromPath[keep] && state !== reloadState) {
                        locals = toLocals[keep] = state.locals;
                        keep++;
                        state = toPath[keep];
                    }
                }

                // If we're going to the same state and all locals are kept, we've got nothing to do.
                // But clear 'transition', as we still want to cancel any other pending transitions.
                // TODO: We may not want to bump 'transition' if we're called from a location change
                // that we've initiated ourselves, because we might accidentally abort a legitimate
                // transition initiated from code?
                if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
                    if (hash) toParams['#'] = hash;
                    $state.params = toParams;
                    copy($state.params, $stateParams);
                    if (options.location && to.navigable && to.navigable.url) {
                        $urlRouter.push(to.navigable.url, toParams, {
                            $$avoidResync: true,
                            replace: options.location === 'replace'
                        });
                        $urlRouter.update(true);
                    }
                    $state.transition = null;
                    return $q.when($state.current);
                }

                // Filter parameters before we pass them to event handlers etc.
                toParams = filterByKeys(to.params.$$keys(), toParams || {});

                // Broadcast start event and cancel the transition if requested
                if (options.notify) {
                    /**
                     * @ngdoc event
                     * @name ui.router.state.$state#$stateChangeStart
                     * @eventOf ui.router.state.$state
                     * @eventType broadcast on root scope
                     * @description
                     * Fired when the state transition **begins**. You can use `event.preventDefault()`
                     * to prevent the transition from happening and then the transition promise will be
                     * rejected with a `'transition prevented'` value.
                     *
                     * @param {Object} event Event object.
                     * @param {State} toState The state being transitioned to.
                     * @param {Object} toParams The params supplied to the `toState`.
                     * @param {State} fromState The current state, pre-transition.
                     * @param {Object} fromParams The params supplied to the `fromState`.
                     *
                     * @example
                     *
                     * <pre>
                     * $rootScope.$on('$stateChangeStart',
                     * function(event, toState, toParams, fromState, fromParams){
                     *     event.preventDefault();
                     *     // transitionTo() promise will be rejected with
                     *     // a 'transition prevented' error
                     * })
                     * </pre>
                     */
                    if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {
                        $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
                        $urlRouter.update();
                        return TransitionPrevented;
                    }
                }

                // Resolve locals for the remaining states, but don't update any global state just
                // yet -- if anything fails to resolve the current state needs to remain untouched.
                // We also set up an inheritance chain for the locals here. This allows the view directive
                // to quickly look up the correct definition for each view in the current state. Even
                // though we create the locals object itself outside resolveState(), it is initially
                // empty and gets filled asynchronously. We need to keep track of the promise for the
                // (fully resolved) current locals, and pass this down the chain.
                var resolved = $q.when(locals);

                for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
                    locals = toLocals[l] = inherit(locals);
                    resolved = resolveState(state, toParams, state === to, resolved, locals, options);
                }

                // Once everything is resolved, we are ready to perform the actual transition
                // and return a promise for the new state. We also keep track of what the
                // current promise is, so that we can detect overlapping transitions and
                // keep only the outcome of the last transition.
                var transition = $state.transition = resolved.then(function() {
                    var l, entering, exiting;

                    if ($state.transition !== transition) return TransitionSuperseded;

                    // Exit 'from' states not kept
                    for (l = fromPath.length - 1; l >= keep; l--) {
                        exiting = fromPath[l];
                        if (exiting.self.onExit) {
                            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
                        }
                        exiting.locals = null;
                    }

                    // Enter 'to' states not kept
                    for (l = keep; l < toPath.length; l++) {
                        entering = toPath[l];
                        entering.locals = toLocals[l];
                        if (entering.self.onEnter) {
                            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
                        }
                    }

                    // Re-add the saved hash before we start returning things
                    if (hash) toParams['#'] = hash;

                    // Run it again, to catch any transitions in callbacks
                    if ($state.transition !== transition) return TransitionSuperseded;

                    // Update globals in $state
                    $state.$current = to;
                    $state.current = to.self;
                    $state.params = toParams;
                    copy($state.params, $stateParams);
                    $state.transition = null;

                    if (options.location && to.navigable) {
                        $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
                            $$avoidResync: true,
                            replace: options.location === 'replace'
                        });
                    }

                    if (options.notify) {
                        /**
                         * @ngdoc event
                         * @name ui.router.state.$state#$stateChangeSuccess
                         * @eventOf ui.router.state.$state
                         * @eventType broadcast on root scope
                         * @description
                         * Fired once the state transition is **complete**.
                         *
                         * @param {Object} event Event object.
                         * @param {State} toState The state being transitioned to.
                         * @param {Object} toParams The params supplied to the `toState`.
                         * @param {State} fromState The current state, pre-transition.
                         * @param {Object} fromParams The params supplied to the `fromState`.
                         */
                        $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
                    }
                    $urlRouter.update(true);

                    return $state.current;
                }, function(error) {
                    if ($state.transition !== transition) return TransitionSuperseded;

                    $state.transition = null;
                    /**
                     * @ngdoc event
                     * @name ui.router.state.$state#$stateChangeError
                     * @eventOf ui.router.state.$state
                     * @eventType broadcast on root scope
                     * @description
                     * Fired when an **error occurs** during transition. It's important to note that if you
                     * have any errors in your resolve functions (javascript errors, non-existent services, etc)
                     * they will not throw traditionally. You must listen for this $stateChangeError event to
                     * catch **ALL** errors.
                     *
                     * @param {Object} event Event object.
                     * @param {State} toState The state being transitioned to.
                     * @param {Object} toParams The params supplied to the `toState`.
                     * @param {State} fromState The current state, pre-transition.
                     * @param {Object} fromParams The params supplied to the `fromState`.
                     * @param {Error} error The resolve error object.
                     */
                    evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

                    if (!evt.defaultPrevented) {
                        $urlRouter.update();
                    }

                    return $q.reject(error);
                });

                return transition;
            };

            /**
             * @ngdoc function
             * @name ui.router.state.$state#is
             * @methodOf ui.router.state.$state
             *
             * @description
             * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
             * but only checks for the full state name. If params is supplied then it will be
             * tested for strict equality against the current active params object, so all params
             * must match with none missing and no extras.
             *
             * @example
             * <pre>
             * $state.$current.name = 'contacts.details.item';
             *
             * // absolute name
             * $state.is('contact.details.item'); // returns true
             * $state.is(contactDetailItemStateObject); // returns true
             *
             * // relative name (. and ^), typically from a template
             * // E.g. from the 'contacts.details' template
             * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
             * </pre>
             *
             * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
             * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
             * to test against the current active state.
             * @param {object=} options An options object.  The options are:
             *
             * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
             * test relative to `options.relative` state (or name).
             *
             * @returns {boolean} Returns true if it is the state.
             */
            $state.is = function is(stateOrName, params, options) {
                options = extend({
                    relative: $state.$current
                }, options || {});
                var state = findState(stateOrName, options.relative);

                if (!isDefined(state)) {
                    return undefined;
                }
                if ($state.$current !== state) {
                    return false;
                }
                return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
            };

            /**
             * @ngdoc function
             * @name ui.router.state.$state#includes
             * @methodOf ui.router.state.$state
             *
             * @description
             * A method to determine if the current active state is equal to or is the child of the
             * state stateName. If any params are passed then they will be tested for a match as well.
             * Not all the parameters need to be passed, just the ones you'd like to test for equality.
             *
             * @example
             * Partial and relative names
             * <pre>
             * $state.$current.name = 'contacts.details.item';
             *
             * // Using partial names
             * $state.includes("contacts"); // returns true
             * $state.includes("contacts.details"); // returns true
             * $state.includes("contacts.details.item"); // returns true
             * $state.includes("contacts.list"); // returns false
             * $state.includes("about"); // returns false
             *
             * // Using relative names (. and ^), typically from a template
             * // E.g. from the 'contacts.details' template
             * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
             * </pre>
             *
             * Basic globbing patterns
             * <pre>
             * $state.$current.name = 'contacts.details.item.url';
             *
             * $state.includes("*.details.*.*"); // returns true
             * $state.includes("*.details.**"); // returns true
             * $state.includes("**.item.**"); // returns true
             * $state.includes("*.details.item.url"); // returns true
             * $state.includes("*.details.*.url"); // returns true
             * $state.includes("*.details.*"); // returns false
             * $state.includes("item.**"); // returns false
             * </pre>
             *
             * @param {string} stateOrName A partial name, relative name, or glob pattern
             * to be searched for within the current state name.
             * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
             * that you'd like to test against the current active state.
             * @param {object=} options An options object.  The options are:
             *
             * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
             * .includes will test relative to `options.relative` state (or name).
             *
             * @returns {boolean} Returns true if it does include the state
             */
            $state.includes = function includes(stateOrName, params, options) {
                options = extend({
                    relative: $state.$current
                }, options || {});
                if (isString(stateOrName) && isGlob(stateOrName)) {
                    if (!doesStateMatchGlob(stateOrName)) {
                        return false;
                    }
                    stateOrName = $state.$current.name;
                }

                var state = findState(stateOrName, options.relative);
                if (!isDefined(state)) {
                    return undefined;
                }
                if (!isDefined($state.$current.includes[state.name])) {
                    return false;
                }
                return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
            };


            /**
             * @ngdoc function
             * @name ui.router.state.$state#href
             * @methodOf ui.router.state.$state
             *
             * @description
             * A url generation method that returns the compiled url for the given state populated with the given params.
             *
             * @example
             * <pre>
             * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
             * </pre>
             *
             * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
             * @param {object=} params An object of parameter values to fill the state's required parameters.
             * @param {object=} options Options object. The options are:
             *
             * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
             *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
             *    ancestor with a valid url).
             * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
             * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
             *    defines which state to be relative from.
             * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
             * 
             * @returns {string} compiled state url
             */
            $state.href = function href(stateOrName, params, options) {
                options = extend({
                    lossy: true,
                    inherit: true,
                    absolute: false,
                    relative: $state.$current
                }, options || {});

                var state = findState(stateOrName, options.relative);

                if (!isDefined(state)) return null;
                if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);

                var nav = (state && options.lossy) ? state.navigable : state;

                if (!nav || nav.url === undefined || nav.url === null) {
                    return null;
                }
                return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {
                    absolute: options.absolute
                });
            };

            /**
             * @ngdoc function
             * @name ui.router.state.$state#get
             * @methodOf ui.router.state.$state
             *
             * @description
             * Returns the state configuration object for any specific state or all states.
             *
             * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
             * the requested state. If not provided, returns an array of ALL state configs.
             * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
             * @returns {Object|Array} State configuration object or array of all objects.
             */
            $state.get = function(stateOrName, context) {
                if (arguments.length === 0) return map(objectKeys(states), function(name) {
                    return states[name].self;
                });
                var state = findState(stateOrName, context || $state.$current);
                return (state && state.self) ? state.self : null;
            };

            function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
                // Make a restricted $stateParams with only the parameters that apply to this state if
                // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
                // we also need $stateParams to be available for any $injector calls we make during the
                // dependency resolution process.
                var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
                var locals = {
                    $stateParams: $stateParams
                };

                // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
                // We're also including $stateParams in this; that way the parameters are restricted
                // to the set that should be visible to the state, and are independent of when we update
                // the global $state and $stateParams values.
                dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
                var promises = [dst.resolve.then(function(globals) {
                    dst.globals = globals;
                })];
                if (inherited) promises.push(inherited);

                function resolveViews() {
                    var viewsPromises = [];

                    // Resolve template and dependencies for all views.
                    forEach(state.views, function(view, name) {
                        var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
                        injectables.$template = [function() {
                            return $view.load(name, {
                                view: view,
                                locals: dst.globals,
                                params: $stateParams,
                                notify: options.notify
                            }) || '';
                        }];

                        viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function(result) {
                            // References to the controller (only instantiated at link time)
                            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
                                var injectLocals = angular.extend({}, injectables, dst.globals);
                                result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
                            } else {
                                result.$$controller = view.controller;
                            }
                            // Provide access to the state itself for internal use
                            result.$$state = state;
                            result.$$controllerAs = view.controllerAs;
                            dst[name] = result;
                        }));
                    });

                    return $q.all(viewsPromises).then(function() {
                        return dst.globals;
                    });
                }

                // Wait for all the promises and then return the activation object
                return $q.all(promises).then(resolveViews).then(function(values) {
                    return dst;
                });
            }

            return $state;
        }

        function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
            // Return true if there are no differences in non-search (path/object) params, false if there are differences
            function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
                // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
                function notSearchParam(key) {
                    return fromAndToState.params[key].location != "search";
                }
                var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
                var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
                var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
                return nonQueryParamSet.$$equals(fromParams, toParams);
            }

            // If reload was not explicitly requested
            // and we're transitioning to the same state we're already in
            // and    the locals didn't change
            //     or they changed in a way that doesn't merit reloading
            //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
            // Then return true.
            if (!options.reload && to === from &&
                (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {
                return true;
            }
        }
    }

    angular.module('ui.router.state')
        .value('$stateParams', {})
        .provider('$state', $StateProvider);


    $ViewProvider.$inject = [];

    function $ViewProvider() {

        this.$get = $get;
        /**
         * @ngdoc object
         * @name ui.router.state.$view
         *
         * @requires ui.router.util.$templateFactory
         * @requires $rootScope
         *
         * @description
         *
         */
        $get.$inject = ['$rootScope', '$templateFactory'];

        function $get($rootScope, $templateFactory) {
            return {
                // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
                /**
                 * @ngdoc function
                 * @name ui.router.state.$view#load
                 * @methodOf ui.router.state.$view
                 *
                 * @description
                 *
                 * @param {string} name name
                 * @param {object} options option object.
                 */
                load: function load(name, options) {
                    var result, defaults = {
                        template: null,
                        controller: null,
                        view: null,
                        locals: null,
                        notify: true,
                        async: true,
                        params: {}
                    };
                    options = extend(defaults, options);

                    if (options.view) {
                        result = $templateFactory.fromConfig(options.view, options.params, options.locals);
                    }
                    if (result && options.notify) {
                        /**
                         * @ngdoc event
                         * @name ui.router.state.$state#$viewContentLoading
                         * @eventOf ui.router.state.$view
                         * @eventType broadcast on root scope
                         * @description
                         *
                         * Fired once the view **begins loading**, *before* the DOM is rendered.
                         *
                         * @param {Object} event Event object.
                         * @param {Object} viewConfig The view config properties (template, controller, etc).
                         *
                         * @example
                         *
                         * <pre>
                         * $scope.$on('$viewContentLoading',
                         * function(event, viewConfig){
                         *     // Access to all the view config properties.
                         *     // and one special property 'targetView'
                         *     // viewConfig.targetView
                         * });
                         * </pre>
                         */
                        $rootScope.$broadcast('$viewContentLoading', options);
                    }
                    return result;
                }
            };
        }
    }

    angular.module('ui.router.state').provider('$view', $ViewProvider);

    /**
     * @ngdoc object
     * @name ui.router.state.$uiViewScrollProvider
     *
     * @description
     * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
     */
    function $ViewScrollProvider() {

        var useAnchorScroll = false;

        /**
         * @ngdoc function
         * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
         * @methodOf ui.router.state.$uiViewScrollProvider
         *
         * @description
         * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
         * scrolling based on the url anchor.
         */
        this.useAnchorScroll = function() {
            useAnchorScroll = true;
        };

        /**
         * @ngdoc object
         * @name ui.router.state.$uiViewScroll
         *
         * @requires $anchorScroll
         * @requires $timeout
         *
         * @description
         * When called with a jqLite element, it scrolls the element into view (after a
         * `$timeout` so the DOM has time to refresh).
         *
         * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
         * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
         */
        this.$get = ['$anchorScroll', '$timeout', function($anchorScroll, $timeout) {
            if (useAnchorScroll) {
                return $anchorScroll;
            }

            return function($element) {
                return $timeout(function() {
                    $element[0].scrollIntoView();
                }, 0, false);
            };
        }];
    }

    angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

    /**
     * @ngdoc directive
     * @name ui.router.state.directive:ui-view
     *
     * @requires ui.router.state.$state
     * @requires $compile
     * @requires $controller
     * @requires $injector
     * @requires ui.router.state.$uiViewScroll
     * @requires $document
     *
     * @restrict ECA
     *
     * @description
     * The ui-view directive tells $state where to place your templates.
     *
     * @param {string=} name A view name. The name should be unique amongst the other views in the
     * same state. You can have views of the same name that live in different states.
     *
     * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
     * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
     * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
     * scroll ui-view elements into view when they are populated during a state activation.
     *
     * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
     * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
     *
     * @param {string=} onload Expression to evaluate whenever the view updates.
     * 
     * @example
     * A view can be unnamed or named. 
     * <pre>
     * <!-- Unnamed -->
     * <div ui-view></div> 
     * 
     * <!-- Named -->
     * <div ui-view="viewName"></div>
     * </pre>
     *
     * You can only have one unnamed view within any template (or root html). If you are only using a 
     * single view and it is unnamed then you can populate it like so:
     * <pre>
     * <div ui-view></div> 
     * $stateProvider.state("home", {
     *   template: "<h1>HELLO!</h1>"
     * })
     * </pre>
     * 
     * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
     * config property, by name, in this case an empty name:
     * <pre>
     * $stateProvider.state("home", {
     *   views: {
     *     "": {
     *       template: "<h1>HELLO!</h1>"
     *     }
     *   }    
     * })
     * </pre>
     * 
     * But typically you'll only use the views property if you name your view or have more than one view 
     * in the same template. There's not really a compelling reason to name a view if its the only one, 
     * but you could if you wanted, like so:
     * <pre>
     * <div ui-view="main"></div>
     * </pre> 
     * <pre>
     * $stateProvider.state("home", {
     *   views: {
     *     "main": {
     *       template: "<h1>HELLO!</h1>"
     *     }
     *   }    
     * })
     * </pre>
     * 
     * Really though, you'll use views to set up multiple views:
     * <pre>
     * <div ui-view></div>
     * <div ui-view="chart"></div> 
     * <div ui-view="data"></div> 
     * </pre>
     * 
     * <pre>
     * $stateProvider.state("home", {
     *   views: {
     *     "": {
     *       template: "<h1>HELLO!</h1>"
     *     },
     *     "chart": {
     *       template: "<chart_thing/>"
     *     },
     *     "data": {
     *       template: "<data_thing/>"
     *     }
     *   }    
     * })
     * </pre>
     *
     * Examples for `autoscroll`:
     *
     * <pre>
     * <!-- If autoscroll present with no expression,
     *      then scroll ui-view into view -->
     * <ui-view autoscroll/>
     *
     * <!-- If autoscroll present with valid expression,
     *      then scroll ui-view into view if expression evaluates to true -->
     * <ui-view autoscroll='true'/>
     * <ui-view autoscroll='false'/>
     * <ui-view autoscroll='scopeVariable'/>
     * </pre>
     */
    $ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];

    function $ViewDirective($state, $injector, $uiViewScroll, $interpolate) {

        function getService() {
            return ($injector.has) ? function(service) {
                return $injector.has(service) ? $injector.get(service) : null;
            } : function(service) {
                try {
                    return $injector.get(service);
                } catch (e) {
                    return null;
                }
            };
        }

        var service = getService(),
            $animator = service('$animator'),
            $animate = service('$animate');

        // Returns a set of DOM manipulation functions based on which Angular version
        // it should use
        function getRenderer(attrs, scope) {
            var statics = function() {
                return {
                    enter: function(element, target, cb) {
                        target.after(element);
                        cb();
                    },
                    leave: function(element, cb) {
                        element.remove();
                        cb();
                    }
                };
            };

            if ($animate) {
                return {
                    enter: function(element, target, cb) {
                        var promise = $animate.enter(element, null, target, cb);
                        if (promise && promise.then) promise.then(cb);
                    },
                    leave: function(element, cb) {
                        var promise = $animate.leave(element, cb);
                        if (promise && promise.then) promise.then(cb);
                    }
                };
            }

            if ($animator) {
                var animate = $animator && $animator(scope, attrs);

                return {
                    enter: function(element, target, cb) {
                        animate.enter(element, null, target);
                        cb();
                    },
                    leave: function(element, cb) {
                        animate.leave(element);
                        cb();
                    }
                };
            }

            return statics();
        }

        var directive = {
            restrict: 'ECA',
            terminal: true,
            priority: 400,
            transclude: 'element',
            compile: function(tElement, tAttrs, $transclude) {
                return function(scope, $element, attrs) {
                    var previousEl, currentEl, currentScope, latestLocals,
                        onloadExp = attrs.onload || '',
                        autoScrollExp = attrs.autoscroll,
                        renderer = getRenderer(attrs, scope);

                    scope.$on('$stateChangeSuccess', function() {
                        updateView(false);
                    });
                    scope.$on('$viewContentLoading', function() {
                        updateView(false);
                    });

                    updateView(true);

                    function cleanupLastView() {
                        if (previousEl) {
                            previousEl.remove();
                            previousEl = null;
                        }

                        if (currentScope) {
                            currentScope.$destroy();
                            currentScope = null;
                        }

                        if (currentEl) {
                            renderer.leave(currentEl, function() {
                                previousEl = null;
                            });

                            previousEl = currentEl;
                            currentEl = null;
                        }
                    }

                    function updateView(firstTime) {
                        var newScope,
                            name = getUiViewName(scope, attrs, $element, $interpolate),
                            previousLocals = name && $state.$current && $state.$current.locals[name];

                        if (!firstTime && previousLocals === latestLocals) return; // nothing to do
                        newScope = scope.$new();
                        latestLocals = $state.$current.locals[name];

                        var clone = $transclude(newScope, function(clone) {
                            renderer.enter(clone, $element, function onUiViewEnter() {
                                if (currentScope) {
                                    currentScope.$emit('$viewContentAnimationEnded');
                                }

                                if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                                    $uiViewScroll(clone);
                                }
                            });
                            cleanupLastView();
                        });

                        currentEl = clone;
                        currentScope = newScope;
                        /**
                         * @ngdoc event
                         * @name ui.router.state.directive:ui-view#$viewContentLoaded
                         * @eventOf ui.router.state.directive:ui-view
                         * @eventType emits on ui-view directive scope
                         * @description           *
                         * Fired once the view is **loaded**, *after* the DOM is rendered.
                         *
                         * @param {Object} event Event object.
                         */
                        currentScope.$emit('$viewContentLoaded');
                        currentScope.$eval(onloadExp);
                    }
                };
            }
        };

        return directive;
    }

    $ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];

    function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
        return {
            restrict: 'ECA',
            priority: -400,
            compile: function(tElement) {
                var initial = tElement.html();
                return function(scope, $element, attrs) {
                    var current = $state.$current,
                        name = getUiViewName(scope, attrs, $element, $interpolate),
                        locals = current && current.locals[name];

                    if (!locals) {
                        return;
                    }

                    $element.data('$uiView', {
                        name: name,
                        state: locals.$$state
                    });
                    $element.html(locals.$template ? locals.$template : initial);

                    var link = $compile($element.contents());

                    if (locals.$$controller) {
                        locals.$scope = scope;
                        locals.$element = $element;
                        var controller = $controller(locals.$$controller, locals);
                        if (locals.$$controllerAs) {
                            scope[locals.$$controllerAs] = controller;
                        }
                        $element.data('$ngControllerController', controller);
                        $element.children().data('$ngControllerController', controller);
                    }

                    link(scope);
                };
            }
        };
    }

    /**
     * Shared ui-view code for both directives:
     * Given scope, element, and its attributes, return the view's name
     */
    function getUiViewName(scope, attrs, element, $interpolate) {
        var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
        var inherited = element.inheritedData('$uiView');
        return name.indexOf('@') >= 0 ? name : (name + '@' + (inherited ? inherited.state.name : ''));
    }

    angular.module('ui.router.state').directive('uiView', $ViewDirective);
    angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

    function parseStateRef(ref, current) {
        var preparsed = ref.match(/^\s*({[^}]*})\s*$/),
            parsed;
        if (preparsed) ref = current + '(' + preparsed[1] + ')';
        parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
        if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
        return {
            state: parsed[1],
            paramExpr: parsed[3] || null
        };
    }

    function stateContext(el) {
        var stateData = el.parent().inheritedData('$uiView');

        if (stateData && stateData.state && stateData.state.name) {
            return stateData.state;
        }
    }

    /**
     * @ngdoc directive
     * @name ui.router.state.directive:ui-sref
     *
     * @requires ui.router.state.$state
     * @requires $timeout
     *
     * @restrict A
     *
     * @description
     * A directive that binds a link (`<a>` tag) to a state. If the state has an associated 
     * URL, the directive will automatically generate & update the `href` attribute via 
     * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking 
     * the link will trigger a state transition with optional parameters. 
     *
     * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be 
     * handled natively by the browser.
     *
     * You can also use relative state paths within ui-sref, just like the relative 
     * paths passed to `$state.go()`. You just need to be aware that the path is relative
     * to the state that the link lives in, in other words the state that loaded the 
     * template containing the link.
     *
     * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
     * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
     * and `reload`.
     *
     * @example
     * Here's an example of how you'd use ui-sref and how it would compile. If you have the 
     * following template:
     * <pre>
     * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
     * 
     * <ul>
     *     <li ng-repeat="contact in contacts">
     *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
     *     </li>
     * </ul>
     * </pre>
     * 
     * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
     * <pre>
     * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
     * 
     * <ul>
     *     <li ng-repeat="contact in contacts">
     *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
     *     </li>
     *     <li ng-repeat="contact in contacts">
     *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
     *     </li>
     *     <li ng-repeat="contact in contacts">
     *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
     *     </li>
     * </ul>
     *
     * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
     * </pre>
     *
     * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
     * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
     */
    $StateRefDirective.$inject = ['$state', '$timeout'];

    function $StateRefDirective($state, $timeout) {
        var allowedOptions = ['location', 'inherit', 'reload', 'absolute'];

        return {
            restrict: 'A',
            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
            link: function(scope, element, attrs, uiSrefActive) {
                var ref = parseStateRef(attrs.uiSref, $state.current.name);
                var params = null,
                    url = null,
                    base = stateContext(element) || $state.$current;
                // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
                var hrefKind = Object.prototype.toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
                    'xlink:href' : 'href';
                var newHref = null,
                    isAnchor = element.prop("tagName").toUpperCase() === "A";
                var isForm = element[0].nodeName === "FORM";
                var attr = isForm ? "action" : hrefKind,
                    nav = true;

                var options = {
                    relative: base,
                    inherit: true
                };
                var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};

                angular.forEach(allowedOptions, function(option) {
                    if (option in optionsOverride) {
                        options[option] = optionsOverride[option];
                    }
                });

                var update = function(newVal) {
                    if (newVal) params = angular.copy(newVal);
                    if (!nav) return;

                    newHref = $state.href(ref.state, params, options);

                    var activeDirective = uiSrefActive[1] || uiSrefActive[0];
                    if (activeDirective) {
                        activeDirective.$$addStateInfo(ref.state, params);
                    }
                    if (newHref === null) {
                        nav = false;
                        return false;
                    }
                    attrs.$set(attr, newHref);
                };

                if (ref.paramExpr) {
                    scope.$watch(ref.paramExpr, function(newVal, oldVal) {
                        if (newVal !== params) update(newVal);
                    }, true);
                    params = angular.copy(scope.$eval(ref.paramExpr));
                }
                update();

                if (isForm) return;

                element.bind("click", function(e) {
                    var button = e.which || e.button;
                    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target'))) {
                        // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
                        var transition = $timeout(function() {
                            $state.go(ref.state, params, options);
                        });
                        e.preventDefault();

                        // if the state has no URL, ignore one preventDefault from the <a> directive.
                        var ignorePreventDefaultCount = isAnchor && !newHref ? 1 : 0;
                        e.preventDefault = function() {
                            if (ignorePreventDefaultCount-- <= 0)
                                $timeout.cancel(transition);
                        };
                    }
                });
            }
        };
    }

    /**
     * @ngdoc directive
     * @name ui.router.state.directive:ui-sref-active
     *
     * @requires ui.router.state.$state
     * @requires ui.router.state.$stateParams
     * @requires $interpolate
     *
     * @restrict A
     *
     * @description
     * A directive working alongside ui-sref to add classes to an element when the
     * related ui-sref directive's state is active, and removing them when it is inactive.
     * The primary use-case is to simplify the special appearance of navigation menus
     * relying on `ui-sref`, by having the "active" state's menu button appear different,
     * distinguishing it from the inactive menu items.
     *
     * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
     * ui-sref-active found at the same level or above the ui-sref will be used.
     *
     * Will activate when the ui-sref's target state or any child state is active. If you
     * need to activate only when the ui-sref target state is active and *not* any of
     * it's children, then you will use
     * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
     *
     * @example
     * Given the following template:
     * <pre>
     * <ul>
     *   <li ui-sref-active="active" class="item">
     *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
     *   </li>
     * </ul>
     * </pre>
     *
     *
     * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
     * the resulting HTML will appear as (note the 'active' class):
     * <pre>
     * <ul>
     *   <li ui-sref-active="active" class="item active">
     *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
     *   </li>
     * </ul>
     * </pre>
     *
     * The class name is interpolated **once** during the directives link time (any further changes to the
     * interpolated value are ignored).
     *
     * Multiple classes may be specified in a space-separated format:
     * <pre>
     * <ul>
     *   <li ui-sref-active='class1 class2 class3'>
     *     <a ui-sref="app.user">link</a>
     *   </li>
     * </ul>
     * </pre>
     */

    /**
     * @ngdoc directive
     * @name ui.router.state.directive:ui-sref-active-eq
     *
     * @requires ui.router.state.$state
     * @requires ui.router.state.$stateParams
     * @requires $interpolate
     *
     * @restrict A
     *
     * @description
     * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
     * when the exact target state used in the `ui-sref` is active; no child states.
     *
     */
    $StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];

    function $StateRefActiveDirective($state, $stateParams, $interpolate) {
        return {
            restrict: "A",
            controller: ['$scope', '$element', '$attrs', function($scope, $element, $attrs) {
                var states = [],
                    activeClass;

                // There probably isn't much point in $observing this
                // uiSrefActive and uiSrefActiveEq share the same directive object with some
                // slight difference in logic routing
                activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);

                // Allow uiSref to communicate with uiSrefActive[Equals]
                this.$$addStateInfo = function(newState, newParams) {
                    var state = $state.get(newState, stateContext($element));

                    states.push({
                        state: state || {
                            name: newState
                        },
                        params: newParams
                    });

                    update();
                };

                $scope.$on('$stateChangeSuccess', update);

                // Update route state
                function update() {
                    if (anyMatch()) {
                        $element.addClass(activeClass);
                    } else {
                        $element.removeClass(activeClass);
                    }
                }

                function anyMatch() {
                    for (var i = 0; i < states.length; i++) {
                        if (isMatch(states[i].state, states[i].params)) {
                            return true;
                        }
                    }
                    return false;
                }

                function isMatch(state, params) {
                    if (typeof $attrs.uiSrefActiveEq !== 'undefined') {
                        return $state.is(state.name, params);
                    } else {
                        return $state.includes(state.name, params);
                    }
                }
            }]
        };
    }

    angular.module('ui.router.state')
        .directive('uiSref', $StateRefDirective)
        .directive('uiSrefActive', $StateRefActiveDirective)
        .directive('uiSrefActiveEq', $StateRefActiveDirective);

    /**
     * @ngdoc filter
     * @name ui.router.state.filter:isState
     *
     * @requires ui.router.state.$state
     *
     * @description
     * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
     */
    $IsStateFilter.$inject = ['$state'];

    function $IsStateFilter($state) {
        var isFilter = function(state) {
            return $state.is(state);
        };
        isFilter.$stateful = true;
        return isFilter;
    }

    /**
     * @ngdoc filter
     * @name ui.router.state.filter:includedByState
     *
     * @requires ui.router.state.$state
     *
     * @description
     * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
     */
    $IncludedByStateFilter.$inject = ['$state'];

    function $IncludedByStateFilter($state) {
        var includesFilter = function(state) {
            return $state.includes(state);
        };
        includesFilter.$stateful = true;
        return includesFilter;
    }

    angular.module('ui.router.state')
        .filter('isState', $IsStateFilter)
        .filter('includedByState', $IncludedByStateFilter);
})(window, window.angular);
/**
 * @license AngularJS v1.5.0
 * (c) 2010-2016 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {

    'use strict';

    /**
     * @ngdoc object
     * @name angular.mock
     * @description
     *
     * Namespace from 'angular-mocks.js' which contains testing related code.
     */
    angular.mock = {};

    /**
     * ! This is a private undocumented service !
     *
     * @name $browser
     *
     * @description
     * This service is a mock implementation of {@link ng.$browser}. It provides fake
     * implementation for commonly used browser apis that are hard to test, e.g. setTimeout, xhr,
     * cookies, etc...
     *
     * The api of this service is the same as that of the real {@link ng.$browser $browser}, except
     * that there are several helper methods available which can be used in tests.
     */
    angular.mock.$BrowserProvider = function() {
        this.$get = function() {
            return new angular.mock.$Browser();
        };
    };

    angular.mock.$Browser = function() {
        var self = this;

        this.isMock = true;
        self.$$url = "http://server/";
        self.$$lastUrl = self.$$url; // used by url polling fn
        self.pollFns = [];

        // TODO(vojta): remove this temporary api
        self.$$completeOutstandingRequest = angular.noop;
        self.$$incOutstandingRequestCount = angular.noop;


        // register url polling fn

        self.onUrlChange = function(listener) {
            self.pollFns.push(
                function() {
                    if (self.$$lastUrl !== self.$$url || self.$$state !== self.$$lastState) {
                        self.$$lastUrl = self.$$url;
                        self.$$lastState = self.$$state;
                        listener(self.$$url, self.$$state);
                    }
                }
            );

            return listener;
        };

        self.$$applicationDestroyed = angular.noop;
        self.$$checkUrlChange = angular.noop;

        self.deferredFns = [];
        self.deferredNextId = 0;

        self.defer = function(fn, delay) {
            delay = delay || 0;
            self.deferredFns.push({
                time: (self.defer.now + delay),
                fn: fn,
                id: self.deferredNextId
            });
            self.deferredFns.sort(function(a, b) {
                return a.time - b.time;
            });
            return self.deferredNextId++;
        };


        /**
         * @name $browser#defer.now
         *
         * @description
         * Current milliseconds mock time.
         */
        self.defer.now = 0;


        self.defer.cancel = function(deferId) {
            var fnIndex;

            angular.forEach(self.deferredFns, function(fn, index) {
                if (fn.id === deferId) fnIndex = index;
            });

            if (angular.isDefined(fnIndex)) {
                self.deferredFns.splice(fnIndex, 1);
                return true;
            }

            return false;
        };


        /**
         * @name $browser#defer.flush
         *
         * @description
         * Flushes all pending requests and executes the defer callbacks.
         *
         * @param {number=} number of milliseconds to flush. See {@link #defer.now}
         */
        self.defer.flush = function(delay) {
            if (angular.isDefined(delay)) {
                self.defer.now += delay;
            } else {
                if (self.deferredFns.length) {
                    self.defer.now = self.deferredFns[self.deferredFns.length - 1].time;
                } else {
                    throw new Error('No deferred tasks to be flushed');
                }
            }

            while (self.deferredFns.length && self.deferredFns[0].time <= self.defer.now) {
                self.deferredFns.shift().fn();
            }
        };

        self.$$baseHref = '/';
        self.baseHref = function() {
            return this.$$baseHref;
        };
    };
    angular.mock.$Browser.prototype = {

        /**
         * @name $browser#poll
         *
         * @description
         * run all fns in pollFns
         */
        poll: function poll() {
            angular.forEach(this.pollFns, function(pollFn) {
                pollFn();
            });
        },

        url: function(url, replace, state) {
            if (angular.isUndefined(state)) {
                state = null;
            }
            if (url) {
                this.$$url = url;
                // Native pushState serializes & copies the object; simulate it.
                this.$$state = angular.copy(state);
                return this;
            }

            return this.$$url;
        },

        state: function() {
            return this.$$state;
        },

        notifyWhenNoOutstandingRequests: function(fn) {
            fn();
        }
    };


    /**
     * @ngdoc provider
     * @name $exceptionHandlerProvider
     *
     * @description
     * Configures the mock implementation of {@link ng.$exceptionHandler} to rethrow or to log errors
     * passed to the `$exceptionHandler`.
     */

    /**
     * @ngdoc service
     * @name $exceptionHandler
     *
     * @description
     * Mock implementation of {@link ng.$exceptionHandler} that rethrows or logs errors passed
     * to it. See {@link ngMock.$exceptionHandlerProvider $exceptionHandlerProvider} for configuration
     * information.
     *
     *
     * ```js
     *   describe('$exceptionHandlerProvider', function() {
     *
     *     it('should capture log messages and exceptions', function() {
     *
     *       module(function($exceptionHandlerProvider) {
     *         $exceptionHandlerProvider.mode('log');
     *       });
     *
     *       inject(function($log, $exceptionHandler, $timeout) {
     *         $timeout(function() { $log.log(1); });
     *         $timeout(function() { $log.log(2); throw 'banana peel'; });
     *         $timeout(function() { $log.log(3); });
     *         expect($exceptionHandler.errors).toEqual([]);
     *         expect($log.assertEmpty());
     *         $timeout.flush();
     *         expect($exceptionHandler.errors).toEqual(['banana peel']);
     *         expect($log.log.logs).toEqual([[1], [2], [3]]);
     *       });
     *     });
     *   });
     * ```
     */

    angular.mock.$ExceptionHandlerProvider = function() {
        var handler;

        /**
         * @ngdoc method
         * @name $exceptionHandlerProvider#mode
         *
         * @description
         * Sets the logging mode.
         *
         * @param {string} mode Mode of operation, defaults to `rethrow`.
         *
         *   - `log`: Sometimes it is desirable to test that an error is thrown, for this case the `log`
         *            mode stores an array of errors in `$exceptionHandler.errors`, to allow later
         *            assertion of them. See {@link ngMock.$log#assertEmpty assertEmpty()} and
         *            {@link ngMock.$log#reset reset()}
         *   - `rethrow`: If any errors are passed to the handler in tests, it typically means that there
         *                is a bug in the application or test, so this mock will make these tests fail.
         *                For any implementations that expect exceptions to be thrown, the `rethrow` mode
         *                will also maintain a log of thrown errors.
         */
        this.mode = function(mode) {

            switch (mode) {
                case 'log':
                case 'rethrow':
                    var errors = [];
                    handler = function(e) {
                        if (arguments.length == 1) {
                            errors.push(e);
                        } else {
                            errors.push([].slice.call(arguments, 0));
                        }
                        if (mode === "rethrow") {
                            throw e;
                        }
                    };
                    handler.errors = errors;
                    break;
                default:
                    throw new Error("Unknown mode '" + mode + "', only 'log'/'rethrow' modes are allowed!");
            }
        };

        this.$get = function() {
            return handler;
        };

        this.mode('rethrow');
    };


    /**
     * @ngdoc service
     * @name $log
     *
     * @description
     * Mock implementation of {@link ng.$log} that gathers all logged messages in arrays
     * (one array per logging level). These arrays are exposed as `logs` property of each of the
     * level-specific log function, e.g. for level `error` the array is exposed as `$log.error.logs`.
     *
     */
    angular.mock.$LogProvider = function() {
        var debug = true;

        function concat(array1, array2, index) {
            return array1.concat(Array.prototype.slice.call(array2, index));
        }

        this.debugEnabled = function(flag) {
            if (angular.isDefined(flag)) {
                debug = flag;
                return this;
            } else {
                return debug;
            }
        };

        this.$get = function() {
            var $log = {
                log: function() {
                    $log.log.logs.push(concat([], arguments, 0));
                },
                warn: function() {
                    $log.warn.logs.push(concat([], arguments, 0));
                },
                info: function() {
                    $log.info.logs.push(concat([], arguments, 0));
                },
                error: function() {
                    $log.error.logs.push(concat([], arguments, 0));
                },
                debug: function() {
                    if (debug) {
                        $log.debug.logs.push(concat([], arguments, 0));
                    }
                }
            };

            /**
             * @ngdoc method
             * @name $log#reset
             *
             * @description
             * Reset all of the logging arrays to empty.
             */
            $log.reset = function() {
                /**
                 * @ngdoc property
                 * @name $log#log.logs
                 *
                 * @description
                 * Array of messages logged using {@link ng.$log#log `log()`}.
                 *
                 * @example
                 * ```js
                 * $log.log('Some Log');
                 * var first = $log.log.logs.unshift();
                 * ```
                 */
                $log.log.logs = [];
                /**
                 * @ngdoc property
                 * @name $log#info.logs
                 *
                 * @description
                 * Array of messages logged using {@link ng.$log#info `info()`}.
                 *
                 * @example
                 * ```js
                 * $log.info('Some Info');
                 * var first = $log.info.logs.unshift();
                 * ```
                 */
                $log.info.logs = [];
                /**
                 * @ngdoc property
                 * @name $log#warn.logs
                 *
                 * @description
                 * Array of messages logged using {@link ng.$log#warn `warn()`}.
                 *
                 * @example
                 * ```js
                 * $log.warn('Some Warning');
                 * var first = $log.warn.logs.unshift();
                 * ```
                 */
                $log.warn.logs = [];
                /**
                 * @ngdoc property
                 * @name $log#error.logs
                 *
                 * @description
                 * Array of messages logged using {@link ng.$log#error `error()`}.
                 *
                 * @example
                 * ```js
                 * $log.error('Some Error');
                 * var first = $log.error.logs.unshift();
                 * ```
                 */
                $log.error.logs = [];
                /**
                 * @ngdoc property
                 * @name $log#debug.logs
                 *
                 * @description
                 * Array of messages logged using {@link ng.$log#debug `debug()`}.
                 *
                 * @example
                 * ```js
                 * $log.debug('Some Error');
                 * var first = $log.debug.logs.unshift();
                 * ```
                 */
                $log.debug.logs = [];
            };

            /**
             * @ngdoc method
             * @name $log#assertEmpty
             *
             * @description
             * Assert that all of the logging methods have no logged messages. If any messages are present,
             * an exception is thrown.
             */
            $log.assertEmpty = function() {
                var errors = [];
                angular.forEach(['error', 'warn', 'info', 'log', 'debug'], function(logLevel) {
                    angular.forEach($log[logLevel].logs, function(log) {
                        angular.forEach(log, function(logItem) {
                            errors.push('MOCK $log (' + logLevel + '): ' + String(logItem) + '\n' +
                                (logItem.stack || ''));
                        });
                    });
                });
                if (errors.length) {
                    errors.unshift("Expected $log to be empty! Either a message was logged unexpectedly, or " +
                        "an expected log message was not checked and removed:");
                    errors.push('');
                    throw new Error(errors.join('\n---------\n'));
                }
            };

            $log.reset();
            return $log;
        };
    };


    /**
     * @ngdoc service
     * @name $interval
     *
     * @description
     * Mock implementation of the $interval service.
     *
     * Use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
     * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
     * time.
     *
     * @param {function()} fn A function that should be called repeatedly.
     * @param {number} delay Number of milliseconds between each function call.
     * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
     *   indefinitely.
     * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
     *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
     * @param {...*=} Pass additional parameters to the executed function.
     * @returns {promise} A promise which will be notified on each iteration.
     */
    angular.mock.$IntervalProvider = function() {
        this.$get = ['$browser', '$rootScope', '$q', '$$q',
            function($browser, $rootScope, $q, $$q) {
                var repeatFns = [],
                    nextRepeatId = 0,
                    now = 0;

                var $interval = function(fn, delay, count, invokeApply) {
                    var hasParams = arguments.length > 4,
                        args = hasParams ? Array.prototype.slice.call(arguments, 4) : [],
                        iteration = 0,
                        skipApply = (angular.isDefined(invokeApply) && !invokeApply),
                        deferred = (skipApply ? $$q : $q).defer(),
                        promise = deferred.promise;

                    count = (angular.isDefined(count)) ? count : 0;
                    promise.then(null, null, (!hasParams) ? fn : function() {
                        fn.apply(null, args);
                    });

                    promise.$$intervalId = nextRepeatId;

                    function tick() {
                        deferred.notify(iteration++);

                        if (count > 0 && iteration >= count) {
                            var fnIndex;
                            deferred.resolve(iteration);

                            angular.forEach(repeatFns, function(fn, index) {
                                if (fn.id === promise.$$intervalId) fnIndex = index;
                            });

                            if (angular.isDefined(fnIndex)) {
                                repeatFns.splice(fnIndex, 1);
                            }
                        }

                        if (skipApply) {
                            $browser.defer.flush();
                        } else {
                            $rootScope.$apply();
                        }
                    }

                    repeatFns.push({
                        nextTime: (now + delay),
                        delay: delay,
                        fn: tick,
                        id: nextRepeatId,
                        deferred: deferred
                    });
                    repeatFns.sort(function(a, b) {
                        return a.nextTime - b.nextTime;
                    });

                    nextRepeatId++;
                    return promise;
                };
                /**
                 * @ngdoc method
                 * @name $interval#cancel
                 *
                 * @description
                 * Cancels a task associated with the `promise`.
                 *
                 * @param {promise} promise A promise from calling the `$interval` function.
                 * @returns {boolean} Returns `true` if the task was successfully cancelled.
                 */
                $interval.cancel = function(promise) {
                    if (!promise) return false;
                    var fnIndex;

                    angular.forEach(repeatFns, function(fn, index) {
                        if (fn.id === promise.$$intervalId) fnIndex = index;
                    });

                    if (angular.isDefined(fnIndex)) {
                        repeatFns[fnIndex].deferred.reject('canceled');
                        repeatFns.splice(fnIndex, 1);
                        return true;
                    }

                    return false;
                };

                /**
                 * @ngdoc method
                 * @name $interval#flush
                 * @description
                 *
                 * Runs interval tasks scheduled to be run in the next `millis` milliseconds.
                 *
                 * @param {number=} millis maximum timeout amount to flush up until.
                 *
                 * @return {number} The amount of time moved forward.
                 */
                $interval.flush = function(millis) {
                    now += millis;
                    while (repeatFns.length && repeatFns[0].nextTime <= now) {
                        var task = repeatFns[0];
                        task.fn();
                        task.nextTime += task.delay;
                        repeatFns.sort(function(a, b) {
                            return a.nextTime - b.nextTime;
                        });
                    }
                    return millis;
                };

                return $interval;
            }
        ];
    };


    /* jshint -W101 */
    /* The R_ISO8061_STR regex is never going to fit into the 100 char limit!
     * This directive should go inside the anonymous function but a bug in JSHint means that it would
     * not be enacted early enough to prevent the warning.
     */
    var R_ISO8061_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?:\:?(\d\d)(?:\:?(\d\d)(?:\.(\d{3}))?)?)?(Z|([+-])(\d\d):?(\d\d)))?$/;

    function jsonStringToDate(string) {
        var match;
        if (match = string.match(R_ISO8061_STR)) {
            var date = new Date(0),
                tzHour = 0,
                tzMin = 0;
            if (match[9]) {
                tzHour = toInt(match[9] + match[10]);
                tzMin = toInt(match[9] + match[11]);
            }
            date.setUTCFullYear(toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
            date.setUTCHours(toInt(match[4] || 0) - tzHour,
                toInt(match[5] || 0) - tzMin,
                toInt(match[6] || 0),
                toInt(match[7] || 0));
            return date;
        }
        return string;
    }

    function toInt(str) {
        return parseInt(str, 10);
    }

    function padNumber(num, digits, trim) {
        var neg = '';
        if (num < 0) {
            neg = '-';
            num = -num;
        }
        num = '' + num;
        while (num.length < digits) num = '0' + num;
        if (trim) {
            num = num.substr(num.length - digits);
        }
        return neg + num;
    }


    /**
     * @ngdoc type
     * @name angular.mock.TzDate
     * @description
     *
     * *NOTE*: this is not an injectable instance, just a globally available mock class of `Date`.
     *
     * Mock of the Date type which has its timezone specified via constructor arg.
     *
     * The main purpose is to create Date-like instances with timezone fixed to the specified timezone
     * offset, so that we can test code that depends on local timezone settings without dependency on
     * the time zone settings of the machine where the code is running.
     *
     * @param {number} offset Offset of the *desired* timezone in hours (fractions will be honored)
     * @param {(number|string)} timestamp Timestamp representing the desired time in *UTC*
     *
     * @example
     * !!!! WARNING !!!!!
     * This is not a complete Date object so only methods that were implemented can be called safely.
     * To make matters worse, TzDate instances inherit stuff from Date via a prototype.
     *
     * We do our best to intercept calls to "unimplemented" methods, but since the list of methods is
     * incomplete we might be missing some non-standard methods. This can result in errors like:
     * "Date.prototype.foo called on incompatible Object".
     *
     * ```js
     * var newYearInBratislava = new TzDate(-1, '2009-12-31T23:00:00Z');
     * newYearInBratislava.getTimezoneOffset() => -60;
     * newYearInBratislava.getFullYear() => 2010;
     * newYearInBratislava.getMonth() => 0;
     * newYearInBratislava.getDate() => 1;
     * newYearInBratislava.getHours() => 0;
     * newYearInBratislava.getMinutes() => 0;
     * newYearInBratislava.getSeconds() => 0;
     * ```
     *
     */
    angular.mock.TzDate = function(offset, timestamp) {
        var self = new Date(0);
        if (angular.isString(timestamp)) {
            var tsStr = timestamp;

            self.origDate = jsonStringToDate(timestamp);

            timestamp = self.origDate.getTime();
            if (isNaN(timestamp)) {
                throw {
                    name: "Illegal Argument",
                    message: "Arg '" + tsStr + "' passed into TzDate constructor is not a valid date string"
                };
            }
        } else {
            self.origDate = new Date(timestamp);
        }

        var localOffset = new Date(timestamp).getTimezoneOffset();
        self.offsetDiff = localOffset * 60 * 1000 - offset * 1000 * 60 * 60;
        self.date = new Date(timestamp + self.offsetDiff);

        self.getTime = function() {
            return self.date.getTime() - self.offsetDiff;
        };

        self.toLocaleDateString = function() {
            return self.date.toLocaleDateString();
        };

        self.getFullYear = function() {
            return self.date.getFullYear();
        };

        self.getMonth = function() {
            return self.date.getMonth();
        };

        self.getDate = function() {
            return self.date.getDate();
        };

        self.getHours = function() {
            return self.date.getHours();
        };

        self.getMinutes = function() {
            return self.date.getMinutes();
        };

        self.getSeconds = function() {
            return self.date.getSeconds();
        };

        self.getMilliseconds = function() {
            return self.date.getMilliseconds();
        };

        self.getTimezoneOffset = function() {
            return offset * 60;
        };

        self.getUTCFullYear = function() {
            return self.origDate.getUTCFullYear();
        };

        self.getUTCMonth = function() {
            return self.origDate.getUTCMonth();
        };

        self.getUTCDate = function() {
            return self.origDate.getUTCDate();
        };

        self.getUTCHours = function() {
            return self.origDate.getUTCHours();
        };

        self.getUTCMinutes = function() {
            return self.origDate.getUTCMinutes();
        };

        self.getUTCSeconds = function() {
            return self.origDate.getUTCSeconds();
        };

        self.getUTCMilliseconds = function() {
            return self.origDate.getUTCMilliseconds();
        };

        self.getDay = function() {
            return self.date.getDay();
        };

        // provide this method only on browsers that already have it
        if (self.toISOString) {
            self.toISOString = function() {
                return padNumber(self.origDate.getUTCFullYear(), 4) + '-' +
                    padNumber(self.origDate.getUTCMonth() + 1, 2) + '-' +
                    padNumber(self.origDate.getUTCDate(), 2) + 'T' +
                    padNumber(self.origDate.getUTCHours(), 2) + ':' +
                    padNumber(self.origDate.getUTCMinutes(), 2) + ':' +
                    padNumber(self.origDate.getUTCSeconds(), 2) + '.' +
                    padNumber(self.origDate.getUTCMilliseconds(), 3) + 'Z';
            };
        }

        //hide all methods not implemented in this mock that the Date prototype exposes
        var unimplementedMethods = ['getUTCDay',
            'getYear', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds',
            'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate', 'setUTCFullYear',
            'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCMonth', 'setUTCSeconds',
            'setYear', 'toDateString', 'toGMTString', 'toJSON', 'toLocaleFormat', 'toLocaleString',
            'toLocaleTimeString', 'toSource', 'toString', 'toTimeString', 'toUTCString', 'valueOf'
        ];

        angular.forEach(unimplementedMethods, function(methodName) {
            self[methodName] = function() {
                throw new Error("Method '" + methodName + "' is not implemented in the TzDate mock");
            };
        });

        return self;
    };

    //make "tzDateInstance instanceof Date" return true
    angular.mock.TzDate.prototype = Date.prototype;
    /* jshint +W101 */


    /**
     * @ngdoc service
     * @name $animate
     *
     * @description
     * Mock implementation of the {@link ng.$animate `$animate`} service. Exposes two additional methods
     * for testing animations.
     */
    angular.mock.animate = angular.module('ngAnimateMock', ['ng'])

    .config(['$provide', function($provide) {

        $provide.factory('$$forceReflow', function() {
            function reflowFn() {
                reflowFn.totalReflows++;
            }
            reflowFn.totalReflows = 0;
            return reflowFn;
        });

        $provide.factory('$$animateAsyncRun', function() {
            var queue = [];
            var queueFn = function() {
                return function(fn) {
                    queue.push(fn);
                };
            };
            queueFn.flush = function() {
                if (queue.length === 0) return false;

                for (var i = 0; i < queue.length; i++) {
                    queue[i]();
                }
                queue = [];

                return true;
            };
            return queueFn;
        });

        $provide.decorator('$$animateJs', ['$delegate', function($delegate) {
            var runners = [];

            var animateJsConstructor = function() {
                var animator = $delegate.apply($delegate, arguments);
                // If no javascript animation is found, animator is undefined
                if (animator) {
                    runners.push(animator);
                }
                return animator;
            };

            animateJsConstructor.$closeAndFlush = function() {
                runners.forEach(function(runner) {
                    runner.end();
                });
                runners = [];
            };

            return animateJsConstructor;
        }]);

        $provide.decorator('$animateCss', ['$delegate', function($delegate) {
            var runners = [];

            var animateCssConstructor = function(element, options) {
                var animator = $delegate(element, options);
                runners.push(animator);
                return animator;
            };

            animateCssConstructor.$closeAndFlush = function() {
                runners.forEach(function(runner) {
                    runner.end();
                });
                runners = [];
            };

            return animateCssConstructor;
        }]);

        $provide.decorator('$animate', ['$delegate', '$timeout', '$browser', '$$rAF', '$animateCss', '$$animateJs',
            '$$forceReflow', '$$animateAsyncRun', '$rootScope',
            function($delegate, $timeout, $browser, $$rAF, $animateCss, $$animateJs,
                $$forceReflow, $$animateAsyncRun, $rootScope) {
                var animate = {
                    queue: [],
                    cancel: $delegate.cancel,
                    on: $delegate.on,
                    off: $delegate.off,
                    pin: $delegate.pin,
                    get reflows() {
                        return $$forceReflow.totalReflows;
                    },
                    enabled: $delegate.enabled,
                    /**
                     * @ngdoc method
                     * @name $animate#closeAndFlush
                     * @description
                     *
                     * This method will close all pending animations (both {@link ngAnimate#javascript-based-animations Javascript}
                     * and {@link ngAnimate.$animateCss CSS}) and it will also flush any remaining animation frames and/or callbacks.
                     */
                    closeAndFlush: function() {
                        // we allow the flush command to swallow the errors
                        // because depending on whether CSS or JS animations are
                        // used, there may not be a RAF flush. The primary flush
                        // at the end of this function must throw an exception
                        // because it will track if there were pending animations
                        this.flush(true);
                        $animateCss.$closeAndFlush();
                        $$animateJs.$closeAndFlush();
                        this.flush();
                    },
                    /**
                     * @ngdoc method
                     * @name $animate#flush
                     * @description
                     *
                     * This method is used to flush the pending callbacks and animation frames to either start
                     * an animation or conclude an animation. Note that this will not actually close an
                     * actively running animation (see {@link ngMock.$animate#closeAndFlush `closeAndFlush()`} for that).
                     */
                    flush: function(hideErrors) {
                        $rootScope.$digest();

                        var doNextRun, somethingFlushed = false;
                        do {
                            doNextRun = false;

                            if ($$rAF.queue.length) {
                                $$rAF.flush();
                                doNextRun = somethingFlushed = true;
                            }

                            if ($$animateAsyncRun.flush()) {
                                doNextRun = somethingFlushed = true;
                            }
                        } while (doNextRun);

                        if (!somethingFlushed && !hideErrors) {
                            throw new Error('No pending animations ready to be closed or flushed');
                        }

                        $rootScope.$digest();
                    }
                };

                angular.forEach(
                    ['animate', 'enter', 'leave', 'move', 'addClass', 'removeClass', 'setClass'],
                    function(method) {
                        animate[method] = function() {
                            animate.queue.push({
                                event: method,
                                element: arguments[0],
                                options: arguments[arguments.length - 1],
                                args: arguments
                            });
                            return $delegate[method].apply($delegate, arguments);
                        };
                    });

                return animate;
            }
        ]);

    }]);


    /**
     * @ngdoc function
     * @name angular.mock.dump
     * @description
     *
     * *NOTE*: this is not an injectable instance, just a globally available function.
     *
     * Method for serializing common angular objects (scope, elements, etc..) into strings, useful for
     * debugging.
     *
     * This method is also available on window, where it can be used to display objects on debug
     * console.
     *
     * @param {*} object - any object to turn into string.
     * @return {string} a serialized string of the argument
     */
    angular.mock.dump = function(object) {
        return serialize(object);

        function serialize(object) {
            var out;

            if (angular.isElement(object)) {
                object = angular.element(object);
                out = angular.element('<div></div>');
                angular.forEach(object, function(element) {
                    out.append(angular.element(element).clone());
                });
                out = out.html();
            } else if (angular.isArray(object)) {
                out = [];
                angular.forEach(object, function(o) {
                    out.push(serialize(o));
                });
                out = '[ ' + out.join(', ') + ' ]';
            } else if (angular.isObject(object)) {
                if (angular.isFunction(object.$eval) && angular.isFunction(object.$apply)) {
                    out = serializeScope(object);
                } else if (object instanceof Error) {
                    out = object.stack || ('' + object.name + ': ' + object.message);
                } else {
                    // TODO(i): this prevents methods being logged,
                    // we should have a better way to serialize objects
                    out = angular.toJson(object, true);
                }
            } else {
                out = String(object);
            }

            return out;
        }

        function serializeScope(scope, offset) {
            offset = offset || '  ';
            var log = [offset + 'Scope(' + scope.$id + '): {'];
            for (var key in scope) {
                if (Object.prototype.hasOwnProperty.call(scope, key) && !key.match(/^(\$|this)/)) {
                    log.push('  ' + key + ': ' + angular.toJson(scope[key]));
                }
            }
            var child = scope.$$childHead;
            while (child) {
                log.push(serializeScope(child, offset + '  '));
                child = child.$$nextSibling;
            }
            log.push('}');
            return log.join('\n' + offset);
        }
    };

    /**
     * @ngdoc service
     * @name $httpBackend
     * @description
     * Fake HTTP backend implementation suitable for unit testing applications that use the
     * {@link ng.$http $http service}.
     *
     * *Note*: For fake HTTP backend implementation suitable for end-to-end testing or backend-less
     * development please see {@link ngMockE2E.$httpBackend e2e $httpBackend mock}.
     *
     * During unit testing, we want our unit tests to run quickly and have no external dependencies so
     * we don’t want to send [XHR](https://developer.mozilla.org/en/xmlhttprequest) or
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) requests to a real server. All we really need is
     * to verify whether a certain request has been sent or not, or alternatively just let the
     * application make requests, respond with pre-trained responses and assert that the end result is
     * what we expect it to be.
     *
     * This mock implementation can be used to respond with static or dynamic responses via the
     * `expect` and `when` apis and their shortcuts (`expectGET`, `whenPOST`, etc).
     *
     * When an Angular application needs some data from a server, it calls the $http service, which
     * sends the request to a real server using $httpBackend service. With dependency injection, it is
     * easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify
     * the requests and respond with some testing data without sending a request to a real server.
     *
     * There are two ways to specify what test data should be returned as http responses by the mock
     * backend when the code under test makes http requests:
     *
     * - `$httpBackend.expect` - specifies a request expectation
     * - `$httpBackend.when` - specifies a backend definition
     *
     *
     * ## Request Expectations vs Backend Definitions
     *
     * Request expectations provide a way to make assertions about requests made by the application and
     * to define responses for those requests. The test will fail if the expected requests are not made
     * or they are made in the wrong order.
     *
     * Backend definitions allow you to define a fake backend for your application which doesn't assert
     * if a particular request was made or not, it just returns a trained response if a request is made.
     * The test will pass whether or not the request gets made during testing.
     *
     *
     * <table class="table">
     *   <tr><th width="220px"></th><th>Request expectations</th><th>Backend definitions</th></tr>
     *   <tr>
     *     <th>Syntax</th>
     *     <td>.expect(...).respond(...)</td>
     *     <td>.when(...).respond(...)</td>
     *   </tr>
     *   <tr>
     *     <th>Typical usage</th>
     *     <td>strict unit tests</td>
     *     <td>loose (black-box) unit testing</td>
     *   </tr>
     *   <tr>
     *     <th>Fulfills multiple requests</th>
     *     <td>NO</td>
     *     <td>YES</td>
     *   </tr>
     *   <tr>
     *     <th>Order of requests matters</th>
     *     <td>YES</td>
     *     <td>NO</td>
     *   </tr>
     *   <tr>
     *     <th>Request required</th>
     *     <td>YES</td>
     *     <td>NO</td>
     *   </tr>
     *   <tr>
     *     <th>Response required</th>
     *     <td>optional (see below)</td>
     *     <td>YES</td>
     *   </tr>
     * </table>
     *
     * In cases where both backend definitions and request expectations are specified during unit
     * testing, the request expectations are evaluated first.
     *
     * If a request expectation has no response specified, the algorithm will search your backend
     * definitions for an appropriate response.
     *
     * If a request didn't match any expectation or if the expectation doesn't have the response
     * defined, the backend definitions are evaluated in sequential order to see if any of them match
     * the request. The response from the first matched definition is returned.
     *
     *
     * ## Flushing HTTP requests
     *
     * The $httpBackend used in production always responds to requests asynchronously. If we preserved
     * this behavior in unit testing, we'd have to create async unit tests, which are hard to write,
     * to follow and to maintain. But neither can the testing mock respond synchronously; that would
     * change the execution of the code under test. For this reason, the mock $httpBackend has a
     * `flush()` method, which allows the test to explicitly flush pending requests. This preserves
     * the async api of the backend, while allowing the test to execute synchronously.
     *
     *
     * ## Unit testing with mock $httpBackend
     * The following code shows how to setup and use the mock backend when unit testing a controller.
     * First we create the controller under test:
     *
      ```js
      // The module code
      angular
        .module('MyApp', [])
        .controller('MyController', MyController);

      // The controller code
      function MyController($scope, $http) {
        var authToken;

        $http.get('/auth.py').then(function(response) {
          authToken = response.headers('A-Token');
          $scope.user = response.data;
        });

        $scope.saveMessage = function(message) {
          var headers = { 'Authorization': authToken };
          $scope.status = 'Saving...';

          $http.post('/add-msg.py', message, { headers: headers } ).then(function(response) {
            $scope.status = '';
          }).catch(function() {
            $scope.status = 'Failed...';
          });
        };
      }
      ```
     *
     * Now we setup the mock backend and create the test specs:
     *
      ```js
        // testing controller
        describe('MyController', function() {
           var $httpBackend, $rootScope, createController, authRequestHandler;

           // Set up the module
           beforeEach(module('MyApp'));

           beforeEach(inject(function($injector) {
             // Set up the mock http service responses
             $httpBackend = $injector.get('$httpBackend');
             // backend definition common for all tests
             authRequestHandler = $httpBackend.when('GET', '/auth.py')
                                    .respond({userId: 'userX'}, {'A-Token': 'xxx'});

             // Get hold of a scope (i.e. the root scope)
             $rootScope = $injector.get('$rootScope');
             // The $controller service is used to create instances of controllers
             var $controller = $injector.get('$controller');

             createController = function() {
               return $controller('MyController', {'$scope' : $rootScope });
             };
           }));


           afterEach(function() {
             $httpBackend.verifyNoOutstandingExpectation();
             $httpBackend.verifyNoOutstandingRequest();
           });


           it('should fetch authentication token', function() {
             $httpBackend.expectGET('/auth.py');
             var controller = createController();
             $httpBackend.flush();
           });


           it('should fail authentication', function() {

             // Notice how you can change the response even after it was set
             authRequestHandler.respond(401, '');

             $httpBackend.expectGET('/auth.py');
             var controller = createController();
             $httpBackend.flush();
             expect($rootScope.status).toBe('Failed...');
           });


           it('should send msg to server', function() {
             var controller = createController();
             $httpBackend.flush();

             // now you don’t care about the authentication, but
             // the controller will still send the request and
             // $httpBackend will respond without you having to
             // specify the expectation and response for this request

             $httpBackend.expectPOST('/add-msg.py', 'message content').respond(201, '');
             $rootScope.saveMessage('message content');
             expect($rootScope.status).toBe('Saving...');
             $httpBackend.flush();
             expect($rootScope.status).toBe('');
           });


           it('should send auth header', function() {
             var controller = createController();
             $httpBackend.flush();

             $httpBackend.expectPOST('/add-msg.py', undefined, function(headers) {
               // check if the header was sent, if it wasn't the expectation won't
               // match the request and the test will fail
               return headers['Authorization'] == 'xxx';
             }).respond(201, '');

             $rootScope.saveMessage('whatever');
             $httpBackend.flush();
           });
        });
      ```
     *
     * ## Dynamic responses
     *
     * You define a response to a request by chaining a call to `respond()` onto a definition or expectation.
     * If you provide a **callback** as the first parameter to `respond(callback)` then you can dynamically generate
     * a response based on the properties of the request.
     *
     * The `callback` function should be of the form `function(method, url, data, headers, params)`.
     *
     * ### Query parameters
     *
     * By default, query parameters on request URLs are parsed into the `params` object. So a request URL
     * of `/list?q=searchstr&orderby=-name` would set `params` to be `{q: 'searchstr', orderby: '-name'}`.
     *
     * ### Regex parameter matching
     *
     * If an expectation or definition uses a **regex** to match the URL, you can provide an array of **keys** via a
     * `params` argument. The index of each **key** in the array will match the index of a **group** in the
     * **regex**.
     *
     * The `params` object in the **callback** will now have properties with these keys, which hold the value of the
     * corresponding **group** in the **regex**.
     *
     * This also applies to the `when` and `expect` shortcut methods.
     *
     *
     * ```js
     *   $httpBackend.expect('GET', /\/user\/(.+)/, undefined, undefined, ['id'])
     *     .respond(function(method, url, data, headers, params) {
     *       // for requested url of '/user/1234' params is {id: '1234'}
     *     });
     *
     *   $httpBackend.whenPATCH(/\/user\/(.+)\/article\/(.+)/, undefined, undefined, ['user', 'article'])
     *     .respond(function(method, url, data, headers, params) {
     *       // for url of '/user/1234/article/567' params is {user: '1234', article: '567'}
     *     });
     * ```
     *
     * ## Matching route requests
     *
     * For extra convenience, `whenRoute` and `expectRoute` shortcuts are available. These methods offer colon
     * delimited matching of the url path, ignoring the query string. This allows declarations
     * similar to how application routes are configured with `$routeProvider`. Because these methods convert
     * the definition url to regex, declaration order is important. Combined with query parameter parsing,
     * the following is possible:
     *
      ```js
        $httpBackend.whenRoute('GET', '/users/:id')
          .respond(function(method, url, data, headers, params) {
            return [200, MockUserList[Number(params.id)]];
          });

        $httpBackend.whenRoute('GET', '/users')
          .respond(function(method, url, data, headers, params) {
            var userList = angular.copy(MockUserList),
              defaultSort = 'lastName',
              count, pages, isPrevious, isNext;

            // paged api response '/v1/users?page=2'
            params.page = Number(params.page) || 1;

            // query for last names '/v1/users?q=Archer'
            if (params.q) {
              userList = $filter('filter')({lastName: params.q});
            }

            pages = Math.ceil(userList.length / pagingLength);
            isPrevious = params.page > 1;
            isNext = params.page < pages;

            return [200, {
              count:    userList.length,
              previous: isPrevious,
              next:     isNext,
              // sort field -> '/v1/users?sortBy=firstName'
              results:  $filter('orderBy')(userList, params.sortBy || defaultSort)
                          .splice((params.page - 1) * pagingLength, pagingLength)
            }];
          });
      ```
     */
    angular.mock.$HttpBackendProvider = function() {
        this.$get = ['$rootScope', '$timeout', createHttpBackendMock];
    };

    /**
     * General factory function for $httpBackend mock.
     * Returns instance for unit testing (when no arguments specified):
     *   - passing through is disabled
     *   - auto flushing is disabled
     *
     * Returns instance for e2e testing (when `$delegate` and `$browser` specified):
     *   - passing through (delegating request to real backend) is enabled
     *   - auto flushing is enabled
     *
     * @param {Object=} $delegate Real $httpBackend instance (allow passing through if specified)
     * @param {Object=} $browser Auto-flushing enabled if specified
     * @return {Object} Instance of $httpBackend mock
     */
    function createHttpBackendMock($rootScope, $timeout, $delegate, $browser) {
        var definitions = [],
            expectations = [],
            responses = [],
            responsesPush = angular.bind(responses, responses.push),
            copy = angular.copy;

        function createResponse(status, data, headers, statusText) {
            if (angular.isFunction(status)) return status;

            return function() {
                return angular.isNumber(status) ? [status, data, headers, statusText] : [200, status, data, headers];
            };
        }

        // TODO(vojta): change params to: method, url, data, headers, callback
        function $httpBackend(method, url, data, callback, headers, timeout, withCredentials) {
            var xhr = new MockXhr(),
                expectation = expectations[0],
                wasExpected = false;

            function prettyPrint(data) {
                return (angular.isString(data) || angular.isFunction(data) || data instanceof RegExp) ? data : angular.toJson(data);
            }

            function wrapResponse(wrapped) {
                if (!$browser && timeout) {
                    timeout.then ? timeout.then(handleTimeout) : $timeout(handleTimeout, timeout);
                }

                return handleResponse;

                function handleResponse() {
                    var response = wrapped.response(method, url, data, headers, wrapped.params(url));
                    xhr.$$respHeaders = response[2];
                    callback(copy(response[0]), copy(response[1]), xhr.getAllResponseHeaders(),
                        copy(response[3] || ''));
                }

                function handleTimeout() {
                    for (var i = 0, ii = responses.length; i < ii; i++) {
                        if (responses[i] === handleResponse) {
                            responses.splice(i, 1);
                            callback(-1, undefined, '');
                            break;
                        }
                    }
                }
            }

            if (expectation && expectation.match(method, url)) {
                if (!expectation.matchData(data)) {
                    throw new Error('Expected ' + expectation + ' with different data\n' +
                        'EXPECTED: ' + prettyPrint(expectation.data) + '\nGOT:      ' + data);
                }

                if (!expectation.matchHeaders(headers)) {
                    throw new Error('Expected ' + expectation + ' with different headers\n' +
                        'EXPECTED: ' + prettyPrint(expectation.headers) + '\nGOT:      ' +
                        prettyPrint(headers));
                }

                expectations.shift();

                if (expectation.response) {
                    responses.push(wrapResponse(expectation));
                    return;
                }
                wasExpected = true;
            }

            var i = -1,
                definition;
            while ((definition = definitions[++i])) {
                if (definition.match(method, url, data, headers || {})) {
                    if (definition.response) {
                        // if $browser specified, we do auto flush all requests
                        ($browser ? $browser.defer : responsesPush)(wrapResponse(definition));
                    } else if (definition.passThrough) {
                        $delegate(method, url, data, callback, headers, timeout, withCredentials);
                    } else throw new Error('No response defined !');
                    return;
                }
            }
            throw wasExpected ?
                new Error('No response defined !') :
                new Error('Unexpected request: ' + method + ' ' + url + '\n' +
                    (expectation ? 'Expected ' + expectation : 'No more request expected'));
        }

        /**
         * @ngdoc method
         * @name $httpBackend#when
         * @description
         * Creates a new backend definition.
         *
         * @param {string} method HTTP method.
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
         *   data string and returns true if the data is as expected.
         * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
         *   object and returns true if the headers match the current definition.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         *   request is handled. You can save this object for later use and invoke `respond` again in
         *   order to change how a matched request is handled.
         *
         *  - respond –
         *      `{function([status,] data[, headers, statusText])
         *      | function(function(method, url, data, headers, params)}`
         *    – The respond method takes a set of static data to be returned or a function that can
         *    return an array containing response status (number), response data (string), response
         *    headers (Object), and the text for the status (string). The respond method returns the
         *    `requestHandler` object for possible overrides.
         */
        $httpBackend.when = function(method, url, data, headers, keys) {
            var definition = new MockHttpExpectation(method, url, data, headers, keys),
                chain = {
                    respond: function(status, data, headers, statusText) {
                        definition.passThrough = undefined;
                        definition.response = createResponse(status, data, headers, statusText);
                        return chain;
                    }
                };

            if ($browser) {
                chain.passThrough = function() {
                    definition.response = undefined;
                    definition.passThrough = true;
                    return chain;
                };
            }

            definitions.push(definition);
            return chain;
        };

        /**
         * @ngdoc method
         * @name $httpBackend#whenGET
         * @description
         * Creates a new backend definition for GET requests. For more info see `when()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {(Object|function(Object))=} headers HTTP headers.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         * request is handled. You can save this object for later use and invoke `respond` again in
         * order to change how a matched request is handled.
         */

        /**
         * @ngdoc method
         * @name $httpBackend#whenHEAD
         * @description
         * Creates a new backend definition for HEAD requests. For more info see `when()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {(Object|function(Object))=} headers HTTP headers.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         * request is handled. You can save this object for later use and invoke `respond` again in
         * order to change how a matched request is handled.
         */

        /**
         * @ngdoc method
         * @name $httpBackend#whenDELETE
         * @description
         * Creates a new backend definition for DELETE requests. For more info see `when()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {(Object|function(Object))=} headers HTTP headers.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         * request is handled. You can save this object for later use and invoke `respond` again in
         * order to change how a matched request is handled.
         */

        /**
         * @ngdoc method
         * @name $httpBackend#whenPOST
         * @description
         * Creates a new backend definition for POST requests. For more info see `when()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
         *   data string and returns true if the data is as expected.
         * @param {(Object|function(Object))=} headers HTTP headers.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         * request is handled. You can save this object for later use and invoke `respond` again in
         * order to change how a matched request is handled.
         */

        /**
         * @ngdoc method
         * @name $httpBackend#whenPUT
         * @description
         * Creates a new backend definition for PUT requests.  For more info see `when()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {(string|RegExp|function(string))=} data HTTP request body or function that receives
         *   data string and returns true if the data is as expected.
         * @param {(Object|function(Object))=} headers HTTP headers.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         * request is handled. You can save this object for later use and invoke `respond` again in
         * order to change how a matched request is handled.
         */

        /**
         * @ngdoc method
         * @name $httpBackend#whenJSONP
         * @description
         * Creates a new backend definition for JSONP requests. For more info see `when()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         * request is handled. You can save this object for later use and invoke `respond` again in
         * order to change how a matched request is handled.
         */
        createShortMethods('when');

        /**
         * @ngdoc method
         * @name $httpBackend#whenRoute
         * @description
         * Creates a new backend definition that compares only with the requested route.
         *
         * @param {string} method HTTP method.
         * @param {string} url HTTP url string that supports colon param matching.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         * request is handled. You can save this object for later use and invoke `respond` again in
         * order to change how a matched request is handled. See #when for more info.
         */
        $httpBackend.whenRoute = function(method, url) {
            var pathObj = parseRoute(url);
            return $httpBackend.when(method, pathObj.regexp, undefined, undefined, pathObj.keys);
        };

        function parseRoute(url) {
            var ret = {
                    regexp: url
                },
                keys = ret.keys = [];

            if (!url || !angular.isString(url)) return ret;

            url = url
                .replace(/([().])/g, '\\$1')
                .replace(/(\/)?:(\w+)([\?\*])?/g, function(_, slash, key, option) {
                    var optional = option === '?' ? option : null;
                    var star = option === '*' ? option : null;
                    keys.push({
                        name: key,
                        optional: !!optional
                    });
                    slash = slash || '';
                    return '' + (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (star && '(.+?)' || '([^/]+)') + (optional || '') + ')' + (optional || '');
                })
                .replace(/([\/$\*])/g, '\\$1');

            ret.regexp = new RegExp('^' + url, 'i');
            return ret;
        }

        /**
         * @ngdoc method
         * @name $httpBackend#expect
         * @description
         * Creates a new request expectation.
         *
         * @param {string} method HTTP method.
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
         *  receives data string and returns true if the data is as expected, or Object if request body
         *  is in JSON format.
         * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
         *   object and returns true if the headers match the current expectation.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         *  request is handled. You can save this object for later use and invoke `respond` again in
         *  order to change how a matched request is handled.
         *
         *  - respond –
         *    `{function([status,] data[, headers, statusText])
         *    | function(function(method, url, data, headers, params)}`
         *    – The respond method takes a set of static data to be returned or a function that can
         *    return an array containing response status (number), response data (string), response
         *    headers (Object), and the text for the status (string). The respond method returns the
         *    `requestHandler` object for possible overrides.
         */
        $httpBackend.expect = function(method, url, data, headers, keys) {
            var expectation = new MockHttpExpectation(method, url, data, headers, keys),
                chain = {
                    respond: function(status, data, headers, statusText) {
                        expectation.response = createResponse(status, data, headers, statusText);
                        return chain;
                    }
                };

            expectations.push(expectation);
            return chain;
        };

        /**
         * @ngdoc method
         * @name $httpBackend#expectGET
         * @description
         * Creates a new request expectation for GET requests. For more info see `expect()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {Object=} headers HTTP headers.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         * request is handled. You can save this object for later use and invoke `respond` again in
         * order to change how a matched request is handled. See #expect for more info.
         */

        /**
         * @ngdoc method
         * @name $httpBackend#expectHEAD
         * @description
         * Creates a new request expectation for HEAD requests. For more info see `expect()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {Object=} headers HTTP headers.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         *   request is handled. You can save this object for later use and invoke `respond` again in
         *   order to change how a matched request is handled.
         */

        /**
         * @ngdoc method
         * @name $httpBackend#expectDELETE
         * @description
         * Creates a new request expectation for DELETE requests. For more info see `expect()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {Object=} headers HTTP headers.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         *   request is handled. You can save this object for later use and invoke `respond` again in
         *   order to change how a matched request is handled.
         */

        /**
         * @ngdoc method
         * @name $httpBackend#expectPOST
         * @description
         * Creates a new request expectation for POST requests. For more info see `expect()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
         *  receives data string and returns true if the data is as expected, or Object if request body
         *  is in JSON format.
         * @param {Object=} headers HTTP headers.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         *   request is handled. You can save this object for later use and invoke `respond` again in
         *   order to change how a matched request is handled.
         */

        /**
         * @ngdoc method
         * @name $httpBackend#expectPUT
         * @description
         * Creates a new request expectation for PUT requests. For more info see `expect()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
         *  receives data string and returns true if the data is as expected, or Object if request body
         *  is in JSON format.
         * @param {Object=} headers HTTP headers.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         *   request is handled. You can save this object for later use and invoke `respond` again in
         *   order to change how a matched request is handled.
         */

        /**
         * @ngdoc method
         * @name $httpBackend#expectPATCH
         * @description
         * Creates a new request expectation for PATCH requests. For more info see `expect()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
         *   and returns true if the url matches the current definition.
         * @param {(string|RegExp|function(string)|Object)=} data HTTP request body or function that
         *  receives data string and returns true if the data is as expected, or Object if request body
         *  is in JSON format.
         * @param {Object=} headers HTTP headers.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         *   request is handled. You can save this object for later use and invoke `respond` again in
         *   order to change how a matched request is handled.
         */

        /**
         * @ngdoc method
         * @name $httpBackend#expectJSONP
         * @description
         * Creates a new request expectation for JSONP requests. For more info see `expect()`.
         *
         * @param {string|RegExp|function(string)} url HTTP url or function that receives an url
         *   and returns true if the url matches the current definition.
         * @param {(Array)=} keys Array of keys to assign to regex matches in request url described above.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         *   request is handled. You can save this object for later use and invoke `respond` again in
         *   order to change how a matched request is handled.
         */
        createShortMethods('expect');

        /**
         * @ngdoc method
         * @name $httpBackend#expectRoute
         * @description
         * Creates a new request expectation that compares only with the requested route.
         *
         * @param {string} method HTTP method.
         * @param {string} url HTTP url string that supports colon param matching.
         * @returns {requestHandler} Returns an object with `respond` method that controls how a matched
         * request is handled. You can save this object for later use and invoke `respond` again in
         * order to change how a matched request is handled. See #expect for more info.
         */
        $httpBackend.expectRoute = function(method, url) {
            var pathObj = parseRoute(url);
            return $httpBackend.expect(method, pathObj.regexp, undefined, undefined, pathObj.keys);
        };


        /**
         * @ngdoc method
         * @name $httpBackend#flush
         * @description
         * Flushes all pending requests using the trained responses.
         *
         * @param {number=} count Number of responses to flush (in the order they arrived). If undefined,
         *   all pending requests will be flushed. If there are no pending requests when the flush method
         *   is called an exception is thrown (as this typically a sign of programming error).
         */
        $httpBackend.flush = function(count, digest) {
            if (digest !== false) $rootScope.$digest();
            if (!responses.length) throw new Error('No pending request to flush !');

            if (angular.isDefined(count) && count !== null) {
                while (count--) {
                    if (!responses.length) throw new Error('No more pending request to flush !');
                    responses.shift()();
                }
            } else {
                while (responses.length) {
                    responses.shift()();
                }
            }
            $httpBackend.verifyNoOutstandingExpectation(digest);
        };


        /**
         * @ngdoc method
         * @name $httpBackend#verifyNoOutstandingExpectation
         * @description
         * Verifies that all of the requests defined via the `expect` api were made. If any of the
         * requests were not made, verifyNoOutstandingExpectation throws an exception.
         *
         * Typically, you would call this method following each test case that asserts requests using an
         * "afterEach" clause.
         *
         * ```js
         *   afterEach($httpBackend.verifyNoOutstandingExpectation);
         * ```
         */
        $httpBackend.verifyNoOutstandingExpectation = function(digest) {
            if (digest !== false) $rootScope.$digest();
            if (expectations.length) {
                throw new Error('Unsatisfied requests: ' + expectations.join(', '));
            }
        };


        /**
         * @ngdoc method
         * @name $httpBackend#verifyNoOutstandingRequest
         * @description
         * Verifies that there are no outstanding requests that need to be flushed.
         *
         * Typically, you would call this method following each test case that asserts requests using an
         * "afterEach" clause.
         *
         * ```js
         *   afterEach($httpBackend.verifyNoOutstandingRequest);
         * ```
         */
        $httpBackend.verifyNoOutstandingRequest = function() {
            if (responses.length) {
                throw new Error('Unflushed requests: ' + responses.length);
            }
        };


        /**
         * @ngdoc method
         * @name $httpBackend#resetExpectations
         * @description
         * Resets all request expectations, but preserves all backend definitions. Typically, you would
         * call resetExpectations during a multiple-phase test when you want to reuse the same instance of
         * $httpBackend mock.
         */
        $httpBackend.resetExpectations = function() {
            expectations.length = 0;
            responses.length = 0;
        };

        return $httpBackend;


        function createShortMethods(prefix) {
            angular.forEach(['GET', 'DELETE', 'JSONP', 'HEAD'], function(method) {
                $httpBackend[prefix + method] = function(url, headers, keys) {
                    return $httpBackend[prefix](method, url, undefined, headers, keys);
                };
            });

            angular.forEach(['PUT', 'POST', 'PATCH'], function(method) {
                $httpBackend[prefix + method] = function(url, data, headers, keys) {
                    return $httpBackend[prefix](method, url, data, headers, keys);
                };
            });
        }
    }

    function MockHttpExpectation(method, url, data, headers, keys) {

        this.data = data;
        this.headers = headers;

        this.match = function(m, u, d, h) {
            if (method != m) return false;
            if (!this.matchUrl(u)) return false;
            if (angular.isDefined(d) && !this.matchData(d)) return false;
            if (angular.isDefined(h) && !this.matchHeaders(h)) return false;
            return true;
        };

        this.matchUrl = function(u) {
            if (!url) return true;
            if (angular.isFunction(url.test)) return url.test(u);
            if (angular.isFunction(url)) return url(u);
            return url == u;
        };

        this.matchHeaders = function(h) {
            if (angular.isUndefined(headers)) return true;
            if (angular.isFunction(headers)) return headers(h);
            return angular.equals(headers, h);
        };

        this.matchData = function(d) {
            if (angular.isUndefined(data)) return true;
            if (data && angular.isFunction(data.test)) return data.test(d);
            if (data && angular.isFunction(data)) return data(d);
            if (data && !angular.isString(data)) {
                return angular.equals(angular.fromJson(angular.toJson(data)), angular.fromJson(d));
            }
            return data == d;
        };

        this.toString = function() {
            return method + ' ' + url;
        };

        this.params = function(u) {
            return angular.extend(parseQuery(), pathParams());

            function pathParams() {
                var keyObj = {};
                if (!url || !angular.isFunction(url.test) || !keys || keys.length === 0) return keyObj;

                var m = url.exec(u);
                if (!m) return keyObj;
                for (var i = 1, len = m.length; i < len; ++i) {
                    var key = keys[i - 1];
                    var val = m[i];
                    if (key && val) {
                        keyObj[key.name || key] = val;
                    }
                }

                return keyObj;
            }

            function parseQuery() {
                var obj = {},
                    key_value, key,
                    queryStr = u.indexOf('?') > -1 ? u.substring(u.indexOf('?') + 1) : "";

                angular.forEach(queryStr.split('&'), function(keyValue) {
                    if (keyValue) {
                        key_value = keyValue.replace(/\+/g, '%20').split('=');
                        key = tryDecodeURIComponent(key_value[0]);
                        if (angular.isDefined(key)) {
                            var val = angular.isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
                            if (!hasOwnProperty.call(obj, key)) {
                                obj[key] = val;
                            } else if (angular.isArray(obj[key])) {
                                obj[key].push(val);
                            } else {
                                obj[key] = [obj[key], val];
                            }
                        }
                    }
                });
                return obj;
            }

            function tryDecodeURIComponent(value) {
                try {
                    return decodeURIComponent(value);
                } catch (e) {
                    // Ignore any invalid uri component
                }
            }
        };
    }

    function createMockXhr() {
        return new MockXhr();
    }

    function MockXhr() {

        // hack for testing $http, $httpBackend
        MockXhr.$$lastInstance = this;

        this.open = function(method, url, async) {
            this.$$method = method;
            this.$$url = url;
            this.$$async = async;
            this.$$reqHeaders = {};
            this.$$respHeaders = {};
        };

        this.send = function(data) {
            this.$$data = data;
        };

        this.setRequestHeader = function(key, value) {
            this.$$reqHeaders[key] = value;
        };

        this.getResponseHeader = function(name) {
            // the lookup must be case insensitive,
            // that's why we try two quick lookups first and full scan last
            var header = this.$$respHeaders[name];
            if (header) return header;

            name = angular.lowercase(name);
            header = this.$$respHeaders[name];
            if (header) return header;

            header = undefined;
            angular.forEach(this.$$respHeaders, function(headerVal, headerName) {
                if (!header && angular.lowercase(headerName) == name) header = headerVal;
            });
            return header;
        };

        this.getAllResponseHeaders = function() {
            var lines = [];

            angular.forEach(this.$$respHeaders, function(value, key) {
                lines.push(key + ': ' + value);
            });
            return lines.join('\n');
        };

        this.abort = angular.noop;
    }


    /**
     * @ngdoc service
     * @name $timeout
     * @description
     *
     * This service is just a simple decorator for {@link ng.$timeout $timeout} service
     * that adds a "flush" and "verifyNoPendingTasks" methods.
     */

    angular.mock.$TimeoutDecorator = ['$delegate', '$browser', function($delegate, $browser) {

        /**
         * @ngdoc method
         * @name $timeout#flush
         * @description
         *
         * Flushes the queue of pending tasks.
         *
         * @param {number=} delay maximum timeout amount to flush up until
         */
        $delegate.flush = function(delay) {
            $browser.defer.flush(delay);
        };

        /**
         * @ngdoc method
         * @name $timeout#verifyNoPendingTasks
         * @description
         *
         * Verifies that there are no pending tasks that need to be flushed.
         */
        $delegate.verifyNoPendingTasks = function() {
            if ($browser.deferredFns.length) {
                throw new Error('Deferred tasks to flush (' + $browser.deferredFns.length + '): ' +
                    formatPendingTasksAsString($browser.deferredFns));
            }
        };

        function formatPendingTasksAsString(tasks) {
            var result = [];
            angular.forEach(tasks, function(task) {
                result.push('{id: ' + task.id + ', ' + 'time: ' + task.time + '}');
            });

            return result.join(', ');
        }

        return $delegate;
    }];

    angular.mock.$RAFDecorator = ['$delegate', function($delegate) {
        var rafFn = function(fn) {
            var index = rafFn.queue.length;
            rafFn.queue.push(fn);
            return function() {
                rafFn.queue.splice(index, 1);
            };
        };

        rafFn.queue = [];
        rafFn.supported = $delegate.supported;

        rafFn.flush = function() {
            if (rafFn.queue.length === 0) {
                throw new Error('No rAF callbacks present');
            }

            var length = rafFn.queue.length;
            for (var i = 0; i < length; i++) {
                rafFn.queue[i]();
            }

            rafFn.queue = rafFn.queue.slice(i);
        };

        return rafFn;
    }];

    /**
     *
     */
    angular.mock.$RootElementProvider = function() {
        this.$get = function() {
            return angular.element('<div ng-app></div>');
        };
    };

    /**
     * @ngdoc service
     * @name $controller
     * @description
     * A decorator for {@link ng.$controller} with additional `bindings` parameter, useful when testing
     * controllers of directives that use {@link $compile#-bindtocontroller- `bindToController`}.
     *
     *
     * ## Example
     *
     * ```js
     *
     * // Directive definition ...
     *
     * myMod.directive('myDirective', {
     *   controller: 'MyDirectiveController',
     *   bindToController: {
     *     name: '@'
     *   }
     * });
     *
     *
     * // Controller definition ...
     *
     * myMod.controller('MyDirectiveController', ['$log', function($log) {
     *   $log.info(this.name);
     * })];
     *
     *
     * // In a test ...
     *
     * describe('myDirectiveController', function() {
     *   it('should write the bound name to the log', inject(function($controller, $log) {
     *     var ctrl = $controller('MyDirectiveController', { /* no locals &#42;/ }, { name: 'Clark Kent' });
     *     expect(ctrl.name).toEqual('Clark Kent');
     *     expect($log.info.logs).toEqual(['Clark Kent']);
     *   });
     * });
     *
     * ```
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
     *      `window` object (not recommended)
     *
     *    The string can use the `controller as property` syntax, where the controller instance is published
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
     *    to work correctly.
     *
     * @param {Object} locals Injection locals for Controller.
     * @param {Object=} bindings Properties to add to the controller before invoking the constructor. This is used
     *                           to simulate the `bindToController` feature and simplify certain kinds of tests.
     * @return {Object} Instance of given controller.
     */
    angular.mock.$ControllerDecorator = ['$delegate', function($delegate) {
        return function(expression, locals, later, ident) {
            if (later && typeof later === 'object') {
                var create = $delegate(expression, locals, true, ident);
                angular.extend(create.instance, later);
                return create();
            }
            return $delegate(expression, locals, later, ident);
        };
    }];

    /**
     * @ngdoc service
     * @name $componentController
     * @description
     * A service that can be used to create instances of component controllers.
     * <div class="alert alert-info">
     * Be aware that the controller will be instantiated and attached to the scope as specified in
     * the component definition object. That means that you must always provide a `$scope` object
     * in the `locals` param.
     * </div>
     * @param {string} componentName the name of the component whose controller we want to instantiate
     * @param {Object} locals Injection locals for Controller.
     * @param {Object=} bindings Properties to add to the controller before invoking the constructor. This is used
     *                           to simulate the `bindToController` feature and simplify certain kinds of tests.
     * @param {string=} ident Override the property name to use when attaching the controller to the scope.
     * @return {Object} Instance of requested controller.
     */
    angular.mock.$ComponentControllerProvider = ['$compileProvider', function($compileProvider) {
        return {
            $get: ['$controller', '$injector', function($controller, $injector) {
                return function $componentController(componentName, locals, bindings, ident) {
                    // get all directives associated to the component name
                    var directives = $injector.get(componentName + 'Directive');
                    // look for those directives that are components
                    var candidateDirectives = directives.filter(function(directiveInfo) {
                        // components have controller, controllerAs and restrict:'E'
                        return directiveInfo.controller && directiveInfo.controllerAs && directiveInfo.restrict === 'E';
                    });
                    // check if valid directives found
                    if (candidateDirectives.length === 0) {
                        throw new Error('No component found');
                    }
                    if (candidateDirectives.length > 1) {
                        throw new Error('Too many components found');
                    }
                    // get the info of the component
                    var directiveInfo = candidateDirectives[0];
                    return $controller(directiveInfo.controller, locals, bindings, ident || directiveInfo.controllerAs);
                };
            }]
        };
    }];


    /**
     * @ngdoc module
     * @name ngMock
     * @packageName angular-mocks
     * @description
     *
     * # ngMock
     *
     * The `ngMock` module provides support to inject and mock Angular services into unit tests.
     * In addition, ngMock also extends various core ng services such that they can be
     * inspected and controlled in a synchronous manner within test code.
     *
     *
     * <div doc-module-components="ngMock"></div>
     *
     */
    angular.module('ngMock', ['ng']).provider({
        $browser: angular.mock.$BrowserProvider,
        $exceptionHandler: angular.mock.$ExceptionHandlerProvider,
        $log: angular.mock.$LogProvider,
        $interval: angular.mock.$IntervalProvider,
        $httpBackend: angular.mock.$HttpBackendProvider,
        $rootElement: angular.mock.$RootElementProvider,
        $componentController: angular.mock.$ComponentControllerProvider
    }).config(['$provide', function($provide) {
        $provide.decorator('$timeout', angular.mock.$TimeoutDecorator);
        $provide.decorator('$$rAF', angular.mock.$RAFDecorator);
        $provide.decorator('$rootScope', angular.mock.$RootScopeDecorator);
        $provide.decorator('$controller', angular.mock.$ControllerDecorator);
    }]);

    /**
     * @ngdoc module
     * @name ngMockE2E
     * @module ngMockE2E
     * @packageName angular-mocks
     * @description
     *
     * The `ngMockE2E` is an angular module which contains mocks suitable for end-to-end testing.
     * Currently there is only one mock present in this module -
     * the {@link ngMockE2E.$httpBackend e2e $httpBackend} mock.
     */
    angular.module('ngMockE2E', ['ng']).config(['$provide', function($provide) {
        $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);
    }]);

    /**
     * @ngdoc service
     * @name $httpBackend
     * @module ngMockE2E
     * @description
     * Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of
     * applications that use the {@link ng.$http $http service}.
     *
     * *Note*: For fake http backend implementation suitable for unit testing please see
     * {@link ngMock.$httpBackend unit-testing $httpBackend mock}.
     *
     * This implementation can be used to respond with static or dynamic responses via the `when` api
     * and its shortcuts (`whenGET`, `whenPOST`, etc) and optionally pass through requests to the
     * real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch
     * templates from a webserver).
     *
     * As opposed to unit-testing, in an end-to-end testing scenario or in scenario when an application
     * is being developed with the real backend api replaced with a mock, it is often desirable for
     * certain category of requests to bypass the mock and issue a real http request (e.g. to fetch
     * templates or static files from the webserver). To configure the backend with this behavior
     * use the `passThrough` request handler of `when` instead of `respond`.
     *
     * Additionally, we don't want to manually have to flush mocked out requests like we do during unit
     * testing. For this reason the e2e $httpBackend flushes mocked out requests
     * automatically, closely simulating the behavior of the XMLHttpRequest object.
     *
     * To setup the application to run with this http backend, you have to create a module that depends
     * on the `ngMockE2E` and your application modules and defines the fake backend:
     *
     * ```js
     *   myAppDev = angular.module('myAppDev', ['myApp', 'ngMockE2E']);
     *   myAppDev.run(function($httpBackend) {
     *     phones = [{name: 'phone1'}, {name: 'phone2'}];
     *
     *     // returns the current list of phones
     *     $httpBackend.whenGET('/phones').respond(phones);
     *
     *     // adds a new phone to the phones array
     *     $httpBackend.whenPOST('/phones').respond(function(method, url, data) {
     *       var phone = angular.fromJson(data);
     *       phones.push(phone);
     *       return [200, phone, {}];
     *     });
     *     $httpBackend.whenGET(/^\/templates\//).passThrough();
     *     //...
     *   });
     * ```
     *
     * Afterwards, bootstrap your app with this new module.
     */

    /**
     * @ngdoc method
     * @name $httpBackend#when
     * @module ngMockE2E
     * @description
     * Creates a new backend definition.
     *
     * @param {string} method HTTP method.
     * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
     *   and returns true if the url matches the current definition.
     * @param {(string|RegExp)=} data HTTP request body.
     * @param {(Object|function(Object))=} headers HTTP headers or function that receives http header
     *   object and returns true if the headers match the current definition.
     * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on
     *   {@link ngMock.$httpBackend $httpBackend mock}.
     * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
     *   control how a matched request is handled. You can save this object for later use and invoke
     *   `respond` or `passThrough` again in order to change how a matched request is handled.
     *
     *  - respond –
     *    `{function([status,] data[, headers, statusText])
     *    | function(function(method, url, data, headers, params)}`
     *    – The respond method takes a set of static data to be returned or a function that can return
     *    an array containing response status (number), response data (string), response headers
     *    (Object), and the text for the status (string).
     *  - passThrough – `{function()}` – Any request matching a backend definition with
     *    `passThrough` handler will be passed through to the real backend (an XHR request will be made
     *    to the server.)
     *  - Both methods return the `requestHandler` object for possible overrides.
     */

    /**
     * @ngdoc method
     * @name $httpBackend#whenGET
     * @module ngMockE2E
     * @description
     * Creates a new backend definition for GET requests. For more info see `when()`.
     *
     * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
     *   and returns true if the url matches the current definition.
     * @param {(Object|function(Object))=} headers HTTP headers.
     * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on
     *   {@link ngMock.$httpBackend $httpBackend mock}.
     * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
     *   control how a matched request is handled. You can save this object for later use and invoke
     *   `respond` or `passThrough` again in order to change how a matched request is handled.
     */

    /**
     * @ngdoc method
     * @name $httpBackend#whenHEAD
     * @module ngMockE2E
     * @description
     * Creates a new backend definition for HEAD requests. For more info see `when()`.
     *
     * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
     *   and returns true if the url matches the current definition.
     * @param {(Object|function(Object))=} headers HTTP headers.
     * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on
     *   {@link ngMock.$httpBackend $httpBackend mock}.
     * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
     *   control how a matched request is handled. You can save this object for later use and invoke
     *   `respond` or `passThrough` again in order to change how a matched request is handled.
     */

    /**
     * @ngdoc method
     * @name $httpBackend#whenDELETE
     * @module ngMockE2E
     * @description
     * Creates a new backend definition for DELETE requests. For more info see `when()`.
     *
     * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
     *   and returns true if the url matches the current definition.
     * @param {(Object|function(Object))=} headers HTTP headers.
     * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on
     *   {@link ngMock.$httpBackend $httpBackend mock}.
     * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
     *   control how a matched request is handled. You can save this object for later use and invoke
     *   `respond` or `passThrough` again in order to change how a matched request is handled.
     */

    /**
     * @ngdoc method
     * @name $httpBackend#whenPOST
     * @module ngMockE2E
     * @description
     * Creates a new backend definition for POST requests. For more info see `when()`.
     *
     * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
     *   and returns true if the url matches the current definition.
     * @param {(string|RegExp)=} data HTTP request body.
     * @param {(Object|function(Object))=} headers HTTP headers.
     * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on
     *   {@link ngMock.$httpBackend $httpBackend mock}.
     * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
     *   control how a matched request is handled. You can save this object for later use and invoke
     *   `respond` or `passThrough` again in order to change how a matched request is handled.
     */

    /**
     * @ngdoc method
     * @name $httpBackend#whenPUT
     * @module ngMockE2E
     * @description
     * Creates a new backend definition for PUT requests.  For more info see `when()`.
     *
     * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
     *   and returns true if the url matches the current definition.
     * @param {(string|RegExp)=} data HTTP request body.
     * @param {(Object|function(Object))=} headers HTTP headers.
     * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on
     *   {@link ngMock.$httpBackend $httpBackend mock}.
     * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
     *   control how a matched request is handled. You can save this object for later use and invoke
     *   `respond` or `passThrough` again in order to change how a matched request is handled.
     */

    /**
     * @ngdoc method
     * @name $httpBackend#whenPATCH
     * @module ngMockE2E
     * @description
     * Creates a new backend definition for PATCH requests.  For more info see `when()`.
     *
     * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
     *   and returns true if the url matches the current definition.
     * @param {(string|RegExp)=} data HTTP request body.
     * @param {(Object|function(Object))=} headers HTTP headers.
     * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on
     *   {@link ngMock.$httpBackend $httpBackend mock}.
     * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
     *   control how a matched request is handled. You can save this object for later use and invoke
     *   `respond` or `passThrough` again in order to change how a matched request is handled.
     */

    /**
     * @ngdoc method
     * @name $httpBackend#whenJSONP
     * @module ngMockE2E
     * @description
     * Creates a new backend definition for JSONP requests. For more info see `when()`.
     *
     * @param {string|RegExp|function(string)} url HTTP url or function that receives a url
     *   and returns true if the url matches the current definition.
     * @param {(Array)=} keys Array of keys to assign to regex matches in request url described on
     *   {@link ngMock.$httpBackend $httpBackend mock}.
     * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
     *   control how a matched request is handled. You can save this object for later use and invoke
     *   `respond` or `passThrough` again in order to change how a matched request is handled.
     */
    /**
     * @ngdoc method
     * @name $httpBackend#whenRoute
     * @module ngMockE2E
     * @description
     * Creates a new backend definition that compares only with the requested route.
     *
     * @param {string} method HTTP method.
     * @param {string} url HTTP url string that supports colon param matching.
     * @returns {requestHandler} Returns an object with `respond` and `passThrough` methods that
     *   control how a matched request is handled. You can save this object for later use and invoke
     *   `respond` or `passThrough` again in order to change how a matched request is handled.
     */
    angular.mock.e2e = {};
    angular.mock.e2e.$httpBackendDecorator = ['$rootScope', '$timeout', '$delegate', '$browser', createHttpBackendMock];


    /**
     * @ngdoc type
     * @name $rootScope.Scope
     * @module ngMock
     * @description
     * {@link ng.$rootScope.Scope Scope} type decorated with helper methods useful for testing. These
     * methods are automatically available on any {@link ng.$rootScope.Scope Scope} instance when
     * `ngMock` module is loaded.
     *
     * In addition to all the regular `Scope` methods, the following helper methods are available:
     */
    angular.mock.$RootScopeDecorator = ['$delegate', function($delegate) {

        var $rootScopePrototype = Object.getPrototypeOf($delegate);

        $rootScopePrototype.$countChildScopes = countChildScopes;
        $rootScopePrototype.$countWatchers = countWatchers;

        return $delegate;

        // ------------------------------------------------------------------------------------------ //

        /**
         * @ngdoc method
         * @name $rootScope.Scope#$countChildScopes
         * @module ngMock
         * @description
         * Counts all the direct and indirect child scopes of the current scope.
         *
         * The current scope is excluded from the count. The count includes all isolate child scopes.
         *
         * @returns {number} Total number of child scopes.
         */
        function countChildScopes() {
            // jshint validthis: true
            var count = 0; // exclude the current scope
            var pendingChildHeads = [this.$$childHead];
            var currentScope;

            while (pendingChildHeads.length) {
                currentScope = pendingChildHeads.shift();

                while (currentScope) {
                    count += 1;
                    pendingChildHeads.push(currentScope.$$childHead);
                    currentScope = currentScope.$$nextSibling;
                }
            }

            return count;
        }


        /**
         * @ngdoc method
         * @name $rootScope.Scope#$countWatchers
         * @module ngMock
         * @description
         * Counts all the watchers of direct and indirect child scopes of the current scope.
         *
         * The watchers of the current scope are included in the count and so are all the watchers of
         * isolate child scopes.
         *
         * @returns {number} Total number of watchers.
         */
        function countWatchers() {
            // jshint validthis: true
            var count = this.$$watchers ? this.$$watchers.length : 0; // include the current scope
            var pendingChildHeads = [this.$$childHead];
            var currentScope;

            while (pendingChildHeads.length) {
                currentScope = pendingChildHeads.shift();

                while (currentScope) {
                    count += currentScope.$$watchers ? currentScope.$$watchers.length : 0;
                    pendingChildHeads.push(currentScope.$$childHead);
                    currentScope = currentScope.$$nextSibling;
                }
            }

            return count;
        }
    }];


    if (window.jasmine || window.mocha) {

        var currentSpec = null,
            annotatedFunctions = [],
            isSpecRunning = function() {
                return !!currentSpec;
            };

        angular.mock.$$annotate = angular.injector.$$annotate;
        angular.injector.$$annotate = function(fn) {
            if (typeof fn === 'function' && !fn.$inject) {
                annotatedFunctions.push(fn);
            }
            return angular.mock.$$annotate.apply(this, arguments);
        };


        (window.beforeEach || window.setup)(function() {
            annotatedFunctions = [];
            currentSpec = this;
        });

        (window.afterEach || window.teardown)(function() {
            var injector = currentSpec.$injector;

            annotatedFunctions.forEach(function(fn) {
                delete fn.$inject;
            });

            angular.forEach(currentSpec.$modules, function(module) {
                if (module && module.$$hashKey) {
                    module.$$hashKey = undefined;
                }
            });

            currentSpec.$injector = null;
            currentSpec.$modules = null;
            currentSpec.$providerInjector = null;
            currentSpec = null;

            if (injector) {
                injector.get('$rootElement').off();
                injector.get('$rootScope').$destroy();
            }

            // clean up jquery's fragment cache
            angular.forEach(angular.element.fragments, function(val, key) {
                delete angular.element.fragments[key];
            });

            MockXhr.$$lastInstance = null;

            angular.forEach(angular.callbacks, function(val, key) {
                delete angular.callbacks[key];
            });
            angular.callbacks.counter = 0;
        });

        /**
         * @ngdoc function
         * @name angular.mock.module
         * @description
         *
         * *NOTE*: This function is also published on window for easy access.<br>
         * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha
         *
         * This function registers a module configuration code. It collects the configuration information
         * which will be used when the injector is created by {@link angular.mock.inject inject}.
         *
         * See {@link angular.mock.inject inject} for usage example
         *
         * @param {...(string|Function|Object)} fns any number of modules which are represented as string
         *        aliases or as anonymous module initialization functions. The modules are used to
         *        configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an
         *        object literal is passed each key-value pair will be registered on the module via
         *        {@link auto.$provide $provide}.value, the key being the string name (or token) to associate
         *        with the value on the injector.
         */
        window.module = angular.mock.module = function() {
            var moduleFns = Array.prototype.slice.call(arguments, 0);
            return isSpecRunning() ? workFn() : workFn;
            /////////////////////
            function workFn() {
                if (currentSpec.$injector) {
                    throw new Error('Injector already created, can not register a module!');
                } else {
                    var fn, modules = currentSpec.$modules || (currentSpec.$modules = []);
                    angular.forEach(moduleFns, function(module) {
                        if (angular.isObject(module) && !angular.isArray(module)) {
                            fn = function($provide) {
                                angular.forEach(module, function(value, key) {
                                    $provide.value(key, value);
                                });
                            };
                        } else {
                            fn = module;
                        }
                        if (currentSpec.$providerInjector) {
                            currentSpec.$providerInjector.invoke(fn);
                        } else {
                            modules.push(fn);
                        }
                    });
                }
            }
        };

        /**
         * @ngdoc function
         * @name angular.mock.inject
         * @description
         *
         * *NOTE*: This function is also published on window for easy access.<br>
         * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha
         *
         * The inject function wraps a function into an injectable function. The inject() creates new
         * instance of {@link auto.$injector $injector} per test, which is then used for
         * resolving references.
         *
         *
         * ## Resolving References (Underscore Wrapping)
         * Often, we would like to inject a reference once, in a `beforeEach()` block and reuse this
         * in multiple `it()` clauses. To be able to do this we must assign the reference to a variable
         * that is declared in the scope of the `describe()` block. Since we would, most likely, want
         * the variable to have the same name of the reference we have a problem, since the parameter
         * to the `inject()` function would hide the outer variable.
         *
         * To help with this, the injected parameters can, optionally, be enclosed with underscores.
         * These are ignored by the injector when the reference name is resolved.
         *
         * For example, the parameter `_myService_` would be resolved as the reference `myService`.
         * Since it is available in the function body as _myService_, we can then assign it to a variable
         * defined in an outer scope.
         *
         * ```
         * // Defined out reference variable outside
         * var myService;
         *
         * // Wrap the parameter in underscores
         * beforeEach( inject( function(_myService_){
         *   myService = _myService_;
         * }));
         *
         * // Use myService in a series of tests.
         * it('makes use of myService', function() {
         *   myService.doStuff();
         * });
         *
         * ```
         *
         * See also {@link angular.mock.module angular.mock.module}
         *
         * ## Example
         * Example of what a typical jasmine tests looks like with the inject method.
         * ```js
         *
         *   angular.module('myApplicationModule', [])
         *       .value('mode', 'app')
         *       .value('version', 'v1.0.1');
         *
         *
         *   describe('MyApp', function() {
         *
         *     // You need to load modules that you want to test,
         *     // it loads only the "ng" module by default.
         *     beforeEach(module('myApplicationModule'));
         *
         *
         *     // inject() is used to inject arguments of all given functions
         *     it('should provide a version', inject(function(mode, version) {
         *       expect(version).toEqual('v1.0.1');
         *       expect(mode).toEqual('app');
         *     }));
         *
         *
         *     // The inject and module method can also be used inside of the it or beforeEach
         *     it('should override a version and test the new version is injected', function() {
         *       // module() takes functions or strings (module aliases)
         *       module(function($provide) {
         *         $provide.value('version', 'overridden'); // override version here
         *       });
         *
         *       inject(function(version) {
         *         expect(version).toEqual('overridden');
         *       });
         *     });
         *   });
         *
         * ```
         *
         * @param {...Function} fns any number of functions which will be injected using the injector.
         */



        var ErrorAddingDeclarationLocationStack = function(e, errorForStack) {
            this.message = e.message;
            this.name = e.name;
            if (e.line) this.line = e.line;
            if (e.sourceId) this.sourceId = e.sourceId;
            if (e.stack && errorForStack)
                this.stack = e.stack + '\n' + errorForStack.stack;
            if (e.stackArray) this.stackArray = e.stackArray;
        };
        ErrorAddingDeclarationLocationStack.prototype.toString = Error.prototype.toString;

        window.inject = angular.mock.inject = function() {
            var blockFns = Array.prototype.slice.call(arguments, 0);
            var errorForStack = new Error('Declaration Location');
            return isSpecRunning() ? workFn.call(currentSpec) : workFn;
            /////////////////////
            function workFn() {
                var modules = currentSpec.$modules || [];
                var strictDi = !!currentSpec.$injectorStrict;
                modules.unshift(function($injector) {
                    currentSpec.$providerInjector = $injector;
                });
                modules.unshift('ngMock');
                modules.unshift('ng');
                var injector = currentSpec.$injector;
                if (!injector) {
                    if (strictDi) {
                        // If strictDi is enabled, annotate the providerInjector blocks
                        angular.forEach(modules, function(moduleFn) {
                            if (typeof moduleFn === "function") {
                                angular.injector.$$annotate(moduleFn);
                            }
                        });
                    }
                    injector = currentSpec.$injector = angular.injector(modules, strictDi);
                    currentSpec.$injectorStrict = strictDi;
                }
                for (var i = 0, ii = blockFns.length; i < ii; i++) {
                    if (currentSpec.$injectorStrict) {
                        // If the injector is strict / strictDi, and the spec wants to inject using automatic
                        // annotation, then annotate the function here.
                        injector.annotate(blockFns[i]);
                    }
                    try {
                        /* jshint -W040 */
                        /* Jasmine explicitly provides a `this` object when calling functions */
                        injector.invoke(blockFns[i] || angular.noop, this);
                        /* jshint +W040 */
                    } catch (e) {
                        if (e.stack && errorForStack) {
                            throw new ErrorAddingDeclarationLocationStack(e, errorForStack);
                        }
                        throw e;
                    } finally {
                        errorForStack = null;
                    }
                }
            }
        };


        angular.mock.inject.strictDi = function(value) {
            value = arguments.length ? !!value : true;
            return isSpecRunning() ? workFn() : workFn;

            function workFn() {
                if (value !== currentSpec.$injectorStrict) {
                    if (currentSpec.$injector) {
                        throw new Error('Injector already created, can not modify strict annotations');
                    } else {
                        currentSpec.$injectorStrict = value;
                    }
                }
            }
        };
    }


})(window, window.angular);

/* ng-infinite-scroll - v1.2.0 - 2015-12-02 */
var mod;

mod = angular.module('infinite-scroll', []);

mod.value('THROTTLE_MILLISECONDS', null);

mod.directive('infiniteScroll', [
    '$rootScope', '$window', '$interval', 'THROTTLE_MILLISECONDS',
    function($rootScope, $window, $interval, THROTTLE_MILLISECONDS) {
        return {
            scope: {
                infiniteScroll: '&',
                infiniteScrollContainer: '=',
                infiniteScrollDistance: '=',
                infiniteScrollDisabled: '=',
                infiniteScrollUseDocumentBottom: '=',
                infiniteScrollListenForEvent: '@'
            },
            link: function(scope, elem, attrs) {
                var changeContainer, checkInterval, checkWhenEnabled, container, handleInfiniteScrollContainer, handleInfiniteScrollDisabled, handleInfiniteScrollDistance, handleInfiniteScrollUseDocumentBottom, handler, height, immediateCheck, offsetTop, pageYOffset, scrollDistance, scrollEnabled, throttle, unregisterEventListener, useDocumentBottom, windowElement;
                windowElement = angular.element($window);
                scrollDistance = null;
                scrollEnabled = null;
                checkWhenEnabled = null;
                container = null;
                immediateCheck = true;
                useDocumentBottom = false;
                unregisterEventListener = null;
                checkInterval = false;
                height = function(elem) {
                    elem = elem[0] || elem;
                    if (isNaN(elem.offsetHeight)) {
                        return elem.document.documentElement.clientHeight;
                    } else {
                        return elem.offsetHeight;
                    }
                };
                offsetTop = function(elem) {
                    if (!elem[0].getBoundingClientRect || elem.css('none')) {
                        return;
                    }
                    return elem[0].getBoundingClientRect().top + pageYOffset(elem);
                };
                pageYOffset = function(elem) {
                    elem = elem[0] || elem;
                    if (isNaN(window.pageYOffset)) {
                        return elem.document.documentElement.scrollTop;
                    } else {
                        return elem.ownerDocument.defaultView.pageYOffset;
                    }
                };
                handler = function() {
                    var containerBottom, containerTopOffset, elementBottom, remaining, shouldScroll;
                    if (container === windowElement) {
                        containerBottom = height(container) + pageYOffset(container[0].document.documentElement);
                        elementBottom = offsetTop(elem) + height(elem);
                    } else {
                        containerBottom = height(container);
                        containerTopOffset = 0;
                        if (offsetTop(container) !== void 0) {
                            containerTopOffset = offsetTop(container);
                        }
                        elementBottom = offsetTop(elem) - containerTopOffset + height(elem);
                    }
                    if (useDocumentBottom) {
                        elementBottom = height((elem[0].ownerDocument || elem[0].document).documentElement);
                    }
                    remaining = elementBottom - containerBottom;
                    shouldScroll = remaining <= height(container) * scrollDistance + 1;
                    if (shouldScroll) {
                        checkWhenEnabled = true;
                        if (scrollEnabled) {
                            if (scope.$$phase || $rootScope.$$phase) {
                                return scope.infiniteScroll();
                            } else {
                                return scope.$apply(scope.infiniteScroll);
                            }
                        }
                    } else {
                        if (checkInterval) {
                            $interval.cancel(checkInterval);
                        }
                        return checkWhenEnabled = false;
                    }
                };
                throttle = function(func, wait) {
                    var later, previous, timeout;
                    timeout = null;
                    previous = 0;
                    later = function() {
                        var context;
                        previous = new Date().getTime();
                        $interval.cancel(timeout);
                        timeout = null;
                        func.call();
                        return context = null;
                    };
                    return function() {
                        var now, remaining;
                        now = new Date().getTime();
                        remaining = wait - (now - previous);
                        if (remaining <= 0) {
                            clearTimeout(timeout);
                            $interval.cancel(timeout);
                            timeout = null;
                            previous = now;
                            return func.call();
                        } else {
                            if (!timeout) {
                                return timeout = $interval(later, remaining, 1);
                            }
                        }
                    };
                };
                if (THROTTLE_MILLISECONDS != null) {
                    handler = throttle(handler, THROTTLE_MILLISECONDS);
                }
                scope.$on('$destroy', function() {
                    container.unbind('scroll', handler);
                    if (unregisterEventListener != null) {
                        unregisterEventListener();
                        return unregisterEventListener = null;
                    }
                });
                handleInfiniteScrollDistance = function(v) {
                    return scrollDistance = parseFloat(v) || 0;
                };
                scope.$watch('infiniteScrollDistance', handleInfiniteScrollDistance);
                handleInfiniteScrollDistance(scope.infiniteScrollDistance);
                handleInfiniteScrollDisabled = function(v) {
                    scrollEnabled = !v;
                    if (scrollEnabled && checkWhenEnabled) {
                        checkWhenEnabled = false;
                        return handler();
                    }
                };
                scope.$watch('infiniteScrollDisabled', handleInfiniteScrollDisabled);
                handleInfiniteScrollDisabled(scope.infiniteScrollDisabled);
                handleInfiniteScrollUseDocumentBottom = function(v) {
                    return useDocumentBottom = v;
                };
                scope.$watch('infiniteScrollUseDocumentBottom', handleInfiniteScrollUseDocumentBottom);
                handleInfiniteScrollUseDocumentBottom(scope.infiniteScrollUseDocumentBottom);
                changeContainer = function(newContainer) {
                    if (container != null) {
                        container.unbind('scroll', handler);
                    }
                    container = newContainer;
                    if (newContainer != null) {
                        return container.bind('scroll', handler);
                    }
                };
                changeContainer(windowElement);
                if (scope.infiniteScrollListenForEvent) {
                    unregisterEventListener = $rootScope.$on(scope.infiniteScrollListenForEvent, handler);
                }
                handleInfiniteScrollContainer = function(newContainer) {
                    if ((newContainer == null) || newContainer.length === 0) {
                        return;
                    }
                    if (newContainer instanceof HTMLElement) {
                        newContainer = angular.element(newContainer);
                    } else if (typeof newContainer.append === 'function') {
                        newContainer = angular.element(newContainer[newContainer.length - 1]);
                    } else if (typeof newContainer === 'string') {
                        newContainer = angular.element(document.querySelector(newContainer));
                    }
                    if (newContainer != null) {
                        return changeContainer(newContainer);
                    } else {
                        throw new Exception("invalid infinite-scroll-container attribute.");
                    }
                };
                scope.$watch('infiniteScrollContainer', handleInfiniteScrollContainer);
                handleInfiniteScrollContainer(scope.infiniteScrollContainer || []);
                if (attrs.infiniteScrollParent != null) {
                    changeContainer(angular.element(elem.parent()));
                }
                if (attrs.infiniteScrollImmediateCheck != null) {
                    immediateCheck = scope.$eval(attrs.infiniteScrollImmediateCheck);
                }
                return checkInterval = $interval((function() {
                    if (immediateCheck) {
                        return handler();
                    }
                }), 0);
            }
        };
    }
]);

/*
    angularGrid.js v 0.4.0
    Author: Sudhanshu Yadav
    Copyright (c) 2015 Sudhanshu Yadav - ignitersworld.com , released under the MIT license.
    Demo on: http://ignitersworld.com/lab/angulargrid/demo1.html
    Documentation and download on https://github.com/s-yadav/angulargrid
*/

/* module to create pinterest like responsive masonry grid system for angular */
;
(function(angular, window, undefined) {
    "use strict";
    //defaults for plugin
    var defaults = {
        gridWidth: 300, //minumum width of a grid, this may increase to take whole space of container
        gutterSize: 10, //spacing between two grid,
        gridNo: 'auto', // grid number, by default calculate auto matically
        direction: 'ltor', //direction of grid item
        refreshOnImgLoad: true, // to make a refresh on image load inside container
        cssGrid: false
    };

    var $ = angular.element;

    //css for the clones
    var cloneCss = {
        visibility: 'hidden',
        opacity: 0,
        top: 0,
        left: 0,
        width: ''
    };

    var single = (function() {
        var $elm = $(window);
        return function(elm) {
            $elm[0] = elm;
            return $elm;
        };
    }());

    //function to check if image is loaded
    function imageLoaded(img) {
        return img.complete && (typeof img.naturalWidth === 'undefined' || img.naturalWidth !== 0);
    }

    //function to covert domlist to array
    function domToAry(list) {
        return Array.prototype.slice.call(list);
    }

    //add required css
    $(document.head).append('<style>' +
        '.ag-no-transition{' +
        '-webkit-transition: none !important;' +
        'transition: none !important;' +
        '} ' +
        '.angular-grid{position : relative;} ' +
        '.angular-grid > *{opacity : 0} ' +
        '.angular-grid > .angular-grid-item{opacity : 1}' + '</style>');

    angular.module('angularGrid', []).directive('angularGrid', ['$timeout', '$window', '$q', 'angularGridInstance',
            function($timeout, $window, $q, angularGridInstance) {
                return {
                    restrict: 'A',
                    scope: {
                        model: '=angularGrid',
                        gridWidth: '=',
                        gutterSize: '=',
                        refreshOnImgLoad: '=',
                        direction: '=',
                        cssGrid: '=',
                        options: '=angularGridOptions'
                    },
                    link: function(scope, element, attrs) {
                        var domElm = element[0],
                            win = $($window),
                            agId = attrs.angularGridId,
                            listElms,
                            timeoutPromise;

                        element.addClass('angular-grid');

                        //get the user input options
                        var options;

                        function getOptions() {
                            options = {};
                            Object.keys(defaults).forEach(function(key) {
                                if (scope[key] != undefined) options[key] = scope[key];
                            });
                            options = angular.extend({}, defaults, options, scope.options);
                            if (options.cssGrid) options.gutterSize = 0;
                        }

                        getOptions();

                        //function to get column width and number of columns
                        function getColWidth() {

                            var contWidth = domElm.offsetWidth,
                                clone; // a clone to calculate width without transition

                            if (options.cssGrid) {
                                clone = $(listElms[0]).clone();
                                clone.css(cloneCss).addClass('ag-no-transition');

                                element.append(clone);

                                var width = clone[0].offsetWidth;
                                clone.remove();

                                return {
                                    no: Math.floor((contWidth + 12) / width),
                                    width: width
                                };
                            }

                            var colWidth = options.gridNo == 'auto' ? options.gridWidth : Math.floor(contWidth / options.gridNo) - options.gutterSize,
                                cols = options.gridNo == 'auto' ? Math.floor(contWidth / (colWidth + options.gutterSize)) : options.gridNo,
                                remainingSpace = (contWidth % (colWidth + options.gutterSize)) + options.gutterSize;

                            colWidth = colWidth + Math.floor(remainingSpace / cols);

                            return {
                                no: cols,
                                width: colWidth
                            };
                        }

                        //method check for image loaded inside a container and trigger callback
                        function afterImageLoad(container, options) {
                            var beforeLoad = options.beforeLoad || angular.noop,
                                onLoad = options.onLoad || angular.noop,
                                isLoaded = options.isLoaded || angular.noop,
                                onFullLoad = options.onFullLoad || angular.noop,
                                ignoreCheck = options.ignoreCheck || angular.noop,
                                allImg = container.find('img'),
                                loadedImgPromises = [];

                            domToAry(allImg).forEach(function(img) {
                                beforeLoad(img);
                                if (!imageLoaded(img) && !ignoreCheck(img)) {
                                    loadedImgPromises.push($q(function(resolve, reject) {
                                        img.onload = function() {
                                            onLoad(img);
                                            resolve();
                                        };
                                        img.onerror = reject;
                                    }));
                                } else {
                                    isLoaded(img);
                                }
                            });

                            if (loadedImgPromises.length) {
                                $q.all(loadedImgPromises).then(onFullLoad, onFullLoad);
                            } else {
                                setTimeout(function() {
                                    onFullLoad();
                                }, 0);
                            }
                        }


                        //function to reflow grids
                        function reflowGrids() {
                            //claclulate width of all element
                            var colInfo = getColWidth(),
                                colWidth = colInfo.width,
                                cols = colInfo.no,
                                i;

                            //initialize listRowBottom
                            var lastRowBottom = [];
                            for (i = 0; i < cols; i++) {
                                lastRowBottom.push(0);
                            }

                            //if image actual width and actual height is defined update image size so that it dosent cause reflow on image load
                            domToAry(listElms).forEach(function(item) {
                                var $item = single(item);

                                domToAry($item.find('img')).forEach(function(img) {
                                    var $img = $(img);
                                    //if image is already loaded don't do anything
                                    if ($img.hasClass('img-loaded')) {
                                        $img.css('height', '');
                                        return;
                                    }

                                    //set the item width and no transition state so image width can be calculated properly
                                    $item.addClass('ag-no-transition');
                                    $item.css('width', colWidth + 'px');

                                    var actualWidth = $img.attr('actual-width') || $img.attr('data-actual-width'),
                                        actualHeight = $img.attr('actual-height') || $img.attr('data-actual-height');

                                    if (actualWidth && actualHeight) {
                                        $img.css('height', (actualHeight * img.width / actualWidth) + 'px');
                                    }

                                });
                                $item.removeClass('ag-no-transition');
                            });

                            //get all list items new height
                            var clones = listElms.clone();

                            clones.addClass('ag-no-transition');

                            var clonesCssObj = angular.extend({}, cloneCss);
                            clonesCssObj.width = colWidth + 'px';
                            clones.css(clonesCssObj);
                            element.append(clones);

                            //For cloned element again we have to check if image loaded (IOS only)

                            afterImageLoad(clones, {
                                ignoreCheck: function(img) {
                                    return !single(img).hasClass('img-loaded');
                                },
                                onFullLoad: function() {
                                    var listElmHeights = [],
                                        item, i, ln;
                                    //find height with clones
                                    for (i = 0, ln = clones.length; i < ln; i++) {
                                        listElmHeights.push(clones[i].offsetHeight);
                                    }

                                    //set new positions
                                    for (i = 0, ln = listElms.length; i < ln; i++) {
                                        item = single(listElms[i]);
                                        var height = listElmHeights[i],
                                            top = Math.min.apply(Math, lastRowBottom),
                                            col = lastRowBottom.indexOf(top);

                                        //update lastRowBottom value
                                        lastRowBottom[col] = top + height + options.gutterSize;

                                        //set top and left of list items
                                        var posX = col * (colWidth + options.gutterSize);

                                        var cssObj = {
                                            position: 'absolute',
                                            top: top + 'px'
                                        };

                                        if (options.direction == 'rtol') {
                                            cssObj.right = posX + 'px';
                                        } else {
                                            cssObj.left = posX + 'px';
                                        }

                                        cssObj.width = colWidth + 'px';

                                        item.css(cssObj).addClass('angular-grid-item');
                                    }

                                    //set the height of container
                                    element.css('height', Math.max.apply(Math, lastRowBottom) + 'px');

                                    clones.remove();
                                }
                            });
                        }


                        //function to handle asynchronous image loading
                        function handleImage() {
                            var reflowPending = false;
                            domToAry(listElms).forEach(function(listItem) {
                                var $listItem = $(listItem),
                                    allImg = $listItem.find('img');

                                if (!allImg.length) {
                                    return;
                                }

                                //add image loading class on list item
                                $listItem.addClass('img-loading');

                                afterImageLoad($listItem, {
                                    beforeLoad: function(img) {
                                        single(img).addClass('img-loading');
                                    },
                                    isLoaded: function(img) {
                                        single(img).removeClass('img-loading').addClass('img-loaded');
                                    },
                                    onLoad: function(img) {
                                        if (!reflowPending && options.refreshOnImgLoad) {
                                            reflowPending = true;
                                            $timeout(function() {
                                                reflowGrids();
                                                reflowPending = false;
                                            }, 100);
                                        }
                                        single(img).removeClass('img-loading').addClass('img-loaded');
                                    },
                                    onFullLoad: function() {
                                        $listItem.removeClass('img-loading').addClass('img-loaded');
                                    }
                                });
                            });

                        }

                        //function to check for ng animation
                        function ngCheckAnim() {
                            var leavingElm = domToAry(listElms).filter(function(elm) {
                                return single(elm).hasClass('ng-leave');
                            });
                            return $q(function(resolve) {
                                if (!leavingElm.length) {
                                    resolve();
                                } else {
                                    single(leavingElm[0]).one('webkitTransitionEnd transitionend msTransitionEnd oTransitionEnd', function() {
                                        $timeout(function() {
                                            listElms = element.children();
                                            resolve();
                                        });
                                    });
                                }
                            });
                        }

                        //watch on modal key

                        function watch() {
                            $timeout(function() {
                                listElms = element.children();

                                ngCheckAnim().then(function() {
                                    //handle images
                                    handleImage();

                                    $timeout(function() {

                                        //to handle scroll appearance
                                        reflowGrids();
                                        scope
                                    });
                                });
                            });
                        }

                        scope.$watch('model', watch, true);


                        //watch option for changes
                        function watchOptions() {
                            getOptions();
                            if (listElms) reflowGrids();
                        };

                        scope.$watch('options', watchOptions, true);

                        Object.keys(defaults).forEach(function(key) {
                            if (scope[key] != undefined) scope.$watch(key, watchOptions);
                        });

                        //listen window resize event and reflow grids after a timeout
                        var lastDomWidth = domElm.offsetWidth;

                        function windowResizeCallback() {
                            var contWidth = domElm.offsetWidth;
                            if (lastDomWidth == contWidth) return;
                            lastDomWidth = contWidth;


                            if (timeoutPromise) {
                                $timeout.cancel(timeoutPromise);
                            }

                            timeoutPromise = $timeout(function() {
                                reflowGrids();
                            }, 100);
                        }
                        win.on('resize', windowResizeCallback);

                        //add instance to factory if id is assigned
                        if (agId) {
                            angularGridInstance[agId] = {
                                refresh: function() {
                                    watch();
                                }
                            };
                        }

                        //destroy on refrences and events on scope destroy
                        scope.$on('$destroy', function() {
                            if (agId) delete angularGridInstance[agId];
                            win.off('resize', windowResizeCallback);
                        });
                    }
                };
            }
        ])
        //a factory to store angulargrid instances which can be injected to controllers or directive
        .factory('angularGridInstance', function() {

            var angularGridInstance = {};

            return angularGridInstance;

        });

}(angular, window));