if (moment) {
    moment.locale('es');
}

/* jshint ignore:start */
'use strict';
/* jshint ignore:end */
var recetarium = angular.module('recetariumApp', [
    'environment',
    'ngRoute',
    'ngMaterial',
    'ngMessages',
    'ngSanitize',
    'ngAnimate',
    'textAngular',
    'ui.router',
    // My Javascript
    'Animations', 'TextEditor', 'NotificationProviders', 'FileDirectives', 'TimeDirectives',
    'HomeController',
    'AuthServices', 'AuthController',
    'RecipeServices', 'RecipeFilters', 'RecipeController',
    'CategoryServices', 'CategoryController',
    'TagServices', 'IngredientServices'
]);

// Routes
recetarium.config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
    $locationProvider.html5Mode(true);

    $routeProvider
        .when('/', {
            templateUrl: 'views/home.html',
            controller: ''
        })
        .when('/login', {
            templateUrl: 'views/auth/login.html',
            controller: 'Login',
            resolve: {
                access: ["AuthService", function(AuthService) {
                    return AuthService.IsAnonymous();
                }],
            }
        })
        .when('/logout', {
            template: '',
            controller: 'Logout',
            resolve: {
                access: ["AuthService", function(AuthService) {
                    return AuthService.IsAuthenticated();
                }],
            }
        })
        .when('/register', {
            templateUrl: 'views/auth/register.html',
            controller: 'Register',
            resolve: {
                access: ["AuthService", function(AuthService) {
                    return AuthService.IsAnonymous();
                }],
            }
        })
        .when('/recipes', {
            templateUrl: 'views/recipe/index.html',
            controller: 'RecipeAll'
        })
        .when('/recipes/:slug', {
            templateUrl: 'views/recipe/show.html',
            controller: 'RecipeShow'
        })
        .when('/recipes/:slug/edit', {
            templateUrl: 'views/recipe/edit.html',
            controller: 'RecipeEdit',
            resolve: {
                access: ["AuthService", "$route", "$rootScope", function(AuthService, $route, $rootScope) {
                    $rootScope.progressBarActivated = true;
                    return AuthService.IsMyRecipe($route.current.params.slug);
                }],
            }
        })
        .when('/new-recipe', {
            templateUrl: 'views/recipe/create.html',
            controller: 'RecipeCreate',
            resolve: {
                access: ["AuthService", function(AuthService) {
                    return AuthService.IsAuthenticated();
                }],
            }
        })
        .when('/unauthorized', {
            templateUrl: 'views/error/401.html',
            controller: ''
        })
        .when('/forbidden', {
            templateUrl: 'views/error/403.html',
            controller: ''
        })
        .otherwise({
            redirectTo: '/'
        });
}]);

// CORS configuration
recetarium.config(['$httpProvider', function($httpProvider) {
    $httpProvider.defaults.useXDomain = true;
    delete $httpProvider.defaults.headers.common['X-Requested-With'];

    // Middleware
    $httpProvider.interceptors.push(['$q', '$location', '$rootScope', function($q, $location, $rootScope) {
        return {
            response: function(response) {
                return response;
            },
            responseError: function(response) {
                if (response.status === 401) {
                    if ($rootScope.globals.token) {
                        $location.path('/unauthorized');
                    } else {
                        $location.path('/login');
                    }
                }
                return $q.reject(response);
            }
        };
    }]);
}]);

// Themes
recetarium.config(['$mdThemingProvider', function($mdThemingProvider) {
    //
}]);

// Environment configuration
recetarium.config(['envServiceProvider', function(envServiceProvider) {
    envServiceProvider.config({
        domains: {
            development: ['localhost', '127.0.0.1'],
            production: ['recetarium-angular.herokuapp.com']
        },
        vars: {
            development: {
                apiUrl: 'http://localhost:9000'
            },
            production: {
                apiUrl: 'https://recetarium.herokuapp.com'
            }
        }
    });
    envServiceProvider.check();
}]);

//
recetarium.run(['$rootScope', '$location', '$http', 'AuthService', 'ICONS', function($rootScope, $location, $http, AuthService, ICONS) {
    $rootScope.location = $location;
    $rootScope.lastSearchParams = [];
    $rootScope.lastSearchParams['/recipes'] = {
        page: 1,
        size: 10
    };

    if (localStorage.globals) {
        $rootScope.globals = JSON.parse(localStorage.globals);
        // TODO
        //AuthService.CheckToken($rootScope.globals.token);
    } else {
        $rootScope.globals = {};
    }

    $rootScope.$on('$routeChangeError', function(ev, next, current, rejection) {
        if (rejection == AuthService.UNAUTHORIZED) {
            $location.path("/login");
        } else if (rejection == AuthService.FORBIDDEN) {
            $location.path("/forbidden");
        }
    });

    $rootScope.$on('$locationChangeStart', function(ev, next, current, rejection) {
        // Auth header
        $http.defaults.headers.common['X-Auth-Token'] = $rootScope.globals.token;

        $rootScope.IsAuthed = AuthService.IsAuthed();
        $rootScope.IsHome = ($location.path() == '/');
        $rootScope.HasBack = false;
        $rootScope.errorMsg = false;
        $rootScope.progressBarActivated = false;

        if ($rootScope.lastSearchParams[$location.path()]) {
            $location.search($rootScope.lastSearchParams[$location.path()]);
        }

        // Remove the params into URI
        if ($location.path() !== '/recipes') {
            $location.search({});
        }

        switch ($location.path()) {
            case '/login':
            case '/register':
                $rootScope.tabColor = '#00BFA5';
                $rootScope.headerTheme = 'header-theme-auth';
                $rootScope.loaderTheme = 'md-auth';
                $rootScope.bodyTheme = 'body-theme-auth';
                break;
            default:
                $rootScope.tabColor = '#DD2C00';
                $rootScope.headerTheme = 'header-theme-default';
                $rootScope.loaderTheme = 'md-default';
                $rootScope.bodyTheme = 'body-theme-default';
        }
    });

    $rootScope.$on('$viewContentLoaded', function() {
        // Scroll to top
        $("html, body").animate({
            scrollTop: 0
        }, "slow");

        $('.md-editor-toolbar').exists(function() {
            $('.md-editor-toolbar button').each(function() {
                var $this = $(this);
                $this.append('<div class="md-ripple-container"></div>');
                $this.children('.material-icons').replaceWith('<md-icon class="material-icons md-dark">' + ICONS[$this.attr('name')] + '</md-icon>');
            });
        });

        $('.fancybox').fancybox();
        $('.lolliclock-duration').lolliclock({
            hour24: true
        });

        $('.input-file-material').exists(function() {
            $(document).on('change', '.input-file-material', function() {
                $('.md-textfield-input').val(this.files[0].name);
            });
        });

        $('.md-ink-item').exists(function() {
            $(document).on('click', '.md-ink-item', function(e) {
                var $this = $(this);
                if ($this.find('.md-ink').length === 0) {
                    $this.prepend('<span class="md-ink"></span>');
                }
                var ink = $this.find('.md-ink');
                ink.removeClass('animate');
                if (!ink.height() && !ink.width()) {
                    var d = Math.max($this.outerWidth(), $this.outerHeight());
                    ink.css({
                        height: d,
                        width: d
                    });
                }

                var x = e.pageX - $this.offset().left - ink.width() / 2;
                var y = e.pageY - $this.offset().top - ink.height() / 2;
                ink.css({
                    top: y + 'px',
                    left: x + 'px',
                }).addClass('animate');
            });
        });
    });
}]);

// Function extras
String.prototype.trunc = function(n, useWordBoundary) {
    var isTooLong = this.length > n,
        s_ = isTooLong ? this.substr(0, n - 1) : this.substr(0, this.length);
    s_ = (useWordBoundary && isTooLong) ? s_.substr(0, s_.lastIndexOf(' ')) : s_;
    return isTooLong ? s_ + '&hellip;' : s_;
};

$.fn.exists = function(callback) {
    var args = [].slice.call(arguments, 1);
    if (this.length) {
        callback.call(this, args);
    }
    return this;
};

$.containsId = function(el, array) {
    var i = array.length;
    while (i--) {
        if (array[i].id === el.id) {
            return true;
        }
    }
    return false;
};

$.getArrayId = function(array) {
    var a = [];
    for (var el in array) {
        a.push(array[el].id);
    }
    return a;
};

$.parseError = function(error) {
    var msg = '';
    if (angular.isArray(error)) {
        msg += '<ul>';
        for (var i in error) {
            msg += '<li>' + $.parseError(error[i]) + '</li>';
        }
        msg += '</ul>';
    } else if (angular.isObject(error)) {
        for (var field in error) {
            msg += '<ul>';
            msg += '<li>' + field + '</li>' + $.parseError(error[field]);
            msg += '</ul>';
        }
    } else {
        msg += error;
    }
    return msg;
};

var authController = angular.module('AuthController', []);

authController.controller('Login', ['$scope', '$rootScope', '$location', 'AuthService', '$timeout', 'NotificationProvider',
    function($scope, $rootScope, $location, AuthService, $timeout, NotificationProvider) {
        $rootScope.headerTitle = 'Login';

        $scope.setDelay1 = function() {
            $scope.delay1 = true;
            $scope.delay2 = true;
            $timeout(function() {
                $scope.delay1 = false;
            }, 1000);
        };

        $scope.setDelay2 = function() {
            $timeout(function() {
                $scope.delay2 = false;
            }, 1000);
        };

        $scope.login = function() {
            $rootScope.errorMsg = false;
            $rootScope.progressBarActivated = true;
            $scope.setDelay1();
            AuthService.Login($scope.email, $scope.password, !$scope.expiration, function(response) {
                AuthService.SaveCredentials(response.data.auth_token,
                    JSON.parse(AuthService.ParseJwt(response.data.auth_token).sub));
                $rootScope.progressBarActivated = false;
                $location.path('/');
            }, function(response) {
                if (response.status == 400 || response.status == 401) {
                    $rootScope.error = {
                        icon: 'error_outline',
                        title: 'Datos incorrectos',
                        msg: $.parseError(response.data),
                    };
                } else {
                    NotificationProvider.notify({
                        title: 'Un error ha ocurrido',
                        text: 'Ha ocurrido un error mientras se logueaba. Por favor, intentelo más tarde.',
                        type: 'error',
                        addclass: 'custom-error-notify',
                        icon: 'material-icons md-light',
                        styling: 'fontawesome',
                    });
                    $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                    $rootScope.error = {
                        icon: 'error_outline',
                        title: 'Algo ha ido mal',
                        msg: 'Ha ocurrido un error mientras se logueaba.'
                    };
                }
                $rootScope.errorMsg = true;
                $rootScope.progressBarActivated = false;
                $scope.setDelay2();
            });
        };
    }
]);

authController.controller('Register', ['$scope', '$rootScope', '$location', 'AuthService', '$timeout', 'NotificationProvider',
    function($scope, $rootScope, $location, AuthService, $timeout, NotificationProvider) {
        $rootScope.headerTitle = 'Registro';

        $scope.setDelay1 = function() {
            $scope.delay1 = true;
            $scope.delay2 = true;
            $timeout(function() {
                $scope.delay1 = false;
            }, 1000);
        };

        $scope.setDelay2 = function() {
            $timeout(function() {
                $scope.delay2 = false;
            }, 1000);
        };

        $scope.register = function() {
            $rootScope.errorMsg = false;
            $rootScope.progressBarActivated = true;
            $scope.setDelay1();
            var user = {
                username: $scope.username,
                email: $scope.email,
                password: $scope.password,
                password_repeat: $scope.passwordRepeat,
                first_name: $scope.first_name,
                last_name: $scope.last_name
            };
            AuthService.Register(user, function(response) {
                AuthService.SaveCredentials(response.data.auth_token,
                    JSON.parse(AuthService.ParseJwt(response.data.auth_token).sub));
                $rootScope.progressBarActivated = false;
                $location.path('/');
            }, function(response) {
                if (response.status == 400) {
                    $rootScope.error = {
                        icon: 'error_outline',
                        title: 'Datos incorrectos',
                        msg: $.parseError(response.data),
                    };
                } else {
                    NotificationProvider.notify({
                        title: 'Un error ha ocurrido',
                        text: 'Ha ocurrido un error mientras se registraba. Por favor, intentelo más tarde.',
                        type: 'error',
                        addclass: 'custom-error-notify',
                        icon: 'material-icons md-light',
                        styling: 'fontawesome',
                    });
                    $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                    $rootScope.error = {
                        icon: 'error_outline',
                        title: 'Algo ha ido mal',
                        msg: 'Ha ocurrido un error mientras se registraba.'
                    };
                }
                $rootScope.errorMsg = true;
                $rootScope.progressBarActivated = false;
                $scope.setDelay2();
            });
        };
    }
]);

authController.controller('Logout', ['$scope', '$location', 'AuthService', 'NotificationProvider',
    function($scope, $location, AuthService, NotificationProvider) {
        NotificationProvider.notify({
            title: 'Adios :)',
            text: 'Gracias por venir. Vuelve pronto.',
            type: 'success',
            addclass: 'custom-success-notify',
            icon: 'material-icons md-light',
            styling: 'fontawesome',
        });
        $('.ui-pnotify.custom-success-notify .material-icons').html('cake');
        AuthService.ClearCredentials();
        $location.path('/');
    }
]);

var categoryController = angular.module('CategoryController', []);

var homeController = angular.module('HomeController', []);

homeController.controller('Header', ['$scope', '$mdSidenav', '$timeout', '$location',
    function($scope, $mdSidenav, $timeout, $location) {
        $scope.toggleLeft = buildDelayedToggler('left');

        $scope.navLinks = [{
            title: 'Home',
            url: '/'
        }, {
            title: 'Recetas',
            url: '/recipes'
        }];

        $scope.navTo = function(ev, url) {
            closeSideNav('left');
            if ($location.path() !== url) $location.path(url);
        };

        $scope.getClassActive = function(path) {
            var cur_path = $location.path().substr(0, path.length);
            if (cur_path == path) {
                if ($location.path().substr(0).length > 1 && path.length == 1)
                    return "";
                else
                    return "active";
            } else {
                return "";
            }
        };

        function debounce(func, wait, context) {
            var timer;
            return function debounce() {
                var context = $scope,
                    args = Array.prototype.slice.call(arguments);
                $timeout.cancel(timer);
                timer = $timeout(function() {
                    timer = undefined;
                    func.apply(context, args);
                }, wait || 10);
            };
        }

        function buildDelayedToggler(navID) {
            return debounce(function() {
                $mdSidenav(navID).toggle().then(function() {});
            }, 0);
        }

        function closeSideNav(navID) {
            $mdSidenav(navID).close().then(function() {});
        }
    }
]);

var recipeController = angular.module('RecipeController', []);

recipeController.constant('DIFF', {
    'class': {
        'EASY': 'md-green',
        'MEDIUM': 'md-yellow',
        'HARD': 'md-red'
    },
    'name': ['EASY', 'MEDIUM', 'HARD']
});

recipeController.constant('FILE_DROPZONE', {
    FileDragOver: function(e, scope) {
        e.stopPropagation();
        e.preventDefault();
        e.target.className = (e.type == "dragover" ? "hover" : "");
    },
    FileHandler: function(e, scope, compile, upload, RecipeService, NotificationProvider) {
        this.FileDragOver(e);
        var files = e.target.files || e.dataTransfer.files;
        var index = 0;
        /* jshint ignore:start */
        for (var i = 0, f; f = files[i]; i++) {
            index = scope.images.index;
            this.ParseFile(f, scope, compile, index, upload, RecipeService, NotificationProvider);
            scope.images.index++;
        }
        /* jshint ignore:end */
    },
    ParseFile: function(file, scope, compile, index, upload, RecipeService, NotificationProvider) {
        var reader = new FileReader();
        reader.onload = function(e) {
            $('.images-recipe-gallery').append(compile('<div class="image-removable" ng-if="images.show[' + index + ']" id="image-removable-' + index + '">' +
                '<img class="img-thumbnail" src="' + e.target.result + '" />' +
                '<md-button ng-click="removeImage(' + index + ')" class="md-fab md-mini md-remove" aria-label="Close"><md-icon class="material-icons">close</md-icon></md-button></div>')(scope));
        };
        reader.readAsDataURL(file);
        scope.images.recipe[index] = file;
        scope.images.show[index] = false;
        if (upload) {
            RecipeService.uploadFile(file, scope.recipe.id, false, false, function(response) {
                scope.images.show[index] = true;
                NotificationProvider.notify({
                    title: 'Image añadida',
                    text: '',
                    type: 'success',
                    addclass: 'custom-success-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome',
                });
                $('.ui-pnotify.custom-success-notify .material-icons').html('photo');
            }, function(response) {
                NotificationProvider.notify({
                    title: 'Un error ha ocurrido',
                    text: 'Ha ocurrido un error mientras se guardaban las imágenes. Por favor, intentelo más tarde.',
                    type: 'error',
                    addclass: 'custom-error-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome'
                });
                $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                $('#image-removable-' + index).exists(function() {
                    $('#image-removable-' + index).remove();
                    $scope.images.recipe.splice(index, 1);
                    $scope.images.show.splice(index, 1);
                });
            });
        } else {
            scope.images.show[index] = true;
        }
    }
});

recipeController.controller('RecipeAll', ['$scope', '$rootScope', '$location', '$sce', 'RecipeService', 'NotificationProvider', '$mdDialog',
    function($scope, $rootScope, $location, $sce, RecipeService, NotificationProvider, $mdDialog) {
        $rootScope.headerTitle = 'Recetas';
        $scope.pagination = {
            page: 1,
            size: 10,
            search: null
        };
        $scope.recipes = [];
        $scope.sizes = [10, 30, 50];

        $scope.$watch(function() {
            return $location.search();
        }, function(newVal, oldVal) {
            if (!newVal.page) newVal.page = 1;
            if (!newVal.size) newVal.size = 10;
            $scope.pagination = newVal;
            if ($location.path() == '/recipes') {
                $rootScope.lastSearchParams['/recipes'] = $scope.pagination;
                $scope.getRecipes();
            }
        });

        $scope.searchRecipe = function() {
            $location.search("search", $scope.pagination.search);
        };

        $scope.selectSize = function() {
            $location.search("size", $scope.pagination.size);
        };

        $scope.getRecipes = function() {
            $rootScope.progressBarActivated = true;
            RecipeService.search($scope.pagination, function(response) {
                var responseData = response.data;
                $scope.recipes = responseData.data;
                $scope.total = responseData.total;
                $scope.current = responseData["link-self"];
                if (responseData["link-prev"]) $scope.prev = responseData["link-prev"];
                if (responseData["link-next"]) $scope.next = responseData["link-next"];
                $rootScope.progressBarActivated = false;
            }, function(response) {
                NotificationProvider.notify({
                    title: 'Un error ha ocurrido',
                    text: 'Ha ocurrido un error mientras se cargaban las recetas. Por favor, intentelo más tarde.',
                    type: 'error',
                    addclass: 'custom-error-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome',
                });
                $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                $rootScope.error = {
                    icon: 'error_outline',
                    title: 'Algo ha ido mal',
                    msg: 'Ha ocurrido un error mientras se cargaban las recetas.'
                };
                $rootScope.errorMsg = true;
                $rootScope.progressBarActivated = false;
            });
        };

        $scope.description = function(steps) {
            if (steps) return $sce.trustAsHtml(steps.trunc(260, true));
        };

        $scope.show = function(slug) {
            $location.path('/recipes/' + slug);
        };

        $scope.isMine = function(user) {
            if ($rootScope.globals.user) {
                var auth = $rootScope.globals.user.user;
                return (auth.id == user.id && auth.email == user.email && auth.username == user.username) || auth.type == 'ADMIN';
            }
            return false;
        };

        $scope.edit = function(slug, $event) {
            if ($event.stopPropagation) $event.stopPropagation();
            if ($event.preventDefault) $event.preventDefault();
            $event.cancelBubble = true;
            $event.returnValue = false;
            $scope.recipes = [];
            $location.path('/recipes/' + slug + '/edit');
        };

        $scope.remove = function(recipe, $event) {
            if ($event.stopPropagation) $event.stopPropagation();
            if ($event.preventDefault) $event.preventDefault();
            $event.cancelBubble = true;
            $event.returnValue = false;
            var confirm = $mdDialog.confirm()
                .title('Borrar receta')
                .textContent('¿De verdad que quieres borrar la receta \'' + recipe.title + '\'?\nEsta acción no se puede deshacer.')
                .ariaLabel('Borrar')
                .targetEvent($event)
                .ok('Borrar')
                .cancel('Cancelar');
            $mdDialog.show(confirm).then(function() {
                var notify = NotificationProvider.notify({
                    title: 'Receta borrada',
                    text: 'Has borrado la receta \'' + recipe.title + '\'.',
                    type: 'success',
                    addclass: 'custom-success-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome',
                });
                $('.ui-pnotify.custom-success-notify .material-icons').html('check_circle');
                $rootScope.progressBarActivated = true;
                $rootScope.errorMsg = false;
                RecipeService.delete(recipe.id, function(response) {
                    $rootScope.progressBarActivated = false;
                    $scope.getRecipes();
                }, function(response) {
                    if (response.status == 404) {
                        $rootScope.error = {
                            icon: 'error_outline',
                            title: 'Datos incorrectos',
                            msg: $.parseError(response.data),
                        };
                    } else {
                        NotificationProvider.notify({
                            title: 'Un error ha ocurrido',
                            text: 'Ha ocurrido un error mientras se borraba la receta. Por favor, intentelo más tarde.',
                            type: 'error',
                            addclass: 'custom-error-notify',
                            icon: 'material-icons md-light',
                            styling: 'fontawesome'
                        });
                        $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                        $rootScope.error = {
                            icon: 'error_outline',
                            title: 'Algo ha ido mal',
                            msg: 'Ha ocurrido un error mientras se borraba la receta.'
                        };
                    }
                    $rootScope.errorMsg = true;
                    $rootScope.progressBarActivated = false;
                });
            }, function() {});
        };
    }
]);

recipeController.controller('RecipeShow', ['$scope', '$rootScope', '$location', '$routeParams', '$sce', 'RecipeService', 'NotificationProvider', 'DIFF',
    function($scope, $rootScope, $location, $routeParams, $sce, RecipeService, NotificationProvider, DIFF) {
        $rootScope.headerTitle = 'Cargando';
        $rootScope.progressBarActivated = true;
        $rootScope.HasBack = true;
        $rootScope.back = function() {
            $location.path('/recipes');
        };

        RecipeService.get($routeParams.slug, function(response) {
            try {
                $scope.recipe = response.data;
                $scope.images = RecipeService.getImages(response.data);
                $scope.tags = response.data.tags;
                $scope.comments = response.data.comments;

                $rootScope.headerTitle = response.data.title;
                $rootScope.progressBarActivated = false;
            } catch (err) {
                console.error(err);
                $rootScope.error = {
                    icon: 'error_outline',
                    title: 'Algo ha ido mal',
                    msg: 'Ha ocurrido un error mientras se cargaba la receta.'
                };
                $rootScope.errorMsg = true;
                $rootScope.headerTitle = 'Error';
                $rootScope.progressBarActivated = false;
            }
        }, function(response) {
            if (response.status == 404) {
                $rootScope.error = {
                    icon: 'error_outline',
                    title: 'Error 404',
                    msg: 'La receta \'' + $routeParams.slug + '\' no existe.'
                };
                $rootScope.errorMsg = true;
            } else {
                NotificationProvider.notify({
                    title: 'Un error ha ocurrido',
                    text: 'Ha ocurrido un error mientras se cargaba la receta. Por favor, intentelo más tarde.',
                    type: 'error',
                    addclass: 'custom-error-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome',
                });
                $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                $rootScope.error = {
                    icon: 'error_outline',
                    title: 'Algo ha ido mal',
                    msg: 'Ha ocurrido un error mientras se cargaba la receta.'
                };
                $rootScope.errorMsg = true;
            }
            $rootScope.headerTitle = 'Error';
            $rootScope.progressBarActivated = false;
        });

        $scope.description = function(steps) {
            if (steps) return $sce.trustAsHtml(steps);
        };

        $scope.getDifficulty = function(diff) {
            return DIFF.class[diff];
        };
    }
]);

recipeController.controller('RecipeCreate', ['$scope', '$rootScope', '$location', 'RecipeService', 'CategoryService', 'TagService',
    'NotificationProvider', 'DIFF', '$timeout', 'FILE_DROPZONE', '$compile',
    function($scope, $rootScope, $location, RecipeService, CategoryService, TagService,
        NotificationProvider, DIFF, $timeout, FILE_DROPZONE, $compile) {
        $rootScope.headerTitle = 'Nueva receta';
        $rootScope.HasBack = true;
        $rootScope.back = function() {
            $location.path('/recipes');
        };

        $scope.requestSlug = null;
        $scope.validSlug = true;
        $scope.loadingSlug = false;
        $scope.diffs = DIFF.name;
        $scope.tags = [];
        $scope.recipe = {
            ingredients: [],
            num_persons: 0,
            difficulty: 'EASY',
            duration: '00:00',
            chipTags: []
        };
        $scope.images = {
            recipe: [],
            index: 0,
        };
        $scope.imagesLink = {};

        $scope.$watch(function() {
            return $scope.recipe.newIngredient ?
                $scope.recipe.newIngredient.name :
                $scope.recipe.newIngredient;
        }, function(newVal, oldVal) {
            $scope.newRecipe.newIngredientName.$error = {};
        });

        $scope.$watch(function() {
            return $scope.recipe.title;
        }, function(newVal, oldVal) {
            $scope.recipe.slug = RecipeService.getSlug(newVal);
        });

        $scope.$watch(function() {
            return $scope.recipe.slug;
        }, function(newVal, oldVal) {
            $scope.newRecipe.slug.$error = {};
            $scope.abortSlugRequest();
            if (newVal && newVal.length > 0) {
                $scope.loadingSlug = true;
                $scope.validSlugIcon = 'autorenew';
                $timeout(function() {
                    requestSlug = RecipeService.checkSlug(newVal).then(
                        function(response) {
                            $scope.loadingSlug = false;
                            if (response.status == 200) {
                                $scope.validSlugIcon = 'done';
                            } else {
                                $scope.newRecipe.slug.$error.validSlug = true;
                                $scope.validSlugIcon = 'error';
                            }
                        },
                        function(response) {
                            $scope.loadingSlug = false;
                            $scope.newRecipe.slug.$error.validSlug = true;
                            $scope.validSlugIcon = 'error';
                        }
                    );
                }, 500);
            } else {
                $scope.validSlugIcon = 'error';
            }
        });

        $scope.$watch(function() {
            return $scope.recipe.category_id;
        }, function(newVal, oldVal) {
            if (newVal === null) $scope.recipe.category_id = undefined;
        });

        $scope.addIngredient = function() {
            if ($scope.recipe.newIngredient !== null && $scope.recipe.newIngredient.name !== null && $scope.recipe.newIngredient.name !== '') {
                $scope.newRecipe.newIngredientName.$error = {};
                $scope.recipe.ingredients.push({
                    name: $scope.recipe.newIngredient.name,
                    count: $scope.recipe.newIngredient.count,
                });
                $scope.recipe.newIngredient.name = null;
                $scope.recipe.newIngredient.count = null;
            } else {
                $scope.newRecipe.newIngredientName.$error.customRequired = true;
            }
        };

        $scope.removeIngredient = function(index) {
            $scope.recipe.ingredients.splice(index, 1);
        };

        // Abort the check slug request
        $scope.abortSlugRequest = function() {
            return ($scope.requestSlug && $scope.requestSlug.abort());
        };

        $scope.getDifficulty = function(diff) {
            return DIFF.class[diff];
        };

        $scope.loadCategories = function() {
            CategoryService.all(function(response) {
                $scope.categories = response.data;
                $scope.categories.unshift({
                    id: null,
                    text: 'Ninguna'
                });
            }, function(response) {
                NotificationProvider.notify({
                    title: 'Un error ha ocurrido',
                    text: 'Ha ocurrido un error mientras se cargaban las categorias. Por favor, intentelo más tarde.',
                    type: 'error',
                    addclass: 'custom-error-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome'
                });
                $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
            });
        };

        $scope.loadTags = function(search) {
            return TagService.all(search, function(response) {
                return response.data;
            }, function(response) {
                NotificationProvider.notify({
                    title: 'Un error ha ocurrido',
                    text: 'Ha ocurrido un error mientras se cargaban las etiquetas. Por favor, intentelo más tarde.',
                    type: 'error',
                    addclass: 'custom-error-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome'
                });
                $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                return [];
            });
        };

        $scope.transformChip = function(chip) {
            if (angular.isObject(chip)) {
                return chip;
            }
            return {
                text: chip,
                type: 'nuevo'
            };
        };

        $scope.tagSearch = function(search) {
            if (search) {
                return $scope.loadTags(search).then(function(response) {
                    $scope.tags = response.filter(function(el) {
                        return !$.containsId(el, $scope.recipe.chipTags);
                    });
                    return $scope.tags;
                });
            }
            return [];
        };

        $scope.create = function() {
            $rootScope.progressBarActivated = true;
            $rootScope.errorMsg = false;
            $rootScope.headerTitle = 'Creando receta';
            $("html, body").animate({
                scrollTop: 0
            }, "slow");
            var recipeObj = $scope.recipe;
            recipeObj.duration += ':00';
            recipeObj.newTags = RecipeService.getNewTags(recipeObj.chipTags);
            recipeObj.tags = $.getArrayId(recipeObj.chipTags);
            RecipeService.create(recipeObj, function(response) {
                var mainFile = $scope.images.main;
                var slug = response.data.slug;
                var recipeId = response.data.id;
                $rootScope.headerTitle = 'Subiendo imágenes';
                RecipeService.uploadFile(mainFile, recipeId, true, false,
                    function(response) {
                        if ($scope.images.recipe.length > 0) {
                            RecipeService.uploadFile($scope.images.recipe, recipeId, false, true,
                                function(response) {
                                    $rootScope.progressBarActivated = false;
                                    $location.path('/recipes/' + slug);
                                },
                                function(response) {
                                    if (response.status == 400) {
                                        $rootScope.error = {
                                            icon: 'error_outline',
                                            title: 'Datos incorrectos',
                                            msg: $.parseError(response.data),
                                        };
                                    } else {
                                        NotificationProvider.notify({
                                            title: 'Un error ha ocurrido',
                                            text: 'Ha ocurrido un error mientras se guardaban las imágenes. Por favor, intentelo más tarde.',
                                            type: 'error',
                                            addclass: 'custom-error-notify',
                                            icon: 'material-icons md-light',
                                            styling: 'fontawesome'
                                        });
                                        $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                                        $rootScope.error = {
                                            icon: 'error_outline',
                                            title: 'Algo ha ido mal',
                                            msg: 'Ha ocurrido un error mientras se guardaban las imágenes.'
                                        };
                                    }
                                    $rootScope.errorMsg = true;
                                    $rootScope.progressBarActivated = false;
                                    $rootScope.headerTitle = 'Nueva receta';
                                });
                        } else {
                            $rootScope.progressBarActivated = false;
                            $location.path('/recipes/' + slug);
                        }
                    },
                    function(response) {
                        if (response.status == 400) {
                            $rootScope.error = {
                                icon: 'error_outline',
                                title: 'Datos incorrectos',
                                msg: $.parseError(response.data),
                            };
                        } else {
                            NotificationProvider.notify({
                                title: 'Un error ha ocurrido',
                                text: 'Ha ocurrido un error mientras se guardaban las imágenes. Por favor, intentelo más tarde.',
                                type: 'error',
                                addclass: 'custom-error-notify',
                                icon: 'material-icons md-light',
                                styling: 'fontawesome'
                            });
                            $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                            $rootScope.error = {
                                icon: 'error_outline',
                                title: 'Algo ha ido mal',
                                msg: 'Ha ocurrido un error mientras se guardaban las imágenes.'
                            };
                        }
                        $rootScope.errorMsg = true;
                        $rootScope.progressBarActivated = false;
                        $rootScope.headerTitle = 'Nueva receta';
                    });
            }, function(response) {
                if (response.status == 400) {
                    $rootScope.error = {
                        icon: 'error_outline',
                        title: 'Datos incorrectos',
                        msg: $.parseError(response.data),
                    };
                } else {
                    NotificationProvider.notify({
                        title: 'Un error ha ocurrido',
                        text: 'Ha ocurrido un error mientras se creaba la receta. Por favor, intentelo más tarde.',
                        type: 'error',
                        addclass: 'custom-error-notify',
                        icon: 'material-icons md-light',
                        styling: 'fontawesome'
                    });
                    $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                    $rootScope.error = {
                        icon: 'error_outline',
                        title: 'Algo ha ido mal',
                        msg: 'Ha ocurrido un error mientras se creaba la receta.'
                    };
                }
                $rootScope.errorMsg = true;
                $rootScope.progressBarActivated = false;
                $rootScope.headerTitle = 'Nueva receta';
            });
        };

        $scope.removeImage = function(index) {
            $('#image-removable-' + index).exists(function() {
                $('#image-removable-' + index).remove();
                $scope.images.recipe.splice(index, 1);
            });
        };

        $scope.$on('$viewContentLoaded', function() {
            if (window.File && window.FileList && window.FileReader) {
                var files = document.getElementById('files');
                var filedrag = document.getElementById('filedrag');

                files.addEventListener("change", function(e) {
                    FILE_DROPZONE.FileHandler(e, $scope, $compile);
                }, false);
                var xhr = new XMLHttpRequest();
                if (xhr.upload) {
                    filedrag.addEventListener("dragover", function(e) {
                        FILE_DROPZONE.FileDragOver(e, $scope);
                    }, false);
                    filedrag.addEventListener("dragleave", function(e) {
                        FILE_DROPZONE.FileDragOver(e, $scope);
                    }, false);
                    filedrag.addEventListener("drop", function(e) {
                        FILE_DROPZONE.FileHandler(e, $scope, $compile);
                    }, false);
                    filedrag.style.display = "block";
                }
            }
        });
    }
]);

recipeController.controller('RecipeEdit', ['$scope', '$rootScope', '$location', 'RecipeService', 'CategoryService', 'TagService',
    'NotificationProvider', 'DIFF', '$timeout', 'FILE_DROPZONE', '$compile', '$routeParams', 'IngredientService',
    function($scope, $rootScope, $location, RecipeService, CategoryService, TagService,
        NotificationProvider, DIFF, $timeout, FILE_DROPZONE, $compile, $routeParams, IngredientService) {
        $rootScope.headerTitle = 'Editar receta';
        $rootScope.HasBack = true;
        $rootScope.back = function() {
            $location.path('/recipes');
        };

        $scope.requestSlug = null;
        $scope.validSlug = true;
        $scope.loadingSlug = false;
        $scope.diffs = DIFF.name;
        $scope.recipe = {};
        $scope.tags = [];
        $scope.images = {
            recipe: [],
            show: [],
            index: 0,
        };
        $scope.imagesLink = {};

        RecipeService.get($routeParams.slug, function(response) {
            try {
                $scope.recipe = response.data;
                $scope.recipe.images = RecipeService.getImages(response.data);
                $scope.recipe.chipTags = response.data.tags;

                CategoryService.all(function(response) {
                    $scope.categories = response.data;
                    $scope.categories.unshift({
                        id: null,
                        text: 'Ninguna'
                    });
                    if ($scope.recipe.category) $scope.recipe.category_id = $scope.recipe.category.id;
                }, function(response) {
                    NotificationProvider.notify({
                        title: 'Un error ha ocurrido',
                        text: 'Ha ocurrido un error mientras se cargaban las categorias. Por favor, intentelo más tarde.',
                        type: 'error',
                        addclass: 'custom-error-notify',
                        icon: 'material-icons md-light',
                        styling: 'fontawesome'
                    });
                    $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                });

                $rootScope.progressBarActivated = false;
            } catch (err) {
                console.error(err);
                $rootScope.error = {
                    icon: 'error_outline',
                    title: 'Algo ha ido mal',
                    msg: 'Ha ocurrido un error mientras se cargaba la receta.'
                };
                $rootScope.errorMsg = true;
                $rootScope.progressBarActivated = false;
            }
        }, function(response) {
            if (response.status == 404) {
                $rootScope.error = {
                    icon: 'error_outline',
                    title: 'Error 404',
                    msg: 'La receta \'' + $routeParams.slug + '\' no existe.'
                };
            } else {
                NotificationProvider.notify({
                    title: 'Un error ha ocurrido',
                    text: 'Ha ocurrido un error mientras se cargaba la receta. Por favor, intentelo más tarde.',
                    type: 'error',
                    addclass: 'custom-error-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome',
                });
                $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                $rootScope.error = {
                    icon: 'error_outline',
                    title: 'Algo ha ido mal',
                    msg: 'Ha ocurrido un error mientras se cargaba la receta.'
                };
            }
            $rootScope.errorMsg = true;
            $rootScope.progressBarActivated = false;
        });

        $scope.$watch(function() {
            return $scope.recipe.newIngredient ?
                $scope.recipe.newIngredient.name :
                $scope.recipe.newIngredient;
        }, function(newVal, oldVal) {
            $scope.editRecipe.newIngredientName.$error = {};
        });

        $scope.$watch(function() {
            return $scope.recipe.title;
        }, function(newVal, oldVal) {
            $scope.recipe.slug = RecipeService.getSlug(newVal);
        });

        $scope.$watch(function() {
            return $scope.recipe.slug;
        }, function(newVal, oldVal) {
            $scope.editRecipe.slug.$error = {};
            $scope.abortSlugRequest();
            if (newVal && newVal.length > 0) {
                $scope.loadingSlug = true;
                $scope.validSlugIcon = 'autorenew';
                $timeout(function() {
                    requestSlug = RecipeService.checkSlugWithId(newVal, $scope.recipe.id).then(
                        function(response) {
                            $scope.loadingSlug = false;
                            if (response.status == 200) {
                                $scope.validSlugIcon = 'done';
                            } else {
                                $scope.editRecipe.slug.$error.validSlug = true;
                                $scope.validSlugIcon = 'error';
                            }
                        },
                        function(response) {
                            $scope.loadingSlug = false;
                            $scope.editRecipe.slug.$error.validSlug = true;
                            $scope.validSlugIcon = 'error';
                        }
                    );
                }, 500);
            } else {
                $scope.validSlugIcon = 'error';
            }
        });

        $scope.$watch(function() {
            return $scope.recipe.category_id;
        }, function(newVal, oldVal) {
            if (newVal === null) $scope.recipe.category_id = undefined;
        });

        $scope.addIngredient = function() {
            if ($scope.recipe.newIngredient !== null && $scope.recipe.newIngredient.name !== null && $scope.recipe.newIngredient.name !== '') {
                $scope.editRecipe.newIngredientName.$error = {};
                var ingredient = {
                    name: $scope.recipe.newIngredient.name,
                    count: $scope.recipe.newIngredient.count,
                };
                IngredientService.add($scope.recipe.id, ingredient, function(response) {
                    $scope.recipe.ingredients.push(response.data);
                    $scope.recipe.newIngredient.name = null;
                    $scope.recipe.newIngredient.count = null;
                    NotificationProvider.notify({
                        title: 'Ingrediente añadido',
                        text: '',
                        type: 'success',
                        addclass: 'custom-success-notify',
                        icon: 'material-icons md-light',
                        styling: 'fontawesome',
                    });
                    $('.ui-pnotify.custom-success-notify .material-icons').html('restaurant_menu');
                }, function(response) {
                    if (response.status == 400) {
                        NotificationProvider.notify({
                            title: 'Datos incorrectos',
                            text: $.parseError(response.data),
                            type: 'error',
                            addclass: 'custom-error-notify',
                            icon: 'material-icons md-light',
                            styling: 'fontawesome'
                        });
                    } else {
                        NotificationProvider.notify({
                            title: 'Un error ha ocurrido',
                            text: 'Ha ocurrido un error mientras se añadía el ingrediente. Por favor, intentelo más tarde.',
                            type: 'error',
                            addclass: 'custom-error-notify',
                            icon: 'material-icons md-light',
                            styling: 'fontawesome'
                        });
                    }
                    $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                    $scope.recipe.newIngredient.name = null;
                    $scope.recipe.newIngredient.count = null;
                });
            } else {
                $scope.editRecipe.newIngredientName.$error.customRequired = true;
            }
        };

        $scope.removeIngredient = function(index) {
            var ingredient = $scope.recipe.ingredients[index];
            IngredientService.delete($scope.recipe.id, ingredient.id, function(response) {
                $scope.recipe.ingredients.splice(index, 1);
                NotificationProvider.notify({
                    title: 'Ingrediente borrado',
                    text: '',
                    type: 'success',
                    addclass: 'custom-success-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome',
                });
                $('.ui-pnotify.custom-success-notify .material-icons').html('restaurant_menu');
                console.log($scope.recipe);
            }, function(response) {
                if (response.status == 400) {
                    NotificationProvider.notify({
                        title: 'Datos incorrectos',
                        text: $.parseError(response.data),
                        type: 'error',
                        addclass: 'custom-error-notify',
                        icon: 'material-icons md-light',
                        styling: 'fontawesome'
                    });
                } else {
                    NotificationProvider.notify({
                        title: 'Un error ha ocurrido',
                        text: 'Ha ocurrido un error mientras se borraba el ingrediente. Por favor, intentelo más tarde.',
                        type: 'error',
                        addclass: 'custom-error-notify',
                        icon: 'material-icons md-light',
                        styling: 'fontawesome'
                    });
                }
                $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
            });
        };

        // Abort the check slug request
        $scope.abortSlugRequest = function() {
            return ($scope.requestSlug && $scope.requestSlug.abort());
        };

        $scope.getDifficulty = function(diff) {
            return DIFF.class[diff];
        };

        $scope.loadCategories = function() {
            CategoryService.all(function(response) {
                $scope.categories = response.data;
                $scope.categories.unshift({
                    id: null,
                    text: 'Ninguna'
                });
            }, function(response) {
                NotificationProvider.notify({
                    title: 'Un error ha ocurrido',
                    text: 'Ha ocurrido un error mientras se cargaban las categorias. Por favor, intentelo más tarde.',
                    type: 'error',
                    addclass: 'custom-error-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome'
                });
                $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
            });
        };

        $scope.loadTags = function(search) {
            return TagService.all(search, function(response) {
                return response.data;
            }, function(response) {
                NotificationProvider.notify({
                    title: 'Un error ha ocurrido',
                    text: 'Ha ocurrido un error mientras se cargaban las etiquetas. Por favor, intentelo más tarde.',
                    type: 'error',
                    addclass: 'custom-error-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome'
                });
                $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                return [];
            });
        };

        $scope.transformChip = function(chip) {
            if (angular.isObject(chip)) {
                return chip;
            }
            return {
                text: chip,
                type: 'nuevo'
            };
        };

        $scope.tagSearch = function(search) {
            if (search) {
                return $scope.loadTags(search).then(function(response) {
                    $scope.tags = response.filter(function(el) {
                        return !$.containsId(el, $scope.recipe.chipTags);
                    });
                    return $scope.tags;
                });
            }
            return [];
        };

        $scope.edit = function() {
            $rootScope.progressBarActivated = true;
            $rootScope.errorMsg = false;
            $rootScope.headerTitle = 'Creando receta';
            $("html, body").animate({
                scrollTop: 0
            }, "slow");
            var recipeObj = $scope.recipe;
            recipeObj.duration += ':00';
            recipeObj.newTags = RecipeService.getNewTags(recipeObj.chipTags);
            recipeObj.tags = $.getArrayId(recipeObj.chipTags);
            RecipeService.edit(recipeObj, function(response) {
                var mainFile = $scope.images.main;
                var slug = response.data.slug;
                if (mainFile) {
                    var recipeId = response.data.id;
                    $rootScope.headerTitle = 'Subiendo imágenes';
                    RecipeService.uploadFile(mainFile, recipeId, true, false,
                        function(response) {
                            $rootScope.progressBarActivated = false;
                            $location.path('/recipes/' + slug);
                        },
                        function(response) {
                            if (response.status == 400) {
                                $rootScope.error = {
                                    icon: 'error_outline',
                                    title: 'Datos incorrectos',
                                    msg: $.parseError(response.data),
                                };
                            } else {
                                NotificationProvider.notify({
                                    title: 'Un error ha ocurrido',
                                    text: 'Ha ocurrido un error mientras se guardaban las imágenes. Por favor, intentelo más tarde.',
                                    type: 'error',
                                    addclass: 'custom-error-notify',
                                    icon: 'material-icons md-light',
                                    styling: 'fontawesome'
                                });
                                $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                                $rootScope.error = {
                                    icon: 'error_outline',
                                    title: 'Algo ha ido mal',
                                    msg: 'Ha ocurrido un error mientras se guardaban las imágenes.'
                                };
                            }
                            $rootScope.errorMsg = true;
                            $rootScope.progressBarActivated = false;
                            $rootScope.headerTitle = 'Editar receta';
                        });
                } else {
                    $rootScope.progressBarActivated = false;
                    $location.path('/recipes/' + slug);
                }
            }, function(response) {
                if (response.status == 400) {
                    $rootScope.error = {
                        icon: 'error_outline',
                        title: 'Datos incorrectos',
                        msg: $.parseError(response.data),
                    };
                } else {
                    NotificationProvider.notify({
                        title: 'Un error ha ocurrido',
                        text: 'Ha ocurrido un error mientras se guardaba la receta. Por favor, intentelo más tarde.',
                        type: 'error',
                        addclass: 'custom-error-notify',
                        icon: 'material-icons md-light',
                        styling: 'fontawesome'
                    });
                    $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                    $rootScope.error = {
                        icon: 'error_outline',
                        title: 'Algo ha ido mal',
                        msg: 'Ha ocurrido un error mientras se guardaba la receta.'
                    };
                }
                $rootScope.errorMsg = true;
                $rootScope.progressBarActivated = false;
                $rootScope.headerTitle = 'Editar receta';
            });
        };

        $scope.removeImage = function(index) {
            $('#image-removable-' + index).exists(function() {
                RecipeService.deleteFile(index, function(response) {
                    NotificationProvider.notify({
                        title: 'Image borrada',
                        text: '',
                        type: 'success',
                        addclass: 'custom-success-notify',
                        icon: 'material-icons md-light',
                        styling: 'fontawesome',
                    });
                    $('.ui-pnotify.custom-success-notify .material-icons').html('photo_filter');
                    $('#image-removable-' + index).remove();
                    $scope.images.recipe.splice(index, 1);
                    $scope.images.show.splice(index, 1);
                }, function(response) {
                    NotificationProvider.notify({
                        title: 'Un error ha ocurrido',
                        text: 'Ha ocurrido un error mientras se borraban las imágenes. Por favor, intentelo más tarde.',
                        type: 'error',
                        addclass: 'custom-error-notify',
                        icon: 'material-icons md-light',
                        styling: 'fontawesome'
                    });
                    $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                });
            });
        };

        $scope.$on('$viewContentLoaded', function() {
            if (window.File && window.FileList && window.FileReader) {
                var files = document.getElementById('files');
                var filedrag = document.getElementById('filedrag');

                files.addEventListener("change", function(e) {
                    FILE_DROPZONE.FileHandler(e, $scope, $compile, true, RecipeService, NotificationProvider);
                }, false);
                var xhr = new XMLHttpRequest();
                if (xhr.upload) {
                    filedrag.addEventListener("dragover", function(e) {
                        FILE_DROPZONE.FileDragOver(e, $scope);
                    }, false);
                    filedrag.addEventListener("dragleave", function(e) {
                        FILE_DROPZONE.FileDragOver(e, $scope);
                    }, false);
                    filedrag.addEventListener("drop", function(e) {
                        FILE_DROPZONE.FileHandler(e, $scope, $compile, true, RecipeService, NotificationProvider);
                    }, false);
                    filedrag.style.display = "block";
                }
            }
        });
    }
]);

var fileDirective = angular.module('FileDirectives', []);

fileDirective.directive('fileModel', ['$parse', function($parse) {
    return {
        restrict: 'A',
        link: function($scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;

            element.bind('change', function() {
                var file = element[0].files[0];
                $scope.$apply(function() {
                    modelSetter($scope, file);
                });
            });
        }
    };
}]);

fileDirective.directive('fileThumbnail', function() {
    return {
        restrict: 'A',
        link: function($scope, element, attrs) {
            element.bind('change', function() {
                var reader = new FileReader();
                var file = element[0].files[0];
                $scope.images.name = file.name;
                reader.onload = (function(theFile) {
                    return function(event) {
                        var image = document.getElementById(attrs.fileThumbnail);
                        image.src = event.target.result;
                    };
                })(file);
                reader.readAsDataURL(file);
            });
        }
    };
});

var timeDirective = angular.module('TimeDirectives', []);

timeDirective.directive('strToTime', function() {
    return {
        require: 'ngModel',
        link: function($scope, element, attrs, ngModelController) {
            ngModelController.$parsers.push(function(data) {
                if (!data) return "";
                return ('0' + data.getHours().toString()).slice(-2) + ':' + ('0' + data.getMinutes().toString()).slice(-2);
            });

            ngModelController.$formatters.push(function(data) {
                if (!data) return null;
                var d = new Date(1970, 1, 1);
                var splitted = data.split(':');
                d.setHours(splitted[0]);
                d.setMinutes(splitted[1]);
                return d;
            });
        }
    };
});

var animationModule = angular.module('Animations', []);

animationModule.animation('.animation-card-recipes', function() {
    return {
        enter: function(element, done) {
            element.css({
                opacity: 0
            });
            jQuery(element).animate({
                opacity: 1
            }, done);

            return function(isCancelled) {
                if (isCancelled) {
                    jQuery(element).stop();
                }
            };
        },
        leave: function(element, done) {
            element.css('opacity', 1);
            jQuery(element).animate({
                opacity: 0
            }, done);
            return function(isCancelled) {
                if (isCancelled) {
                    jQuery(element).stop();
                }
            };
        },
        move: function(element, done) {
            element.css('opacity', 0);
            jQuery(element).animate({
                opacity: 1
            }, done);
            return function(isCancelled) {
                if (isCancelled) {
                    jQuery(element).stop();
                }
            };
        },

        addClass: function(element, className, done) {},
        removeClass: function(element, className, done) {}
    };
});

/*!
 * Lolliclock v0.1.0
 * Matthew Krick 2015
 * Inspired by Google's material design & ClockPicker v0.0.7 (http://weareoutman.github.io/clockpicker/)
 */
(function() {
    var $ = window.jQuery;

    // Default options
    LolliClock.DEFAULTS = {
        startTime: '', // default time, '' or 'now' or 'H:MM AM'
        autoclose: false, // show Cancel/OK buttons
        vibrate: true, // vibrate the device when dragging clock hand
        hour24: false
    };

    // Listen touch events in touch screen device, instead of mouse events in desktop.
    var touchSupported = 'ontouchstart' in window;
    var mousedownEvent = 'mousedown' + (touchSupported ? ' touchstart' : '');
    var mousemoveEvent = 'mousemove.lolliclock' + (touchSupported ? ' touchmove.lolliclock' : '');
    var mouseupEvent = 'mouseup.lolliclock' + (touchSupported ? ' touchend.lolliclock' : '');

    // Vibrate the device if supported
    var vibrate = navigator.vibravarte ? 'vibrate' : navigator.webkitVibrate ? 'webkitVibrate' : null;

    var svgNS = 'http://www.w3.org/2000/svg';

    function createSvgElement(name) {
        return document.createElementNS(svgNS, name);
    }

    function leadingZero(num) {
        return (num < 10 ? '0' : '') + num;
    }

    // Get a unique id
    var idCounter = 0;

    function uniqueId(prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
    }

    // Clock size
    var dialRadius = 84;
    var radius = 50;
    var outSizeRadius = 70;
    var tickRadius = 12;
    var diameter = dialRadius * 2;
    var duration = 350;

    // Popover template
    var tpl = [
        '<div class="lolliclock-popover">',
        '<div class="lolliclock-header">',
        '<div class="lolliclock-time">',
        '<div class="lolliclock-hours lolliclock-primary-text">',
        '<div class="lolliclock-time-old"></div>',
        '<div class="lolliclock-time-new"></div>',
        '</div>',
        '<span class="lolliclock-colon">:</span>',
        '<div class="lolliclock-minutes">',
        '<div class="lolliclock-time-old"></div>',
        '<div class="lolliclock-time-new"></div>',
        '</div>',
        '</div>',
        '<span class="lolliclock-am-pm"></span>',
        '</div>',
        '<div class="popover-content">',
        '<div class="lolliclock-plate">',
        '<div class="lolliclock-canvas"></div>',
        '<div class="lolliclock-dial lolliclock-dial-hours"></div>',
        '<div class="lolliclock-dial lolliclock-dial-minutes lolliclock-dial-out"></div>',
        '</div>',
        '<div class="lolliclock-ampm-block">',
        '<div id="lolliclock-btn-am" class="lolliclock-ampm-btn">',
        '<div class="lolliclock-btn-background"></div>',
        '<div class="lolliclock-btn-text">AM</div>',
        '</div>',
        '<div style="flex: 1;"></div>',
        '<div id="lolliclock-btn-pm" class="lolliclock-ampm-btn">',
        '<div class="lolliclock-btn-background"></div>',
        '<div class="lolliclock-btn-text">PM</div>',
        '</div>',
        '</div>',
        '</div>',
        '</div>'
    ].join('');

    // LolliClock
    function LolliClock(element, options) {
        var popover = $(tpl);
        var plate = popover.find('.lolliclock-plate');
        var hoursView = popover.find('.lolliclock-dial-hours');
        var minutesView = popover.find('.lolliclock-dial-minutes');
        var isInput = element.prop('tagName') === 'INPUT';
        var input = isInput ? element : element.find('input');
        var self = this;

        this.id = uniqueId('lolli');
        this.element = element;
        this.options = options;
        this.isAppended = false;
        this.isShown = false;
        this.currentView = 'hours';
        this.isInput = isInput;
        this.input = input;
        this.popover = popover;
        this.plate = plate;
        this.hoursView = hoursView;
        this.minutesView = minutesView;
        this.header = popover.find('.lolliclock-header');
        this.spanHours = popover.find('.lolliclock-hours');
        this.spanMinutes = popover.find('.lolliclock-minutes');
        this.spanNewTime = popover.find('.lolliclock-time-new');
        this.spanOldTime = popover.find('.lolliclock-time-old');
        this.spanAmPm = popover.find('.lolliclock-am-pm');
        this.amOrPm = "PM";
        this.AmPmButtons = popover.find('.lolliclock-ampm-btn');
        this.amButton = popover.find('#lolliclock-btn-am');
        this.pmButton = popover.find('#lolliclock-btn-pm');
        if (this.options.hour24) {
            this.AmPmButtons.hide();
            this.spanAmPm.hide();
        }
        //var exportName = (this.input[0].name || this.input[0].id) + '-export';
        //this.dateTimeVal = $('<input type="hidden" id="' + exportName + '"></input>').insertAfter(input);
        // If autoclose is not setted, append a button
        if (!options.autoclose) {
            this.popover.css('height', '380px');
            var $closeButtons = $('<div class="lolliclock-buttons"></div>').appendTo(popover);
            $('<div class="lolliclock-button">Cancel</div>')
                .click($.proxy(this.hide, this))
                .appendTo($closeButtons);
            $('<div class="lolliclock-button">OK</div>')
                .click($.proxy(this.done, this))
                .appendTo($closeButtons);
            this.closeButtons = popover.find('.lolliclock-button');
        }

        // Show or toggle
        input.on('focus.lolliclock click.lolliclock', $.proxy(this.show, this));

        // Build ticks
        var tickTpl = $('<div class="lolliclock-tick"></div>');
        var i, tick, radian;

        // Hours view
        if (options.hour24) {
            for (i = 1; i < 13; i++) {
                tick = tickTpl.clone();
                radian = i / 6 * Math.PI;
                tick.css({
                    left: dialRadius + Math.sin(radian) * radius - tickRadius,
                    top: dialRadius - Math.cos(radian) * radius - tickRadius
                });
                tick.html(i);
                hoursView.append(tick);
            }

            for (i = 13; i <= 24; i++) {
                tick = tickTpl.clone();
                radian = (i / 6) * Math.PI;
                tick.css({
                    left: dialRadius + Math.sin(radian) * outSizeRadius - tickRadius,
                    top: dialRadius - Math.cos(radian) * outSizeRadius - tickRadius
                });
                if (i === 24) {
                    tick.html("00");
                } else {
                    tick.html(i);
                }
                hoursView.append(tick);
            }
        } else {
            for (i = 1; i < 13; i++) {
                tick = tickTpl.clone();
                radian = i / 6 * Math.PI;
                tick.css({
                    left: dialRadius + Math.sin(radian) * outSizeRadius - tickRadius,
                    top: dialRadius - Math.cos(radian) * outSizeRadius - tickRadius
                });
                tick.html(i);
                hoursView.append(tick);
            }
        }
        // Minutes view
        for (i = 0; i < 60; i += 5) {
            tick = tickTpl.clone();
            radian = i / 30 * Math.PI;
            tick.css({
                left: dialRadius + Math.sin(radian) * outSizeRadius - tickRadius,
                top: dialRadius - Math.cos(radian) * outSizeRadius - tickRadius
            });
            tick.html(leadingZero(i));
            minutesView.append(tick);
        }

        //Move click to nearest tick
        plate.on(mousedownEvent, mousedown);

        // Mousedown or touchstart
        function mousedown(e) {
            var offset = plate.offset(),
                isTouch = /^touch/.test(e.type),
                x0 = offset.left + dialRadius,
                y0 = offset.top + dialRadius,
                dx = (isTouch ? e.originalEvent.touches[0] : e).pageX - x0,
                dy = (isTouch ? e.originalEvent.touches[0] : e).pageY - y0,
                z = Math.sqrt(dx * dx + dy * dy),
                moved = false;
            outsideMode = true;

            // Ignore plate clicks that aren't even close
            if (z < outSizeRadius + tickRadius && z > outSizeRadius - tickRadius) {
                outsideMode = true;
            } else if (z > radius - tickRadius && z < radius + tickRadius && options.hour24 && self.currentView === 'hours') {
                outsideMode = false;
            } else {
                return;
            }
            e.preventDefault();
            $(document.body).addClass('lolliclock-moving');

            // Place the canvas to top
            plate.append(self.canvas);

            // Clock
            self.setHand(dx, dy, outsideMode);

            // Mousemove on document
            $(document).off(mousemoveEvent).on(mousemoveEvent, function(e) {
                e.preventDefault();
                var isTouch = /^touch/.test(e.type),
                    x = (isTouch ? e.originalEvent.touches[0] : e).pageX - x0,
                    y = (isTouch ? e.originalEvent.touches[0] : e).pageY - y0;
                if (!moved && x === dx && y === dy) {
                    // Clicking in chrome on windows will trigger a mousemove event
                    return;
                }
                moved = true;
                self.setHand(x, y, outsideMode);
            });

            // Mouseup on document
            $(document).off(mouseupEvent).on(mouseupEvent, function(e) {
                e.preventDefault();
                var isTouch = /^touch/.test(e.type),
                    x = (isTouch ? e.originalEvent.changedTouches[0] : e).pageX - x0,
                    y = (isTouch ? e.originalEvent.changedTouches[0] : e).pageY - y0;
                if (x === dx && y === dy) {
                    self.setHand(x, y, outsideMode);
                }
                if (self.currentView === 'hours') {
                    self.toggleView('minutes', duration / 2);
                } else if (options.autoclose) {
                    self.done();
                }
                plate.prepend(canvas);

                // Reset mouse cursor
                $(document.body).removeClass('lolliclock-moving');

                // Unbind mousemove event
                $(document).off(mousemoveEvent);
                $(document).off(mouseupEvent);
            });
        }

        // Draw clock SVG
        var canvas = popover.find('.lolliclock-canvas');
        var svg = createSvgElement('svg');
        svg.setAttribute('class', 'lolliclock-svg');
        svg.setAttribute('width', diameter);
        svg.setAttribute('height', diameter);
        var g = createSvgElement('g');
        g.setAttribute('transform', 'translate(' + dialRadius + ',' + dialRadius + ')');
        var bearing = createSvgElement('circle');
        bearing.setAttribute('class', 'lolliclock-bearing');
        bearing.setAttribute('cx', 0);
        bearing.setAttribute('cy', 0);
        bearing.setAttribute('r', 1.25);
        var hand = createSvgElement('line');
        hand.setAttribute('x1', 0);
        hand.setAttribute('y1', 0);
        var bg = createSvgElement('circle');
        bg.setAttribute('class', 'lolliclock-canvas-bg');
        bg.setAttribute('r', tickRadius);
        var fg = createSvgElement('circle');
        fg.setAttribute('class', 'lolliclock-canvas-fg');
        fg.setAttribute('r', 3.5);
        g.appendChild(hand);
        g.appendChild(bg);
        g.appendChild(fg);
        g.appendChild(bearing);

        svg.appendChild(g);
        canvas.append(svg);

        this.hand = hand;
        this.bg = bg;
        this.fg = fg;
        this.bearing = bearing;
        this.g = g;
        this.canvas = canvas;

        raiseCallback(this.options.init);
    }

    function raiseCallback(callbackFunction) {
        if (callbackFunction && typeof callbackFunction === "function") {
            callbackFunction();
        }
    }

    // Show or hide popover
    LolliClock.prototype.toggle = function() {
        this[this.isShown ? 'hide' : 'show']();
    };

    LolliClock.prototype.changeAmPm = function(isAmOrPm) {
        if (!!isAmOrPm && isAmOrPm === this.amOrPm && this.options.hour24) return;
        this.amOrPm = this.amOrPm === 'AM' ? 'PM' : 'AM';
        this.spanAmPm.html(this.amOrPm);
        $(this.amButton[0].childNodes[0]).toggleClass('lolliclock-active-button-background', (this.amOrPm === 'AM'));
        $(this.pmButton[0].childNodes[0]).toggleClass('lolliclock-active-button-background', (this.amOrPm === 'PM'));
        $(this.amButton[0].childNodes[1]).toggleClass('lolliclock-active-button-text', (this.amOrPm === 'AM'));
        $(this.pmButton[0].childNodes[1]).toggleClass('lolliclock-active-button-text', (this.amOrPm === 'PM'));
    };

    // Set popover position, keep it on screen no matter how it's scrolled
    LolliClock.prototype.locate = function() {
        var element = this.element;
        var popover = this.popover;
        var popoverMargin = 8;
        var leftOffset = element.offset().left + (element.outerWidth() - popover.width()) / 2;
        var maxLeft = $(window).width() - popover.width() - popoverMargin;
        var minLeft = popoverMargin;
        var maxTop = $(window).height() + $(window).scrollTop() - popoverMargin - popover.height();
        var minTop = popoverMargin + $(window).scrollTop();
        var topOffset = element.offset().top;
        var styles = {};

        styles.top = topOffset < minTop ? minTop : topOffset > maxTop ? maxTop : topOffset;
        styles.left = leftOffset < minLeft ? minLeft : leftOffset > maxLeft ? maxLeft : leftOffset;
        popover.css(styles);
        popover.show();
    };

    // Show popover
    LolliClock.prototype.show = function() {
        //this.input.trigger('blur');
        if (this.isShown) {
            return;
        }

        raiseCallback(this.options.beforeShow);
        var self = this;

        // Initialize
        if (!this.isAppended) {
            // Append popover to body
            $(document.body).append(this.popover);
            this.isAppended = true;

            // Reset position when resize
            $(window).on('resize.lolliclock' + this.id, function() {
                if (self.isShown) {
                    self.locate();
                }
            });

            // Reset position on scroll
            $(window).on('scroll.lolliclock', function() {
                if (self.isShown) {
                    self.locate();
                }
            });

            //Add listeners
            this.AmPmButtons.on('click', function(e) {
                self.changeAmPm(e.currentTarget.children[1].innerHTML);
            });
            this.spanMinutes.on('click', function() {
                self.toggleView('minutes');
            });
            this.spanHours.on('click', function() {
                self.toggleView('hours');
            });
            this.spanAmPm.on('click', function() {
                self.changeAmPm();
            });
        }

        // Set position
        self.locate();

        //animate show
        this.plate.addClass('animate');
        this.header.addClass('animate');
        this.popover.addClass('animate');
        this.AmPmButtons.addClass('animate');
        this.spanNewTime.addClass('animate');
        this.spanOldTime.addClass('animate');

        /* jshint ignore:start */
        !this.options.autoclose && this.closeButtons.addClass('animate');
        /* jshint ignore:end */

        this.plate.on('webkitAnimationEnd animationend MSAnimationEnd oanimationend',
            function() {
                self.plate.removeClass("animate");
                self.header.removeClass("animate");
                self.popover.removeClass("animate");
                self.AmPmButtons.removeClass("animate");
                self.spanNewTime.removeClass("animate");
                self.spanOldTime.removeClass("animate");
                /* jshint ignore:start */
                !self.options.autoclose && self.closeButtons.removeClass("animate");
                /* jshint ignore:end */

                self.plate.off('webkitAnimationEnd animationend MSAnimationEnd oanimationend');
            }
        );

        //Get the time
        function timeToDate(time) {
            var parts = time.split(':');
            if (parts.length === 2) {
                var hours = +parts[0];
                var minAM = parts[1].split(' ');
                if (minAM.length === 2) {
                    var mins = minAM[0];
                    if (minAM[1] === 'PM') hours += 12;
                    return new Date(1970, 1, 1, hours, mins);
                }
            }
            return new Date('x');
        }

        function isValidTime(time) {

            return !isNaN(timeToDate(time).getTime());
        }

        var value;
        var inputValue = this.input.prop('value');
        var defaultValue = this.options.startTime;
        var placeholderValue = this.input.prop('placeholder');

        if (inputValue && isValidTime(inputValue)) {
            value = timeToDate(inputValue);
        } else if (defaultValue === 'now') {
            value = new Date();
        } else if (defaultValue && isValidTime(defaultValue)) {
            value = timeToDate(defaultValue);
        } else if (placeholderValue && isValidTime(placeholderValue)) {
            value = timeToDate(placeholderValue);
        } else {
            value = new Date();
        }
        if (this.options.hour24) {
            this.hours = value.getHours();
        } else {
            this.hours = value.getHours() % 12;
            this.amOrPm = value.getHours() > 11 ? "AM" : "PM";
        }
        this.minutes = value.getMinutes();
        //purposefully wrong because we change it next line

        this.changeAmPm();

        // Set time
        self.toggleView('minutes');
        self.toggleView('hours');


        self.isShown = true;

        // Hide when clicking or tabbing on any element except the clock, input
        $(document).on('click.lolliclock.' + this.id + ' focusin.lolliclock.' + this.id, function(e) {
            var target = $(e.target);
            if (target.closest(self.popover).length === 0 &&
                target.closest(self.input).length === 0) {
                self.done();
            }
        });

        // Hide when ESC is pressed
        $(document).on('keyup.lolliclock.' + this.id, function(e) {
            if (e.keyCode === 27) {
                self.hide();
            }
        });
        raiseCallback(this.options.afterShow);
    };

    // Hide popover
    LolliClock.prototype.hide = function() {
        raiseCallback(this.options.beforeHide);

        //animate out
        var self = this;
        self.popover.addClass('animate-out');
        self.plate.addClass("animate-out");
        self.header.addClass("animate-out");
        self.AmPmButtons.addClass("animate-out");
        /* jshint ignore:start */
        !self.options.autoclose && self.closeButtons.addClass('animate-out');
        /* jshint ignore:end */

        this.popover.on('webkitAnimationEnd animationend MSAnimationEnd oanimationend',
            function() {
                $(self.spanHours[0].childNodes[0]).html('');
                $(self.spanMinutes[0].childNodes[0]).html('');
                self.popover.removeClass("animate-out");
                self.plate.removeClass("animate-out");
                self.header.removeClass("animate-out");
                self.AmPmButtons.removeClass("animate-out");
                /* jshint ignore:start */
                !self.options.autoclose && self.closeButtons.removeClass("animate-out");
                /* jshint ignore:end */
                self.popover.off('webkitAnimationEnd animationend MSAnimationEnd oanimationend');

                // Unbinding events on document
                $(document).off('click.lolliclock.' + self.id + ' focusin.lolliclock.' + self.id);
                $(document).off('keyup.lolliclock.' + self.id);

                self.popover.hide();
                raiseCallback(self.options.afterHide);
            }
        );

        self.isShown = false;
    };

    // Toggle to hours or minutes view
    LolliClock.prototype.toggleView = function(view, delay) {
        var isHours = view === 'hours';
        var nextView = isHours ? this.hoursView : this.minutesView;
        var hideView = isHours ? this.minutesView : this.hoursView;

        this.currentView = view;

        this.spanHours.toggleClass('lolliclock-primary-text', isHours);
        this.spanMinutes.toggleClass('lolliclock-primary-text', !isHours);

        // Let's make transitions
        hideView.addClass('lolliclock-dial-out');
        nextView.css('visibility', 'visible').removeClass('lolliclock-dial-out');

        // Reset clock hand
        this.resetClock(delay);

        // After transitions ended
        clearTimeout(this.toggleViewTimer);
        this.toggleViewTimer = setTimeout(function() {
            hideView.css('visibility', 'hidden');
        }, duration);

        //Add pointer mouse cursor to show you can click between ticks
        if (isHours) {
            this.plate.off(mousemoveEvent);
        } else {
            var self = this;
            this.plate.on(mousemoveEvent, function(e) {

                var offset = self.plate.offset(),
                    x0 = offset.left + dialRadius,
                    y0 = offset.top + dialRadius,
                    dx = e.pageX - x0,
                    dy = e.pageY - y0,
                    z = Math.sqrt(dx * dx + dy * dy);
                if (z > outSizeRadius - tickRadius && z < outSizeRadius + tickRadius) {
                    $(document.body).addClass('lolliclock-clickable');
                } else {
                    $(document.body).removeClass('lolliclock-clickable');
                }
            });
        }
    };

    // Reset clock hand
    LolliClock.prototype.resetClock = function(delay) {
        var view = this.currentView,
            outSizeMode = true,
            value = this[view],
            isHours = view === 'hours';
        if (isHours) {
            unit = Math.PI / 6;
            if (value !== 0 && value <= 12 && this.options.hour24) {
                outSizeMode = false;
            }
        } else {
            unit = Math.PI / 30;
        }

        var radian = value * unit,
            x = Math.sin(radian) * radius,
            y = -Math.cos(radian) * radius,
            self = this;
        if (delay) {
            self.canvas.addClass('lolliclock-canvas-out');
            setTimeout(function() {
                self.canvas.removeClass('lolliclock-canvas-out');
                self.setHand(x, y, outSizeMode);
            }, delay);
        } else {
            this.setHand(x, y, outSizeMode);
        }
    };

    // Set clock hand to (x, y)
    LolliClock.prototype.setHand = function(x, y, outSizeMode) {
        //Keep radians postive from 1 to 2pi
        var radian = Math.atan2(-x, y) + Math.PI;
        var isHours = this.currentView === 'hours';
        var unit = Math.PI / (isHours ? 6 : 30);
        var value;

        // Get the round value
        if (outSizeMode && this.options.hour24 && isHours) {
            value = Math.round(radian / unit);
            if (value === 12 || value === 0) {
                value = 0;
            } else {
                value += 12;
            }
        } else {
            value = Math.round(radian / unit);
        }

        // Get the round radian
        radian = value * unit;

        // Correct the hours or minutes
        if (isHours) {
            if (value === 0 && !(this.options.hour24 && outSizeMode)) {
                value = 12;
            }
            this.fg.style.visibility = 'hidden';
        } else {
            var isOnNum = (value % 5 === 0);
            if (isOnNum) {
                this.fg.style.visibility = 'hidden';
            } else {
                this.fg.style.visibility = 'visible';
            }
            if (value === 60) {
                value = 0;
            }
        }

        // Once hours or minutes changed, vibrate the device
        if (this[this.currentView] !== value) {
            if (vibrate && this.options.vibrate) {
                // Do not vibrate too frequently
                if (!this.vibrateTimer) {
                    navigator[vibrate](10);
                    this.vibrateTimer = setTimeout($.proxy(function() {
                        this.vibrateTimer = null;
                    }, this), 100);
                }
            }
        }

        //TODO: Keep tens digit static for changing hours
        this[this.currentView] = value;

        function cleanupAnimation($obj) {
            $obj.on('webkitAnimationEnd animationend MSAnimationEnd oanimationend',
                function() {
                    $oldTime.html(value); //only needed for -up transitions
                    $oldTime.removeClass("old-down old-up");
                    $newTime.removeClass("new-down new-up");
                    $oldTime.off('webkitAnimationEnd animationend MSAnimationEnd oanimationend');
                });
        }

        var $oldTime;
        var $newTime;
        if (isHours) {
            $oldTime = $(this.spanHours[0].childNodes[0]);
            $newTime = $(this.spanHours[0].childNodes[1]);
            if (this.options.hour24) {
                value = leadingZero(value);
            }
        } else {
            $oldTime = $(this.spanMinutes[0].childNodes[0]);
            $newTime = $(this.spanMinutes[0].childNodes[1]);
            value = leadingZero(value);
        }
        cleanupAnimation($oldTime);
        if (value < (+$oldTime.html())) {
            $newTime.html($oldTime.html());
            $oldTime.html(value);
            $newTime.addClass('new-down');
            $oldTime.addClass('old-down');
        } else if (value > (+$oldTime.html()) || !$oldTime.html()) {
            $newTime.html(value);
            $oldTime.addClass('old-up');
            $newTime.addClass('new-up');
        }

        this.g.insertBefore(this.hand, this.bearing);
        this.g.insertBefore(this.bg, this.fg);
        this.bg.setAttribute('class', 'lolliclock-canvas-bg');

        // Set clock hand and others' position

        var r = radius;
        if (outSizeMode) {
            r = outSizeRadius;
        }
        var cx = Math.sin(radian) * r,
            cy = -Math.cos(radian) * r;
        this.hand.setAttribute('x2', Math.sin(radian) * (r - tickRadius));
        this.hand.setAttribute('y2', -Math.cos(radian) * (r - tickRadius));

        this.bg.setAttribute('cx', cx);
        this.bg.setAttribute('cy', cy);
        this.fg.setAttribute('cx', cx);
        this.fg.setAttribute('cy', cy);
    };

    // Hours and minutes are selected
    LolliClock.prototype.done = function() {
        raiseCallback(this.options.beforeDone);

        var last = this.input.prop('value');
        var value = "";
        if (!this.options.hour24) {
            value = this.hours + ':' + leadingZero(this.minutes) + " " + this.amOrPm;
        } else {
            value = leadingZero(this.hours) + ':' + leadingZero(this.minutes);
        }
        if (value !== last) {
            this.input.prop('value', value);
            this.input.trigger('input');
            this.input.trigger('change');
        }
        this.hide();
    };

    // Remove lolliclock from input
    LolliClock.prototype.remove = function() {
        this.element.removeData('lolliclock');
        this.input.off('focus.lolliclock click.lolliclock');
        if (this.isShown) {
            this.hide();
        }
        if (this.isAppended) {
            $(window).off('resize.lolliclock' + this.id);
            $(window).off('scroll.lolliclock' + this.id);
            this.popover.remove();
        }
    };
    // Extends $.fn.lolliclock
    $.fn.lolliclock = function(option) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.each(function() {
            var $this = $(this),
                data = $this.data('lolliclock');
            if (!data) {
                var options = $.extend({}, LolliClock.DEFAULTS, $this.data(), typeof option == 'object' && option);
                $this.data('lolliclock', new LolliClock($this, options));
            } else {
                // Manual operatsions. show, hide, remove, e.g.
                if (typeof data[option] === 'function') {
                    data[option].apply(data, args);
                }
            }
        });
    };
}());

var textEditorModule = angular.module('TextEditor', []);

textEditorModule.constant('ICONS', {
    'quote': 'format_quote',
    'bold': 'format_bold',
    'italics': 'format_italic',
    'underline': 'format_underline',
    'ul': 'format_list_bulleted',
    'ol': 'format_list_numbered',
    'redo': 'redo',
    'undo': 'undo',
    'clear': 'format_clear',
    'justifyLeft': 'format_align_left',
    'justifyCenter': 'format_align_center',
    'justifyRight': 'format_align_right',
    'justifyFull': 'format_align_justify',
    'html': 'code',
    'insertImage': 'insert_photo',
    'insertLink': 'insert_link'
});

textEditorModule.config(['$provide', function($provide) {
    $provide.decorator('taOptions', ['$delegate', function(taOptions) {
        taOptions.toolbar = [
            ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'pre', 'quote',
                'bold', 'italics', 'underline', 'ul', 'ol', 'redo', 'undo', 'clear',
                'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull',
                'html', 'insertImage', 'insertLink'
            ]
        ];
        return taOptions;
    }]);

    $provide.decorator('taTools', ['$delegate', function(taTools) {
        taTools.quote.iconclass = 'material-icons';
        taTools.bold.iconclass = 'material-icons';
        taTools.italics.iconclass = 'material-icons';
        taTools.underline.iconclass = 'material-icons';
        taTools.ul.iconclass = 'material-icons';
        taTools.ol.iconclass = 'material-icons';
        taTools.undo.iconclass = 'material-icons';
        taTools.redo.iconclass = 'material-icons';
        taTools.clear.iconclass = 'material-icons';
        taTools.justifyLeft.iconclass = 'material-icons';
        taTools.justifyRight.iconclass = 'material-icons';
        taTools.justifyCenter.iconclass = 'material-icons';
        taTools.justifyFull.iconclass = 'material-icons';
        taTools.html.iconclass = 'material-icons';
        taTools.insertLink.iconclass = 'material-icons';
        taTools.insertImage.iconclass = 'material-icons';

        return taTools;
    }]);
}]);

var recipeFilter = angular.module('RecipeFilters', []);

recipeFilter.filter('mainImage', ['RecipeService', function(RecipeService) {
    return function(input) {
        return RecipeService.getImages(input).main.href;
    };
}]);

recipeFilter.filter('capitalize', function() {
    return function(input) {
        return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
    };
});

recipeFilter.filter('humanized', function() {
    return function(input) {
        switch (input) {
            case 'EASY':
                return 'Fácil';
            case 'MEDIUM':
                return 'Media';
            case 'HARD':
                return 'Difícil';
            default:
                return '';
        }
    };
});

recipeFilter.filter('duration', function() {
    return function(input) {
        var hour = moment.duration(input).hours();
        var minute = moment.duration(input).minutes();
        var duration = '';
        if (hour > 0) {
            duration = moment.duration(hour, "hours").humanize();
            if (minute > 0) {
                duration += ' y ';
            }
        }
        duration += moment.duration(minute, "minutes").humanize();
        return duration;
    };
});

recipeFilter.filter('searchFor', ['RecipeService', '$rootScope', '$scope', 'NotificationProvider',
    function(RecipeService, $rootScope, $scope, NotificationProvider) {
        return function(result, search) {
            if (!search) {
                return result;
            }
            search = search.toLowerCase();
            $rootScope.progressBarActivated = true;
            $scope.pagination.search = search;
            RecipeService.search($scope.pagination, function(response) {
                var responseData = response.data;
                $scope.recipes = responseData.data;
                $scope.total = responseData.total;
                $scope.current = responseData["link-self"];
                if (responseData["link-prev"]) $scope.prev = responseData["link-prev"];
                if (responseData["link-next"]) $scope.next = responseData["link-next"];
                $rootScope.progressBarActivated = false;
            }, function(response) {
                NotificationProvider.notify({
                    title: 'Un error ha ocurrido',
                    text: 'Ha ocurrido un error mientras se cargaban las recetas. Por favor, intentelo más tarde.',
                    type: 'error',
                    addclass: 'custom-error-notify',
                    icon: 'material-icons md-light',
                    styling: 'fontawesome',
                });
                $('.ui-pnotify.custom-error-notify .material-icons').html('warning');
                $rootScope.error = {
                    icon: 'error_outline',
                    title: 'Algo ha ido mal',
                    msg: 'Ha ocurrido un error mientras se cargaban las recetas.'
                };
                $rootScope.errorMsg = true;
                $rootScope.progressBarActivated = false;
            });
        };
    }
]);

var notificationProvider = angular.module('NotificationProviders', []);

notificationProvider.provider('NotificationProvider', [function() {
    var settings = {
        styling: 'bootstrap3'
    };
    this.setDefaults = function(defaults) {
        settings = defaults;
    };
    PNotify.desktop.permission();

    this.$get = [function() {
        return {
            /* ========== SETTINGS RELATED METHODS =============*/
            getSettings: function() {
                return settings;
            },
            /* ============== NOTIFICATION METHODS ==============*/
            notice: function(content) {
                var hash = angular.copy(settings);
                hash.type = 'notice';
                hash.text = content;
                return this.notify(hash);
            },
            info: function(content) {
                var hash = angular.copy(settings);
                hash.type = 'info';
                hash.text = content;
                return this.notify(hash);
            },
            success: function(content) {
                var hash = angular.copy(settings);
                hash.type = 'success';
                hash.text = content;
                return this.notify(hash);
            },
            error: function(content) {
                var hash = angular.copy(settings);
                hash.type = 'error';
                hash.text = content;
                return this.notify(hash);
            },
            notify: function(hash) {
                hash.mobile = {
                    swipe_dismiss: true,
                    styling: true
                };
                var notification = new PNotify(hash);
                notification.get().click(function() {
                    notification.remove();
                });
            }
        };
    }];
}]);

var authServices = angular.module('AuthServices', ['ngResource']);

authServices.factory('AuthService', ['$http', '$rootScope', '$timeout', 'envService', '$q',
    function($http, $rootScope, $timeout, envService, $q) {
        var service = {
            apiUrl: envService.read('apiUrl'),
            OK: 200,
            UNAUTHORIZED: 401,
            FORBIDDEN: 403
        };

        service.Login = function(email, password, expiration, callbackOk, callbackError) {
            $http.post(
                service.apiUrl + '/auth/login', {
                    email: email,
                    password: password,
                    setExpiration: expiration
                }, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                }
            ).then(function(response) {
                callbackOk(response);
            }, function(response) {
                callbackError(response);
            });
        };

        service.Register = function(user, callbackOk, callbackError) {
            $http.post(
                service.apiUrl + '/auth/register',
                user, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                }
            ).then(function(response) {
                callbackOk(response);
            }, function(response) {
                callbackError(response);
            });
        };

        service.SaveCredentials = function(token, user) {
            $rootScope.globals = {
                token: token,
                user: user,
            };

            localStorage.globals = JSON.stringify($rootScope.globals);
        };

        service.ClearCredentials = function() {
            $rootScope.globals = {};
            localStorage.removeItem('globals');
        };

        service.ParseJwt = function(token) {
            var base64Url = token.split('.')[1];
            var base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(atob(base64));
        };

        service.GetJwt = function() {
            if ($rootScope.globals) return $rootScope.globals.token;
            else return null;
        };

        service.IsAuthed = function() {
            var token = service.GetJwt();
            if (token) {
                if (!$rootScope.globals.user.setExpiration) return true;
                var params = service.ParseJwt(token);
                if (Math.round(new Date().getTime() / 1000) <= params.exp) {
                    return true;
                } else {
                    service.ClearCredentials();
                    return false;
                }
            } else {
                return false;
            }
        };

        service.IsAnonymous = function() {
            var deferred = $q.defer();
            if (service.GetJwt() === (null || undefined)) deferred.resolve(service.OK);
            else deferred.reject(service.FORBIDDEN);
            return deferred.promise;
        };

        service.IsAuthenticated = function() {
            var deferred = $q.defer();
            if (service.IsAuthed()) deferred.resolve(service.OK);
            else deferred.reject(service.UNAUTHORIZED);
            return deferred.promise;
        };

        service.IsMyRecipe = function(slug) {
            var deferred = $q.defer();
            $http({
                method: "HEAD",
                url: service.apiUrl + '/recipes/' + slug + '/mine',
                timeout: deferred.promise,
            }).then(function() {
                deferred.resolve(service.OK);
            }, function() {
                deferred.reject(service.UNAUTHORIZED);
            });
            return deferred.promise;
        };

        return service;
    }
]);

var categoryService = angular.module('CategoryServices', ['ngResource']);

categoryService.factory('CategoryService', ['$http', '$rootScope', 'envService', '$q',
    function($http, $rootScope, envService, $q) {
        var service = {
            apiUrl: envService.read('apiUrl'),
        };

        service.all = function(callbackOk, callbackError) {
            $http.get(
                service.apiUrl + '/categories', {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                }
            ).then(function(response) {
                callbackOk(response);
            }, function(response) {
                callbackError(response);
            });
        };

        return service;
    }
]);

var ingredientService = angular.module('IngredientServices', ['ngResource']);

ingredientService.factory('IngredientService', ['$http', '$rootScope', 'envService', '$q',
    function($http, $rootScope, envService, $q) {
        var service = {
            apiUrl: envService.read('apiUrl'),
        };

        service.add = function(id, ingredient, callbackOk, callbackError) {
            return $http.post(
                service.apiUrl + '/recipes/' + id + '/ingredient',
                ingredient, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                }
            ).then(function(response) {
                return callbackOk(response);
            }, function(response) {
                return callbackError(response);
            });
        };

        service.delete = function(id, ingredientId, callbackOk, callbackError) {
            return $http.delete(
                service.apiUrl + '/recipes/' + id + '/ingredient/' + ingredientId, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                }
            ).then(function(response) {
                return callbackOk(response);
            }, function(response) {
                return callbackError(response);
            });
        };

        return service;
    }
]);

var recipeService = angular.module('RecipeServices', ['ngResource']);

recipeService.factory('RecipeService', ['$http', '$rootScope', 'envService', '$q',
    function($http, $rootScope, envService, $q) {
        var service = {
            apiUrl: envService.read('apiUrl'),
            regexMainImage: /^main\..+$/,
            charmap: {
                ' ': " ",
                '¡': "!",
                '¢': "c",
                '£': "lb",
                '¥': "yen",
                '¦': "|",
                '§': "SS",
                '¨': "\"",
                '©': "(c)",
                'ª': "a",
                '«': "<<",
                '¬': "not",
                '­': "-",
                '®': "(R)",
                '°': "^0",
                '±': "+/-",
                '²': "^2",
                'û': "^u",
                'ü': '"u',
                'ð': "d",
                '³': "^3",
                '´': "'",
                'µ': "u",
                '¶': "P",
                '·': ".",
                '¸': ",",
                '¹': "^1",
                'º': "o",
                '»': ">>",
                '¼': " 1/4 ",
                '½': " 1/2 ",
                '¾': " 3/4 ",
                '¿': "?",
                'À': "`A",
                'Á': "'A",
                'Â': "^A",
                'Ã': "~A",
                'â': "^a",
                'á': "'a",
                'Ä': '"A',
                'Å': "A",
                'Æ': "AE",
                'Ç': "C",
                'È': "`E",
                'É': "'E",
                'Ê': "^E",
                'Ë': '"E',
                'Ì': "`I",
                'Í': "'I",
                'Î': "^I",
                'Ï': '"I',
                'Ð': "D",
                'Ñ': "~N",
                'Ò': "`O",
                'Ó': "'O",
                'í': "'i",
                'î': "^i",
                'ï': '"i',
                'à': "`a",
                'Ô': "^O",
                'Õ': "~O",
                'Ö': '"O',
                '×': "x",
                'Ø': "O",
                'Ù': "`U",
                'Ú': "'U",
                'Û': "^U",
                'Ü': '"U',
                'Ý': "'Y",
                'ã': "~a",
                'ä': '"a',
                'å': "a",
                'æ': "ae",
                'ç': "c",
                'è': "`e",
                'é': "'e",
                'ê': "^e",
                'ë': '"e',
                'ì': "`i",
                'ñ': "~n",
                'ò': "`o",
                'ó': "'o",
                'ô': "^o",
                'õ': "~o",
                'ö': '"o',
                '÷': ":",
                'ø': "o",
                'ù': "`u",
                'ú': "'u",
                'þ': "th",
                'ÿ': '"y',
                'Ā': "A",
                'ā': "a",
                'Ă': "A",
                'ă': "a",
                'Ą': "A",
                'ą': "a",
                'Ć': "'C",
                'ć': "'c",
                'Ċ': "C",
                'ċ': "c",
                'Č': "C",
                'č': "c",
                'Ď': "D",
                'ď': "d",
                'Đ': "D",
                'đ': "d",
                'Ē': "E",
                'ē': "e",
                'ĕ': "e",
                'Ė': "E",
                'ė': "e",
                'Ę': "E",
                'ę': "e",
                'Ě': "E",
                'ě': "e",
                'Ĝ': "^G",
                'ĝ': "^g",
                'Ğ': "G",
                'Ġ': "G",
                'ġ': "g",
                'Ģ': "G",
                'ģ': "g",
                'Ĥ': "^H",
                'ĥ': "^h",
                'Ħ': "H",
                'ħ': "h",
                'Ĩ': "~I",
                'ß': "ss",
                'ĩ': "~i",
                'Ī': "I",
                'ī': "i",
                'Ĭ': "I",
                'ĭ': "i",
                'Į': "I",
                'į': "i",
                'İ': "I",
                'ı': "i",
                'Ĳ': "IJ",
                'ĳ': "ij",
                'Ĵ': "^J",
                'ĵ': "^j",
                'Ķ': "K",
                'ķ': "k",
                'Ĺ': "L",
                'ĺ': "l",
                'Ļ': "L",
                'ļ': "l",
                'Ľ': "L",
                'ŀ': "l",
                'Ł': "L",
                'ł': "l",
                'Ń': "'N",
                'ń': "'n",
                'Ņ': "N",
                'ņ': "n",
                'Ň': "N",
                'ň': "n",
                'ŉ': "'n",
                'ō': "o",
                'Ŏ': "O",
                'ŏ': "o",
                'Ő': '"O',
                'ő': '"o',
                'Œ': "OE",
                'œ': "oe",
                'Ŕ': "'R",
                'ŕ': "'r",
                'Ŗ': "R",
                'ŗ': "r",
                'Ŷ': "^Y",
                'Ō': "O",
                'ľ': "l",
                'Ŀ': "L",
                'ğ': "g",
                'Ĕ': "E",
                'Ĉ': "^C",
                'ĉ': "^c",
                'ý': "'y",
                'Ř': "R",
                'ř': "r",
                'Ś': "'S",
                'ś': "'s",
                'Ŝ': "^S",
                'ŝ': "^s",
                'Ş': "S",
                'ş': "s",
                'Š': "S",
                'š': "s",
                'Ţ': "T",
                'ţ': "t",
                'Ť': "T",
                'ť': "t",
                'Ŧ': "T",
                'ŧ': "t",
                'Ũ': "~U",
                'ũ': "~u",
                'Ū': "U",
                'ū': "u",
                'Ŭ': "U",
                'ŭ': "u",
                'Ů': "U",
                'ů': "u",
                'Ű': '"U',
                'ű': '"u',
                'Ų': "U",
                'ų': "u",
                'Ŵ': "^W",
                'ŵ': "^w",
                'ŷ': "^y",
                'Ÿ': '"Y',
                'Ź': "'Z",
                'ź': "'z",
                'Ż': "Z",
                'ż': "z",
                'Ž': "Z",
                'ž': "z",
                'ſ': "s",
                'Þ': "Th"
            }
        };

        service.search = function(pagination, callbackOk, callbackError) {
            $http.get(
                service.apiUrl + '/recipes', {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    params: pagination
                }
            ).then(function(response) {
                callbackOk(response);
            }, function(response) {
                callbackError(response);
            });
        };

        service.get = function(slug, callbackOk, callbackError) {
            $http.get(
                service.apiUrl + '/recipes/' + slug, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                }
            ).then(function(response) {
                callbackOk(response);
            }, function(response) {
                callbackError(response);
            });
        };

        service.getImages = function(recipe) {
            var mainImage = recipe.media.filter(function(obj) {
                return service.regexMainImage.exec(obj.filename) !== null;
            })[0];
            var main = mainImage ? {
                id: mainImage.id,
                title: mainImage.filename,
                href: service.apiUrl + '/media/' + recipe.id + '/' + mainImage.filename
            } : {
                href: 'http://lorempixel.com/g/480/480/food/Placeholder'
            };
            var gallery = [];

            for (var i = 0; i < recipe.media.length; i++) {
                var image = recipe.media[i];
                var filename = image.filename.substr(0, image.filename.lastIndexOf('.'));
                if (image !== mainImage) gallery.push({
                    id: image.id,
                    title: filename,
                    href: service.apiUrl + '/media/' + recipe.id + '/' + image.filename
                });
            }

            return {
                main: main,
                gallery: gallery
            };
        };

        service.getSlug = function(s) {
            if (!s) return "";
            var ascii = [];
            var ch, cp;
            for (var i = 0; i < s.length; i++) {
                if ((cp = s.charCodeAt(i)) < 0x180) {
                    ch = String.fromCharCode(cp);
                    ascii.push(service.charmap[ch] || ch);
                }
            }
            s = ascii.join("");
            s = s.replace(/[^\w\s-]/g, "").trim().toLowerCase();
            return s.replace(/[-\s]+/g, "-");
        };

        service.checkSlug = function(slug) {
            var deferredAbort = $q.defer();
            var request = $http({
                method: "HEAD",
                url: service.apiUrl + '/recipes/' + slug + '/check',
                timeout: deferredAbort.promise,
            });
            var promise = request.then(
                function(response) {
                    return response;
                },
                function(response) {
                    return response;
                }
            );

            promise.abort = function() {
                deferredAbort.resolve();
            };
            promise.finally(function() {
                promise.abort = angular.noop;
                deferredAbort = request = promise = null;
            });

            return promise;
        };

        service.checkSlugWithId = function(slug, id) {
            var deferredAbort = $q.defer();
            var request = $http({
                method: "HEAD",
                url: service.apiUrl + '/recipes/' + slug + '/check/' + id,
                timeout: deferredAbort.promise,
            });
            var promise = request.then(
                function(response) {
                    return response;
                },
                function(response) {
                    return response;
                }
            );

            promise.abort = function() {
                deferredAbort.resolve();
            };
            promise.finally(function() {
                promise.abort = angular.noop;
                deferredAbort = request = promise = null;
            });

            return promise;
        };

        service.getNewTags = function(array) {
            var a = [];
            for (var el in array) {
                if (array[el].type) a.push(array[el].type);
            }
            return a;
        };

        service.create = function(recipe, callbackOk, callbackError) {
            $http.post(
                service.apiUrl + '/recipes',
                recipe, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                }
            ).then(function(response) {
                callbackOk(response);
            }, function(response) {
                callbackError(response);
            });
        };

        service.edit = function(recipe, callbackOk, callbackError) {
            $http.put(
                service.apiUrl + '/recipes/' + recipe.id,
                recipe, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                }
            ).then(function(response) {
                callbackOk(response);
            }, function(response) {
                callbackError(response);
            });
        };

        service.uploadFile = function(file, id, isMain, isMultiple, callbackOk, callbackError) {
            var fd = new FormData();
            if (file instanceof Array) {
                for (var i = 0; i < file.length; i++) {
                    fd.append('file', file[i]);
                }
            } else {
                fd.append('file', file);
            }
            fd.append('is_main', isMain);
            fd.append('is_multiple', isMultiple);
            $http.post(
                service.apiUrl + '/media/' + id,
                fd, {
                    transformRequest: angular.identity,
                    headers: {
                        'Content-Type': undefined
                    }
                }
            ).then(function(response) {
                callbackOk(response);
            }, function(response) {
                callbackError(response);
            });
        };

        service.deleteFile = function(id, callbackOk, callbackError) {
            $http.delete(
                service.apiUrl + '/media/' + id, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                }
            ).then(function(response) {
                callbackOk(response);
            }, function(response) {
                callbackError(response);
            });
        };

        service.delete = function(id, callbackOk, callbackError) {
            $http.delete(
                service.apiUrl + '/recipes/' + id, {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                }
            ).then(function(response) {
                callbackOk(response);
            }, function(response) {
                callbackError(response);
            });
        };

        return service;
    }
]);

var tagService = angular.module('TagServices', ['ngResource']);

tagService.factory('TagService', ['$http', '$rootScope', 'envService', '$q',
    function($http, $rootScope, envService, $q) {
        var service = {
            apiUrl: envService.read('apiUrl'),
        };

        service.all = function(search, callbackOk, callbackError) {
            return $http.get(
                service.apiUrl + '/tags', {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    params: {
                        search: search
                    }
                }
            ).then(function(response) {
                return callbackOk(response);
            }, function(response) {
                return callbackError(response);
            });
        };

        return service;
    }
]);