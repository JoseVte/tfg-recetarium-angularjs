'use strict';

var recetarium = angular.module('recetariumApp', [
    'ngRoute',
    'ngMaterial',
    'ngMessages',
    'ui.router',
    'HomeController',
    'AuthServices',
    'AuthController',
]);

// Routes
recetarium.config(['$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
    //$locationProvider.hashPrefix(); // Removes index.html in URL
    $routeProvider
        .when('/', { templateUrl: 'views/home.html', controller: ''})
        .when('/login', { templateUrl: 'views/auth/login.html', controller: 'Login' })
        .when('/logout', { template: '', controller: 'Logout' })
        .otherwise({ redirectTo: '/' });
}]);

// CORS configuration
recetarium.config(['$httpProvider', function($httpProvider) {
    $httpProvider.defaults.useXDomain = true;
    delete $httpProvider.defaults.headers.common['X-Requested-With'];
}]);

// Themes
recetarium.config(['$mdThemingProvider', function($mdThemingProvider) {
    //
}]);

//
recetarium.run(function ($rootScope, $location, $http, AuthService) {
    $rootScope.location = $location;

    if (localStorage.globals) {
        $rootScope.globals = JSON.parse(localStorage.globals);
    } else {
        $rootScope.globals = {};
    }

    $rootScope.$on('$locationChangeStart', function (ev, next, current) {
        $rootScope.IsAuthed = AuthService.IsAuthed();
        $rootScope.IsHome = ($location.path() == '/');

        var token = $rootScope.globals.token;

        if (token && $location.path() === '/login' && $location.path() === '/register') {
            //Redirect to home if logged in
            $location.path('/');
        } else if (($location.path() !== '/login' && $location.path() !== '/register' && $location.path() !== '/') && !token) {
            //Redirect if not logged in
            $location.path('/login');
        }

        switch ($location.path()) {
            case '/login':
            case '/register':
                $rootScope.headerTheme ='header-theme-auth';
                break;
            default:
                $rootScope.headerTheme ='default-theme-auth';
        }
    });
});

var authController = angular.module('AuthController', []);

authController.controller('Login',
    ['$scope', '$rootScope', '$location', 'AuthService',
    function ($scope, $rootScope, $location, AuthService) {
        $rootScope.headerTitle = 'Login';

        $scope.login = function () {
            $scope.dataLoading = true;
            AuthService.Login($scope.email, $scope.password, function (response) {
                AuthService.SaveCredentials(response.data.auth_token,
                    JSON.parse(AuthService.ParseJwt(response.data.auth_token).sub));
                $location.path('/');
            }, function (response) {
                $('#customErrorLogin').addClass('hide');
                $('#customErrorLoginEmail').addClass('hide');
                $('#customErrorLoginPassword').addClass('hide');

                if (response.status == 401) {
                    $scope.customErrorLogin = "El email o la contraseÃ±a son incorrectos";
                    $('#customErrorLogin').removeClass('hide');
                } else if (response.status == 400) {
                    var email = response.data.email;
                    if (email) {
                        $scope.customErrorLoginEmail = email;
                        $('#customErrorLoginEmail').removeClass('hide');
                    }

                    var password = response.data.password;
                    if (password) {
                        $scope.customErrorLoginPassword = password;
                        $('#customErrorLoginPassword').removeClass('hide');
                    }
                }
                $scope.dataLoading = false;
            });
        };
    }]
);

authController.controller('Logout',
    ['$scope', '$location', 'AuthService',
    function ($scope,$location, AuthService) {
        AuthService.ClearCredentials();
        $location.path('/');
    }]
);

var homeController = angular.module('HomeController', []);

homeController.controller('Header',
    ['$scope', '$mdSidenav', '$timeout', '$location',
    function ($scope, $mdSidenav, $timeout, $location) {
        $scope.toggleLeft = buildDelayedToggler('left');

        $scope.navLinks = [
            { title: 'Home', url: '/'}
        ];

        $scope.navTo = function (ev, url) {
            closeSideNav('left');
            if ($location.path() !== url) $location.path(url);
        }

        $scope.getClassActive = function(path) {
            var cur_path = $location.path().substr(0, path.length);
            if (cur_path == path) {
                if($location.path().substr(0).length > 1 && path.length == 1 )
                    return "";
                else
                    return "active";
            } else {
                return "";
            }
        }

        function debounce(func, wait, context) {
            var timer;
            return function debounce() {
                var context = $scope, args = Array.prototype.slice.call(arguments);
                $timeout.cancel(timer);
                timer = $timeout(function() {
                    timer = undefined;
                    func.apply(context, args);
                }, wait || 10);
            };
        };

        function buildDelayedToggler(navID) {
            return debounce(function() {
                $mdSidenav(navID).toggle().then(function () {});
            }, 200);
        };

        function closeSideNav(navID) {
            $mdSidenav(navID).close().then(function () {});
        }
    }
]);

var authServices = angular.module('AuthServices', ['ngResource']);

authServices.factory('AuthService',
    ['$http', '$rootScope', '$timeout',
    function ($http, $rootScope, $timeout) {
        var service = {};

        service.Login = function (email, password, callbackOk, callbackError) {
            $http.post(
                'https://recetarium.herokuapp.com/auth/login',
                { email: email, password: password },
                { headers: {'Accept': 'application/json', 'Content-Type': 'application/json'} }
            ).then(function (response) {
                callbackOk(response);
            }, function (response) {
                callbackError(response);
            });
        };

        service.SaveCredentials = function (token, user) {
            $rootScope.globals = {
                token: token,
                user: user,
            };

            localStorage.globals = JSON.stringify($rootScope.globals);
        };

        service.ClearCredentials = function () {
            $rootScope.globals = {};
            localStorage.removeItem('globals');
        };

        service.ParseJwt = function(token) {
            var base64Url = token.split('.')[1];
            var base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(atob(base64));
        };

        service.GetJwt = function() {
            if ($rootScope.globals) return $rootScope.globals.token;
            else return null;
        };

        service.IsAuthed = function() {
            var token = service.GetJwt();
            if (token) {
                var params = service.ParseJwt(token);
                return Math.round(new Date().getTime() / 1000) <= params.exp;
            } else {
                return false;
            }
        };

        return service;
    }]
);
